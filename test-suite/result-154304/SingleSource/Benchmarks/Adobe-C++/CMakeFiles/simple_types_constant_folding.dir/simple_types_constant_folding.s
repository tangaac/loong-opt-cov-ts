	.file	"simple_types_constant_folding.cpp"
	.text
	.globl	_Z13record_resultdPKc           # -- Begin function _Z13record_resultdPKc
	.p2align	5
	.type	_Z13record_resultdPKc,@function
_Z13record_resultdPKc:                  # @_Z13record_resultdPKc
# %bb.0:
	addi.d	$sp, $sp, -48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	fst.d	$fs0, $sp, 0                    # 8-byte Folded Spill
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$fp, $a0
	fmov.d	$fs0, $fa0
	pcalau12i	$s0, %pc_hi20(current_test)
	beqz	$a2, .LBB0_2
# %bb.1:
	ld.w	$a0, $s0, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB0_4
.LBB0_2:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB0_5
# %bb.3:                                # %._crit_edge
	move	$a2, $a0
	ld.w	$a0, $s0, %pc_lo12(current_test)
.LBB0_4:
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fs0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s0, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 0                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB0_5:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end0:
	.size	_Z13record_resultdPKc, .Lfunc_end0-_Z13record_resultdPKc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z9summarizePKciiii
.LCPI1_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z9summarizePKciiii
	.p2align	5
	.type	_Z9summarizePKciiii,@function
_Z9summarizePKciiii:                    # @_Z9summarizePKciiii
# %bb.0:
	addi.d	$sp, $sp, -128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 24                   # 8-byte Folded Spill
	pcalau12i	$s6, %pc_hi20(current_test)
	ld.w	$s0, $s6, %pc_lo12(current_test)
	move	$s8, $a4
	move	$s2, $a2
	move	$s3, $a1
	move	$fp, $a0
	ori	$s5, $zero, 1
	pcalau12i	$s7, %pc_hi20(results)
	blt	$s0, $s5, .LBB1_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s7, %pc_lo12(results)
	addi.d	$s4, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB1_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s4, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$s0, $s0, -1
	addi.d	$s4, $s4, 16
	bnez	$s0, .LBB1_2
	b	.LBB1_4
.LBB1_3:
	ori	$s1, $zero, 12
.LBB1_4:                                # %._crit_edge
	addi.w	$a1, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.1)
	addi.d	$a0, $a0, %pc_lo12(.L.str.1)
	pcalau12i	$a2, %pc_hi20(.L.str.2)
	addi.d	$s4, $a2, %pc_lo12(.L.str.2)
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.3)
	addi.d	$a0, $a0, %pc_lo12(.L.str.3)
	move	$a1, $s1
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blt	$a0, $s5, .LBB1_10
# %bb.5:                                # %.lr.ph45.preheader
	st.d	$s8, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	move	$s8, $zero
	move	$s4, $zero
	move	$s0, $zero
	movgr2fr.w	$fa0, $s3
	movgr2fr.w	$fa1, $s2
	pcalau12i	$a0, %pc_hi20(.LCPI1_0)
	fld.d	$fa2, $a0, %pc_lo12(.LCPI1_0)
	ffint.d.w	$fa0, $fa0
	ffint.d.w	$fa1, $fa1
	fmul.d	$fa0, $fa0, $fa1
	fdiv.d	$fs1, $fa0, $fa2
	pcalau12i	$a0, %pc_hi20(.L.str.4)
	addi.d	$s2, $a0, %pc_lo12(.L.str.4)
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s3, $a0, %pc_lo12(.L.str.5)
	.p2align	4, , 16
.LBB1_6:                                # %.lr.ph45
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$fp, $s7, %pc_lo12(results)
	add.d	$a0, $fp, $s8
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	fldx.d	$fa0, $fp, $s8
	fld.d	$fa1, $fp, 0
	sub.w	$a2, $s1, $a0
	fdiv.d	$fa2, $fs1, $fa0
	fdiv.d	$fa1, $fa0, $fa1
	movfr2gr.d	$a5, $fa0
	movfr2gr.d	$a6, $fa2
	movfr2gr.d	$a7, $fa1
	move	$a0, $s2
	move	$a1, $s4
	move	$a3, $s3
	move	$a4, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	addi.d	$s0, $s0, 1
	addi.w	$s4, $s4, 1
	addi.d	$s8, $s8, 16
	blt	$s0, $a0, .LBB1_6
# %bb.7:                                # %.preheader39
	ori	$a1, $zero, 1
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s8, $sp, 8                     # 8-byte Folded Reload
	blt	$a0, $a1, .LBB1_10
# %bb.8:                                # %.lr.ph49
	ld.d	$a1, $s7, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB1_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB1_9
.LBB1_10:                               # %._crit_edge50
	movfr2gr.d	$a2, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a0, $a0, %pc_lo12(.L.str.6)
	move	$a1, $fp
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	beqz	$s8, .LBB1_15
# %bb.11:                               # %._crit_edge50
	ld.w	$a0, $s6, %pc_lo12(current_test)
	ori	$a1, $zero, 2
	blt	$a0, $a1, .LBB1_15
# %bb.12:                               # %.lr.ph54
	ld.d	$a0, $s7, %pc_lo12(results)
	fld.d	$fs1, $a0, 0
	addi.d	$s0, $a0, 16
	movgr2fr.d	$fs0, $zero
	ori	$s1, $zero, 1
	.p2align	4, , 16
.LBB1_13:                               # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $s0, 0
	fdiv.d	$fa0, $fa0, $fs1
	pcaddu18i	$ra, %call36(log)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$s1, $s1, 1
	addi.d	$s0, $s0, 16
	blt	$s1, $a0, .LBB1_13
# %bb.14:                               # %._crit_edge55
	addi.d	$a0, $a0, -1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fdiv.d	$fa0, $fs0, $fa0
	pcaddu18i	$ra, %call36(exp)
	jirl	$ra, $ra, 0
	movfr2gr.d	$a2, $fa0
	pcalau12i	$a0, %pc_hi20(.L.str.7)
	addi.d	$a0, $a0, %pc_lo12(.L.str.7)
	move	$a1, $fp
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.LBB1_15:
	st.w	$zero, $s6, %pc_lo12(current_test)
	fld.d	$fs1, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end1:
	.size	_Z9summarizePKciiii, .Lfunc_end1-_Z9summarizePKciiii
                                        # -- End function
	.globl	_Z17summarize_simplefP8_IO_FILEPKc # -- Begin function _Z17summarize_simplefP8_IO_FILEPKc
	.p2align	5
	.type	_Z17summarize_simplefP8_IO_FILEPKc,@function
_Z17summarize_simplefP8_IO_FILEPKc:     # @_Z17summarize_simplefP8_IO_FILEPKc
# %bb.0:
	addi.d	$sp, $sp, -128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	pcalau12i	$s5, %pc_hi20(current_test)
	ld.w	$fp, $s5, %pc_lo12(current_test)
	move	$s0, $a1
	move	$s7, $a0
	ori	$s3, $zero, 1
	pcalau12i	$s4, %pc_hi20(results)
	blt	$fp, $s3, .LBB2_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s4, %pc_lo12(results)
	addi.d	$s2, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB2_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s2, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$fp, $fp, -1
	addi.d	$s2, $s2, 16
	bnez	$fp, .LBB2_2
	b	.LBB2_4
.LBB2_3:
	ori	$s1, $zero, 12
.LBB2_4:                                # %._crit_edge
	addi.w	$a2, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.8)
	addi.d	$a1, $a0, %pc_lo12(.L.str.8)
	pcalau12i	$a0, %pc_hi20(.L.str.2)
	addi.d	$s2, $a0, %pc_lo12(.L.str.2)
	move	$a0, $s7
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.9)
	addi.d	$a1, $a0, %pc_lo12(.L.str.9)
	move	$a0, $s7
	move	$a2, $s1
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blt	$a0, $s3, .LBB2_10
# %bb.5:                                # %.lr.ph32.preheader
	st.d	$s0, $sp, 16                    # 8-byte Folded Spill
	move	$s8, $zero
	move	$s2, $zero
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.10)
	addi.d	$a0, $a0, %pc_lo12(.L.str.10)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s3, $a0, %pc_lo12(.L.str.5)
	.p2align	4, , 16
.LBB2_6:                                # %.lr.ph32
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$s6, $s4, %pc_lo12(results)
	add.d	$a0, $s6, $s8
	move	$s0, $s5
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	ldx.d	$a6, $s6, $s8
	sub.w	$a3, $s1, $a0
	move	$a0, $s7
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $s2
	move	$a4, $s3
	move	$a5, $s5
	move	$s5, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, %pc_lo12(current_test)
	addi.d	$fp, $fp, 1
	addi.w	$s2, $s2, 1
	addi.d	$s8, $s8, 16
	blt	$fp, $a0, .LBB2_6
# %bb.7:                                # %.preheader
	ori	$a1, $zero, 1
	ld.d	$s0, $sp, 16                    # 8-byte Folded Reload
	blt	$a0, $a1, .LBB2_10
# %bb.8:                                # %.lr.ph36
	ld.d	$a1, $s4, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB2_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB2_9
.LBB2_10:                               # %._crit_edge37
	movfr2gr.d	$a3, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a1, $a0, %pc_lo12(.L.str.6)
	move	$a0, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	st.w	$zero, $s5, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end2:
	.size	_Z17summarize_simplefP8_IO_FILEPKc, .Lfunc_end2-_Z17summarize_simplefP8_IO_FILEPKc
                                        # -- End function
	.globl	_Z11start_timerv                # -- Begin function _Z11start_timerv
	.p2align	5
	.type	_Z11start_timerv,@function
_Z11start_timerv:                       # @_Z11start_timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a0, $a1, %pc_lo12(start_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end3:
	.size	_Z11start_timerv, .Lfunc_end3-_Z11start_timerv
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z5timerv
.LCPI4_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z5timerv
	.p2align	5
	.type	_Z5timerv,@function
_Z5timerv:                              # @_Z5timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	ld.d	$a1, $a1, %pc_lo12(start_time)
	pcalau12i	$a2, %pc_hi20(end_time)
	pcalau12i	$a3, %pc_hi20(.LCPI4_0)
	fld.d	$fa0, $a3, %pc_lo12(.LCPI4_0)
	sub.d	$a1, $a0, $a1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	st.d	$a0, $a2, %pc_lo12(end_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end4:
	.size	_Z5timerv, .Lfunc_end4-_Z5timerv
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function main
.LCPI5_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
	.text
	.globl	main
	.p2align	5
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	st.d	$s8, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	ori	$s2, $zero, 2
	pcalau12i	$s1, %pc_hi20(base_iterations)
	pcalau12i	$a0, %pc_hi20(init_value)
	addi.d	$s3, $a0, %pc_lo12(init_value)
	blt	$s0, $s2, .LBB5_3
# %bb.1:
	move	$fp, $a1
	ld.d	$a0, $a1, 8
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	st.w	$a0, $s1, %pc_lo12(base_iterations)
	beq	$s0, $s2, .LBB5_3
# %bb.2:
	ld.d	$a0, $fp, 16
	move	$a1, $zero
	pcaddu18i	$ra, %call36(strtod)
	jirl	$ra, $ra, 0
	fst.d	$fa0, $s3, 0
.LBB5_3:                                # %.thread
	fld.d	$fa0, $s3, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a1, $fa0
	pcalau12i	$a0, %pc_hi20(data8)
	addi.d	$s0, $a0, %pc_lo12(data8)
	lu12i.w	$s4, 1
	ori	$fp, $s4, 3904
	move	$a0, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	pcalau12i	$s2, %pc_hi20(iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.11)
	addi.d	$a2, $a0, %pc_lo12(.L.str.11)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa10custom_twoIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.12)
	addi.d	$a2, $a0, %pc_lo12(.L.str.12)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.13)
	addi.d	$a2, $a0, %pc_lo12(.L.str.13)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.14)
	addi.d	$a2, $a0, %pc_lo12(.L.str.14)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.15)
	addi.d	$a2, $a0, %pc_lo12(.L.str.15)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.16)
	addi.d	$a2, $a0, %pc_lo12(.L.str.16)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.17)
	addi.d	$a2, $a0, %pc_lo12(.L.str.17)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.18)
	addi.d	$a2, $a0, %pc_lo12(.L.str.18)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a2, $a0, %pc_lo12(.L.str.19)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$a2, $a0, %pc_lo12(.L.str.20)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.21)
	addi.d	$a2, $a0, %pc_lo12(.L.str.21)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.22)
	addi.d	$a2, $a0, %pc_lo12(.L.str.22)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.23)
	addi.d	$a2, $a0, %pc_lo12(.L.str.23)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.24)
	addi.d	$a2, $a0, %pc_lo12(.L.str.24)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.25)
	addi.d	$a2, $a0, %pc_lo12(.L.str.25)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	lu12i.w	$a1, 419430
	ori	$s5, $a1, 1639
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.26)
	addi.d	$a2, $a0, %pc_lo12(.L.str.26)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.27)
	addi.d	$a2, $a0, %pc_lo12(.L.str.27)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.28)
	addi.d	$a2, $a0, %pc_lo12(.L.str.28)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.29)
	addi.d	$a2, $a0, %pc_lo12(.L.str.29)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.30)
	addi.d	$a2, $a0, %pc_lo12(.L.str.30)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.31)
	addi.d	$a2, $a0, %pc_lo12(.L.str.31)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.32)
	addi.d	$a2, $a0, %pc_lo12(.L.str.32)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.33)
	addi.d	$a2, $a0, %pc_lo12(.L.str.33)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.34)
	addi.d	$a2, $a0, %pc_lo12(.L.str.34)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.35)
	addi.d	$a2, $a0, %pc_lo12(.L.str.35)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a2, $a0, %pc_lo12(.L.str.36)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.37)
	addi.d	$a2, $a0, %pc_lo12(.L.str.37)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.38)
	addi.d	$a2, $a0, %pc_lo12(.L.str.38)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.39)
	addi.d	$a2, $a0, %pc_lo12(.L.str.39)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.40)
	addi.d	$a2, $a0, %pc_lo12(.L.str.40)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.41)
	addi.d	$a2, $a0, %pc_lo12(.L.str.41)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.42)
	addi.d	$a2, $a0, %pc_lo12(.L.str.42)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a1, $fa0
	pcalau12i	$a0, %pc_hi20(data8unsigned)
	addi.d	$s0, $a0, %pc_lo12(data8unsigned)
	move	$a0, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.43)
	addi.d	$a2, $a0, %pc_lo12(.L.str.43)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh10custom_twoIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.44)
	addi.d	$a2, $a0, %pc_lo12(.L.str.44)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.45)
	addi.d	$a2, $a0, %pc_lo12(.L.str.45)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.46)
	addi.d	$a2, $a0, %pc_lo12(.L.str.46)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.47)
	addi.d	$a2, $a0, %pc_lo12(.L.str.47)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.48)
	addi.d	$a2, $a0, %pc_lo12(.L.str.48)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.49)
	addi.d	$a2, $a0, %pc_lo12(.L.str.49)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.50)
	addi.d	$a2, $a0, %pc_lo12(.L.str.50)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.51)
	addi.d	$a2, $a0, %pc_lo12(.L.str.51)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.52)
	addi.d	$a2, $a0, %pc_lo12(.L.str.52)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.53)
	addi.d	$a2, $a0, %pc_lo12(.L.str.53)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.54)
	addi.d	$a2, $a0, %pc_lo12(.L.str.54)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.55)
	addi.d	$a2, $a0, %pc_lo12(.L.str.55)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.56)
	addi.d	$a2, $a0, %pc_lo12(.L.str.56)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.57)
	addi.d	$a2, $a0, %pc_lo12(.L.str.57)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.58)
	addi.d	$a2, $a0, %pc_lo12(.L.str.58)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a2, $a0, %pc_lo12(.L.str.59)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.60)
	addi.d	$a2, $a0, %pc_lo12(.L.str.60)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.61)
	addi.d	$a2, $a0, %pc_lo12(.L.str.61)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.62)
	addi.d	$a2, $a0, %pc_lo12(.L.str.62)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.63)
	addi.d	$a2, $a0, %pc_lo12(.L.str.63)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.64)
	addi.d	$a2, $a0, %pc_lo12(.L.str.64)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.65)
	addi.d	$a2, $a0, %pc_lo12(.L.str.65)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.66)
	addi.d	$a2, $a0, %pc_lo12(.L.str.66)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.67)
	addi.d	$a2, $a0, %pc_lo12(.L.str.67)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.68)
	addi.d	$a2, $a0, %pc_lo12(.L.str.68)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.69)
	addi.d	$a2, $a0, %pc_lo12(.L.str.69)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.70)
	addi.d	$a2, $a0, %pc_lo12(.L.str.70)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.71)
	addi.d	$a2, $a0, %pc_lo12(.L.str.71)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.72)
	addi.d	$a2, $a0, %pc_lo12(.L.str.72)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.73)
	addi.d	$a2, $a0, %pc_lo12(.L.str.73)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.74)
	addi.d	$a2, $a0, %pc_lo12(.L.str.74)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a0, $fa0
	vreplgr2vr.h	$vr0, $a0
	lu12i.w	$s8, -4
	ori	$a0, $s8, 384
	pcalau12i	$a1, %pc_hi20(data16)
	addi.d	$a1, $a1, %pc_lo12(data16)
	lu12i.w	$a2, 3
	ori	$s6, $a2, 3712
	ori	$s7, $a2, 3728
	.p2align	4, , 16
.LBB5_4:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s6
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s7
	bnez	$a0, .LBB5_4
# %bb.5:                                # %_Z4fillIPssEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(data16)
	addi.d	$s0, $a0, %pc_lo12(data16)
	pcalau12i	$a0, %pc_hi20(.L.str.75)
	addi.d	$a2, $a0, %pc_lo12(.L.str.75)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs10custom_twoIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.76)
	addi.d	$a2, $a0, %pc_lo12(.L.str.76)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.77)
	addi.d	$a2, $a0, %pc_lo12(.L.str.77)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.78)
	addi.d	$a2, $a0, %pc_lo12(.L.str.78)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.79)
	addi.d	$a2, $a0, %pc_lo12(.L.str.79)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.80)
	addi.d	$a2, $a0, %pc_lo12(.L.str.80)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.81)
	addi.d	$a2, $a0, %pc_lo12(.L.str.81)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.82)
	addi.d	$a2, $a0, %pc_lo12(.L.str.82)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.83)
	addi.d	$a2, $a0, %pc_lo12(.L.str.83)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.84)
	addi.d	$a2, $a0, %pc_lo12(.L.str.84)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.85)
	addi.d	$a2, $a0, %pc_lo12(.L.str.85)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.86)
	addi.d	$a2, $a0, %pc_lo12(.L.str.86)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.87)
	addi.d	$a2, $a0, %pc_lo12(.L.str.87)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.88)
	addi.d	$a2, $a0, %pc_lo12(.L.str.88)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.89)
	addi.d	$a2, $a0, %pc_lo12(.L.str.89)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.90)
	addi.d	$a2, $a0, %pc_lo12(.L.str.90)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.91)
	addi.d	$a2, $a0, %pc_lo12(.L.str.91)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.92)
	addi.d	$a2, $a0, %pc_lo12(.L.str.92)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.93)
	addi.d	$a2, $a0, %pc_lo12(.L.str.93)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.94)
	addi.d	$a2, $a0, %pc_lo12(.L.str.94)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.95)
	addi.d	$a2, $a0, %pc_lo12(.L.str.95)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.96)
	addi.d	$a2, $a0, %pc_lo12(.L.str.96)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.97)
	addi.d	$a2, $a0, %pc_lo12(.L.str.97)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.98)
	addi.d	$a2, $a0, %pc_lo12(.L.str.98)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.99)
	addi.d	$a2, $a0, %pc_lo12(.L.str.99)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.100)
	addi.d	$a2, $a0, %pc_lo12(.L.str.100)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.101)
	addi.d	$a2, $a0, %pc_lo12(.L.str.101)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.102)
	addi.d	$a2, $a0, %pc_lo12(.L.str.102)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.103)
	addi.d	$a2, $a0, %pc_lo12(.L.str.103)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.104)
	addi.d	$a2, $a0, %pc_lo12(.L.str.104)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.105)
	addi.d	$a2, $a0, %pc_lo12(.L.str.105)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.106)
	addi.d	$a2, $a0, %pc_lo12(.L.str.106)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a0, $fa0
	vreplgr2vr.h	$vr0, $a0
	ori	$a0, $s8, 384
	pcalau12i	$a1, %pc_hi20(data16unsigned)
	addi.d	$a1, $a1, %pc_lo12(data16unsigned)
	.p2align	4, , 16
.LBB5_6:                                # %vector.body27
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s6
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s7
	bnez	$a0, .LBB5_6
# %bb.7:                                # %_Z4fillIPttEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(data16unsigned)
	addi.d	$s0, $a0, %pc_lo12(data16unsigned)
	pcalau12i	$a0, %pc_hi20(.L.str.107)
	addi.d	$a2, $a0, %pc_lo12(.L.str.107)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt10custom_twoItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.108)
	addi.d	$a2, $a0, %pc_lo12(.L.str.108)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.109)
	addi.d	$a2, $a0, %pc_lo12(.L.str.109)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.110)
	addi.d	$a2, $a0, %pc_lo12(.L.str.110)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.111)
	addi.d	$a2, $a0, %pc_lo12(.L.str.111)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.112)
	addi.d	$a2, $a0, %pc_lo12(.L.str.112)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.113)
	addi.d	$a2, $a0, %pc_lo12(.L.str.113)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.114)
	addi.d	$a2, $a0, %pc_lo12(.L.str.114)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.115)
	addi.d	$a2, $a0, %pc_lo12(.L.str.115)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.116)
	addi.d	$a2, $a0, %pc_lo12(.L.str.116)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.117)
	addi.d	$a2, $a0, %pc_lo12(.L.str.117)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.118)
	addi.d	$a2, $a0, %pc_lo12(.L.str.118)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.119)
	addi.d	$a2, $a0, %pc_lo12(.L.str.119)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.120)
	addi.d	$a2, $a0, %pc_lo12(.L.str.120)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.121)
	addi.d	$a2, $a0, %pc_lo12(.L.str.121)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.122)
	addi.d	$a2, $a0, %pc_lo12(.L.str.122)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt19custom_constant_addItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.123)
	addi.d	$a2, $a0, %pc_lo12(.L.str.123)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.124)
	addi.d	$a2, $a0, %pc_lo12(.L.str.124)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt19custom_constant_subItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.125)
	addi.d	$a2, $a0, %pc_lo12(.L.str.125)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.126)
	addi.d	$a2, $a0, %pc_lo12(.L.str.126)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.127)
	addi.d	$a2, $a0, %pc_lo12(.L.str.127)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.128)
	addi.d	$a2, $a0, %pc_lo12(.L.str.128)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.129)
	addi.d	$a2, $a0, %pc_lo12(.L.str.129)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.130)
	addi.d	$a2, $a0, %pc_lo12(.L.str.130)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.131)
	addi.d	$a2, $a0, %pc_lo12(.L.str.131)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.132)
	addi.d	$a2, $a0, %pc_lo12(.L.str.132)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.133)
	addi.d	$a2, $a0, %pc_lo12(.L.str.133)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt19custom_constant_andItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.134)
	addi.d	$a2, $a0, %pc_lo12(.L.str.134)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.135)
	addi.d	$a2, $a0, %pc_lo12(.L.str.135)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt18custom_constant_orItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.136)
	addi.d	$a2, $a0, %pc_lo12(.L.str.136)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.137)
	addi.d	$a2, $a0, %pc_lo12(.L.str.137)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.138)
	addi.d	$a2, $a0, %pc_lo12(.L.str.138)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	vreplgr2vr.w	$vr0, $a0
	lu12i.w	$s8, -8
	ori	$a0, $s8, 768
	pcalau12i	$a1, %pc_hi20(data32)
	addi.d	$a1, $a1, %pc_lo12(data32)
	lu12i.w	$a2, 7
	ori	$s6, $a2, 3328
	ori	$s7, $a2, 3344
	.p2align	4, , 16
.LBB5_8:                                # %vector.body36
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s6
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s7
	bnez	$a0, .LBB5_8
# %bb.9:                                # %_Z4fillIPiiEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(data32)
	addi.d	$s0, $a0, %pc_lo12(data32)
	pcalau12i	$a0, %pc_hi20(.L.str.139)
	addi.d	$a2, $a0, %pc_lo12(.L.str.139)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi10custom_twoIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.140)
	addi.d	$a2, $a0, %pc_lo12(.L.str.140)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.141)
	addi.d	$a2, $a0, %pc_lo12(.L.str.141)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.142)
	addi.d	$a2, $a0, %pc_lo12(.L.str.142)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.143)
	addi.d	$a2, $a0, %pc_lo12(.L.str.143)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.144)
	addi.d	$a2, $a0, %pc_lo12(.L.str.144)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.145)
	addi.d	$a2, $a0, %pc_lo12(.L.str.145)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.146)
	addi.d	$a2, $a0, %pc_lo12(.L.str.146)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a2, $a0, %pc_lo12(.L.str.147)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a2, $a0, %pc_lo12(.L.str.148)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.149)
	addi.d	$a2, $a0, %pc_lo12(.L.str.149)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.150)
	addi.d	$a2, $a0, %pc_lo12(.L.str.150)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.151)
	addi.d	$a2, $a0, %pc_lo12(.L.str.151)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.152)
	addi.d	$a2, $a0, %pc_lo12(.L.str.152)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.153)
	addi.d	$a2, $a0, %pc_lo12(.L.str.153)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.154)
	addi.d	$a2, $a0, %pc_lo12(.L.str.154)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.155)
	addi.d	$a2, $a0, %pc_lo12(.L.str.155)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.156)
	addi.d	$a2, $a0, %pc_lo12(.L.str.156)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.157)
	addi.d	$a2, $a0, %pc_lo12(.L.str.157)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.158)
	addi.d	$a2, $a0, %pc_lo12(.L.str.158)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.159)
	addi.d	$a2, $a0, %pc_lo12(.L.str.159)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.160)
	addi.d	$a2, $a0, %pc_lo12(.L.str.160)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.161)
	addi.d	$a2, $a0, %pc_lo12(.L.str.161)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.162)
	addi.d	$a2, $a0, %pc_lo12(.L.str.162)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.163)
	addi.d	$a2, $a0, %pc_lo12(.L.str.163)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.164)
	addi.d	$a2, $a0, %pc_lo12(.L.str.164)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.165)
	addi.d	$a2, $a0, %pc_lo12(.L.str.165)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.166)
	addi.d	$a2, $a0, %pc_lo12(.L.str.166)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.167)
	addi.d	$a2, $a0, %pc_lo12(.L.str.167)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.168)
	addi.d	$a2, $a0, %pc_lo12(.L.str.168)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.169)
	addi.d	$a2, $a0, %pc_lo12(.L.str.169)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.170)
	addi.d	$a2, $a0, %pc_lo12(.L.str.170)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a0, $fa0
	vreplgr2vr.w	$vr0, $a0
	ori	$a0, $s8, 768
	pcalau12i	$a1, %pc_hi20(data32unsigned)
	addi.d	$a1, $a1, %pc_lo12(data32unsigned)
	.p2align	4, , 16
.LBB5_10:                               # %vector.body45
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s6
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s7
	bnez	$a0, .LBB5_10
# %bb.11:                               # %_Z4fillIPjjEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(data32unsigned)
	addi.d	$s0, $a0, %pc_lo12(data32unsigned)
	pcalau12i	$a0, %pc_hi20(.L.str.171)
	addi.d	$a2, $a0, %pc_lo12(.L.str.171)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj10custom_twoIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.172)
	addi.d	$a2, $a0, %pc_lo12(.L.str.172)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.173)
	addi.d	$a2, $a0, %pc_lo12(.L.str.173)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.174)
	addi.d	$a2, $a0, %pc_lo12(.L.str.174)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.175)
	addi.d	$a2, $a0, %pc_lo12(.L.str.175)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.176)
	addi.d	$a2, $a0, %pc_lo12(.L.str.176)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.177)
	addi.d	$a2, $a0, %pc_lo12(.L.str.177)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.178)
	addi.d	$a2, $a0, %pc_lo12(.L.str.178)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a2, $a0, %pc_lo12(.L.str.179)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.180)
	addi.d	$a2, $a0, %pc_lo12(.L.str.180)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.181)
	addi.d	$a2, $a0, %pc_lo12(.L.str.181)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.182)
	addi.d	$a2, $a0, %pc_lo12(.L.str.182)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.183)
	addi.d	$a2, $a0, %pc_lo12(.L.str.183)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.184)
	addi.d	$a2, $a0, %pc_lo12(.L.str.184)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.185)
	addi.d	$a2, $a0, %pc_lo12(.L.str.185)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.186)
	addi.d	$a2, $a0, %pc_lo12(.L.str.186)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.187)
	addi.d	$a2, $a0, %pc_lo12(.L.str.187)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.188)
	addi.d	$a2, $a0, %pc_lo12(.L.str.188)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.189)
	addi.d	$a2, $a0, %pc_lo12(.L.str.189)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.190)
	addi.d	$a2, $a0, %pc_lo12(.L.str.190)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.191)
	addi.d	$a2, $a0, %pc_lo12(.L.str.191)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.192)
	addi.d	$a2, $a0, %pc_lo12(.L.str.192)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.193)
	addi.d	$a2, $a0, %pc_lo12(.L.str.193)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.194)
	addi.d	$a2, $a0, %pc_lo12(.L.str.194)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.195)
	addi.d	$a2, $a0, %pc_lo12(.L.str.195)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.196)
	addi.d	$a2, $a0, %pc_lo12(.L.str.196)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.197)
	addi.d	$a2, $a0, %pc_lo12(.L.str.197)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.198)
	addi.d	$a2, $a0, %pc_lo12(.L.str.198)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.199)
	addi.d	$a2, $a0, %pc_lo12(.L.str.199)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.200)
	addi.d	$a2, $a0, %pc_lo12(.L.str.200)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.201)
	addi.d	$a2, $a0, %pc_lo12(.L.str.201)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.202)
	addi.d	$a2, $a0, %pc_lo12(.L.str.202)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a1, $fa0
	pcalau12i	$a0, %pc_hi20(data64+16)
	addi.d	$a0, $a0, %pc_lo12(data64+16)
	vreplgr2vr.d	$vr0, $a1
	.p2align	4, , 16
.LBB5_12:                               # %vector.body54
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$fp, $fp, -4
	addi.d	$a0, $a0, 32
	bnez	$fp, .LBB5_12
# %bb.13:                               # %_Z4fillIPllEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(data64)
	addi.d	$s0, $a0, %pc_lo12(data64)
	pcalau12i	$a0, %pc_hi20(.L.str.203)
	addi.d	$a2, $a0, %pc_lo12(.L.str.203)
	ori	$fp, $s4, 3904
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl10custom_twoIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.204)
	addi.d	$a2, $a0, %pc_lo12(.L.str.204)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.205)
	addi.d	$a2, $a0, %pc_lo12(.L.str.205)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.206)
	addi.d	$a2, $a0, %pc_lo12(.L.str.206)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.207)
	addi.d	$a2, $a0, %pc_lo12(.L.str.207)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.208)
	addi.d	$a2, $a0, %pc_lo12(.L.str.208)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.209)
	addi.d	$a2, $a0, %pc_lo12(.L.str.209)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.210)
	addi.d	$a2, $a0, %pc_lo12(.L.str.210)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.211)
	addi.d	$a2, $a0, %pc_lo12(.L.str.211)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.212)
	addi.d	$a2, $a0, %pc_lo12(.L.str.212)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.213)
	addi.d	$a2, $a0, %pc_lo12(.L.str.213)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.214)
	addi.d	$a2, $a0, %pc_lo12(.L.str.214)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.215)
	addi.d	$a2, $a0, %pc_lo12(.L.str.215)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.216)
	addi.d	$a2, $a0, %pc_lo12(.L.str.216)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.217)
	addi.d	$a2, $a0, %pc_lo12(.L.str.217)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.218)
	addi.d	$a2, $a0, %pc_lo12(.L.str.218)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.219)
	addi.d	$a2, $a0, %pc_lo12(.L.str.219)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.220)
	addi.d	$a2, $a0, %pc_lo12(.L.str.220)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.221)
	addi.d	$a2, $a0, %pc_lo12(.L.str.221)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.222)
	addi.d	$a2, $a0, %pc_lo12(.L.str.222)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.223)
	addi.d	$a2, $a0, %pc_lo12(.L.str.223)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.224)
	addi.d	$a2, $a0, %pc_lo12(.L.str.224)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.225)
	addi.d	$a2, $a0, %pc_lo12(.L.str.225)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.226)
	addi.d	$a2, $a0, %pc_lo12(.L.str.226)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.227)
	addi.d	$a2, $a0, %pc_lo12(.L.str.227)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.228)
	addi.d	$a2, $a0, %pc_lo12(.L.str.228)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.229)
	addi.d	$a2, $a0, %pc_lo12(.L.str.229)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.230)
	addi.d	$a2, $a0, %pc_lo12(.L.str.230)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.231)
	addi.d	$a2, $a0, %pc_lo12(.L.str.231)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.232)
	addi.d	$a2, $a0, %pc_lo12(.L.str.232)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.233)
	addi.d	$a2, $a0, %pc_lo12(.L.str.233)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.234)
	addi.d	$a2, $a0, %pc_lo12(.L.str.234)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	pcalau12i	$a0, %pc_hi20(.LCPI5_0)
	fld.d	$fa1, $a0, %pc_lo12(.LCPI5_0)
	fcmp.clt.d	$fcc0, $fa0, $fa1
	fsub.d	$fa1, $fa0, $fa1
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	lu52i.d	$a1, $zero, -2048
	xor	$a0, $a0, $a1
	movcf2gr	$a1, $fcc0
	masknez	$a0, $a0, $a1
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	maskeqz	$a1, $a2, $a1
	or	$a0, $a1, $a0
	vreplgr2vr.d	$vr0, $a0
	pcalau12i	$a0, %pc_hi20(data64unsigned+16)
	addi.d	$a0, $a0, %pc_lo12(data64unsigned+16)
	.p2align	4, , 16
.LBB5_14:                               # %vector.body63
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$fp, $fp, -4
	addi.d	$a0, $a0, 32
	bnez	$fp, .LBB5_14
# %bb.15:                               # %_Z4fillIPmmEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(data64unsigned)
	addi.d	$s0, $a0, %pc_lo12(data64unsigned)
	pcalau12i	$a0, %pc_hi20(.L.str.235)
	addi.d	$a2, $a0, %pc_lo12(.L.str.235)
	ori	$fp, $s4, 3904
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm10custom_twoImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.236)
	addi.d	$a2, $a0, %pc_lo12(.L.str.236)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.237)
	addi.d	$a2, $a0, %pc_lo12(.L.str.237)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.238)
	addi.d	$a2, $a0, %pc_lo12(.L.str.238)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.239)
	addi.d	$a2, $a0, %pc_lo12(.L.str.239)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.240)
	addi.d	$a2, $a0, %pc_lo12(.L.str.240)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.241)
	addi.d	$a2, $a0, %pc_lo12(.L.str.241)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.242)
	addi.d	$a2, $a0, %pc_lo12(.L.str.242)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.243)
	addi.d	$a2, $a0, %pc_lo12(.L.str.243)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.244)
	addi.d	$a2, $a0, %pc_lo12(.L.str.244)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.245)
	addi.d	$a2, $a0, %pc_lo12(.L.str.245)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.246)
	addi.d	$a2, $a0, %pc_lo12(.L.str.246)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.247)
	addi.d	$a2, $a0, %pc_lo12(.L.str.247)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.248)
	addi.d	$a2, $a0, %pc_lo12(.L.str.248)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.249)
	addi.d	$a2, $a0, %pc_lo12(.L.str.249)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.250)
	addi.d	$a2, $a0, %pc_lo12(.L.str.250)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm19custom_constant_addImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.251)
	addi.d	$a2, $a0, %pc_lo12(.L.str.251)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.252)
	addi.d	$a2, $a0, %pc_lo12(.L.str.252)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm19custom_constant_subImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.253)
	addi.d	$a2, $a0, %pc_lo12(.L.str.253)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.254)
	addi.d	$a2, $a0, %pc_lo12(.L.str.254)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.255)
	addi.d	$a2, $a0, %pc_lo12(.L.str.255)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.256)
	addi.d	$a2, $a0, %pc_lo12(.L.str.256)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.257)
	addi.d	$a2, $a0, %pc_lo12(.L.str.257)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.258)
	addi.d	$a2, $a0, %pc_lo12(.L.str.258)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.259)
	addi.d	$a2, $a0, %pc_lo12(.L.str.259)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.260)
	addi.d	$a2, $a0, %pc_lo12(.L.str.260)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.261)
	addi.d	$a2, $a0, %pc_lo12(.L.str.261)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm19custom_constant_andImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.262)
	addi.d	$a2, $a0, %pc_lo12(.L.str.262)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.263)
	addi.d	$a2, $a0, %pc_lo12(.L.str.263)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm18custom_constant_orImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.264)
	addi.d	$a2, $a0, %pc_lo12(.L.str.264)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.265)
	addi.d	$a2, $a0, %pc_lo12(.L.str.265)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.266)
	addi.d	$a2, $a0, %pc_lo12(.L.str.266)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s3, 0
	fcvt.s.d	$fa0, $fa0
	vreplvei.w	$vr0, $vr0, 0
	ori	$a0, $s8, 768
	pcalau12i	$a1, %pc_hi20(dataFloat)
	addi.d	$a1, $a1, %pc_lo12(dataFloat)
	.p2align	4, , 16
.LBB5_16:                               # %vector.body72
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s6
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s7
	bnez	$a0, .LBB5_16
# %bb.17:                               # %_Z4fillIPffEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(dataFloat)
	addi.d	$s0, $a0, %pc_lo12(dataFloat)
	pcalau12i	$a0, %pc_hi20(.L.str.267)
	addi.d	$a2, $a0, %pc_lo12(.L.str.267)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf10custom_twoIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.268)
	addi.d	$a2, $a0, %pc_lo12(.L.str.268)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.269)
	addi.d	$a2, $a0, %pc_lo12(.L.str.269)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.270)
	addi.d	$a2, $a0, %pc_lo12(.L.str.270)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.271)
	addi.d	$a2, $a0, %pc_lo12(.L.str.271)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.272)
	addi.d	$a2, $a0, %pc_lo12(.L.str.272)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.273)
	addi.d	$a2, $a0, %pc_lo12(.L.str.273)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.274)
	addi.d	$a2, $a0, %pc_lo12(.L.str.274)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.275)
	addi.d	$a2, $a0, %pc_lo12(.L.str.275)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.276)
	addi.d	$a2, $a0, %pc_lo12(.L.str.276)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.277)
	addi.d	$a2, $a0, %pc_lo12(.L.str.277)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.278)
	addi.d	$a2, $a0, %pc_lo12(.L.str.278)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.279)
	addi.d	$a2, $a0, %pc_lo12(.L.str.279)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.280)
	addi.d	$a2, $a0, %pc_lo12(.L.str.280)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.281)
	addi.d	$a2, $a0, %pc_lo12(.L.str.281)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.282)
	addi.d	$a2, $a0, %pc_lo12(.L.str.282)
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc)
	jirl	$ra, $ra, 0
	vldrepl.d	$vr0, $s3, 0
	pcalau12i	$a0, %pc_hi20(dataDouble+16)
	addi.d	$a0, $a0, %pc_lo12(dataDouble+16)
	.p2align	4, , 16
.LBB5_18:                               # %vector.body81
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$fp, $fp, -4
	addi.d	$a0, $a0, 32
	bnez	$fp, .LBB5_18
# %bb.19:                               # %_Z4fillIPddEvT_S1_T0_.exit
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(dataDouble)
	addi.d	$fp, $a0, %pc_lo12(dataDouble)
	pcalau12i	$a0, %pc_hi20(.L.str.283)
	addi.d	$a2, $a0, %pc_lo12(.L.str.283)
	ori	$s0, $s4, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId10custom_twoIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.284)
	addi.d	$a2, $a0, %pc_lo12(.L.str.284)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.285)
	addi.d	$a2, $a0, %pc_lo12(.L.str.285)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.286)
	addi.d	$a2, $a0, %pc_lo12(.L.str.286)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.287)
	addi.d	$a2, $a0, %pc_lo12(.L.str.287)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, %pc_lo12(base_iterations)
	mul.d	$a0, $a0, $s5
	srli.d	$a1, $a0, 63
	srai.d	$a0, $a0, 34
	add.d	$a0, $a0, $a1
	st.w	$a0, $s2, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(.L.str.288)
	addi.d	$a2, $a0, %pc_lo12(.L.str.288)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId19custom_constant_addIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.289)
	addi.d	$a2, $a0, %pc_lo12(.L.str.289)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.290)
	addi.d	$a2, $a0, %pc_lo12(.L.str.290)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId19custom_constant_subIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.291)
	addi.d	$a2, $a0, %pc_lo12(.L.str.291)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.292)
	addi.d	$a2, $a0, %pc_lo12(.L.str.292)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.293)
	addi.d	$a2, $a0, %pc_lo12(.L.str.293)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.294)
	addi.d	$a2, $a0, %pc_lo12(.L.str.294)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.295)
	addi.d	$a2, $a0, %pc_lo12(.L.str.295)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.296)
	addi.d	$a2, $a0, %pc_lo12(.L.str.296)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.297)
	addi.d	$a2, $a0, %pc_lo12(.L.str.297)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.298)
	addi.d	$a2, $a0, %pc_lo12(.L.str.298)
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	ld.d	$s8, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end5:
	.size	main, .Lfunc_end5-main
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa10custom_twoIaEEvPT_iPKc
.LCPI6_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa10custom_twoIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa10custom_twoIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa10custom_twoIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa10custom_twoIaEEvPT_iPKc,@function
_Z13test_constantIa10custom_twoIaEEvPT_iPKc: # @_Z13test_constantIa10custom_twoIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB6_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB6_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 127
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB6_4
	.p2align	4, , 16
.LBB6_3:                                # %_Z17check_shifted_sumIa10custom_twoIaEEvT_.exit.us
                                        #   in Loop: Header=BB6_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB6_8
.LBB6_4:                                # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB6_3
# %bb.5:                                #   in Loop: Header=BB6_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB6_3
.LBB6_6:                                # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB6_7:                                # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB6_7
.LBB6_8:                                # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB6_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB6_12
.LBB6_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB6_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB6_12:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI6_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI6_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB6_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end6:
	.size	_Z13test_constantIa10custom_twoIaEEvPT_iPKc, .Lfunc_end6-_Z13test_constantIa10custom_twoIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
.LCPI7_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc: # @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB7_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB7_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB7_4
	.p2align	4, , 16
.LBB7_3:                                # %_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB7_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB7_8
.LBB7_4:                                # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB7_3
# %bb.5:                                #   in Loop: Header=BB7_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB7_3
.LBB7_6:                                # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB7_7:                                # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB7_7
.LBB7_8:                                # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB7_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB7_12
.LBB7_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB7_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB7_12:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI7_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI7_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB7_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end7:
	.size	_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc, .Lfunc_end7-_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
.LCPI8_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc: # @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB8_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB8_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB8_4
	.p2align	4, , 16
.LBB8_3:                                # %_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB8_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB8_8
.LBB8_4:                                # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB8_3
# %bb.5:                                #   in Loop: Header=BB8_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB8_3
.LBB8_6:                                # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB8_7:                                # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB8_7
.LBB8_8:                                # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB8_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB8_12
.LBB8_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB8_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB8_12:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI8_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI8_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB8_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end8:
	.size	_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc, .Lfunc_end8-_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
.LCPI9_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc: # @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB9_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB9_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 2
	alsl.d	$a0, $s0, $a0, 1
	andi	$s5, $a0, 255
	ori	$s6, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB9_4
	.p2align	4, , 16
.LBB9_3:                                # %_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB9_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB9_8
.LBB9_4:                                # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB9_3
# %bb.5:                                #   in Loop: Header=BB9_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB9_3
.LBB9_6:                                # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB9_7:                                # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB9_7
.LBB9_8:                                # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB9_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB9_12
.LBB9_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB9_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB9_12:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI9_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI9_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB9_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end9:
	.size	_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc, .Lfunc_end9-_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
.LCPI10_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc: # @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB10_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB10_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 127
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB10_4
	.p2align	4, , 16
.LBB10_3:                               # %_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB10_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB10_8
.LBB10_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB10_3
# %bb.5:                                #   in Loop: Header=BB10_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB10_3
.LBB10_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB10_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB10_7
.LBB10_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB10_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB10_12
.LBB10_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB10_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB10_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI10_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI10_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB10_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end10:
	.size	_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc, .Lfunc_end10-_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
.LCPI11_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc: # @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB11_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB11_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB11_4
	.p2align	4, , 16
.LBB11_3:                               # %_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB11_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB11_8
.LBB11_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB11_3
# %bb.5:                                #   in Loop: Header=BB11_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB11_3
.LBB11_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB11_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB11_7
.LBB11_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB11_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB11_12
.LBB11_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB11_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB11_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI11_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI11_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB11_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end11:
	.size	_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc, .Lfunc_end11-_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
.LCPI12_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc: # @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB12_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB12_4
.LBB12_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB12_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB12_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI12_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI12_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB12_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end12:
	.size	_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc, .Lfunc_end12-_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
.LCPI13_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc: # @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB13_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB13_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB13_4
	.p2align	4, , 16
.LBB13_3:                               # %_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB13_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB13_8
.LBB13_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB13_3
# %bb.5:                                #   in Loop: Header=BB13_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB13_3
.LBB13_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB13_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB13_7
.LBB13_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB13_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB13_12
.LBB13_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB13_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB13_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI13_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI13_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB13_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end13:
	.size	_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc, .Lfunc_end13-_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
.LCPI14_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc: # @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB14_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB14_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB14_4
	.p2align	4, , 16
.LBB14_3:                               # %_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB14_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB14_8
.LBB14_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB14_3
# %bb.5:                                #   in Loop: Header=BB14_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB14_3
.LBB14_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB14_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB14_7
.LBB14_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB14_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB14_12
.LBB14_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB14_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB14_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI14_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI14_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB14_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end14:
	.size	_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc, .Lfunc_end14-_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
.LCPI15_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc: # @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB15_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB15_4
.LBB15_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB15_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB15_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI15_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI15_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB15_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end15:
	.size	_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc, .Lfunc_end15-_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
.LCPI16_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc: # @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB16_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB16_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB16_4
	.p2align	4, , 16
.LBB16_3:                               # %_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB16_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB16_8
.LBB16_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB16_3
# %bb.5:                                #   in Loop: Header=BB16_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB16_3
.LBB16_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB16_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB16_7
.LBB16_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB16_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB16_12
.LBB16_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB16_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB16_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI16_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI16_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB16_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end16:
	.size	_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc, .Lfunc_end16-_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
.LCPI17_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc: # @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB17_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB17_4
.LBB17_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB17_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB17_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI17_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI17_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB17_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end17:
	.size	_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc, .Lfunc_end17-_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
.LCPI18_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc: # @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB18_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB18_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 127
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB18_4
	.p2align	4, , 16
.LBB18_3:                               # %_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB18_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB18_8
.LBB18_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB18_3
# %bb.5:                                #   in Loop: Header=BB18_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB18_3
.LBB18_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB18_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB18_7
.LBB18_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB18_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB18_12
.LBB18_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB18_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB18_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI18_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI18_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB18_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc, .Lfunc_end18-_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
.LCPI19_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc: # @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB19_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB19_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 5
	sub.d	$a0, $a0, $s0
	andi	$s5, $a0, 255
	ori	$s6, $zero, 192
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB19_4
	.p2align	4, , 16
.LBB19_3:                               # %_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB19_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB19_8
.LBB19_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB19_3
# %bb.5:                                #   in Loop: Header=BB19_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB19_3
.LBB19_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB19_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB19_7
.LBB19_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB19_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB19_12
.LBB19_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB19_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB19_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI19_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI19_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB19_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end19:
	.size	_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc, .Lfunc_end19-_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
.LCPI20_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc: # @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB20_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB20_6
# %bb.2:                                # %.preheader.us.preheader
	ori	$a0, $zero, 29
	mul.d	$a0, $s0, $a0
	andi	$s5, $a0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB20_4
	.p2align	4, , 16
.LBB20_3:                               # %_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_.exit.us
                                        #   in Loop: Header=BB20_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB20_8
.LBB20_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB20_3
# %bb.5:                                #   in Loop: Header=BB20_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB20_3
.LBB20_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB20_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB20_7
.LBB20_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB20_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB20_12
.LBB20_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB20_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB20_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI20_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI20_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB20_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end20:
	.size	_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc, .Lfunc_end20-_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
.LCPI21_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa19custom_constant_addIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc: # @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB21_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB21_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB21_4
	.p2align	4, , 16
.LBB21_3:                               # %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit.us
                                        #   in Loop: Header=BB21_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB21_23
.LBB21_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_9 Depth 2
                                        #     Child Loop BB21_13 Depth 2
                                        #     Child Loop BB21_16 Depth 2
	bltu	$a5, $s0, .LBB21_6
# %bb.5:                                #   in Loop: Header=BB21_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB21_15
	.p2align	4, , 16
.LBB21_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB21_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB21_8
# %bb.7:                                #   in Loop: Header=BB21_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB21_12
	.p2align	4, , 16
.LBB21_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB21_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB21_9:                               # %vector.body
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vaddi.bu	$vr0, $vr0, 10
	vaddi.bu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB21_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB21_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB21_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB21_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB21_15
.LBB21_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB21_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB21_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vaddi.bu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB21_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB21_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB21_17
.LBB21_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB21_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB21_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB21_16
.LBB21_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB21_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB21_3
# %bb.18:                               #   in Loop: Header=BB21_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB21_3
.LBB21_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB21_21
	.p2align	4, , 16
.LBB21_20:                              # %_Z17check_shifted_sumIa19custom_constant_addIaEEvT_.exit
                                        #   in Loop: Header=BB21_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB21_23
.LBB21_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB21_20
# %bb.22:                               #   in Loop: Header=BB21_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB21_20
.LBB21_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB21_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB21_27
.LBB21_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB21_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB21_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI21_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI21_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB21_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end21:
	.size	_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc, .Lfunc_end21-_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
.LCPI22_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc: # @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB22_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB22_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB22_4
	.p2align	4, , 16
.LBB22_3:                               # %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit.us
                                        #   in Loop: Header=BB22_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB22_23
.LBB22_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_9 Depth 2
                                        #     Child Loop BB22_13 Depth 2
                                        #     Child Loop BB22_16 Depth 2
	bltu	$a5, $s0, .LBB22_6
# %bb.5:                                #   in Loop: Header=BB22_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB22_15
	.p2align	4, , 16
.LBB22_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB22_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB22_8
# %bb.7:                                #   in Loop: Header=BB22_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB22_12
	.p2align	4, , 16
.LBB22_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB22_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB22_9:                               # %vector.body
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vaddi.bu	$vr0, $vr0, 10
	vaddi.bu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB22_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB22_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB22_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB22_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB22_15
.LBB22_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB22_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB22_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vaddi.bu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB22_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB22_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB22_17
.LBB22_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB22_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB22_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB22_16
.LBB22_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB22_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB22_3
# %bb.18:                               #   in Loop: Header=BB22_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB22_3
.LBB22_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB22_21
	.p2align	4, , 16
.LBB22_20:                              # %_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_.exit
                                        #   in Loop: Header=BB22_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB22_23
.LBB22_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB22_20
# %bb.22:                               #   in Loop: Header=BB22_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB22_20
.LBB22_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB22_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB22_27
.LBB22_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB22_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB22_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI22_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI22_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB22_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end22:
	.size	_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc, .Lfunc_end22-_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
.LCPI23_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa19custom_constant_subIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc: # @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB23_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB23_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.b	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB23_4
	.p2align	4, , 16
.LBB23_3:                               # %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit.us
                                        #   in Loop: Header=BB23_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB23_23
.LBB23_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_9 Depth 2
                                        #     Child Loop BB23_13 Depth 2
                                        #     Child Loop BB23_16 Depth 2
	bltu	$a5, $s0, .LBB23_6
# %bb.5:                                #   in Loop: Header=BB23_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB23_15
	.p2align	4, , 16
.LBB23_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB23_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB23_8
# %bb.7:                                #   in Loop: Header=BB23_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB23_12
	.p2align	4, , 16
.LBB23_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB23_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB23_9:                               # %vector.body
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB23_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB23_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB23_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB23_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB23_15
.LBB23_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB23_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB23_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vadd.b	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB23_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB23_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB23_17
.LBB23_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB23_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB23_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB23_16
.LBB23_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB23_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB23_3
# %bb.18:                               #   in Loop: Header=BB23_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB23_3
.LBB23_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB23_21
	.p2align	4, , 16
.LBB23_20:                              # %_Z17check_shifted_sumIa19custom_constant_subIaEEvT_.exit
                                        #   in Loop: Header=BB23_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB23_23
.LBB23_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB23_20
# %bb.22:                               #   in Loop: Header=BB23_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB23_20
.LBB23_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB23_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB23_27
.LBB23_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB23_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB23_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI23_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI23_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB23_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end23:
	.size	_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc, .Lfunc_end23-_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
.LCPI24_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc: # @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB24_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB24_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.b	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB24_4
	.p2align	4, , 16
.LBB24_3:                               # %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit.us
                                        #   in Loop: Header=BB24_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB24_23
.LBB24_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_9 Depth 2
                                        #     Child Loop BB24_13 Depth 2
                                        #     Child Loop BB24_16 Depth 2
	bltu	$a5, $s0, .LBB24_6
# %bb.5:                                #   in Loop: Header=BB24_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB24_15
	.p2align	4, , 16
.LBB24_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB24_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB24_8
# %bb.7:                                #   in Loop: Header=BB24_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB24_12
	.p2align	4, , 16
.LBB24_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB24_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB24_9:                               # %vector.body
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB24_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB24_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB24_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB24_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB24_15
.LBB24_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB24_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB24_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vadd.b	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB24_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB24_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB24_17
.LBB24_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB24_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB24_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB24_16
.LBB24_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB24_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB24_3
# %bb.18:                               #   in Loop: Header=BB24_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB24_3
.LBB24_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB24_21
	.p2align	4, , 16
.LBB24_20:                              # %_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_.exit
                                        #   in Loop: Header=BB24_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB24_23
.LBB24_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB24_20
# %bb.22:                               #   in Loop: Header=BB24_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB24_20
.LBB24_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB24_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB24_27
.LBB24_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB24_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB24_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI24_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI24_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB24_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end24:
	.size	_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc, .Lfunc_end24-_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
.LCPI25_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc,@function
_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc: # @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB25_19
# %bb.1:
	blt	$s0, $a0, .LBB25_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s4, $zero, 7
	ori	$s8, $zero, 120
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.b	$vr4, 120
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB25_4
	.p2align	4, , 16
.LBB25_3:                               # %_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_.exit.us
                                        #   in Loop: Header=BB25_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB25_19
.LBB25_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_9 Depth 2
                                        #     Child Loop BB25_13 Depth 2
                                        #     Child Loop BB25_16 Depth 2
	bltu	$s4, $s0, .LBB25_6
# %bb.5:                                #   in Loop: Header=BB25_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB25_15
	.p2align	4, , 16
.LBB25_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB25_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB25_8
# %bb.7:                                #   in Loop: Header=BB25_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB25_12
	.p2align	4, , 16
.LBB25_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB25_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB25_9:                               # %vector.body
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr2, $vr4
	vmadd.b	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB25_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB25_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB25_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB25_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	beqz	$a4, .LBB25_15
.LBB25_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB25_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB25_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB25_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB25_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB25_17
.LBB25_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB25_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB25_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $a4, $s8
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB25_16
.LBB25_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB25_4 Depth=1
	andi	$a0, $a0, 255
	beqz	$a0, .LBB25_3
# %bb.18:                               #   in Loop: Header=BB25_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB25_3
.LBB25_19:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB25_21
# %bb.20:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB25_23
.LBB25_21:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB25_24
# %bb.22:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB25_23:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI25_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI25_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB25_24:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end25:
	.size	_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc, .Lfunc_end25-_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
.LCPI26_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc,@function
_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc: # @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB26_19
# %bb.1:
	blt	$s0, $a0, .LBB26_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s4, $zero, 7
	ori	$s8, $zero, 120
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.b	$vr4, 120
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB26_4
	.p2align	4, , 16
.LBB26_3:                               # %_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_.exit.us
                                        #   in Loop: Header=BB26_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB26_19
.LBB26_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_9 Depth 2
                                        #     Child Loop BB26_13 Depth 2
                                        #     Child Loop BB26_16 Depth 2
	bltu	$s4, $s0, .LBB26_6
# %bb.5:                                #   in Loop: Header=BB26_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB26_15
	.p2align	4, , 16
.LBB26_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB26_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB26_8
# %bb.7:                                #   in Loop: Header=BB26_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB26_12
	.p2align	4, , 16
.LBB26_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB26_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB26_9:                               # %vector.body
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr2, $vr4
	vmadd.b	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB26_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB26_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB26_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB26_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	beqz	$a4, .LBB26_15
.LBB26_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB26_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB26_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB26_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB26_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB26_17
.LBB26_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB26_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB26_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $a4, $s8
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB26_16
.LBB26_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB26_4 Depth=1
	andi	$a0, $a0, 255
	beqz	$a0, .LBB26_3
# %bb.18:                               #   in Loop: Header=BB26_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB26_3
.LBB26_19:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB26_21
# %bb.20:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB26_23
.LBB26_21:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB26_24
# %bb.22:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB26_23:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI26_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI26_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB26_24:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end26:
	.size	_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc, .Lfunc_end26-_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
.LCPI27_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc,@function
_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc: # @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB27_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB27_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.b	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB27_4
	.p2align	4, , 16
.LBB27_3:                               # %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit.us
                                        #   in Loop: Header=BB27_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB27_23
.LBB27_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_9 Depth 2
                                        #     Child Loop BB27_13 Depth 2
                                        #     Child Loop BB27_16 Depth 2
	bltu	$s8, $s0, .LBB27_6
# %bb.5:                                #   in Loop: Header=BB27_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB27_15
	.p2align	4, , 16
.LBB27_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB27_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB27_8
# %bb.7:                                #   in Loop: Header=BB27_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB27_12
	.p2align	4, , 16
.LBB27_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB27_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB27_9:                               # %vector.body
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB27_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB27_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB27_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB27_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB27_15
.LBB27_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB27_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB27_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vadd.b	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB27_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB27_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB27_17
.LBB27_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB27_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB27_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB27_16
.LBB27_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB27_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB27_3
# %bb.18:                               #   in Loop: Header=BB27_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB27_3
.LBB27_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB27_21
	.p2align	4, , 16
.LBB27_20:                              # %_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_.exit
                                        #   in Loop: Header=BB27_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB27_23
.LBB27_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beqz	$a0, .LBB27_20
# %bb.22:                               #   in Loop: Header=BB27_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB27_20
.LBB27_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB27_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB27_27
.LBB27_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB27_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB27_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI27_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI27_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB27_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end27:
	.size	_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc, .Lfunc_end27-_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
.LCPI28_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc,@function
_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc: # @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB28_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB28_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a6, $zero, 7
	ori	$s4, $zero, 103
	pcalau12i	$s8, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, 419430
	ori	$a0, $a0, 1639
	lu32i.d	$a0, 419430
	lu52i.d	$s2, $a0, 1638
	vrepli.b	$vr5, 103
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB28_4
	.p2align	4, , 16
.LBB28_3:                               # %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit.us
                                        #   in Loop: Header=BB28_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB28_23
.LBB28_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_9 Depth 2
                                        #     Child Loop BB28_13 Depth 2
                                        #     Child Loop BB28_16 Depth 2
	bltu	$a6, $s0, .LBB28_6
# %bb.5:                                #   in Loop: Header=BB28_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB28_15
	.p2align	4, , 16
.LBB28_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB28_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB28_8
# %bb.7:                                #   in Loop: Header=BB28_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB28_12
	.p2align	4, , 16
.LBB28_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB28_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB28_9:                               # %vector.body
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.b	$vr2, $vr2, $vr5
	vsrai.b	$vr2, $vr2, 1
	vsrli.b	$vr4, $vr2, 7
	vadd.b	$vr2, $vr2, $vr4
	vmuh.b	$vr3, $vr3, $vr5
	vsrai.b	$vr3, $vr3, 1
	vsrli.b	$vr4, $vr3, 7
	vadd.b	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB28_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB28_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB28_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB28_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB28_15
.LBB28_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB28_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB28_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.b	$a3, $vr1, 1
	ext.w.b	$a3, $a3
	mulh.d	$a3, $a3, $s2
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vpickve2gr.b	$a4, $vr1, 0
	ext.w.b	$a4, $a4
	mulh.d	$a4, $a4, $s2
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 1
	add.d	$a4, $a4, $a5
	vinsgr2vr.b	$vr2, $a4, 0
	vinsgr2vr.b	$vr2, $a3, 1
	vpickve2gr.b	$a3, $vr1, 2
	ext.w.b	$a3, $a3
	mulh.d	$a3, $a3, $s2
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 2
	vpickve2gr.b	$a3, $vr1, 3
	ext.w.b	$a3, $a3
	mulh.d	$a3, $a3, $s2
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 3
	vpickve2gr.b	$a3, $vr1, 4
	ext.w.b	$a3, $a3
	mulh.d	$a3, $a3, $s2
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 4
	vpickve2gr.b	$a3, $vr1, 5
	ext.w.b	$a3, $a3
	mulh.d	$a3, $a3, $s2
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 5
	vpickve2gr.b	$a3, $vr1, 6
	ext.w.b	$a3, $a3
	mulh.d	$a3, $a3, $s2
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 6
	vpickve2gr.b	$a3, $vr1, 7
	ext.w.b	$a3, $a3
	mulh.d	$a3, $a3, $s2
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 7
	vadd.b	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB28_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB28_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB28_17
.LBB28_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB28_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB28_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 9
	add.d	$a4, $a4, $a5
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB28_16
.LBB28_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB28_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a3, $a2, 63
	srli.d	$a2, $a2, 9
	add.d	$a2, $a2, $a3
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB28_3
# %bb.18:                               #   in Loop: Header=BB28_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	ori	$a6, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB28_3
.LBB28_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 103
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB28_21
	.p2align	4, , 16
.LBB28_20:                              # %_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_.exit
                                        #   in Loop: Header=BB28_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB28_23
.LBB28_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	srli.d	$a2, $a0, 63
	srli.d	$a0, $a0, 9
	add.d	$a0, $a0, $a2
	andi	$a0, $a0, 3
	beqz	$a0, .LBB28_20
# %bb.22:                               #   in Loop: Header=BB28_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB28_20
.LBB28_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB28_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB28_27
.LBB28_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB28_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB28_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI28_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI28_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB28_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end28:
	.size	_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc, .Lfunc_end28-_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
.LCPI29_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc,@function
_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc: # @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB29_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB29_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a6, $zero, 7
	addi.w	$s4, $zero, -119
	pcalau12i	$s8, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -489336
	ori	$a0, $a0, 2185
	lu32i.d	$a0, -489336
	lu52i.d	$s2, $a0, -1912
	vrepli.b	$vr5, -119
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB29_4
	.p2align	4, , 16
.LBB29_3:                               # %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit.us
                                        #   in Loop: Header=BB29_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB29_23
.LBB29_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_9 Depth 2
                                        #     Child Loop BB29_13 Depth 2
                                        #     Child Loop BB29_16 Depth 2
	bltu	$a6, $s0, .LBB29_6
# %bb.5:                                #   in Loop: Header=BB29_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB29_15
	.p2align	4, , 16
.LBB29_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB29_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB29_8
# %bb.7:                                #   in Loop: Header=BB29_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB29_12
	.p2align	4, , 16
.LBB29_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB29_9:                               # %vector.body
                                        #   Parent Loop BB29_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.b	$vr4, $vr2, $vr5
	vadd.b	$vr2, $vr4, $vr2
	vsrai.b	$vr2, $vr2, 6
	vsrli.b	$vr4, $vr2, 7
	vadd.b	$vr2, $vr2, $vr4
	vmuh.b	$vr4, $vr3, $vr5
	vadd.b	$vr3, $vr4, $vr3
	vsrai.b	$vr3, $vr3, 6
	vsrli.b	$vr4, $vr3, 7
	vadd.b	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB29_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB29_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB29_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB29_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB29_15
.LBB29_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB29_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB29_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB29_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.b	$a3, $vr1, 1
	ext.w.b	$a3, $a3
	mulh.d	$a4, $a3, $s2
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vpickve2gr.b	$a4, $vr1, 0
	ext.w.b	$a4, $a4
	mulh.d	$a5, $a4, $s2
	add.d	$a4, $a5, $a4
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 6
	add.d	$a4, $a4, $a5
	vinsgr2vr.b	$vr2, $a4, 0
	vinsgr2vr.b	$vr2, $a3, 1
	vpickve2gr.b	$a3, $vr1, 2
	ext.w.b	$a3, $a3
	mulh.d	$a4, $a3, $s2
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 2
	vpickve2gr.b	$a3, $vr1, 3
	ext.w.b	$a3, $a3
	mulh.d	$a4, $a3, $s2
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 3
	vpickve2gr.b	$a3, $vr1, 4
	ext.w.b	$a3, $a3
	mulh.d	$a4, $a3, $s2
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srai.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 4
	vpickve2gr.b	$a3, $vr1, 5
	ext.w.b	$a3, $a3
	mulh.d	$a4, $a3, $s2
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 5
	vpickve2gr.b	$a3, $vr1, 6
	ext.w.b	$a3, $a3
	mulh.d	$a4, $a3, $s2
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 6
	vpickve2gr.b	$a3, $vr1, 7
	ext.w.b	$a3, $a3
	mulh.d	$a4, $a3, $s2
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.b	$vr2, $a3, 7
	vadd.b	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB29_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB29_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB29_17
.LBB29_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB29_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB29_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB29_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a5, $a4, $s4
	srli.d	$a5, $a5, 8
	add.d	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 7, 7
	ext.w.b	$a4, $a4
	srai.d	$a4, $a4, 6
	add.d	$a4, $a4, $a5
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB29_16
.LBB29_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB29_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a3, $a2, $s4
	srli.d	$a3, $a3, 8
	add.d	$a2, $a3, $a2
	bstrpick.d	$a3, $a2, 7, 7
	srli.d	$a2, $a2, 6
	add.d	$a2, $a2, $a3
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB29_3
# %bb.18:                               #   in Loop: Header=BB29_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	ori	$a6, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB29_3
.LBB29_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 239
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB29_21
	.p2align	4, , 16
.LBB29_20:                              # %_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_.exit
                                        #   in Loop: Header=BB29_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB29_23
.LBB29_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	addi.d	$a0, $a0, 119
	andi	$a0, $a0, 255
	bltu	$a0, $s2, .LBB29_20
# %bb.22:                               #   in Loop: Header=BB29_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB29_20
.LBB29_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB29_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB29_27
.LBB29_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB29_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB29_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI29_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI29_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB29_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end29:
	.size	_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc, .Lfunc_end29-_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
.LCPI30_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc,@function
_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc: # @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB30_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB30_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB30_4
	.p2align	4, , 16
.LBB30_3:                               # %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit.us
                                        #   in Loop: Header=BB30_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB30_23
.LBB30_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_9 Depth 2
                                        #     Child Loop BB30_13 Depth 2
                                        #     Child Loop BB30_16 Depth 2
	bltu	$a5, $s0, .LBB30_6
# %bb.5:                                #   in Loop: Header=BB30_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB30_15
	.p2align	4, , 16
.LBB30_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB30_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB30_8
# %bb.7:                                #   in Loop: Header=BB30_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB30_12
	.p2align	4, , 16
.LBB30_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB30_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB30_9:                               # %vector.body
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vaddi.bu	$vr0, $vr0, 2
	vaddi.bu	$vr1, $vr1, 2
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB30_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB30_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB30_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB30_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB30_15
.LBB30_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB30_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB30_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vaddi.bu	$vr0, $vr0, 2
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB30_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB30_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB30_17
.LBB30_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB30_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB30_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB30_16
.LBB30_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB30_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB30_3
# %bb.18:                               #   in Loop: Header=BB30_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB30_3
.LBB30_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB30_21
	.p2align	4, , 16
.LBB30_20:                              # %_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_.exit
                                        #   in Loop: Header=BB30_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB30_23
.LBB30_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB30_20
# %bb.22:                               #   in Loop: Header=BB30_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB30_20
.LBB30_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB30_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB30_27
.LBB30_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB30_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB30_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI30_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI30_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB30_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end30:
	.size	_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc, .Lfunc_end30-_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
.LCPI31_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc,@function
_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc: # @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB31_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB31_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB31_4
	.p2align	4, , 16
.LBB31_3:                               # %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit.us
                                        #   in Loop: Header=BB31_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB31_23
.LBB31_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_9 Depth 2
                                        #     Child Loop BB31_13 Depth 2
                                        #     Child Loop BB31_16 Depth 2
	bltu	$s8, $s0, .LBB31_6
# %bb.5:                                #   in Loop: Header=BB31_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB31_15
	.p2align	4, , 16
.LBB31_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB31_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB31_8
# %bb.7:                                #   in Loop: Header=BB31_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB31_12
	.p2align	4, , 16
.LBB31_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB31_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB31_9:                               # %vector.body
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB31_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB31_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB31_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB31_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB31_15
.LBB31_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB31_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB31_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB31_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB31_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB31_17
.LBB31_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB31_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB31_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB31_16
.LBB31_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB31_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB31_3
# %bb.18:                               #   in Loop: Header=BB31_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB31_3
.LBB31_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB31_21
	.p2align	4, , 16
.LBB31_20:                              # %_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_.exit
                                        #   in Loop: Header=BB31_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB31_23
.LBB31_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beqz	$a0, .LBB31_20
# %bb.22:                               #   in Loop: Header=BB31_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB31_20
.LBB31_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB31_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB31_27
.LBB31_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB31_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB31_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI31_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI31_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB31_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end31:
	.size	_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc, .Lfunc_end31-_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
.LCPI32_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa19custom_constant_andIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc: # @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB32_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB32_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB32_4
	.p2align	4, , 16
.LBB32_3:                               # %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit.us
                                        #   in Loop: Header=BB32_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB32_23
.LBB32_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_9 Depth 2
                                        #     Child Loop BB32_13 Depth 2
                                        #     Child Loop BB32_16 Depth 2
	bltu	$s8, $s0, .LBB32_6
# %bb.5:                                #   in Loop: Header=BB32_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB32_15
	.p2align	4, , 16
.LBB32_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB32_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB32_8
# %bb.7:                                #   in Loop: Header=BB32_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB32_12
	.p2align	4, , 16
.LBB32_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB32_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB32_9:                               # %vector.body
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vandi.b	$vr2, $vr2, 10
	vandi.b	$vr3, $vr3, 10
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB32_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB32_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB32_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB32_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB32_15
.LBB32_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB32_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB32_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vandi.b	$vr1, $vr1, 10
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB32_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB32_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB32_17
.LBB32_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB32_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB32_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB32_16
.LBB32_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB32_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 128
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB32_3
# %bb.18:                               #   in Loop: Header=BB32_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB32_3
.LBB32_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB32_21
	.p2align	4, , 16
.LBB32_20:                              # %_Z17check_shifted_sumIa19custom_constant_andIaEEvT_.exit
                                        #   in Loop: Header=BB32_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB32_23
.LBB32_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 2
	beqz	$a0, .LBB32_20
# %bb.22:                               #   in Loop: Header=BB32_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB32_20
.LBB32_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB32_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB32_27
.LBB32_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB32_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB32_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI32_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI32_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB32_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end32:
	.size	_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc, .Lfunc_end32-_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
.LCPI33_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc: # @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB33_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB33_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB33_4
	.p2align	4, , 16
.LBB33_3:                               # %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit.us
                                        #   in Loop: Header=BB33_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB33_23
.LBB33_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_9 Depth 2
                                        #     Child Loop BB33_13 Depth 2
                                        #     Child Loop BB33_16 Depth 2
	bltu	$s8, $s0, .LBB33_6
# %bb.5:                                #   in Loop: Header=BB33_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB33_15
	.p2align	4, , 16
.LBB33_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB33_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB33_8
# %bb.7:                                #   in Loop: Header=BB33_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB33_12
	.p2align	4, , 16
.LBB33_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB33_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB33_9:                               # %vector.body
                                        #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vandi.b	$vr2, $vr2, 14
	vandi.b	$vr3, $vr3, 14
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB33_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB33_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB33_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB33_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB33_15
.LBB33_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB33_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB33_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vandi.b	$vr1, $vr1, 14
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB33_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB33_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB33_17
.LBB33_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB33_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB33_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB33_16
.LBB33_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB33_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 128
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB33_3
# %bb.18:                               #   in Loop: Header=BB33_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB33_3
.LBB33_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB33_21
	.p2align	4, , 16
.LBB33_20:                              # %_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_.exit
                                        #   in Loop: Header=BB33_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB33_23
.LBB33_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 2
	beqz	$a0, .LBB33_20
# %bb.22:                               #   in Loop: Header=BB33_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB33_20
.LBB33_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB33_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB33_27
.LBB33_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB33_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB33_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI33_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI33_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB33_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end33:
	.size	_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc, .Lfunc_end33-_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
.LCPI34_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa18custom_constant_orIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc,@function
_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc: # @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB34_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB34_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB34_4
	.p2align	4, , 16
.LBB34_3:                               # %_Z17check_shifted_sumIa18custom_constant_orIaEEvT_.exit.us
                                        #   in Loop: Header=BB34_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB34_21
.LBB34_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_9 Depth 2
                                        #     Child Loop BB34_13 Depth 2
                                        #     Child Loop BB34_16 Depth 2
	bltu	$s8, $s0, .LBB34_6
# %bb.5:                                #   in Loop: Header=BB34_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB34_15
	.p2align	4, , 16
.LBB34_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB34_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB34_8
# %bb.7:                                #   in Loop: Header=BB34_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB34_12
	.p2align	4, , 16
.LBB34_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB34_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB34_9:                               # %vector.body
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vori.b	$vr2, $vr2, 10
	vori.b	$vr3, $vr3, 10
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB34_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB34_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB34_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB34_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB34_15
.LBB34_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB34_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB34_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vori.b	$vr1, $vr1, 10
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB34_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB34_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB34_17
.LBB34_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB34_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB34_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB34_16
.LBB34_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB34_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	ori	$a2, $a2, 128
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB34_3
# %bb.18:                               #   in Loop: Header=BB34_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB34_3
.LBB34_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB34_20:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB34_20
.LBB34_21:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB34_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB34_25
.LBB34_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB34_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB34_25:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI34_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI34_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB34_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end34:
	.size	_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc, .Lfunc_end34-_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
.LCPI35_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc,@function
_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc: # @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB35_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB35_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	ori	$s4, $zero, 192
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB35_4
	.p2align	4, , 16
.LBB35_3:                               # %_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_.exit.us
                                        #   in Loop: Header=BB35_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB35_21
.LBB35_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_9 Depth 2
                                        #     Child Loop BB35_13 Depth 2
                                        #     Child Loop BB35_16 Depth 2
	bltu	$s8, $s0, .LBB35_6
# %bb.5:                                #   in Loop: Header=BB35_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB35_15
	.p2align	4, , 16
.LBB35_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB35_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB35_8
# %bb.7:                                #   in Loop: Header=BB35_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB35_12
	.p2align	4, , 16
.LBB35_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB35_9:                               # %vector.body
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vori.b	$vr2, $vr2, 63
	vori.b	$vr3, $vr3, 63
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB35_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB35_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB35_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB35_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB35_15
.LBB35_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB35_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB35_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vori.b	$vr1, $vr1, 63
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB35_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB35_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB35_17
.LBB35_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB35_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB35_16
.LBB35_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB35_4 Depth=1
	andi	$a0, $a0, 255
	beq	$a0, $s4, .LBB35_3
# %bb.18:                               #   in Loop: Header=BB35_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB35_3
.LBB35_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB35_20:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB35_20
.LBB35_21:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB35_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB35_25
.LBB35_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB35_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB35_25:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI35_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI35_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB35_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end35:
	.size	_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc, .Lfunc_end35-_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
.LCPI36_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc: # @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB36_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB36_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB36_4
	.p2align	4, , 16
.LBB36_3:                               # %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit.us
                                        #   in Loop: Header=BB36_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB36_23
.LBB36_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_9 Depth 2
                                        #     Child Loop BB36_13 Depth 2
                                        #     Child Loop BB36_16 Depth 2
	bltu	$a5, $s0, .LBB36_6
# %bb.5:                                #   in Loop: Header=BB36_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB36_15
	.p2align	4, , 16
.LBB36_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB36_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB36_8
# %bb.7:                                #   in Loop: Header=BB36_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB36_12
	.p2align	4, , 16
.LBB36_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB36_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB36_9:                               # %vector.body
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxori.b	$vr2, $vr2, 10
	vxori.b	$vr3, $vr3, 10
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB36_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB36_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB36_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB36_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB36_15
.LBB36_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB36_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB36_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxori.b	$vr1, $vr1, 10
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB36_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB36_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB36_17
.LBB36_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB36_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB36_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB36_16
.LBB36_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB36_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB36_3
# %bb.18:                               #   in Loop: Header=BB36_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB36_3
.LBB36_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB36_21
	.p2align	4, , 16
.LBB36_20:                              # %_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_.exit
                                        #   in Loop: Header=BB36_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB36_23
.LBB36_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB36_20
# %bb.22:                               #   in Loop: Header=BB36_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB36_20
.LBB36_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB36_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB36_27
.LBB36_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB36_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB36_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI36_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI36_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB36_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end36:
	.size	_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc, .Lfunc_end36-_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
.LCPI37_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc: # @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB37_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB37_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB37_4
	.p2align	4, , 16
.LBB37_3:                               # %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit.us
                                        #   in Loop: Header=BB37_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB37_23
.LBB37_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_9 Depth 2
                                        #     Child Loop BB37_13 Depth 2
                                        #     Child Loop BB37_16 Depth 2
	bltu	$a5, $s0, .LBB37_6
# %bb.5:                                #   in Loop: Header=BB37_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB37_15
	.p2align	4, , 16
.LBB37_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB37_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB37_8
# %bb.7:                                #   in Loop: Header=BB37_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB37_12
	.p2align	4, , 16
.LBB37_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB37_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB37_9:                               # %vector.body
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxori.b	$vr2, $vr2, 49
	vxori.b	$vr3, $vr3, 49
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB37_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB37_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB37_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB37_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB37_15
.LBB37_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB37_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB37_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxori.b	$vr1, $vr1, 49
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB37_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB37_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB37_17
.LBB37_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB37_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB37_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB37_16
.LBB37_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB37_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB37_3
# %bb.18:                               #   in Loop: Header=BB37_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB37_3
.LBB37_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 1
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB37_21
	.p2align	4, , 16
.LBB37_20:                              # %_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_.exit
                                        #   in Loop: Header=BB37_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB37_23
.LBB37_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB37_20
# %bb.22:                               #   in Loop: Header=BB37_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB37_20
.LBB37_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB37_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB37_27
.LBB37_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB37_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB37_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI37_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI37_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB37_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end37:
	.size	_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc, .Lfunc_end37-_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh10custom_twoIhEEvPT_iPKc
.LCPI38_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh10custom_twoIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh10custom_twoIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh10custom_twoIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh10custom_twoIhEEvPT_iPKc,@function
_Z13test_constantIh10custom_twoIhEEvPT_iPKc: # @_Z13test_constantIh10custom_twoIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB38_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB38_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 127
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB38_4
	.p2align	4, , 16
.LBB38_3:                               # %_Z17check_shifted_sumIh10custom_twoIhEEvT_.exit.us
                                        #   in Loop: Header=BB38_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB38_8
.LBB38_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB38_3
# %bb.5:                                #   in Loop: Header=BB38_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB38_3
.LBB38_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB38_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB38_7
.LBB38_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB38_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB38_12
.LBB38_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB38_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB38_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI38_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI38_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB38_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end38:
	.size	_Z13test_constantIh10custom_twoIhEEvPT_iPKc, .Lfunc_end38-_Z13test_constantIh10custom_twoIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
.LCPI39_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc: # @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB39_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB39_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB39_4
	.p2align	4, , 16
.LBB39_3:                               # %_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB39_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB39_8
.LBB39_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB39_3
# %bb.5:                                #   in Loop: Header=BB39_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB39_3
.LBB39_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB39_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB39_7
.LBB39_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB39_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB39_12
.LBB39_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB39_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB39_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI39_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI39_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB39_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end39:
	.size	_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc, .Lfunc_end39-_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
.LCPI40_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc: # @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB40_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB40_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB40_4
	.p2align	4, , 16
.LBB40_3:                               # %_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB40_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB40_8
.LBB40_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB40_3
# %bb.5:                                #   in Loop: Header=BB40_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB40_3
.LBB40_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB40_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB40_7
.LBB40_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB40_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB40_12
.LBB40_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB40_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB40_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI40_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI40_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB40_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end40:
	.size	_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc, .Lfunc_end40-_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
.LCPI41_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc: # @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB41_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB41_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 2
	alsl.d	$a0, $s0, $a0, 1
	andi	$s5, $a0, 255
	ori	$s6, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB41_4
	.p2align	4, , 16
.LBB41_3:                               # %_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB41_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB41_8
.LBB41_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB41_3
# %bb.5:                                #   in Loop: Header=BB41_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB41_3
.LBB41_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB41_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB41_7
.LBB41_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB41_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB41_12
.LBB41_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB41_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB41_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI41_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI41_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB41_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end41:
	.size	_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc, .Lfunc_end41-_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
.LCPI42_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc: # @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB42_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB42_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 127
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB42_4
	.p2align	4, , 16
.LBB42_3:                               # %_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB42_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB42_8
.LBB42_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB42_3
# %bb.5:                                #   in Loop: Header=BB42_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB42_3
.LBB42_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB42_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB42_7
.LBB42_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB42_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB42_12
.LBB42_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB42_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB42_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI42_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI42_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB42_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end42:
	.size	_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc, .Lfunc_end42-_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
.LCPI43_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc: # @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB43_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB43_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB43_4
	.p2align	4, , 16
.LBB43_3:                               # %_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB43_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB43_8
.LBB43_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB43_3
# %bb.5:                                #   in Loop: Header=BB43_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB43_3
.LBB43_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB43_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB43_7
.LBB43_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB43_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB43_12
.LBB43_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB43_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB43_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI43_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI43_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB43_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end43:
	.size	_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc, .Lfunc_end43-_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
.LCPI44_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc: # @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB44_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB44_4
.LBB44_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB44_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB44_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI44_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI44_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB44_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end44:
	.size	_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc, .Lfunc_end44-_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
.LCPI45_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc: # @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB45_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB45_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB45_4
	.p2align	4, , 16
.LBB45_3:                               # %_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB45_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB45_8
.LBB45_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB45_3
# %bb.5:                                #   in Loop: Header=BB45_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB45_3
.LBB45_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB45_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB45_7
.LBB45_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB45_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB45_12
.LBB45_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB45_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB45_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI45_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI45_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB45_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end45:
	.size	_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc, .Lfunc_end45-_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
.LCPI46_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc: # @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB46_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB46_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB46_4
	.p2align	4, , 16
.LBB46_3:                               # %_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB46_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB46_8
.LBB46_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB46_3
# %bb.5:                                #   in Loop: Header=BB46_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB46_3
.LBB46_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB46_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB46_7
.LBB46_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB46_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB46_12
.LBB46_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB46_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB46_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI46_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI46_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB46_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end46:
	.size	_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc, .Lfunc_end46-_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
.LCPI47_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc: # @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB47_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB47_4
.LBB47_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB47_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB47_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI47_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI47_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB47_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end47:
	.size	_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc, .Lfunc_end47-_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
.LCPI48_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc: # @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB48_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB48_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB48_4
	.p2align	4, , 16
.LBB48_3:                               # %_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB48_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB48_8
.LBB48_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB48_3
# %bb.5:                                #   in Loop: Header=BB48_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB48_3
.LBB48_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB48_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB48_7
.LBB48_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB48_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB48_12
.LBB48_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB48_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB48_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI48_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI48_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB48_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end48:
	.size	_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc, .Lfunc_end48-_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
.LCPI49_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc: # @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB49_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB49_4
.LBB49_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB49_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB49_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI49_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI49_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB49_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end49:
	.size	_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc, .Lfunc_end49-_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
.LCPI50_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc: # @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB50_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB50_6
# %bb.2:                                # %.preheader.us.preheader
	andi	$s5, $s0, 127
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB50_4
	.p2align	4, , 16
.LBB50_3:                               # %_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB50_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB50_8
.LBB50_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB50_3
# %bb.5:                                #   in Loop: Header=BB50_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB50_3
.LBB50_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB50_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB50_7
.LBB50_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB50_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB50_12
.LBB50_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB50_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB50_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI50_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI50_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB50_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end50:
	.size	_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc, .Lfunc_end50-_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
.LCPI51_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc: # @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB51_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB51_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 5
	sub.d	$a0, $a0, $s0
	andi	$s5, $a0, 255
	ori	$s6, $zero, 192
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB51_4
	.p2align	4, , 16
.LBB51_3:                               # %_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB51_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB51_8
.LBB51_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB51_3
# %bb.5:                                #   in Loop: Header=BB51_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB51_3
.LBB51_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB51_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB51_7
.LBB51_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB51_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB51_12
.LBB51_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB51_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB51_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI51_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI51_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB51_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end51:
	.size	_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc, .Lfunc_end51-_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
.LCPI52_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc: # @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB52_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB52_6
# %bb.2:                                # %.preheader.us.preheader
	ori	$a0, $zero, 29
	mul.d	$a0, $s0, $a0
	andi	$s5, $a0, 255
	ori	$s6, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB52_4
	.p2align	4, , 16
.LBB52_3:                               # %_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_.exit.us
                                        #   in Loop: Header=BB52_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB52_8
.LBB52_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB52_3
# %bb.5:                                #   in Loop: Header=BB52_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB52_3
.LBB52_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB52_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB52_7
.LBB52_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB52_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB52_12
.LBB52_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB52_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB52_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI52_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI52_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB52_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end52:
	.size	_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc, .Lfunc_end52-_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
.LCPI53_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh19custom_constant_addIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc: # @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB53_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB53_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB53_4
	.p2align	4, , 16
.LBB53_3:                               # %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit.us
                                        #   in Loop: Header=BB53_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB53_23
.LBB53_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_9 Depth 2
                                        #     Child Loop BB53_13 Depth 2
                                        #     Child Loop BB53_16 Depth 2
	bltu	$a5, $s0, .LBB53_6
# %bb.5:                                #   in Loop: Header=BB53_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB53_15
	.p2align	4, , 16
.LBB53_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB53_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB53_8
# %bb.7:                                #   in Loop: Header=BB53_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB53_12
	.p2align	4, , 16
.LBB53_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB53_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB53_9:                               # %vector.body
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vaddi.bu	$vr0, $vr0, 10
	vaddi.bu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB53_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB53_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB53_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB53_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB53_15
.LBB53_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB53_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB53_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vaddi.bu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB53_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB53_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB53_17
.LBB53_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB53_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB53_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB53_16
.LBB53_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB53_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB53_3
# %bb.18:                               #   in Loop: Header=BB53_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB53_3
.LBB53_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB53_21
	.p2align	4, , 16
.LBB53_20:                              # %_Z17check_shifted_sumIh19custom_constant_addIhEEvT_.exit
                                        #   in Loop: Header=BB53_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB53_23
.LBB53_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB53_20
# %bb.22:                               #   in Loop: Header=BB53_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB53_20
.LBB53_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB53_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB53_27
.LBB53_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB53_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB53_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI53_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI53_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB53_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end53:
	.size	_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc, .Lfunc_end53-_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
.LCPI54_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc: # @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB54_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB54_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB54_4
	.p2align	4, , 16
.LBB54_3:                               # %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit.us
                                        #   in Loop: Header=BB54_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB54_23
.LBB54_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_9 Depth 2
                                        #     Child Loop BB54_13 Depth 2
                                        #     Child Loop BB54_16 Depth 2
	bltu	$a5, $s0, .LBB54_6
# %bb.5:                                #   in Loop: Header=BB54_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB54_15
	.p2align	4, , 16
.LBB54_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB54_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB54_8
# %bb.7:                                #   in Loop: Header=BB54_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB54_12
	.p2align	4, , 16
.LBB54_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB54_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB54_9:                               # %vector.body
                                        #   Parent Loop BB54_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vaddi.bu	$vr0, $vr0, 10
	vaddi.bu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB54_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB54_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB54_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB54_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB54_15
.LBB54_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB54_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB54_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB54_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vaddi.bu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB54_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB54_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB54_17
.LBB54_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB54_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB54_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB54_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB54_16
.LBB54_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB54_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB54_3
# %bb.18:                               #   in Loop: Header=BB54_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB54_3
.LBB54_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB54_21
	.p2align	4, , 16
.LBB54_20:                              # %_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_.exit
                                        #   in Loop: Header=BB54_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB54_23
.LBB54_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB54_20
# %bb.22:                               #   in Loop: Header=BB54_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB54_20
.LBB54_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB54_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB54_27
.LBB54_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB54_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB54_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI54_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI54_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB54_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end54:
	.size	_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc, .Lfunc_end54-_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
.LCPI55_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh19custom_constant_subIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc: # @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB55_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB55_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.b	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB55_4
	.p2align	4, , 16
.LBB55_3:                               # %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit.us
                                        #   in Loop: Header=BB55_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB55_23
.LBB55_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_9 Depth 2
                                        #     Child Loop BB55_13 Depth 2
                                        #     Child Loop BB55_16 Depth 2
	bltu	$a5, $s0, .LBB55_6
# %bb.5:                                #   in Loop: Header=BB55_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB55_15
	.p2align	4, , 16
.LBB55_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB55_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB55_8
# %bb.7:                                #   in Loop: Header=BB55_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB55_12
	.p2align	4, , 16
.LBB55_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB55_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB55_9:                               # %vector.body
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB55_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB55_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB55_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB55_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB55_15
.LBB55_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB55_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB55_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vadd.b	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB55_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB55_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB55_17
.LBB55_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB55_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB55_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB55_16
.LBB55_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB55_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB55_3
# %bb.18:                               #   in Loop: Header=BB55_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB55_3
.LBB55_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB55_21
	.p2align	4, , 16
.LBB55_20:                              # %_Z17check_shifted_sumIh19custom_constant_subIhEEvT_.exit
                                        #   in Loop: Header=BB55_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB55_23
.LBB55_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB55_20
# %bb.22:                               #   in Loop: Header=BB55_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB55_20
.LBB55_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB55_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB55_27
.LBB55_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB55_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB55_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI55_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI55_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB55_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end55:
	.size	_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc, .Lfunc_end55-_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
.LCPI56_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc: # @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB56_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB56_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.b	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB56_4
	.p2align	4, , 16
.LBB56_3:                               # %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit.us
                                        #   in Loop: Header=BB56_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB56_23
.LBB56_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_9 Depth 2
                                        #     Child Loop BB56_13 Depth 2
                                        #     Child Loop BB56_16 Depth 2
	bltu	$a5, $s0, .LBB56_6
# %bb.5:                                #   in Loop: Header=BB56_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB56_15
	.p2align	4, , 16
.LBB56_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB56_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB56_8
# %bb.7:                                #   in Loop: Header=BB56_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB56_12
	.p2align	4, , 16
.LBB56_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB56_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB56_9:                               # %vector.body
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB56_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB56_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB56_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB56_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB56_15
.LBB56_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB56_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB56_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vadd.b	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB56_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB56_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB56_17
.LBB56_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB56_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB56_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB56_16
.LBB56_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB56_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB56_3
# %bb.18:                               #   in Loop: Header=BB56_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB56_3
.LBB56_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB56_21
	.p2align	4, , 16
.LBB56_20:                              # %_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_.exit
                                        #   in Loop: Header=BB56_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB56_23
.LBB56_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB56_20
# %bb.22:                               #   in Loop: Header=BB56_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB56_20
.LBB56_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB56_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB56_27
.LBB56_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB56_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB56_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI56_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI56_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB56_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end56:
	.size	_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc, .Lfunc_end56-_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
.LCPI57_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc,@function
_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc: # @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB57_19
# %bb.1:
	blt	$s0, $a0, .LBB57_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s4, $zero, 7
	ori	$s8, $zero, 120
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.b	$vr4, 120
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB57_4
	.p2align	4, , 16
.LBB57_3:                               # %_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_.exit.us
                                        #   in Loop: Header=BB57_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB57_19
.LBB57_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_9 Depth 2
                                        #     Child Loop BB57_13 Depth 2
                                        #     Child Loop BB57_16 Depth 2
	bltu	$s4, $s0, .LBB57_6
# %bb.5:                                #   in Loop: Header=BB57_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB57_15
	.p2align	4, , 16
.LBB57_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB57_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB57_8
# %bb.7:                                #   in Loop: Header=BB57_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB57_12
	.p2align	4, , 16
.LBB57_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB57_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB57_9:                               # %vector.body
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr2, $vr4
	vmadd.b	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB57_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB57_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB57_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB57_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	beqz	$a4, .LBB57_15
.LBB57_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB57_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB57_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB57_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB57_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB57_17
.LBB57_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB57_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB57_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $a4, $s8
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB57_16
.LBB57_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB57_4 Depth=1
	andi	$a0, $a0, 255
	beqz	$a0, .LBB57_3
# %bb.18:                               #   in Loop: Header=BB57_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB57_3
.LBB57_19:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB57_21
# %bb.20:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB57_23
.LBB57_21:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB57_24
# %bb.22:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB57_23:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI57_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI57_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB57_24:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end57:
	.size	_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc, .Lfunc_end57-_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
.LCPI58_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc,@function
_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc: # @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB58_19
# %bb.1:
	blt	$s0, $a0, .LBB58_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s4, $zero, 7
	ori	$s8, $zero, 120
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.b	$vr4, 120
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB58_4
	.p2align	4, , 16
.LBB58_3:                               # %_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_.exit.us
                                        #   in Loop: Header=BB58_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB58_19
.LBB58_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_9 Depth 2
                                        #     Child Loop BB58_13 Depth 2
                                        #     Child Loop BB58_16 Depth 2
	bltu	$s4, $s0, .LBB58_6
# %bb.5:                                #   in Loop: Header=BB58_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB58_15
	.p2align	4, , 16
.LBB58_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB58_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB58_8
# %bb.7:                                #   in Loop: Header=BB58_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB58_12
	.p2align	4, , 16
.LBB58_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB58_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB58_9:                               # %vector.body
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr2, $vr4
	vmadd.b	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB58_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB58_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB58_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB58_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	beqz	$a4, .LBB58_15
.LBB58_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB58_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB58_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB58_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB58_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB58_17
.LBB58_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB58_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB58_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $a4, $s8
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB58_16
.LBB58_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB58_4 Depth=1
	andi	$a0, $a0, 255
	beqz	$a0, .LBB58_3
# %bb.18:                               #   in Loop: Header=BB58_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB58_3
.LBB58_19:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB58_21
# %bb.20:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB58_23
.LBB58_21:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB58_24
# %bb.22:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB58_23:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI58_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI58_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB58_24:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end58:
	.size	_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc, .Lfunc_end58-_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
.LCPI59_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc,@function
_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc: # @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB59_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB59_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.b	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB59_4
	.p2align	4, , 16
.LBB59_3:                               # %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit.us
                                        #   in Loop: Header=BB59_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB59_23
.LBB59_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_9 Depth 2
                                        #     Child Loop BB59_13 Depth 2
                                        #     Child Loop BB59_16 Depth 2
	bltu	$s8, $s0, .LBB59_6
# %bb.5:                                #   in Loop: Header=BB59_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB59_15
	.p2align	4, , 16
.LBB59_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB59_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB59_8
# %bb.7:                                #   in Loop: Header=BB59_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB59_12
	.p2align	4, , 16
.LBB59_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB59_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB59_9:                               # %vector.body
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB59_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB59_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB59_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB59_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB59_15
.LBB59_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB59_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB59_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vadd.b	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB59_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB59_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB59_17
.LBB59_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB59_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB59_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB59_16
.LBB59_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB59_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB59_3
# %bb.18:                               #   in Loop: Header=BB59_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB59_3
.LBB59_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB59_21
	.p2align	4, , 16
.LBB59_20:                              # %_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_.exit
                                        #   in Loop: Header=BB59_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB59_23
.LBB59_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beqz	$a0, .LBB59_20
# %bb.22:                               #   in Loop: Header=BB59_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB59_20
.LBB59_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB59_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB59_27
.LBB59_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB59_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB59_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI59_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI59_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB59_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end59:
	.size	_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc, .Lfunc_end59-_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
.LCPI60_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc,@function
_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc: # @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB60_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB60_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	ori	$s4, $zero, 205
	pcalau12i	$s8, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, 209715
	ori	$a0, $a0, 820
	lu32i.d	$a0, 209715
	lu52i.d	$s2, $a0, 819
	vrepli.b	$vr4, -51
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB60_4
	.p2align	4, , 16
.LBB60_3:                               # %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit.us
                                        #   in Loop: Header=BB60_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB60_23
.LBB60_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_9 Depth 2
                                        #     Child Loop BB60_13 Depth 2
                                        #     Child Loop BB60_16 Depth 2
	bltu	$a5, $s0, .LBB60_6
# %bb.5:                                #   in Loop: Header=BB60_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB60_15
	.p2align	4, , 16
.LBB60_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB60_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB60_8
# %bb.7:                                #   in Loop: Header=BB60_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB60_12
	.p2align	4, , 16
.LBB60_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB60_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB60_9:                               # %vector.body
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.bu	$vr2, $vr2, $vr4
	vsrli.b	$vr2, $vr2, 2
	vmuh.bu	$vr3, $vr3, $vr4
	vsrli.b	$vr3, $vr3, 2
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB60_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB60_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB60_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB60_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB60_15
.LBB60_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB60_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB60_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.b	$a3, $vr1, 1
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s2
	vpickve2gr.b	$a4, $vr1, 0
	andi	$a4, $a4, 255
	mulh.du	$a4, $a4, $s2
	vinsgr2vr.b	$vr2, $a4, 0
	vinsgr2vr.b	$vr2, $a3, 1
	vpickve2gr.b	$a3, $vr1, 2
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s2
	vinsgr2vr.b	$vr2, $a3, 2
	vpickve2gr.b	$a3, $vr1, 3
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s2
	vinsgr2vr.b	$vr2, $a3, 3
	vpickve2gr.b	$a3, $vr1, 4
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s2
	vinsgr2vr.b	$vr2, $a3, 4
	vpickve2gr.b	$a3, $vr1, 5
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s2
	vinsgr2vr.b	$vr2, $a3, 5
	vpickve2gr.b	$a3, $vr1, 6
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s2
	vinsgr2vr.b	$vr2, $a3, 6
	vpickve2gr.b	$a3, $vr1, 7
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s2
	vinsgr2vr.b	$vr2, $a3, 7
	vadd.b	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB60_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB60_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB60_17
.LBB60_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB60_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB60_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB60_16
.LBB60_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB60_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a2, $a2, 4
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB60_3
# %bb.18:                               #   in Loop: Header=BB60_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB60_3
.LBB60_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 205
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB60_21
	.p2align	4, , 16
.LBB60_20:                              # %_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_.exit
                                        #   in Loop: Header=BB60_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB60_23
.LBB60_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 11, 10
	beqz	$a0, .LBB60_20
# %bb.22:                               #   in Loop: Header=BB60_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB60_20
.LBB60_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB60_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB60_27
.LBB60_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB60_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB60_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI60_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI60_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB60_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end60:
	.size	_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc, .Lfunc_end60-_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
.LCPI61_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc,@function
_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc: # @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB61_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB61_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a6, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, 139810
	ori	$a0, $a0, 547
	lu32i.d	$a0, 139810
	lu52i.d	$s8, $a0, 34
	vrepli.b	$vr4, -119
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB61_4
	.p2align	4, , 16
.LBB61_3:                               # %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit.us
                                        #   in Loop: Header=BB61_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB61_23
.LBB61_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_9 Depth 2
                                        #     Child Loop BB61_13 Depth 2
                                        #     Child Loop BB61_16 Depth 2
	bltu	$a6, $s0, .LBB61_6
# %bb.5:                                #   in Loop: Header=BB61_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB61_15
	.p2align	4, , 16
.LBB61_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB61_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB61_8
# %bb.7:                                #   in Loop: Header=BB61_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB61_12
	.p2align	4, , 16
.LBB61_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB61_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB61_9:                               # %vector.body
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.bu	$vr2, $vr2, $vr4
	vsrli.b	$vr2, $vr2, 6
	vmuh.bu	$vr3, $vr3, $vr4
	vsrli.b	$vr3, $vr3, 6
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB61_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB61_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB61_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB61_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB61_15
.LBB61_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB61_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB61_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.b	$a3, $vr1, 1
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s8
	vpickve2gr.b	$a4, $vr1, 0
	andi	$a4, $a4, 255
	mulh.du	$a4, $a4, $s8
	vinsgr2vr.b	$vr2, $a4, 0
	vinsgr2vr.b	$vr2, $a3, 1
	vpickve2gr.b	$a3, $vr1, 2
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s8
	vinsgr2vr.b	$vr2, $a3, 2
	vpickve2gr.b	$a3, $vr1, 3
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s8
	vinsgr2vr.b	$vr2, $a3, 3
	vpickve2gr.b	$a3, $vr1, 4
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s8
	vinsgr2vr.b	$vr2, $a3, 4
	vpickve2gr.b	$a3, $vr1, 5
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s8
	vinsgr2vr.b	$vr2, $a3, 5
	vpickve2gr.b	$a3, $vr1, 6
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s8
	vinsgr2vr.b	$vr2, $a3, 6
	vpickve2gr.b	$a3, $vr1, 7
	andi	$a3, $a3, 255
	mulh.du	$a3, $a3, $s8
	vinsgr2vr.b	$vr2, $a3, 7
	vadd.b	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB61_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB61_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB61_17
.LBB61_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB61_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB61_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	alsl.d	$a5, $a4, $a4, 4
	alsl.d	$a4, $a5, $a4, 3
	srli.d	$a4, $a4, 14
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB61_16
.LBB61_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB61_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	alsl.d	$a3, $a2, $a2, 4
	alsl.d	$a2, $a3, $a2, 3
	srli.d	$a2, $a2, 8
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB61_3
# %bb.18:                               #   in Loop: Header=BB61_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a6, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB61_3
.LBB61_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 120
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB61_21
	.p2align	4, , 16
.LBB61_20:                              # %_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_.exit
                                        #   in Loop: Header=BB61_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB61_23
.LBB61_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	bltu	$a0, $s2, .LBB61_20
# %bb.22:                               #   in Loop: Header=BB61_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB61_20
.LBB61_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB61_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB61_27
.LBB61_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB61_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB61_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI61_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI61_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB61_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end61:
	.size	_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc, .Lfunc_end61-_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
.LCPI62_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc,@function
_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc: # @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB62_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB62_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB62_4
	.p2align	4, , 16
.LBB62_3:                               # %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit.us
                                        #   in Loop: Header=BB62_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB62_23
.LBB62_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_9 Depth 2
                                        #     Child Loop BB62_13 Depth 2
                                        #     Child Loop BB62_16 Depth 2
	bltu	$a5, $s0, .LBB62_6
# %bb.5:                                #   in Loop: Header=BB62_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB62_15
	.p2align	4, , 16
.LBB62_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB62_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB62_8
# %bb.7:                                #   in Loop: Header=BB62_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB62_12
	.p2align	4, , 16
.LBB62_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB62_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB62_9:                               # %vector.body
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vaddi.bu	$vr0, $vr0, 2
	vaddi.bu	$vr1, $vr1, 2
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB62_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB62_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB62_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB62_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB62_15
.LBB62_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB62_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB62_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr1
	vaddi.bu	$vr0, $vr0, 2
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB62_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB62_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB62_17
.LBB62_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB62_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB62_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB62_16
.LBB62_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB62_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB62_3
# %bb.18:                               #   in Loop: Header=BB62_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB62_3
.LBB62_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB62_21
	.p2align	4, , 16
.LBB62_20:                              # %_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_.exit
                                        #   in Loop: Header=BB62_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB62_23
.LBB62_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB62_20
# %bb.22:                               #   in Loop: Header=BB62_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB62_20
.LBB62_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB62_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB62_27
.LBB62_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB62_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB62_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI62_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI62_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB62_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end62:
	.size	_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc, .Lfunc_end62-_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
.LCPI63_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc,@function
_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc: # @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB63_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB63_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB63_4
	.p2align	4, , 16
.LBB63_3:                               # %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit.us
                                        #   in Loop: Header=BB63_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB63_23
.LBB63_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_9 Depth 2
                                        #     Child Loop BB63_13 Depth 2
                                        #     Child Loop BB63_16 Depth 2
	bltu	$s8, $s0, .LBB63_6
# %bb.5:                                #   in Loop: Header=BB63_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB63_15
	.p2align	4, , 16
.LBB63_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB63_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB63_8
# %bb.7:                                #   in Loop: Header=BB63_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB63_12
	.p2align	4, , 16
.LBB63_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB63_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB63_9:                               # %vector.body
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB63_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB63_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB63_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB63_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB63_15
.LBB63_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB63_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB63_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB63_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB63_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB63_17
.LBB63_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB63_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB63_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB63_16
.LBB63_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB63_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB63_3
# %bb.18:                               #   in Loop: Header=BB63_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB63_3
.LBB63_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB63_21
	.p2align	4, , 16
.LBB63_20:                              # %_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_.exit
                                        #   in Loop: Header=BB63_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB63_23
.LBB63_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beqz	$a0, .LBB63_20
# %bb.22:                               #   in Loop: Header=BB63_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB63_20
.LBB63_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB63_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB63_27
.LBB63_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB63_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB63_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI63_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI63_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB63_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end63:
	.size	_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc, .Lfunc_end63-_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
.LCPI64_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh19custom_constant_andIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc: # @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB64_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB64_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB64_4
	.p2align	4, , 16
.LBB64_3:                               # %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit.us
                                        #   in Loop: Header=BB64_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB64_23
.LBB64_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_9 Depth 2
                                        #     Child Loop BB64_13 Depth 2
                                        #     Child Loop BB64_16 Depth 2
	bltu	$s8, $s0, .LBB64_6
# %bb.5:                                #   in Loop: Header=BB64_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB64_15
	.p2align	4, , 16
.LBB64_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB64_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB64_8
# %bb.7:                                #   in Loop: Header=BB64_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB64_12
	.p2align	4, , 16
.LBB64_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB64_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB64_9:                               # %vector.body
                                        #   Parent Loop BB64_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vandi.b	$vr2, $vr2, 10
	vandi.b	$vr3, $vr3, 10
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB64_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB64_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB64_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB64_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB64_15
.LBB64_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB64_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB64_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB64_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vandi.b	$vr1, $vr1, 10
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB64_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB64_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB64_17
.LBB64_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB64_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB64_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB64_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB64_16
.LBB64_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB64_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 128
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB64_3
# %bb.18:                               #   in Loop: Header=BB64_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB64_3
.LBB64_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB64_21
	.p2align	4, , 16
.LBB64_20:                              # %_Z17check_shifted_sumIh19custom_constant_andIhEEvT_.exit
                                        #   in Loop: Header=BB64_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB64_23
.LBB64_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 2
	beqz	$a0, .LBB64_20
# %bb.22:                               #   in Loop: Header=BB64_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB64_20
.LBB64_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB64_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB64_27
.LBB64_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB64_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB64_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI64_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI64_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB64_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end64:
	.size	_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc, .Lfunc_end64-_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
.LCPI65_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc: # @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB65_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB65_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB65_4
	.p2align	4, , 16
.LBB65_3:                               # %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit.us
                                        #   in Loop: Header=BB65_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB65_23
.LBB65_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_9 Depth 2
                                        #     Child Loop BB65_13 Depth 2
                                        #     Child Loop BB65_16 Depth 2
	bltu	$s8, $s0, .LBB65_6
# %bb.5:                                #   in Loop: Header=BB65_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB65_15
	.p2align	4, , 16
.LBB65_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB65_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB65_8
# %bb.7:                                #   in Loop: Header=BB65_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB65_12
	.p2align	4, , 16
.LBB65_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB65_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB65_9:                               # %vector.body
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vandi.b	$vr2, $vr2, 14
	vandi.b	$vr3, $vr3, 14
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB65_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB65_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB65_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB65_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB65_15
.LBB65_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB65_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB65_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vandi.b	$vr1, $vr1, 14
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB65_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB65_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB65_17
.LBB65_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB65_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB65_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB65_16
.LBB65_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB65_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 128
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB65_3
# %bb.18:                               #   in Loop: Header=BB65_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB65_3
.LBB65_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB65_21
	.p2align	4, , 16
.LBB65_20:                              # %_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_.exit
                                        #   in Loop: Header=BB65_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB65_23
.LBB65_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 2
	beqz	$a0, .LBB65_20
# %bb.22:                               #   in Loop: Header=BB65_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB65_20
.LBB65_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB65_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB65_27
.LBB65_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB65_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB65_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI65_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI65_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB65_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end65:
	.size	_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc, .Lfunc_end65-_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
.LCPI66_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh18custom_constant_orIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc,@function
_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc: # @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB66_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB66_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB66_4
	.p2align	4, , 16
.LBB66_3:                               # %_Z17check_shifted_sumIh18custom_constant_orIhEEvT_.exit.us
                                        #   in Loop: Header=BB66_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB66_21
.LBB66_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_9 Depth 2
                                        #     Child Loop BB66_13 Depth 2
                                        #     Child Loop BB66_16 Depth 2
	bltu	$s8, $s0, .LBB66_6
# %bb.5:                                #   in Loop: Header=BB66_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB66_15
	.p2align	4, , 16
.LBB66_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB66_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB66_8
# %bb.7:                                #   in Loop: Header=BB66_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB66_12
	.p2align	4, , 16
.LBB66_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB66_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB66_9:                               # %vector.body
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vori.b	$vr2, $vr2, 10
	vori.b	$vr3, $vr3, 10
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB66_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB66_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB66_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB66_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB66_15
.LBB66_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB66_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB66_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vori.b	$vr1, $vr1, 10
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB66_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB66_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB66_17
.LBB66_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB66_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB66_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB66_16
.LBB66_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB66_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	ori	$a2, $a2, 128
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB66_3
# %bb.18:                               #   in Loop: Header=BB66_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB66_3
.LBB66_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB66_20:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB66_20
.LBB66_21:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB66_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB66_25
.LBB66_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB66_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB66_25:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI66_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI66_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB66_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end66:
	.size	_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc, .Lfunc_end66-_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
.LCPI67_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc,@function
_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc: # @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB67_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB67_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$s8, $zero, 7
	ori	$s4, $zero, 192
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB67_4
	.p2align	4, , 16
.LBB67_3:                               # %_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_.exit.us
                                        #   in Loop: Header=BB67_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB67_21
.LBB67_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_9 Depth 2
                                        #     Child Loop BB67_13 Depth 2
                                        #     Child Loop BB67_16 Depth 2
	bltu	$s8, $s0, .LBB67_6
# %bb.5:                                #   in Loop: Header=BB67_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB67_15
	.p2align	4, , 16
.LBB67_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB67_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB67_8
# %bb.7:                                #   in Loop: Header=BB67_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB67_12
	.p2align	4, , 16
.LBB67_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB67_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB67_9:                               # %vector.body
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vori.b	$vr2, $vr2, 63
	vori.b	$vr3, $vr3, 63
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB67_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB67_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB67_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB67_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB67_15
.LBB67_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB67_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB67_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vori.b	$vr1, $vr1, 63
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB67_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB67_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB67_17
.LBB67_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB67_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB67_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB67_16
.LBB67_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB67_4 Depth=1
	andi	$a0, $a0, 255
	beq	$a0, $s4, .LBB67_3
# %bb.18:                               #   in Loop: Header=BB67_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB67_3
.LBB67_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB67_20:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB67_20
.LBB67_21:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB67_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB67_25
.LBB67_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB67_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB67_25:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI67_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI67_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB67_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end67:
	.size	_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc, .Lfunc_end67-_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
.LCPI68_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc: # @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB68_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB68_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 128
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB68_4
	.p2align	4, , 16
.LBB68_3:                               # %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit.us
                                        #   in Loop: Header=BB68_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB68_23
.LBB68_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_9 Depth 2
                                        #     Child Loop BB68_13 Depth 2
                                        #     Child Loop BB68_16 Depth 2
	bltu	$a5, $s0, .LBB68_6
# %bb.5:                                #   in Loop: Header=BB68_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB68_15
	.p2align	4, , 16
.LBB68_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB68_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB68_8
# %bb.7:                                #   in Loop: Header=BB68_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB68_12
	.p2align	4, , 16
.LBB68_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB68_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB68_9:                               # %vector.body
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxori.b	$vr2, $vr2, 10
	vxori.b	$vr3, $vr3, 10
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB68_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB68_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB68_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB68_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB68_15
.LBB68_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB68_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB68_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxori.b	$vr1, $vr1, 10
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB68_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB68_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB68_17
.LBB68_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB68_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB68_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB68_16
.LBB68_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB68_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB68_3
# %bb.18:                               #   in Loop: Header=BB68_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB68_3
.LBB68_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 2
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB68_21
	.p2align	4, , 16
.LBB68_20:                              # %_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_.exit
                                        #   in Loop: Header=BB68_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB68_23
.LBB68_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB68_20
# %bb.22:                               #   in Loop: Header=BB68_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB68_20
.LBB68_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB68_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB68_27
.LBB68_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB68_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB68_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI68_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI68_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB68_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end68:
	.size	_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc, .Lfunc_end68-_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
.LCPI69_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc: # @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB69_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB69_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s7, $a0, 5
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 7
	pcalau12i	$s4, %pc_hi20(init_value)
	ori	$s8, $zero, 64
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB69_4
	.p2align	4, , 16
.LBB69_3:                               # %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit.us
                                        #   in Loop: Header=BB69_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB69_23
.LBB69_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_9 Depth 2
                                        #     Child Loop BB69_13 Depth 2
                                        #     Child Loop BB69_16 Depth 2
	bltu	$a5, $s0, .LBB69_6
# %bb.5:                                #   in Loop: Header=BB69_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB69_15
	.p2align	4, , 16
.LBB69_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB69_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB69_8
# %bb.7:                                #   in Loop: Header=BB69_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB69_12
	.p2align	4, , 16
.LBB69_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB69_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB69_9:                               # %vector.body
                                        #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxori.b	$vr2, $vr2, 49
	vxori.b	$vr3, $vr3, 49
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB69_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB69_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.b	$vr0, $vr0, $vr1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	beq	$s7, $s0, .LBB69_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB69_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB69_15
.LBB69_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB69_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB69_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxori.b	$vr1, $vr1, 49
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB69_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB69_4 Depth=1
	vsrli.d	$vr1, $vr0, 32
	vadd.b	$vr0, $vr0, $vr1
	vshuf4i.b	$vr1, $vr0, 14
	vadd.b	$vr0, $vr0, $vr1
	vreplvei.b	$vr1, $vr0, 1
	vadd.b	$vr0, $vr0, $vr1
	vpickve2gr.b	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB69_17
.LBB69_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB69_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB69_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB69_16
.LBB69_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB69_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	slli.d	$a2, $a2, 6
	xor	$a0, $a2, $a0
	andi	$a0, $a0, 255
	beq	$a0, $s8, .LBB69_3
# %bb.18:                               #   in Loop: Header=BB69_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 7
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB69_3
.LBB69_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 1
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB69_21
	.p2align	4, , 16
.LBB69_20:                              # %_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_.exit
                                        #   in Loop: Header=BB69_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB69_23
.LBB69_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 3
	beq	$a0, $s2, .LBB69_20
# %bb.22:                               #   in Loop: Header=BB69_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB69_20
.LBB69_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB69_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB69_27
.LBB69_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB69_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB69_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI69_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI69_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB69_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end69:
	.size	_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc, .Lfunc_end69-_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs10custom_twoIsEEvPT_iPKc
.LCPI70_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs10custom_twoIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs10custom_twoIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs10custom_twoIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs10custom_twoIsEEvPT_iPKc,@function
_Z13test_constantIs10custom_twoIsEEvPT_iPKc: # @_Z13test_constantIs10custom_twoIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB70_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB70_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 14, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB70_4
	.p2align	4, , 16
.LBB70_3:                               # %_Z17check_shifted_sumIs10custom_twoIsEEvT_.exit.us
                                        #   in Loop: Header=BB70_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB70_8
.LBB70_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB70_3
# %bb.5:                                #   in Loop: Header=BB70_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB70_3
.LBB70_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB70_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB70_7
.LBB70_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB70_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB70_12
.LBB70_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB70_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB70_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI70_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI70_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB70_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end70:
	.size	_Z13test_constantIs10custom_twoIsEEvPT_iPKc, .Lfunc_end70-_Z13test_constantIs10custom_twoIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
.LCPI71_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc: # @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB71_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB71_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB71_4
	.p2align	4, , 16
.LBB71_3:                               # %_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB71_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB71_8
.LBB71_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB71_3
# %bb.5:                                #   in Loop: Header=BB71_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB71_3
.LBB71_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB71_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB71_7
.LBB71_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB71_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB71_12
.LBB71_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB71_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB71_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI71_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI71_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB71_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end71:
	.size	_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc, .Lfunc_end71-_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
.LCPI72_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc: # @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB72_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB72_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB72_4
	.p2align	4, , 16
.LBB72_3:                               # %_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB72_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB72_8
.LBB72_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB72_3
# %bb.5:                                #   in Loop: Header=BB72_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB72_3
.LBB72_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB72_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB72_7
.LBB72_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB72_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB72_12
.LBB72_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB72_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB72_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI72_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI72_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB72_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end72:
	.size	_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc, .Lfunc_end72-_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
.LCPI73_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc: # @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB73_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB73_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 2
	alsl.d	$a0, $s0, $a0, 1
	bstrpick.d	$s5, $a0, 15, 0
	lu12i.w	$a0, 11
	ori	$s6, $a0, 2944
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB73_4
	.p2align	4, , 16
.LBB73_3:                               # %_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB73_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB73_8
.LBB73_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB73_3
# %bb.5:                                #   in Loop: Header=BB73_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB73_3
.LBB73_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB73_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB73_7
.LBB73_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB73_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB73_12
.LBB73_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB73_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB73_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI73_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI73_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB73_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end73:
	.size	_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc, .Lfunc_end73-_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
.LCPI74_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc: # @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB74_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB74_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 14, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB74_4
	.p2align	4, , 16
.LBB74_3:                               # %_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB74_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB74_8
.LBB74_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB74_3
# %bb.5:                                #   in Loop: Header=BB74_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB74_3
.LBB74_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB74_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB74_7
.LBB74_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB74_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB74_12
.LBB74_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB74_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB74_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI74_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI74_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB74_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end74:
	.size	_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc, .Lfunc_end74-_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
.LCPI75_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc: # @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB75_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB75_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB75_4
	.p2align	4, , 16
.LBB75_3:                               # %_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB75_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB75_8
.LBB75_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB75_3
# %bb.5:                                #   in Loop: Header=BB75_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB75_3
.LBB75_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB75_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB75_7
.LBB75_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB75_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB75_12
.LBB75_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB75_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB75_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI75_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI75_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB75_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end75:
	.size	_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc, .Lfunc_end75-_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
.LCPI76_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc: # @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB76_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB76_4
.LBB76_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB76_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB76_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI76_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI76_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB76_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end76:
	.size	_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc, .Lfunc_end76-_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
.LCPI77_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc: # @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB77_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB77_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB77_4
	.p2align	4, , 16
.LBB77_3:                               # %_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB77_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB77_8
.LBB77_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB77_3
# %bb.5:                                #   in Loop: Header=BB77_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB77_3
.LBB77_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB77_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB77_7
.LBB77_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB77_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB77_12
.LBB77_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB77_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB77_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI77_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI77_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB77_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end77:
	.size	_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc, .Lfunc_end77-_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
.LCPI78_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc: # @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB78_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB78_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB78_4
	.p2align	4, , 16
.LBB78_3:                               # %_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB78_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB78_8
.LBB78_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB78_3
# %bb.5:                                #   in Loop: Header=BB78_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB78_3
.LBB78_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB78_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB78_7
.LBB78_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB78_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB78_12
.LBB78_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB78_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB78_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI78_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI78_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB78_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end78:
	.size	_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc, .Lfunc_end78-_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
.LCPI79_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc: # @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB79_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB79_4
.LBB79_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB79_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB79_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI79_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI79_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB79_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end79:
	.size	_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc, .Lfunc_end79-_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
.LCPI80_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc: # @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB80_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB80_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB80_4
	.p2align	4, , 16
.LBB80_3:                               # %_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB80_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB80_8
.LBB80_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB80_3
# %bb.5:                                #   in Loop: Header=BB80_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB80_3
.LBB80_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB80_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB80_7
.LBB80_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB80_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB80_12
.LBB80_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB80_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB80_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI80_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI80_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB80_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end80:
	.size	_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc, .Lfunc_end80-_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
.LCPI81_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc: # @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB81_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB81_4
.LBB81_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB81_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB81_4:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI81_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI81_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB81_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end81:
	.size	_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc, .Lfunc_end81-_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
.LCPI82_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc: # @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB82_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB82_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 14, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB82_4
	.p2align	4, , 16
.LBB82_3:                               # %_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB82_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB82_8
.LBB82_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB82_3
# %bb.5:                                #   in Loop: Header=BB82_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB82_3
.LBB82_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB82_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB82_7
.LBB82_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB82_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB82_12
.LBB82_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB82_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB82_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI82_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI82_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB82_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end82:
	.size	_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc, .Lfunc_end82-_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
.LCPI83_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc: # @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB83_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB83_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 5
	sub.d	$a0, $a0, $s0
	bstrpick.d	$s5, $a0, 15, 0
	lu12i.w	$a0, 12
	ori	$s6, $a0, 2240
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB83_4
	.p2align	4, , 16
.LBB83_3:                               # %_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB83_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB83_8
.LBB83_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB83_3
# %bb.5:                                #   in Loop: Header=BB83_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB83_3
.LBB83_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB83_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB83_7
.LBB83_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB83_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB83_12
.LBB83_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB83_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB83_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI83_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI83_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB83_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end83:
	.size	_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc, .Lfunc_end83-_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
.LCPI84_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc: # @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB84_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB84_6
# %bb.2:                                # %.preheader.us.preheader
	ori	$a0, $zero, 29
	mul.d	$a0, $s0, $a0
	bstrpick.d	$s5, $a0, 15, 0
	lu12i.w	$a0, 8
	ori	$s6, $a0, 2624
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB84_4
	.p2align	4, , 16
.LBB84_3:                               # %_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_.exit.us
                                        #   in Loop: Header=BB84_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB84_8
.LBB84_4:                               # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB84_3
# %bb.5:                                #   in Loop: Header=BB84_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB84_3
.LBB84_6:                               # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB84_7:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB84_7
.LBB84_8:                               # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB84_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB84_12
.LBB84_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB84_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB84_12:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI84_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI84_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB84_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end84:
	.size	_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc, .Lfunc_end84-_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
.LCPI85_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs19custom_constant_addIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc: # @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB85_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB85_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s2, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	b	.LBB85_4
	.p2align	4, , 16
.LBB85_3:                               # %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit.us
                                        #   in Loop: Header=BB85_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB85_23
.LBB85_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_9 Depth 2
                                        #     Child Loop BB85_13 Depth 2
                                        #     Child Loop BB85_16 Depth 2
	bltu	$a5, $s0, .LBB85_6
# %bb.5:                                #   in Loop: Header=BB85_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB85_15
	.p2align	4, , 16
.LBB85_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB85_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB85_8
# %bb.7:                                #   in Loop: Header=BB85_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB85_12
	.p2align	4, , 16
.LBB85_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB85_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB85_9:                               # %vector.body
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vaddi.hu	$vr0, $vr0, 10
	vaddi.hu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB85_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB85_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB85_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB85_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB85_15
.LBB85_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB85_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB85_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vaddi.hu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB85_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB85_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB85_17
.LBB85_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB85_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB85_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB85_16
.LBB85_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB85_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB85_3
# %bb.18:                               #   in Loop: Header=BB85_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB85_3
.LBB85_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 12
	ori	$s4, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB85_21
	.p2align	4, , 16
.LBB85_20:                              # %_Z17check_shifted_sumIs19custom_constant_addIsEEvT_.exit
                                        #   in Loop: Header=BB85_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB85_23
.LBB85_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB85_20
# %bb.22:                               #   in Loop: Header=BB85_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB85_20
.LBB85_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB85_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB85_27
.LBB85_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB85_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB85_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI85_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI85_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB85_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end85:
	.size	_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc, .Lfunc_end85-_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
.LCPI86_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc: # @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB86_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB86_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s2, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	b	.LBB86_4
	.p2align	4, , 16
.LBB86_3:                               # %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit.us
                                        #   in Loop: Header=BB86_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB86_23
.LBB86_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_9 Depth 2
                                        #     Child Loop BB86_13 Depth 2
                                        #     Child Loop BB86_16 Depth 2
	bltu	$a5, $s0, .LBB86_6
# %bb.5:                                #   in Loop: Header=BB86_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB86_15
	.p2align	4, , 16
.LBB86_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB86_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB86_8
# %bb.7:                                #   in Loop: Header=BB86_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB86_12
	.p2align	4, , 16
.LBB86_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB86_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB86_9:                               # %vector.body
                                        #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vaddi.hu	$vr0, $vr0, 10
	vaddi.hu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB86_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB86_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB86_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB86_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB86_15
.LBB86_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB86_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB86_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vaddi.hu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB86_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB86_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB86_17
.LBB86_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB86_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB86_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB86_16
.LBB86_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB86_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB86_3
# %bb.18:                               #   in Loop: Header=BB86_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB86_3
.LBB86_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 12
	ori	$s4, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB86_21
	.p2align	4, , 16
.LBB86_20:                              # %_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_.exit
                                        #   in Loop: Header=BB86_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB86_23
.LBB86_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB86_20
# %bb.22:                               #   in Loop: Header=BB86_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB86_20
.LBB86_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB86_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB86_27
.LBB86_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB86_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB86_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI86_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI86_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB86_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end86:
	.size	_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc, .Lfunc_end86-_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
.LCPI87_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs19custom_constant_subIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc: # @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB87_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB87_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s2, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB87_4
	.p2align	4, , 16
.LBB87_3:                               # %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit.us
                                        #   in Loop: Header=BB87_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB87_23
.LBB87_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_9 Depth 2
                                        #     Child Loop BB87_13 Depth 2
                                        #     Child Loop BB87_16 Depth 2
	bltu	$a5, $s0, .LBB87_6
# %bb.5:                                #   in Loop: Header=BB87_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB87_15
	.p2align	4, , 16
.LBB87_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB87_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB87_8
# %bb.7:                                #   in Loop: Header=BB87_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB87_12
	.p2align	4, , 16
.LBB87_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB87_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB87_9:                               # %vector.body
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB87_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB87_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB87_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB87_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB87_15
.LBB87_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB87_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB87_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vadd.h	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB87_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB87_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB87_17
.LBB87_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB87_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB87_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB87_16
.LBB87_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB87_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB87_3
# %bb.18:                               #   in Loop: Header=BB87_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB87_3
.LBB87_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s4, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB87_21
	.p2align	4, , 16
.LBB87_20:                              # %_Z17check_shifted_sumIs19custom_constant_subIsEEvT_.exit
                                        #   in Loop: Header=BB87_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB87_23
.LBB87_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB87_20
# %bb.22:                               #   in Loop: Header=BB87_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB87_20
.LBB87_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB87_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB87_27
.LBB87_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB87_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB87_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI87_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI87_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB87_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end87:
	.size	_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc, .Lfunc_end87-_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
.LCPI88_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc: # @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB88_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB88_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s2, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB88_4
	.p2align	4, , 16
.LBB88_3:                               # %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit.us
                                        #   in Loop: Header=BB88_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB88_23
.LBB88_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_9 Depth 2
                                        #     Child Loop BB88_13 Depth 2
                                        #     Child Loop BB88_16 Depth 2
	bltu	$a5, $s0, .LBB88_6
# %bb.5:                                #   in Loop: Header=BB88_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB88_15
	.p2align	4, , 16
.LBB88_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB88_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB88_8
# %bb.7:                                #   in Loop: Header=BB88_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB88_12
	.p2align	4, , 16
.LBB88_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB88_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB88_9:                               # %vector.body
                                        #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB88_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB88_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB88_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB88_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB88_15
.LBB88_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB88_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB88_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vadd.h	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB88_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB88_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB88_17
.LBB88_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB88_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB88_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB88_16
.LBB88_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB88_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB88_3
# %bb.18:                               #   in Loop: Header=BB88_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB88_3
.LBB88_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s4, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB88_21
	.p2align	4, , 16
.LBB88_20:                              # %_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_.exit
                                        #   in Loop: Header=BB88_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB88_23
.LBB88_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB88_20
# %bb.22:                               #   in Loop: Header=BB88_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB88_20
.LBB88_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB88_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB88_27
.LBB88_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB88_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB88_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI88_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI88_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB88_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end88:
	.size	_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc, .Lfunc_end88-_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
.LCPI89_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc,@function
_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc: # @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB89_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB89_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	ori	$s4, $zero, 120
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB89_4
	.p2align	4, , 16
.LBB89_3:                               # %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit.us
                                        #   in Loop: Header=BB89_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB89_23
.LBB89_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_9 Depth 2
                                        #     Child Loop BB89_13 Depth 2
                                        #     Child Loop BB89_16 Depth 2
	bltu	$a5, $s0, .LBB89_6
# %bb.5:                                #   in Loop: Header=BB89_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB89_15
	.p2align	4, , 16
.LBB89_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB89_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB89_8
# %bb.7:                                #   in Loop: Header=BB89_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB89_12
	.p2align	4, , 16
.LBB89_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB89_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB89_9:                               # %vector.body
                                        #   Parent Loop BB89_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr2, $vr4
	vmadd.h	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB89_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB89_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB89_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB89_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB89_15
.LBB89_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB89_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB89_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB89_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB89_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB89_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB89_17
.LBB89_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB89_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB89_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB89_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB89_16
.LBB89_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB89_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 9
	slli.d	$a2, $a2, 9
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB89_3
# %bb.18:                               #   in Loop: Header=BB89_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB89_3
.LBB89_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB89_21
	.p2align	4, , 16
.LBB89_20:                              # %_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_.exit
                                        #   in Loop: Header=BB89_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB89_23
.LBB89_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 9
	slli.d	$a0, $a0, 9
	beqz	$a0, .LBB89_20
# %bb.22:                               #   in Loop: Header=BB89_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB89_20
.LBB89_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB89_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB89_27
.LBB89_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB89_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB89_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI89_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI89_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB89_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end89:
	.size	_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc, .Lfunc_end89-_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
.LCPI90_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc,@function
_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc: # @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB90_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB90_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	ori	$s4, $zero, 120
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB90_4
	.p2align	4, , 16
.LBB90_3:                               # %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit.us
                                        #   in Loop: Header=BB90_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB90_23
.LBB90_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_9 Depth 2
                                        #     Child Loop BB90_13 Depth 2
                                        #     Child Loop BB90_16 Depth 2
	bltu	$a5, $s0, .LBB90_6
# %bb.5:                                #   in Loop: Header=BB90_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB90_15
	.p2align	4, , 16
.LBB90_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB90_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB90_8
# %bb.7:                                #   in Loop: Header=BB90_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB90_12
	.p2align	4, , 16
.LBB90_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB90_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB90_9:                               # %vector.body
                                        #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr2, $vr4
	vmadd.h	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB90_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB90_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB90_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB90_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB90_15
.LBB90_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB90_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB90_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB90_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB90_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB90_17
.LBB90_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB90_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB90_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB90_16
.LBB90_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB90_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 9
	slli.d	$a2, $a2, 9
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB90_3
# %bb.18:                               #   in Loop: Header=BB90_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB90_3
.LBB90_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB90_21
	.p2align	4, , 16
.LBB90_20:                              # %_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_.exit
                                        #   in Loop: Header=BB90_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB90_23
.LBB90_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 9
	slli.d	$a0, $a0, 9
	beqz	$a0, .LBB90_20
# %bb.22:                               #   in Loop: Header=BB90_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB90_20
.LBB90_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB90_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB90_27
.LBB90_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB90_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB90_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI90_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI90_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB90_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end90:
	.size	_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc, .Lfunc_end90-_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
.LCPI91_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc,@function
_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc: # @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB91_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB91_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB91_4
	.p2align	4, , 16
.LBB91_3:                               # %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit.us
                                        #   in Loop: Header=BB91_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB91_23
.LBB91_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_9 Depth 2
                                        #     Child Loop BB91_13 Depth 2
                                        #     Child Loop BB91_16 Depth 2
	bltu	$a5, $s0, .LBB91_6
# %bb.5:                                #   in Loop: Header=BB91_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB91_15
	.p2align	4, , 16
.LBB91_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB91_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB91_8
# %bb.7:                                #   in Loop: Header=BB91_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB91_12
	.p2align	4, , 16
.LBB91_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB91_9:                               # %vector.body
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB91_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB91_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB91_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB91_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB91_15
.LBB91_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB91_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB91_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vadd.h	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB91_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB91_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB91_17
.LBB91_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB91_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB91_16
.LBB91_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB91_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB91_3
# %bb.18:                               #   in Loop: Header=BB91_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB91_3
.LBB91_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 5
	ori	$s4, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB91_21
	.p2align	4, , 16
.LBB91_20:                              # %_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_.exit
                                        #   in Loop: Header=BB91_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB91_23
.LBB91_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB91_20
# %bb.22:                               #   in Loop: Header=BB91_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB91_20
.LBB91_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB91_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB91_27
.LBB91_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB91_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB91_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI91_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI91_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB91_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end91:
	.size	_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc, .Lfunc_end91-_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
.LCPI92_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc,@function
_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc: # @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB92_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB92_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a6, $zero, 3
	lu12i.w	$a0, 6
	ori	$s4, $a0, 1639
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, 419430
	ori	$a0, $a0, 1639
	lu32i.d	$a0, 419430
	lu52i.d	$s3, $a0, 1638
	b	.LBB92_4
	.p2align	4, , 16
.LBB92_3:                               # %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit.us
                                        #   in Loop: Header=BB92_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB92_23
.LBB92_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_9 Depth 2
                                        #     Child Loop BB92_13 Depth 2
                                        #     Child Loop BB92_16 Depth 2
	bltu	$a6, $s0, .LBB92_6
# %bb.5:                                #   in Loop: Header=BB92_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB92_15
	.p2align	4, , 16
.LBB92_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB92_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB92_8
# %bb.7:                                #   in Loop: Header=BB92_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB92_12
	.p2align	4, , 16
.LBB92_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB92_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB92_9:                               # %vector.body
                                        #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.h	$vr4, $s4
	vmuh.h	$vr2, $vr2, $vr4
	vsrai.h	$vr2, $vr2, 1
	vsrli.h	$vr5, $vr2, 15
	vadd.h	$vr2, $vr2, $vr5
	vmuh.h	$vr3, $vr3, $vr4
	vsrai.h	$vr3, $vr3, 1
	vsrli.h	$vr4, $vr3, 15
	vadd.h	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB92_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB92_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB92_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB92_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB92_15
.LBB92_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB92_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB92_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.h	$a3, $vr1, 1
	ext.w.h	$a3, $a3
	mulh.d	$a3, $a3, $s3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vpickve2gr.h	$a4, $vr1, 0
	ext.w.h	$a4, $a4
	mulh.d	$a4, $a4, $s3
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 1
	add.d	$a4, $a4, $a5
	vinsgr2vr.h	$vr2, $a4, 0
	vinsgr2vr.h	$vr2, $a3, 1
	vpickve2gr.h	$a3, $vr1, 2
	ext.w.h	$a3, $a3
	mulh.d	$a3, $a3, $s3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.h	$vr2, $a3, 2
	vpickve2gr.h	$a3, $vr1, 3
	ext.w.h	$a3, $a3
	mulh.d	$a3, $a3, $s3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 1
	add.d	$a3, $a3, $a4
	vinsgr2vr.h	$vr2, $a3, 3
	vadd.h	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB92_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB92_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB92_17
.LBB92_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB92_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB92_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 17
	add.d	$a4, $a4, $a5
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB92_16
.LBB92_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB92_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a3, $a2, 63
	srli.d	$a2, $a2, 17
	add.d	$a2, $a2, $a3
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB92_3
# %bb.18:                               #   in Loop: Header=BB92_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a6, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB92_3
.LBB92_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 6
	ori	$s2, $a0, 1639
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB92_21
	.p2align	4, , 16
.LBB92_20:                              # %_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_.exit
                                        #   in Loop: Header=BB92_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB92_23
.LBB92_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	srli.d	$a2, $a0, 63
	srli.d	$a0, $a0, 17
	add.d	$a0, $a0, $a2
	mul.d	$a0, $a0, $s3
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB92_20
# %bb.22:                               #   in Loop: Header=BB92_21 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB92_20
.LBB92_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB92_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB92_27
.LBB92_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB92_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB92_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI92_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI92_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB92_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end92:
	.size	_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc, .Lfunc_end92-_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
.LCPI93_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc,@function
_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc: # @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 96                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB93_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB93_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a6, $zero, 3
	lu12i.w	$a0, -8
	ori	$s4, $a0, 2185
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, 8
	ori	$a0, $a0, 2185
	vreplgr2vr.h	$vr5, $a0
	lu12i.w	$a0, -489336
	ori	$a0, $a0, 2185
	lu32i.d	$a0, -489336
	lu52i.d	$s3, $a0, -1912
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB93_4
	.p2align	4, , 16
.LBB93_3:                               # %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit.us
                                        #   in Loop: Header=BB93_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB93_23
.LBB93_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_9 Depth 2
                                        #     Child Loop BB93_13 Depth 2
                                        #     Child Loop BB93_16 Depth 2
	bltu	$a6, $s0, .LBB93_6
# %bb.5:                                #   in Loop: Header=BB93_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB93_15
	.p2align	4, , 16
.LBB93_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB93_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB93_8
# %bb.7:                                #   in Loop: Header=BB93_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB93_12
	.p2align	4, , 16
.LBB93_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB93_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB93_9:                               # %vector.body
                                        #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.h	$vr4, $vr2, $vr5
	vadd.h	$vr2, $vr4, $vr2
	vsrai.h	$vr2, $vr2, 6
	vsrli.h	$vr4, $vr2, 15
	vadd.h	$vr2, $vr2, $vr4
	vmuh.h	$vr4, $vr3, $vr5
	vadd.h	$vr3, $vr4, $vr3
	vsrai.h	$vr3, $vr3, 6
	vsrli.h	$vr4, $vr3, 15
	vadd.h	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB93_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB93_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB93_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB93_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB93_15
.LBB93_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB93_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB93_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.h	$a3, $vr1, 1
	ext.w.h	$a3, $a3
	mulh.d	$a4, $a3, $s3
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vpickve2gr.h	$a4, $vr1, 0
	ext.w.h	$a4, $a4
	mulh.d	$a5, $a4, $s3
	add.d	$a4, $a5, $a4
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 6
	add.d	$a4, $a4, $a5
	vinsgr2vr.h	$vr2, $a4, 0
	vinsgr2vr.h	$vr2, $a3, 1
	vpickve2gr.h	$a3, $vr1, 2
	ext.w.h	$a3, $a3
	mulh.d	$a4, $a3, $s3
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.h	$vr2, $a3, 2
	vpickve2gr.h	$a3, $vr1, 3
	ext.w.h	$a3, $a3
	mulh.d	$a4, $a3, $s3
	add.d	$a3, $a4, $a3
	srli.d	$a4, $a3, 63
	srli.d	$a3, $a3, 6
	add.d	$a3, $a3, $a4
	vinsgr2vr.h	$vr2, $a3, 3
	vadd.h	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB93_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB93_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB93_17
.LBB93_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB93_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB93_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a5, $a4, $s4
	srli.d	$a5, $a5, 16
	add.d	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 15, 15
	ext.w.h	$a4, $a4
	srai.d	$a4, $a4, 6
	add.d	$a4, $a4, $a5
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB93_16
.LBB93_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB93_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a3, $a2, $s4
	srli.d	$a3, $a3, 16
	add.d	$a2, $a3, $a2
	bstrpick.d	$a3, $a2, 15, 15
	ext.w.h	$a2, $a2
	srli.d	$a2, $a2, 6
	add.d	$a2, $a2, $a3
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB93_3
# %bb.18:                               #   in Loop: Header=BB93_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	ori	$a6, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB93_3
.LBB93_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -8
	ori	$s2, $a0, 2185
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB93_21
	.p2align	4, , 16
.LBB93_20:                              # %_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_.exit
                                        #   in Loop: Header=BB93_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB93_23
.LBB93_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a2, $a0, $s2
	srli.d	$a2, $a2, 16
	add.d	$a0, $a2, $a0
	bstrpick.d	$a2, $a0, 15, 15
	ext.w.h	$a0, $a0
	srli.d	$a0, $a0, 6
	add.d	$a0, $a0, $a2
	mul.d	$a0, $a0, $s3
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB93_20
# %bb.22:                               #   in Loop: Header=BB93_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB93_20
.LBB93_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB93_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB93_27
.LBB93_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB93_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB93_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI93_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI93_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB93_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end93:
	.size	_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc, .Lfunc_end93-_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
.LCPI94_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc,@function
_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc: # @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB94_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB94_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s2, $a0, 3712
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	b	.LBB94_4
	.p2align	4, , 16
.LBB94_3:                               # %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit.us
                                        #   in Loop: Header=BB94_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB94_23
.LBB94_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_9 Depth 2
                                        #     Child Loop BB94_13 Depth 2
                                        #     Child Loop BB94_16 Depth 2
	bltu	$a5, $s0, .LBB94_6
# %bb.5:                                #   in Loop: Header=BB94_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB94_15
	.p2align	4, , 16
.LBB94_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB94_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB94_8
# %bb.7:                                #   in Loop: Header=BB94_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB94_12
	.p2align	4, , 16
.LBB94_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB94_9:                               # %vector.body
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vaddi.hu	$vr0, $vr0, 2
	vaddi.hu	$vr1, $vr1, 2
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB94_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB94_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB94_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB94_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB94_15
.LBB94_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB94_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB94_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vaddi.hu	$vr0, $vr0, 2
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB94_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB94_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB94_17
.LBB94_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB94_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB94_16
.LBB94_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB94_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB94_3
# %bb.18:                               #   in Loop: Header=BB94_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB94_3
.LBB94_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 12
	ori	$s4, $a0, 384
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB94_21
	.p2align	4, , 16
.LBB94_20:                              # %_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_.exit
                                        #   in Loop: Header=BB94_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB94_23
.LBB94_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB94_20
# %bb.22:                               #   in Loop: Header=BB94_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB94_20
.LBB94_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB94_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB94_27
.LBB94_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB94_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB94_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI94_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI94_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB94_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end94:
	.size	_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc, .Lfunc_end94-_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
.LCPI95_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc,@function
_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc: # @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB95_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB95_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB95_4
	.p2align	4, , 16
.LBB95_3:                               # %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit.us
                                        #   in Loop: Header=BB95_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB95_23
.LBB95_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_9 Depth 2
                                        #     Child Loop BB95_13 Depth 2
                                        #     Child Loop BB95_16 Depth 2
	bltu	$a5, $s0, .LBB95_6
# %bb.5:                                #   in Loop: Header=BB95_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB95_15
	.p2align	4, , 16
.LBB95_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB95_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB95_8
# %bb.7:                                #   in Loop: Header=BB95_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB95_12
	.p2align	4, , 16
.LBB95_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB95_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB95_9:                               # %vector.body
                                        #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB95_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB95_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB95_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB95_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB95_15
.LBB95_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB95_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB95_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB95_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB95_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB95_17
.LBB95_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB95_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB95_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB95_16
.LBB95_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB95_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB95_3
# %bb.18:                               #   in Loop: Header=BB95_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB95_3
.LBB95_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB95_21
	.p2align	4, , 16
.LBB95_20:                              # %_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_.exit
                                        #   in Loop: Header=BB95_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB95_23
.LBB95_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB95_20
# %bb.22:                               #   in Loop: Header=BB95_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB95_20
.LBB95_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB95_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB95_27
.LBB95_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB95_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB95_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI95_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI95_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB95_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end95:
	.size	_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc, .Lfunc_end95-_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
.LCPI96_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs19custom_constant_andIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc: # @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB96_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB96_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB96_4
	.p2align	4, , 16
.LBB96_3:                               # %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit.us
                                        #   in Loop: Header=BB96_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB96_23
.LBB96_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_9 Depth 2
                                        #     Child Loop BB96_13 Depth 2
                                        #     Child Loop BB96_16 Depth 2
	bltu	$a5, $s0, .LBB96_6
# %bb.5:                                #   in Loop: Header=BB96_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB96_15
	.p2align	4, , 16
.LBB96_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB96_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB96_8
# %bb.7:                                #   in Loop: Header=BB96_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB96_12
	.p2align	4, , 16
.LBB96_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB96_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB96_9:                               # %vector.body
                                        #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB96_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB96_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB96_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB96_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB96_15
.LBB96_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB96_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB96_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB96_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB96_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB96_17
.LBB96_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB96_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB96_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB96_16
.LBB96_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB96_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 10
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 7
	slli.d	$a2, $a2, 7
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB96_3
# %bb.18:                               #   in Loop: Header=BB96_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB96_3
.LBB96_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB96_21
	.p2align	4, , 16
.LBB96_20:                              # %_Z17check_shifted_sumIs19custom_constant_andIsEEvT_.exit
                                        #   in Loop: Header=BB96_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB96_23
.LBB96_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 10
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 7
	slli.d	$a0, $a0, 7
	beqz	$a0, .LBB96_20
# %bb.22:                               #   in Loop: Header=BB96_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB96_20
.LBB96_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB96_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB96_27
.LBB96_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB96_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB96_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI96_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI96_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB96_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end96:
	.size	_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc, .Lfunc_end96-_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
.LCPI97_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc: # @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB97_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB97_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 14
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB97_4
	.p2align	4, , 16
.LBB97_3:                               # %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit.us
                                        #   in Loop: Header=BB97_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB97_23
.LBB97_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_9 Depth 2
                                        #     Child Loop BB97_13 Depth 2
                                        #     Child Loop BB97_16 Depth 2
	bltu	$a5, $s0, .LBB97_6
# %bb.5:                                #   in Loop: Header=BB97_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB97_15
	.p2align	4, , 16
.LBB97_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB97_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB97_8
# %bb.7:                                #   in Loop: Header=BB97_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB97_12
	.p2align	4, , 16
.LBB97_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB97_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB97_9:                               # %vector.body
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB97_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB97_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB97_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB97_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB97_15
.LBB97_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB97_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB97_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB97_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB97_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB97_17
.LBB97_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB97_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB97_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB97_16
.LBB97_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB97_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 14
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 7
	slli.d	$a2, $a2, 7
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB97_3
# %bb.18:                               #   in Loop: Header=BB97_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB97_3
.LBB97_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB97_21
	.p2align	4, , 16
.LBB97_20:                              # %_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_.exit
                                        #   in Loop: Header=BB97_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB97_23
.LBB97_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 14
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 7
	slli.d	$a0, $a0, 7
	beqz	$a0, .LBB97_20
# %bb.22:                               #   in Loop: Header=BB97_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB97_20
.LBB97_23:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB97_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB97_27
.LBB97_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB97_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB97_27:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI97_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI97_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB97_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end97:
	.size	_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc, .Lfunc_end97-_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
.LCPI98_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs18custom_constant_orIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc,@function
_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc: # @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB98_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB98_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB98_4
	.p2align	4, , 16
.LBB98_3:                               # %_Z17check_shifted_sumIs18custom_constant_orIsEEvT_.exit.us
                                        #   in Loop: Header=BB98_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB98_21
.LBB98_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_9 Depth 2
                                        #     Child Loop BB98_13 Depth 2
                                        #     Child Loop BB98_16 Depth 2
	bltu	$a5, $s0, .LBB98_6
# %bb.5:                                #   in Loop: Header=BB98_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB98_15
	.p2align	4, , 16
.LBB98_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB98_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB98_8
# %bb.7:                                #   in Loop: Header=BB98_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB98_12
	.p2align	4, , 16
.LBB98_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB98_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB98_9:                               # %vector.body
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB98_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB98_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB98_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB98_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB98_15
.LBB98_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB98_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB98_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB98_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB98_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB98_17
.LBB98_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB98_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB98_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB98_16
.LBB98_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB98_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 10
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB98_3
# %bb.18:                               #   in Loop: Header=BB98_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB98_3
.LBB98_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB98_20:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB98_20
.LBB98_21:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB98_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB98_25
.LBB98_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB98_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB98_25:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI98_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI98_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB98_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end98:
	.size	_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc, .Lfunc_end98-_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
.LCPI99_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc,@function
_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc: # @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB99_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB99_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 15
	ori	$s2, $a0, 192
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 63
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB99_4
	.p2align	4, , 16
.LBB99_3:                               # %_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_.exit.us
                                        #   in Loop: Header=BB99_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB99_21
.LBB99_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_9 Depth 2
                                        #     Child Loop BB99_13 Depth 2
                                        #     Child Loop BB99_16 Depth 2
	bltu	$a5, $s0, .LBB99_6
# %bb.5:                                #   in Loop: Header=BB99_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB99_15
	.p2align	4, , 16
.LBB99_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB99_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB99_8
# %bb.7:                                #   in Loop: Header=BB99_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB99_12
	.p2align	4, , 16
.LBB99_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB99_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB99_9:                               # %vector.body
                                        #   Parent Loop BB99_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB99_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB99_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB99_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB99_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB99_15
.LBB99_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB99_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB99_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB99_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB99_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB99_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB99_17
.LBB99_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB99_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB99_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB99_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB99_16
.LBB99_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB99_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 63
	mul.d	$a2, $a2, $s8
	and	$a2, $a2, $s2
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB99_3
# %bb.18:                               #   in Loop: Header=BB99_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB99_3
.LBB99_19:                              # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB99_20:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB99_20
.LBB99_21:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB99_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB99_25
.LBB99_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB99_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB99_25:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI99_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI99_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB99_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end99:
	.size	_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc, .Lfunc_end99-_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
.LCPI100_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc: # @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB100_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB100_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB100_4
	.p2align	4, , 16
.LBB100_3:                              # %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit.us
                                        #   in Loop: Header=BB100_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB100_23
.LBB100_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_9 Depth 2
                                        #     Child Loop BB100_13 Depth 2
                                        #     Child Loop BB100_16 Depth 2
	bltu	$a5, $s0, .LBB100_6
# %bb.5:                                #   in Loop: Header=BB100_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB100_15
	.p2align	4, , 16
.LBB100_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB100_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB100_8
# %bb.7:                                #   in Loop: Header=BB100_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB100_12
	.p2align	4, , 16
.LBB100_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB100_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB100_9:                              # %vector.body
                                        #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB100_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB100_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB100_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB100_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB100_15
.LBB100_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB100_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB100_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB100_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB100_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB100_17
.LBB100_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB100_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB100_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB100_16
.LBB100_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB100_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 10
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB100_3
# %bb.18:                               #   in Loop: Header=BB100_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB100_3
.LBB100_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB100_21
	.p2align	4, , 16
.LBB100_20:                             # %_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_.exit
                                        #   in Loop: Header=BB100_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB100_23
.LBB100_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xori	$a0, $a0, 10
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB100_20
# %bb.22:                               #   in Loop: Header=BB100_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB100_20
.LBB100_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB100_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB100_27
.LBB100_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB100_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB100_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI100_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI100_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB100_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end100:
	.size	_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc, .Lfunc_end100-_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
.LCPI101_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc: # @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB101_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB101_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 49
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB101_4
	.p2align	4, , 16
.LBB101_3:                              # %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit.us
                                        #   in Loop: Header=BB101_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB101_23
.LBB101_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_9 Depth 2
                                        #     Child Loop BB101_13 Depth 2
                                        #     Child Loop BB101_16 Depth 2
	bltu	$a5, $s0, .LBB101_6
# %bb.5:                                #   in Loop: Header=BB101_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB101_15
	.p2align	4, , 16
.LBB101_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB101_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB101_8
# %bb.7:                                #   in Loop: Header=BB101_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB101_12
	.p2align	4, , 16
.LBB101_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB101_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB101_9:                              # %vector.body
                                        #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB101_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB101_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB101_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB101_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB101_15
.LBB101_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB101_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB101_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB101_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB101_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB101_17
.LBB101_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB101_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB101_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB101_16
.LBB101_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB101_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 49
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB101_3
# %bb.18:                               #   in Loop: Header=BB101_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB101_3
.LBB101_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB101_21
	.p2align	4, , 16
.LBB101_20:                             # %_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_.exit
                                        #   in Loop: Header=BB101_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB101_23
.LBB101_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xori	$a0, $a0, 49
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB101_20
# %bb.22:                               #   in Loop: Header=BB101_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB101_20
.LBB101_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB101_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB101_27
.LBB101_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB101_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB101_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI101_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI101_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB101_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end101:
	.size	_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc, .Lfunc_end101-_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt10custom_twoItEEvPT_iPKc
.LCPI102_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt10custom_twoItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt10custom_twoItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt10custom_twoItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt10custom_twoItEEvPT_iPKc,@function
_Z13test_constantIt10custom_twoItEEvPT_iPKc: # @_Z13test_constantIt10custom_twoItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB102_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB102_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 14, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB102_4
	.p2align	4, , 16
.LBB102_3:                              # %_Z17check_shifted_sumIt10custom_twoItEEvT_.exit.us
                                        #   in Loop: Header=BB102_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB102_8
.LBB102_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB102_3
# %bb.5:                                #   in Loop: Header=BB102_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB102_3
.LBB102_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB102_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB102_7
.LBB102_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB102_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB102_12
.LBB102_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB102_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB102_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI102_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI102_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB102_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end102:
	.size	_Z13test_constantIt10custom_twoItEEvPT_iPKc, .Lfunc_end102-_Z13test_constantIt10custom_twoItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
.LCPI103_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt20custom_add_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc: # @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB103_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB103_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB103_4
	.p2align	4, , 16
.LBB103_3:                              # %_Z17check_shifted_sumIt20custom_add_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB103_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB103_8
.LBB103_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB103_3
# %bb.5:                                #   in Loop: Header=BB103_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB103_3
.LBB103_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB103_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB103_7
.LBB103_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB103_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB103_12
.LBB103_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB103_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB103_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI103_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI103_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB103_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end103:
	.size	_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc, .Lfunc_end103-_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
.LCPI104_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc: # @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB104_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB104_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB104_4
	.p2align	4, , 16
.LBB104_3:                              # %_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB104_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB104_8
.LBB104_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB104_3
# %bb.5:                                #   in Loop: Header=BB104_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB104_3
.LBB104_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB104_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB104_7
.LBB104_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB104_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB104_12
.LBB104_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB104_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB104_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI104_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI104_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB104_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end104:
	.size	_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc, .Lfunc_end104-_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
.LCPI105_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc,@function
_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc: # @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB105_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB105_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 2
	alsl.d	$a0, $s0, $a0, 1
	bstrpick.d	$s5, $a0, 15, 0
	lu12i.w	$a0, 11
	ori	$s6, $a0, 2944
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB105_4
	.p2align	4, , 16
.LBB105_3:                              # %_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB105_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB105_8
.LBB105_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB105_3
# %bb.5:                                #   in Loop: Header=BB105_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB105_3
.LBB105_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB105_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB105_7
.LBB105_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB105_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB105_12
.LBB105_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB105_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB105_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI105_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI105_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB105_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end105:
	.size	_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc, .Lfunc_end105-_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
.LCPI106_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc,@function
_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc: # @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB106_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB106_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 14, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB106_4
	.p2align	4, , 16
.LBB106_3:                              # %_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB106_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB106_8
.LBB106_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB106_3
# %bb.5:                                #   in Loop: Header=BB106_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB106_3
.LBB106_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB106_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB106_7
.LBB106_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB106_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB106_12
.LBB106_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB106_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB106_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI106_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI106_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB106_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end106:
	.size	_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc, .Lfunc_end106-_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
.LCPI107_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc: # @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB107_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB107_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB107_4
	.p2align	4, , 16
.LBB107_3:                              # %_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB107_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB107_8
.LBB107_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB107_3
# %bb.5:                                #   in Loop: Header=BB107_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB107_3
.LBB107_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB107_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB107_7
.LBB107_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB107_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB107_12
.LBB107_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB107_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB107_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI107_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI107_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB107_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end107:
	.size	_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc, .Lfunc_end107-_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
.LCPI108_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc: # @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB108_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB108_4
.LBB108_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB108_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB108_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI108_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI108_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB108_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end108:
	.size	_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc, .Lfunc_end108-_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
.LCPI109_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc: # @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB109_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB109_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB109_4
	.p2align	4, , 16
.LBB109_3:                              # %_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB109_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB109_8
.LBB109_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB109_3
# %bb.5:                                #   in Loop: Header=BB109_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB109_3
.LBB109_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB109_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB109_7
.LBB109_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB109_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB109_12
.LBB109_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB109_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB109_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI109_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI109_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB109_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end109:
	.size	_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc, .Lfunc_end109-_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
.LCPI110_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc,@function
_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc: # @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB110_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB110_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB110_4
	.p2align	4, , 16
.LBB110_3:                              # %_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB110_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB110_8
.LBB110_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB110_3
# %bb.5:                                #   in Loop: Header=BB110_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB110_3
.LBB110_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB110_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB110_7
.LBB110_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB110_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB110_12
.LBB110_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB110_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB110_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI110_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI110_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB110_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end110:
	.size	_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc, .Lfunc_end110-_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
.LCPI111_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc,@function
_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc: # @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB111_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB111_4
.LBB111_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB111_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB111_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI111_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI111_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB111_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end111:
	.size	_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc, .Lfunc_end111-_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
.LCPI112_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc: # @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB112_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB112_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 15, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB112_4
	.p2align	4, , 16
.LBB112_3:                              # %_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB112_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB112_8
.LBB112_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB112_3
# %bb.5:                                #   in Loop: Header=BB112_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB112_3
.LBB112_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB112_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB112_7
.LBB112_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB112_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB112_12
.LBB112_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB112_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB112_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI112_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI112_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB112_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end112:
	.size	_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc, .Lfunc_end112-_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
.LCPI113_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc: # @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB113_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB113_4
.LBB113_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB113_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB113_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI113_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI113_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB113_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end113:
	.size	_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc, .Lfunc_end113-_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
.LCPI114_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt20custom_and_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc: # @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB114_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB114_6
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$s5, $s0, 14, 0
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB114_4
	.p2align	4, , 16
.LBB114_3:                              # %_Z17check_shifted_sumIt20custom_and_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB114_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB114_8
.LBB114_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB114_3
# %bb.5:                                #   in Loop: Header=BB114_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB114_3
.LBB114_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB114_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB114_7
.LBB114_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB114_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB114_12
.LBB114_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB114_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB114_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI114_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI114_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB114_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end114:
	.size	_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc, .Lfunc_end114-_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
.LCPI115_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt19custom_or_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc,@function
_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc: # @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB115_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB115_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 5
	sub.d	$a0, $a0, $s0
	bstrpick.d	$s5, $a0, 15, 0
	lu12i.w	$a0, 12
	ori	$s6, $a0, 2240
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB115_4
	.p2align	4, , 16
.LBB115_3:                              # %_Z17check_shifted_sumIt19custom_or_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB115_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB115_8
.LBB115_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB115_3
# %bb.5:                                #   in Loop: Header=BB115_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB115_3
.LBB115_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB115_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB115_7
.LBB115_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB115_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB115_12
.LBB115_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB115_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB115_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI115_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI115_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB115_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end115:
	.size	_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc, .Lfunc_end115-_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
.LCPI116_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc: # @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB116_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB116_6
# %bb.2:                                # %.preheader.us.preheader
	ori	$a0, $zero, 29
	mul.d	$a0, $s0, $a0
	bstrpick.d	$s5, $a0, 15, 0
	lu12i.w	$a0, 8
	ori	$s6, $a0, 2624
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB116_4
	.p2align	4, , 16
.LBB116_3:                              # %_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_.exit.us
                                        #   in Loop: Header=BB116_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB116_8
.LBB116_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB116_3
# %bb.5:                                #   in Loop: Header=BB116_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB116_3
.LBB116_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB116_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB116_7
.LBB116_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB116_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB116_12
.LBB116_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB116_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB116_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI116_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI116_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB116_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end116:
	.size	_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc, .Lfunc_end116-_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt19custom_constant_addItEEvPT_iPKc
.LCPI117_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt19custom_constant_addItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_addItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_addItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt19custom_constant_addItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_addItEEvPT_iPKc: # @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB117_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB117_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s2, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	b	.LBB117_4
	.p2align	4, , 16
.LBB117_3:                              # %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit.us
                                        #   in Loop: Header=BB117_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB117_23
.LBB117_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_9 Depth 2
                                        #     Child Loop BB117_13 Depth 2
                                        #     Child Loop BB117_16 Depth 2
	bltu	$a5, $s0, .LBB117_6
# %bb.5:                                #   in Loop: Header=BB117_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB117_15
	.p2align	4, , 16
.LBB117_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB117_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB117_8
# %bb.7:                                #   in Loop: Header=BB117_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB117_12
	.p2align	4, , 16
.LBB117_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB117_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB117_9:                              # %vector.body
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vaddi.hu	$vr0, $vr0, 10
	vaddi.hu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB117_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB117_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB117_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB117_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB117_15
.LBB117_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB117_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB117_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vaddi.hu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB117_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB117_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB117_17
.LBB117_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB117_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB117_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB117_16
.LBB117_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB117_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB117_3
# %bb.18:                               #   in Loop: Header=BB117_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB117_3
.LBB117_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 12
	ori	$s4, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB117_21
	.p2align	4, , 16
.LBB117_20:                             # %_Z17check_shifted_sumIt19custom_constant_addItEEvT_.exit
                                        #   in Loop: Header=BB117_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB117_23
.LBB117_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB117_20
# %bb.22:                               #   in Loop: Header=BB117_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB117_20
.LBB117_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB117_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB117_27
.LBB117_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB117_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB117_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI117_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI117_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB117_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end117:
	.size	_Z13test_constantIt19custom_constant_addItEEvPT_iPKc, .Lfunc_end117-_Z13test_constantIt19custom_constant_addItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
.LCPI118_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc: # @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB118_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB118_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s2, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	b	.LBB118_4
	.p2align	4, , 16
.LBB118_3:                              # %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit.us
                                        #   in Loop: Header=BB118_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB118_23
.LBB118_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_9 Depth 2
                                        #     Child Loop BB118_13 Depth 2
                                        #     Child Loop BB118_16 Depth 2
	bltu	$a5, $s0, .LBB118_6
# %bb.5:                                #   in Loop: Header=BB118_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB118_15
	.p2align	4, , 16
.LBB118_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB118_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB118_8
# %bb.7:                                #   in Loop: Header=BB118_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB118_12
	.p2align	4, , 16
.LBB118_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB118_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB118_9:                              # %vector.body
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vaddi.hu	$vr0, $vr0, 10
	vaddi.hu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB118_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB118_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB118_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB118_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB118_15
.LBB118_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB118_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB118_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vaddi.hu	$vr0, $vr0, 10
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB118_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB118_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB118_17
.LBB118_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB118_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB118_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB118_16
.LBB118_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB118_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB118_3
# %bb.18:                               #   in Loop: Header=BB118_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB118_3
.LBB118_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 12
	ori	$s4, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB118_21
	.p2align	4, , 16
.LBB118_20:                             # %_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_.exit
                                        #   in Loop: Header=BB118_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB118_23
.LBB118_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB118_20
# %bb.22:                               #   in Loop: Header=BB118_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB118_20
.LBB118_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB118_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB118_27
.LBB118_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB118_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB118_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI118_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI118_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB118_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end118:
	.size	_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc, .Lfunc_end118-_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt19custom_constant_subItEEvPT_iPKc
.LCPI119_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt19custom_constant_subItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_subItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_subItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt19custom_constant_subItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_subItEEvPT_iPKc: # @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB119_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB119_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s2, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB119_4
	.p2align	4, , 16
.LBB119_3:                              # %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit.us
                                        #   in Loop: Header=BB119_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB119_23
.LBB119_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_9 Depth 2
                                        #     Child Loop BB119_13 Depth 2
                                        #     Child Loop BB119_16 Depth 2
	bltu	$a5, $s0, .LBB119_6
# %bb.5:                                #   in Loop: Header=BB119_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB119_15
	.p2align	4, , 16
.LBB119_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB119_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB119_8
# %bb.7:                                #   in Loop: Header=BB119_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB119_12
	.p2align	4, , 16
.LBB119_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB119_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB119_9:                              # %vector.body
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB119_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB119_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB119_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB119_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB119_15
.LBB119_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB119_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB119_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vadd.h	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB119_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB119_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB119_17
.LBB119_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB119_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB119_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB119_16
.LBB119_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB119_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB119_3
# %bb.18:                               #   in Loop: Header=BB119_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB119_3
.LBB119_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s4, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB119_21
	.p2align	4, , 16
.LBB119_20:                             # %_Z17check_shifted_sumIt19custom_constant_subItEEvT_.exit
                                        #   in Loop: Header=BB119_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB119_23
.LBB119_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB119_20
# %bb.22:                               #   in Loop: Header=BB119_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB119_20
.LBB119_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB119_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB119_27
.LBB119_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB119_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB119_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI119_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI119_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB119_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end119:
	.size	_Z13test_constantIt19custom_constant_subItEEvPT_iPKc, .Lfunc_end119-_Z13test_constantIt19custom_constant_subItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
.LCPI120_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc: # @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB120_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB120_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s2, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, -10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB120_4
	.p2align	4, , 16
.LBB120_3:                              # %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit.us
                                        #   in Loop: Header=BB120_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB120_23
.LBB120_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_9 Depth 2
                                        #     Child Loop BB120_13 Depth 2
                                        #     Child Loop BB120_16 Depth 2
	bltu	$a5, $s0, .LBB120_6
# %bb.5:                                #   in Loop: Header=BB120_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB120_15
	.p2align	4, , 16
.LBB120_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB120_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB120_8
# %bb.7:                                #   in Loop: Header=BB120_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB120_12
	.p2align	4, , 16
.LBB120_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB120_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB120_9:                              # %vector.body
                                        #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB120_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB120_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB120_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB120_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB120_15
.LBB120_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB120_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB120_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vadd.h	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB120_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB120_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB120_17
.LBB120_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB120_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB120_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB120_16
.LBB120_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB120_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB120_3
# %bb.18:                               #   in Loop: Header=BB120_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB120_3
.LBB120_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s4, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB120_21
	.p2align	4, , 16
.LBB120_20:                             # %_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_.exit
                                        #   in Loop: Header=BB120_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB120_23
.LBB120_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB120_20
# %bb.22:                               #   in Loop: Header=BB120_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB120_20
.LBB120_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB120_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB120_27
.LBB120_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB120_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB120_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI120_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI120_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB120_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end120:
	.size	_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc, .Lfunc_end120-_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
.LCPI121_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc,@function
_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc: # @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB121_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB121_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	ori	$s4, $zero, 120
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB121_4
	.p2align	4, , 16
.LBB121_3:                              # %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit.us
                                        #   in Loop: Header=BB121_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB121_23
.LBB121_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_9 Depth 2
                                        #     Child Loop BB121_13 Depth 2
                                        #     Child Loop BB121_16 Depth 2
	bltu	$a5, $s0, .LBB121_6
# %bb.5:                                #   in Loop: Header=BB121_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB121_15
	.p2align	4, , 16
.LBB121_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB121_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB121_8
# %bb.7:                                #   in Loop: Header=BB121_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB121_12
	.p2align	4, , 16
.LBB121_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB121_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB121_9:                              # %vector.body
                                        #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr2, $vr4
	vmadd.h	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB121_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB121_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB121_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB121_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB121_15
.LBB121_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB121_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB121_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB121_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB121_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB121_17
.LBB121_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB121_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB121_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB121_16
.LBB121_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB121_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 9
	slli.d	$a2, $a2, 9
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB121_3
# %bb.18:                               #   in Loop: Header=BB121_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB121_3
.LBB121_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB121_21
	.p2align	4, , 16
.LBB121_20:                             # %_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_.exit
                                        #   in Loop: Header=BB121_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB121_23
.LBB121_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 9
	slli.d	$a0, $a0, 9
	beqz	$a0, .LBB121_20
# %bb.22:                               #   in Loop: Header=BB121_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB121_20
.LBB121_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB121_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB121_27
.LBB121_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB121_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB121_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI121_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI121_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB121_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end121:
	.size	_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc, .Lfunc_end121-_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
.LCPI122_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc,@function
_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc: # @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB122_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB122_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	ori	$s4, $zero, 120
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB122_4
	.p2align	4, , 16
.LBB122_3:                              # %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit.us
                                        #   in Loop: Header=BB122_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB122_23
.LBB122_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_9 Depth 2
                                        #     Child Loop BB122_13 Depth 2
                                        #     Child Loop BB122_16 Depth 2
	bltu	$a5, $s0, .LBB122_6
# %bb.5:                                #   in Loop: Header=BB122_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB122_15
	.p2align	4, , 16
.LBB122_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB122_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB122_8
# %bb.7:                                #   in Loop: Header=BB122_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB122_12
	.p2align	4, , 16
.LBB122_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB122_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB122_9:                              # %vector.body
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr2, $vr4
	vmadd.h	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB122_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB122_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB122_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB122_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB122_15
.LBB122_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB122_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB122_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr1, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB122_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB122_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB122_17
.LBB122_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB122_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB122_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB122_16
.LBB122_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB122_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 9
	slli.d	$a2, $a2, 9
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB122_3
# %bb.18:                               #   in Loop: Header=BB122_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB122_3
.LBB122_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB122_21
	.p2align	4, , 16
.LBB122_20:                             # %_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_.exit
                                        #   in Loop: Header=BB122_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB122_23
.LBB122_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 9
	slli.d	$a0, $a0, 9
	beqz	$a0, .LBB122_20
# %bb.22:                               #   in Loop: Header=BB122_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB122_20
.LBB122_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB122_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB122_27
.LBB122_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB122_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB122_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI122_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI122_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB122_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end122:
	.size	_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc, .Lfunc_end122-_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
.LCPI123_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc,@function
_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc: # @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB123_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB123_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, -6
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 120
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB123_4
	.p2align	4, , 16
.LBB123_3:                              # %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit.us
                                        #   in Loop: Header=BB123_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB123_23
.LBB123_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_9 Depth 2
                                        #     Child Loop BB123_13 Depth 2
                                        #     Child Loop BB123_16 Depth 2
	bltu	$a5, $s0, .LBB123_6
# %bb.5:                                #   in Loop: Header=BB123_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB123_15
	.p2align	4, , 16
.LBB123_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB123_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB123_8
# %bb.7:                                #   in Loop: Header=BB123_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB123_12
	.p2align	4, , 16
.LBB123_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB123_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB123_9:                              # %vector.body
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB123_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB123_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB123_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB123_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB123_15
.LBB123_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB123_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB123_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vadd.h	$vr0, $vr0, $vr4
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB123_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB123_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB123_17
.LBB123_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB123_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB123_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB123_16
.LBB123_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB123_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB123_3
# %bb.18:                               #   in Loop: Header=BB123_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB123_3
.LBB123_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 5
	ori	$s4, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB123_21
	.p2align	4, , 16
.LBB123_20:                             # %_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_.exit
                                        #   in Loop: Header=BB123_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB123_23
.LBB123_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB123_20
# %bb.22:                               #   in Loop: Header=BB123_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB123_20
.LBB123_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB123_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB123_27
.LBB123_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB123_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB123_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI123_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI123_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB123_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end123:
	.size	_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc, .Lfunc_end123-_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
.LCPI124_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt22custom_constant_divideItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc,@function
_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc: # @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB124_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB124_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	lu12i.w	$a0, 12
	ori	$s4, $a0, 3277
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, 209715
	ori	$a0, $a0, 820
	lu32i.d	$a0, 209715
	lu52i.d	$s3, $a0, 819
	b	.LBB124_4
	.p2align	4, , 16
.LBB124_3:                              # %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit.us
                                        #   in Loop: Header=BB124_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB124_23
.LBB124_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_9 Depth 2
                                        #     Child Loop BB124_13 Depth 2
                                        #     Child Loop BB124_16 Depth 2
	bltu	$a5, $s0, .LBB124_6
# %bb.5:                                #   in Loop: Header=BB124_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB124_15
	.p2align	4, , 16
.LBB124_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB124_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB124_8
# %bb.7:                                #   in Loop: Header=BB124_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB124_12
	.p2align	4, , 16
.LBB124_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB124_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB124_9:                              # %vector.body
                                        #   Parent Loop BB124_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.h	$vr4, $s4
	vmuh.hu	$vr2, $vr2, $vr4
	vsrli.h	$vr2, $vr2, 2
	vmuh.hu	$vr3, $vr3, $vr4
	vsrli.h	$vr3, $vr3, 2
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB124_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB124_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB124_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB124_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB124_15
.LBB124_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB124_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB124_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB124_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.h	$a3, $vr1, 1
	bstrpick.d	$a3, $a3, 15, 0
	mulh.du	$a3, $a3, $s3
	vpickve2gr.h	$a4, $vr1, 0
	bstrpick.d	$a4, $a4, 15, 0
	mulh.du	$a4, $a4, $s3
	vinsgr2vr.h	$vr2, $a4, 0
	vinsgr2vr.h	$vr2, $a3, 1
	vpickve2gr.h	$a3, $vr1, 2
	bstrpick.d	$a3, $a3, 15, 0
	mulh.du	$a3, $a3, $s3
	vinsgr2vr.h	$vr2, $a3, 2
	vpickve2gr.h	$a3, $vr1, 3
	bstrpick.d	$a3, $a3, 15, 0
	mulh.du	$a3, $a3, $s3
	vinsgr2vr.h	$vr2, $a3, 3
	vadd.h	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB124_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB124_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB124_17
.LBB124_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB124_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB124_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB124_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a4, $a4, 18
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB124_16
.LBB124_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB124_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a2, $a2, 18
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB124_3
# %bb.18:                               #   in Loop: Header=BB124_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB124_3
.LBB124_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 12
	ori	$s2, $a0, 3277
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB124_21
	.p2align	4, , 16
.LBB124_20:                             # %_Z17check_shifted_sumIt22custom_constant_divideItEEvT_.exit
                                        #   in Loop: Header=BB124_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB124_23
.LBB124_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	srli.d	$a0, $a0, 18
	mul.d	$a0, $a0, $s3
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB124_20
# %bb.22:                               #   in Loop: Header=BB124_21 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB124_20
.LBB124_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB124_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB124_27
.LBB124_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB124_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB124_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI124_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI124_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB124_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end124:
	.size	_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc, .Lfunc_end124-_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
.LCPI125_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc,@function
_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc: # @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB125_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB125_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	lu12i.w	$a0, 8
	ori	$s4, $a0, 2185
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	lu12i.w	$a0, 139810
	ori	$a0, $a0, 547
	lu32i.d	$a0, 139810
	lu52i.d	$s3, $a0, 34
	b	.LBB125_4
	.p2align	4, , 16
.LBB125_3:                              # %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit.us
                                        #   in Loop: Header=BB125_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB125_23
.LBB125_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_9 Depth 2
                                        #     Child Loop BB125_13 Depth 2
                                        #     Child Loop BB125_16 Depth 2
	bltu	$a5, $s0, .LBB125_6
# %bb.5:                                #   in Loop: Header=BB125_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB125_15
	.p2align	4, , 16
.LBB125_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB125_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB125_8
# %bb.7:                                #   in Loop: Header=BB125_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB125_12
	.p2align	4, , 16
.LBB125_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB125_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB125_9:                              # %vector.body
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.h	$vr4, $s4
	vmuh.hu	$vr2, $vr2, $vr4
	vsrli.h	$vr2, $vr2, 6
	vmuh.hu	$vr3, $vr3, $vr4
	vsrli.h	$vr3, $vr3, 6
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB125_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB125_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB125_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB125_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB125_15
.LBB125_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB125_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB125_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vpickve2gr.h	$a3, $vr1, 1
	bstrpick.d	$a3, $a3, 15, 0
	mulh.du	$a3, $a3, $s3
	vpickve2gr.h	$a4, $vr1, 0
	bstrpick.d	$a4, $a4, 15, 0
	mulh.du	$a4, $a4, $s3
	vinsgr2vr.h	$vr2, $a4, 0
	vinsgr2vr.h	$vr2, $a3, 1
	vpickve2gr.h	$a3, $vr1, 2
	bstrpick.d	$a3, $a3, 15, 0
	mulh.du	$a3, $a3, $s3
	vinsgr2vr.h	$vr2, $a3, 2
	vpickve2gr.h	$a3, $vr1, 3
	bstrpick.d	$a3, $a3, 15, 0
	mulh.du	$a3, $a3, $s3
	vinsgr2vr.h	$vr2, $a3, 3
	vadd.h	$vr0, $vr2, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB125_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB125_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB125_17
.LBB125_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB125_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB125_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a4, $a4, 22
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB125_16
.LBB125_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB125_4 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a2, $a2, 22
	mul.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB125_3
# %bb.18:                               #   in Loop: Header=BB125_4 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB125_3
.LBB125_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 8
	ori	$s2, $a0, 2185
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB125_21
	.p2align	4, , 16
.LBB125_20:                             # %_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_.exit
                                        #   in Loop: Header=BB125_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB125_23
.LBB125_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	srli.d	$a0, $a0, 22
	mul.d	$a0, $a0, $s3
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB125_20
# %bb.22:                               #   in Loop: Header=BB125_21 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB125_20
.LBB125_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB125_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB125_27
.LBB125_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB125_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB125_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI125_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI125_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB125_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end125:
	.size	_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc, .Lfunc_end125-_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
.LCPI126_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc,@function
_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc: # @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB126_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB126_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 3
	ori	$s2, $a0, 3712
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	b	.LBB126_4
	.p2align	4, , 16
.LBB126_3:                              # %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit.us
                                        #   in Loop: Header=BB126_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB126_23
.LBB126_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_9 Depth 2
                                        #     Child Loop BB126_13 Depth 2
                                        #     Child Loop BB126_16 Depth 2
	bltu	$a5, $s0, .LBB126_6
# %bb.5:                                #   in Loop: Header=BB126_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB126_15
	.p2align	4, , 16
.LBB126_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB126_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB126_8
# %bb.7:                                #   in Loop: Header=BB126_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB126_12
	.p2align	4, , 16
.LBB126_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB126_4 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB126_9:                              # %vector.body
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	vaddi.hu	$vr0, $vr0, 2
	vaddi.hu	$vr1, $vr1, 2
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB126_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB126_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB126_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB126_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB126_15
.LBB126_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB126_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB126_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr1
	vaddi.hu	$vr0, $vr0, 2
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB126_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB126_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB126_17
.LBB126_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB126_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB126_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB126_16
.LBB126_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB126_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $s2
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB126_3
# %bb.18:                               #   in Loop: Header=BB126_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB126_3
.LBB126_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 12
	ori	$s4, $a0, 384
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB126_21
	.p2align	4, , 16
.LBB126_20:                             # %_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_.exit
                                        #   in Loop: Header=BB126_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB126_23
.LBB126_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$a0, $s4, .LBB126_20
# %bb.22:                               #   in Loop: Header=BB126_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB126_20
.LBB126_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB126_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB126_27
.LBB126_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB126_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB126_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 24                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI126_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI126_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB126_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end126:
	.size	_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc, .Lfunc_end126-_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
.LCPI127_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc,@function
_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc: # @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB127_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB127_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB127_4
	.p2align	4, , 16
.LBB127_3:                              # %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit.us
                                        #   in Loop: Header=BB127_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB127_23
.LBB127_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_9 Depth 2
                                        #     Child Loop BB127_13 Depth 2
                                        #     Child Loop BB127_16 Depth 2
	bltu	$a5, $s0, .LBB127_6
# %bb.5:                                #   in Loop: Header=BB127_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB127_15
	.p2align	4, , 16
.LBB127_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB127_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB127_8
# %bb.7:                                #   in Loop: Header=BB127_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB127_12
	.p2align	4, , 16
.LBB127_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB127_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB127_9:                              # %vector.body
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB127_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB127_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB127_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB127_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB127_15
.LBB127_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB127_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB127_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB127_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB127_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB127_17
.LBB127_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB127_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB127_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB127_16
.LBB127_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB127_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB127_3
# %bb.18:                               #   in Loop: Header=BB127_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB127_3
.LBB127_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB127_21
	.p2align	4, , 16
.LBB127_20:                             # %_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_.exit
                                        #   in Loop: Header=BB127_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB127_23
.LBB127_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB127_20
# %bb.22:                               #   in Loop: Header=BB127_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB127_20
.LBB127_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB127_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB127_27
.LBB127_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB127_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB127_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI127_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI127_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB127_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end127:
	.size	_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc, .Lfunc_end127-_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt19custom_constant_andItEEvPT_iPKc
.LCPI128_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt19custom_constant_andItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_andItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_andItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt19custom_constant_andItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_andItEEvPT_iPKc: # @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB128_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB128_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB128_4
	.p2align	4, , 16
.LBB128_3:                              # %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit.us
                                        #   in Loop: Header=BB128_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB128_23
.LBB128_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_9 Depth 2
                                        #     Child Loop BB128_13 Depth 2
                                        #     Child Loop BB128_16 Depth 2
	bltu	$a5, $s0, .LBB128_6
# %bb.5:                                #   in Loop: Header=BB128_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB128_15
	.p2align	4, , 16
.LBB128_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB128_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB128_8
# %bb.7:                                #   in Loop: Header=BB128_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB128_12
	.p2align	4, , 16
.LBB128_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB128_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB128_9:                              # %vector.body
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB128_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB128_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB128_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB128_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB128_15
.LBB128_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB128_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB128_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB128_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB128_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB128_17
.LBB128_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB128_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB128_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB128_16
.LBB128_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB128_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 10
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 7
	slli.d	$a2, $a2, 7
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB128_3
# %bb.18:                               #   in Loop: Header=BB128_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB128_3
.LBB128_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB128_21
	.p2align	4, , 16
.LBB128_20:                             # %_Z17check_shifted_sumIt19custom_constant_andItEEvT_.exit
                                        #   in Loop: Header=BB128_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB128_23
.LBB128_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 10
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 7
	slli.d	$a0, $a0, 7
	beqz	$a0, .LBB128_20
# %bb.22:                               #   in Loop: Header=BB128_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB128_20
.LBB128_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB128_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB128_27
.LBB128_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB128_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB128_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI128_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI128_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB128_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end128:
	.size	_Z13test_constantIt19custom_constant_andItEEvPT_iPKc, .Lfunc_end128-_Z13test_constantIt19custom_constant_andItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
.LCPI129_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc: # @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB129_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB129_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 14
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB129_4
	.p2align	4, , 16
.LBB129_3:                              # %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit.us
                                        #   in Loop: Header=BB129_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB129_23
.LBB129_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_9 Depth 2
                                        #     Child Loop BB129_13 Depth 2
                                        #     Child Loop BB129_16 Depth 2
	bltu	$a5, $s0, .LBB129_6
# %bb.5:                                #   in Loop: Header=BB129_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB129_15
	.p2align	4, , 16
.LBB129_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB129_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB129_8
# %bb.7:                                #   in Loop: Header=BB129_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB129_12
	.p2align	4, , 16
.LBB129_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB129_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB129_9:                              # %vector.body
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB129_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB129_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB129_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB129_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB129_15
.LBB129_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB129_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB129_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB129_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB129_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB129_17
.LBB129_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB129_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB129_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB129_16
.LBB129_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB129_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 14
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 7
	slli.d	$a2, $a2, 7
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB129_3
# %bb.18:                               #   in Loop: Header=BB129_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB129_3
.LBB129_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB129_21
	.p2align	4, , 16
.LBB129_20:                             # %_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_.exit
                                        #   in Loop: Header=BB129_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB129_23
.LBB129_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 14
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 7
	slli.d	$a0, $a0, 7
	beqz	$a0, .LBB129_20
# %bb.22:                               #   in Loop: Header=BB129_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB129_20
.LBB129_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB129_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB129_27
.LBB129_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB129_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB129_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI129_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI129_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB129_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end129:
	.size	_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc, .Lfunc_end129-_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt18custom_constant_orItEEvPT_iPKc
.LCPI130_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt18custom_constant_orItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt18custom_constant_orItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt18custom_constant_orItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt18custom_constant_orItEEvPT_iPKc,@function
_Z13test_constantIt18custom_constant_orItEEvPT_iPKc: # @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB130_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB130_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB130_4
	.p2align	4, , 16
.LBB130_3:                              # %_Z17check_shifted_sumIt18custom_constant_orItEEvT_.exit.us
                                        #   in Loop: Header=BB130_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB130_21
.LBB130_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_9 Depth 2
                                        #     Child Loop BB130_13 Depth 2
                                        #     Child Loop BB130_16 Depth 2
	bltu	$a5, $s0, .LBB130_6
# %bb.5:                                #   in Loop: Header=BB130_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB130_15
	.p2align	4, , 16
.LBB130_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB130_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB130_8
# %bb.7:                                #   in Loop: Header=BB130_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB130_12
	.p2align	4, , 16
.LBB130_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB130_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB130_9:                              # %vector.body
                                        #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB130_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB130_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB130_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB130_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB130_15
.LBB130_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB130_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB130_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB130_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB130_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB130_17
.LBB130_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB130_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB130_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB130_16
.LBB130_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB130_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 10
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB130_3
# %bb.18:                               #   in Loop: Header=BB130_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB130_3
.LBB130_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB130_20:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB130_20
.LBB130_21:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB130_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB130_25
.LBB130_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB130_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB130_25:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI130_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI130_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB130_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end130:
	.size	_Z13test_constantIt18custom_constant_orItEEvPT_iPKc, .Lfunc_end130-_Z13test_constantIt18custom_constant_orItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
.LCPI131_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc,@function
_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc: # @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB131_21
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB131_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	lu12i.w	$a0, 15
	ori	$s2, $a0, 192
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$a0, $a0, %pc_lo12(.L.str.299)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vrepli.h	$vr4, 63
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB131_4
	.p2align	4, , 16
.LBB131_3:                              # %_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_.exit.us
                                        #   in Loop: Header=BB131_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB131_21
.LBB131_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_9 Depth 2
                                        #     Child Loop BB131_13 Depth 2
                                        #     Child Loop BB131_16 Depth 2
	bltu	$a5, $s0, .LBB131_6
# %bb.5:                                #   in Loop: Header=BB131_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB131_15
	.p2align	4, , 16
.LBB131_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB131_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB131_8
# %bb.7:                                #   in Loop: Header=BB131_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB131_12
	.p2align	4, , 16
.LBB131_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB131_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB131_9:                              # %vector.body
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB131_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB131_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB131_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB131_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB131_15
.LBB131_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB131_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB131_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB131_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB131_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB131_17
.LBB131_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB131_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB131_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB131_16
.LBB131_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB131_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 63
	mul.d	$a2, $a2, $s8
	and	$a2, $a2, $s2
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB131_3
# %bb.18:                               #   in Loop: Header=BB131_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB131_3
.LBB131_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB131_20:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB131_20
.LBB131_21:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB131_23
# %bb.22:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB131_25
.LBB131_23:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB131_26
# %bb.24:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB131_25:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI131_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI131_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB131_26:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end131:
	.size	_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc, .Lfunc_end131-_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
.LCPI132_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt19custom_constant_xorItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc: # @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB132_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB132_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 10
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB132_4
	.p2align	4, , 16
.LBB132_3:                              # %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit.us
                                        #   in Loop: Header=BB132_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB132_23
.LBB132_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_9 Depth 2
                                        #     Child Loop BB132_13 Depth 2
                                        #     Child Loop BB132_16 Depth 2
	bltu	$a5, $s0, .LBB132_6
# %bb.5:                                #   in Loop: Header=BB132_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB132_15
	.p2align	4, , 16
.LBB132_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB132_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB132_8
# %bb.7:                                #   in Loop: Header=BB132_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB132_12
	.p2align	4, , 16
.LBB132_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB132_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB132_9:                              # %vector.body
                                        #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB132_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB132_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB132_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB132_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB132_15
.LBB132_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB132_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB132_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB132_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB132_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB132_17
.LBB132_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB132_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB132_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB132_16
.LBB132_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB132_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 10
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB132_3
# %bb.18:                               #   in Loop: Header=BB132_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB132_3
.LBB132_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB132_21
	.p2align	4, , 16
.LBB132_20:                             # %_Z17check_shifted_sumIt19custom_constant_xorItEEvT_.exit
                                        #   in Loop: Header=BB132_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB132_23
.LBB132_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xori	$a0, $a0, 10
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB132_20
# %bb.22:                               #   in Loop: Header=BB132_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB132_20
.LBB132_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB132_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB132_27
.LBB132_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB132_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB132_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI132_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI132_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB132_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end132:
	.size	_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc, .Lfunc_end132-_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
.LCPI133_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc: # @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB133_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB133_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s7, $a0, 4
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 3
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vrepli.h	$vr4, 49
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB133_4
	.p2align	4, , 16
.LBB133_3:                              # %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit.us
                                        #   in Loop: Header=BB133_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB133_23
.LBB133_4:                              # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_9 Depth 2
                                        #     Child Loop BB133_13 Depth 2
                                        #     Child Loop BB133_16 Depth 2
	bltu	$a5, $s0, .LBB133_6
# %bb.5:                                #   in Loop: Header=BB133_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB133_15
	.p2align	4, , 16
.LBB133_6:                              # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB133_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB133_8
# %bb.7:                                #   in Loop: Header=BB133_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB133_12
	.p2align	4, , 16
.LBB133_8:                              # %vector.body.preheader
                                        #   in Loop: Header=BB133_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB133_9:                              # %vector.body
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB133_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB133_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vbsrl.v	$vr1, $vr0, 8
	vadd.h	$vr0, $vr0, $vr1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	beq	$s7, $s0, .LBB133_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB133_4 Depth=1
	move	$a3, $s7
	move	$a2, $s7
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB133_15
.LBB133_12:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB133_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB133_13:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB133_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB133_4 Depth=1
	vshuf4i.h	$vr1, $vr0, 14
	vadd.h	$vr0, $vr0, $vr1
	vreplvei.h	$vr1, $vr0, 1
	vadd.h	$vr0, $vr0, $vr1
	vpickve2gr.h	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB133_17
.LBB133_15:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB133_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB133_16:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB133_16
.LBB133_17:                             # %._crit_edge.us
                                        #   in Loop: Header=BB133_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 49
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB133_3
# %bb.18:                               #   in Loop: Header=BB133_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ori	$a5, $zero, 3
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB133_3
.LBB133_19:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB133_21
	.p2align	4, , 16
.LBB133_20:                             # %_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_.exit
                                        #   in Loop: Header=BB133_21 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB133_23
.LBB133_21:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xori	$a0, $a0, 49
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB133_20
# %bb.22:                               #   in Loop: Header=BB133_21 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB133_20
.LBB133_23:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB133_25
# %bb.24:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB133_27
.LBB133_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB133_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB133_27:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI133_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI133_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB133_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end133:
	.size	_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc, .Lfunc_end133-_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi10custom_twoIiEEvPT_iPKc
.LCPI134_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi10custom_twoIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi10custom_twoIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi10custom_twoIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi10custom_twoIiEEvPT_iPKc,@function
_Z13test_constantIi10custom_twoIiEEvPT_iPKc: # @_Z13test_constantIi10custom_twoIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB134_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB134_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB134_4
	.p2align	4, , 16
.LBB134_3:                              # %_Z17check_shifted_sumIi10custom_twoIiEEvT_.exit.us
                                        #   in Loop: Header=BB134_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB134_8
.LBB134_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB134_3
# %bb.5:                                #   in Loop: Header=BB134_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB134_3
.LBB134_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB134_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB134_7
.LBB134_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB134_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB134_12
.LBB134_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB134_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB134_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI134_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI134_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB134_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end134:
	.size	_Z13test_constantIi10custom_twoIiEEvPT_iPKc, .Lfunc_end134-_Z13test_constantIi10custom_twoIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
.LCPI135_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc: # @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB135_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB135_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB135_4
	.p2align	4, , 16
.LBB135_3:                              # %_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB135_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB135_8
.LBB135_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB135_3
# %bb.5:                                #   in Loop: Header=BB135_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB135_3
.LBB135_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB135_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB135_7
.LBB135_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB135_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB135_12
.LBB135_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB135_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB135_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI135_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI135_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB135_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end135:
	.size	_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc, .Lfunc_end135-_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
.LCPI136_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc: # @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB136_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB136_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB136_4
	.p2align	4, , 16
.LBB136_3:                              # %_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB136_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB136_8
.LBB136_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB136_3
# %bb.5:                                #   in Loop: Header=BB136_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB136_3
.LBB136_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB136_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB136_7
.LBB136_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB136_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB136_12
.LBB136_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB136_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB136_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI136_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI136_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB136_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end136:
	.size	_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc, .Lfunc_end136-_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
.LCPI137_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc: # @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB137_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB137_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 2
	alsl.w	$s5, $s0, $a0, 1
	lu12i.w	$a0, 11
	ori	$s6, $a0, 2944
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB137_4
	.p2align	4, , 16
.LBB137_3:                              # %_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB137_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB137_8
.LBB137_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB137_3
# %bb.5:                                #   in Loop: Header=BB137_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB137_3
.LBB137_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB137_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB137_7
.LBB137_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB137_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB137_12
.LBB137_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB137_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB137_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI137_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI137_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB137_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end137:
	.size	_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc, .Lfunc_end137-_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
.LCPI138_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc: # @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB138_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB138_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB138_4
	.p2align	4, , 16
.LBB138_3:                              # %_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB138_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB138_8
.LBB138_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB138_3
# %bb.5:                                #   in Loop: Header=BB138_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB138_3
.LBB138_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB138_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB138_7
.LBB138_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB138_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB138_12
.LBB138_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB138_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB138_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI138_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI138_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB138_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end138:
	.size	_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc, .Lfunc_end138-_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
.LCPI139_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc: # @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB139_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB139_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB139_4
	.p2align	4, , 16
.LBB139_3:                              # %_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB139_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB139_8
.LBB139_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB139_3
# %bb.5:                                #   in Loop: Header=BB139_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB139_3
.LBB139_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB139_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB139_7
.LBB139_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB139_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB139_12
.LBB139_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB139_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB139_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI139_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI139_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB139_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end139:
	.size	_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc, .Lfunc_end139-_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
.LCPI140_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc: # @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB140_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB140_4
.LBB140_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB140_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB140_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI140_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI140_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB140_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end140:
	.size	_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc, .Lfunc_end140-_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
.LCPI141_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc: # @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB141_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB141_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB141_4
	.p2align	4, , 16
.LBB141_3:                              # %_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB141_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB141_8
.LBB141_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB141_3
# %bb.5:                                #   in Loop: Header=BB141_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB141_3
.LBB141_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB141_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB141_7
.LBB141_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB141_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB141_12
.LBB141_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB141_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB141_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI141_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI141_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB141_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end141:
	.size	_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc, .Lfunc_end141-_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
.LCPI142_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc: # @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB142_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB142_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB142_4
	.p2align	4, , 16
.LBB142_3:                              # %_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB142_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB142_8
.LBB142_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB142_3
# %bb.5:                                #   in Loop: Header=BB142_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB142_3
.LBB142_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB142_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB142_7
.LBB142_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB142_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB142_12
.LBB142_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB142_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB142_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI142_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI142_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB142_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end142:
	.size	_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc, .Lfunc_end142-_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
.LCPI143_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc: # @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB143_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB143_4
.LBB143_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB143_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB143_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI143_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI143_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB143_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end143:
	.size	_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc, .Lfunc_end143-_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
.LCPI144_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc: # @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB144_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB144_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB144_4
	.p2align	4, , 16
.LBB144_3:                              # %_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB144_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB144_8
.LBB144_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB144_3
# %bb.5:                                #   in Loop: Header=BB144_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB144_3
.LBB144_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB144_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB144_7
.LBB144_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB144_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB144_12
.LBB144_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB144_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB144_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI144_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI144_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB144_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end144:
	.size	_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc, .Lfunc_end144-_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
.LCPI145_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc: # @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB145_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB145_4
.LBB145_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB145_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB145_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI145_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI145_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB145_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end145:
	.size	_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc, .Lfunc_end145-_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
.LCPI146_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc: # @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB146_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB146_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB146_4
	.p2align	4, , 16
.LBB146_3:                              # %_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB146_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB146_8
.LBB146_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB146_3
# %bb.5:                                #   in Loop: Header=BB146_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB146_3
.LBB146_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB146_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB146_7
.LBB146_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB146_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB146_12
.LBB146_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB146_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB146_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI146_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI146_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB146_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end146:
	.size	_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc, .Lfunc_end146-_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
.LCPI147_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc: # @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB147_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB147_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB147_4
	.p2align	4, , 16
.LBB147_3:                              # %_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB147_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB147_8
.LBB147_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB147_3
# %bb.5:                                #   in Loop: Header=BB147_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB147_3
.LBB147_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB147_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB147_7
.LBB147_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB147_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB147_12
.LBB147_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB147_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB147_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI147_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI147_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB147_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end147:
	.size	_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc, .Lfunc_end147-_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
.LCPI148_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc: # @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB148_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB148_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB148_4
	.p2align	4, , 16
.LBB148_3:                              # %_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_.exit.us
                                        #   in Loop: Header=BB148_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB148_8
.LBB148_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB148_3
# %bb.5:                                #   in Loop: Header=BB148_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB148_3
.LBB148_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB148_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB148_7
.LBB148_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB148_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB148_12
.LBB148_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB148_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB148_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI148_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI148_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB148_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end148:
	.size	_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc, .Lfunc_end148-_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
.LCPI149_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi19custom_constant_addIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc: # @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB149_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB149_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB149_4
	.p2align	4, , 16
.LBB149_3:                              # %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit.us
                                        #   in Loop: Header=BB149_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB149_17
.LBB149_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_7 Depth 2
                                        #     Child Loop BB149_10 Depth 2
	bgeu	$s0, $a5, .LBB149_6
# %bb.5:                                #   in Loop: Header=BB149_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB149_9
	.p2align	4, , 16
.LBB149_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB149_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB149_7:                              # %vector.body
                                        #   Parent Loop BB149_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vaddi.wu	$vr0, $vr0, 10
	vaddi.wu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB149_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB149_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB149_11
.LBB149_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB149_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB149_10:                             # %scalar.ph
                                        #   Parent Loop BB149_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB149_10
.LBB149_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB149_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB149_3
# %bb.12:                               #   in Loop: Header=BB149_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB149_3
.LBB149_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB149_15
	.p2align	4, , 16
.LBB149_14:                             # %_Z17check_shifted_sumIi19custom_constant_addIiEEvT_.exit
                                        #   in Loop: Header=BB149_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB149_17
.LBB149_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB149_14
# %bb.16:                               #   in Loop: Header=BB149_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB149_14
.LBB149_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB149_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB149_21
.LBB149_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB149_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB149_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI149_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI149_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB149_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end149:
	.size	_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc, .Lfunc_end149-_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
.LCPI150_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc: # @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB150_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB150_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB150_4
	.p2align	4, , 16
.LBB150_3:                              # %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit.us
                                        #   in Loop: Header=BB150_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB150_17
.LBB150_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_7 Depth 2
                                        #     Child Loop BB150_10 Depth 2
	bgeu	$s0, $a5, .LBB150_6
# %bb.5:                                #   in Loop: Header=BB150_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB150_9
	.p2align	4, , 16
.LBB150_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB150_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB150_7:                              # %vector.body
                                        #   Parent Loop BB150_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vaddi.wu	$vr0, $vr0, 10
	vaddi.wu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB150_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB150_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB150_11
.LBB150_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB150_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB150_10:                             # %scalar.ph
                                        #   Parent Loop BB150_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB150_10
.LBB150_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB150_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB150_3
# %bb.12:                               #   in Loop: Header=BB150_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB150_3
.LBB150_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB150_15
	.p2align	4, , 16
.LBB150_14:                             # %_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_.exit
                                        #   in Loop: Header=BB150_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB150_17
.LBB150_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB150_14
# %bb.16:                               #   in Loop: Header=BB150_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB150_14
.LBB150_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB150_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB150_21
.LBB150_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB150_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB150_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI150_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI150_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB150_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end150:
	.size	_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc, .Lfunc_end150-_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
.LCPI151_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi19custom_constant_subIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc: # @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB151_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB151_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB151_4
	.p2align	4, , 16
.LBB151_3:                              # %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit.us
                                        #   in Loop: Header=BB151_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB151_17
.LBB151_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_7 Depth 2
                                        #     Child Loop BB151_10 Depth 2
	bgeu	$s0, $a5, .LBB151_6
# %bb.5:                                #   in Loop: Header=BB151_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB151_9
	.p2align	4, , 16
.LBB151_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB151_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB151_7:                              # %vector.body
                                        #   Parent Loop BB151_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB151_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB151_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB151_11
.LBB151_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB151_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB151_10:                             # %scalar.ph
                                        #   Parent Loop BB151_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB151_10
.LBB151_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB151_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB151_3
# %bb.12:                               #   in Loop: Header=BB151_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB151_3
.LBB151_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB151_15
	.p2align	4, , 16
.LBB151_14:                             # %_Z17check_shifted_sumIi19custom_constant_subIiEEvT_.exit
                                        #   in Loop: Header=BB151_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB151_17
.LBB151_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB151_14
# %bb.16:                               #   in Loop: Header=BB151_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB151_14
.LBB151_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB151_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB151_21
.LBB151_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB151_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB151_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI151_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI151_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB151_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end151:
	.size	_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc, .Lfunc_end151-_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
.LCPI152_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc: # @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB152_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB152_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB152_4
	.p2align	4, , 16
.LBB152_3:                              # %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit.us
                                        #   in Loop: Header=BB152_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB152_17
.LBB152_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_7 Depth 2
                                        #     Child Loop BB152_10 Depth 2
	bgeu	$s0, $a5, .LBB152_6
# %bb.5:                                #   in Loop: Header=BB152_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB152_9
	.p2align	4, , 16
.LBB152_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB152_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB152_7:                              # %vector.body
                                        #   Parent Loop BB152_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB152_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB152_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB152_11
.LBB152_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB152_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB152_10:                             # %scalar.ph
                                        #   Parent Loop BB152_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB152_10
.LBB152_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB152_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB152_3
# %bb.12:                               #   in Loop: Header=BB152_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB152_3
.LBB152_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB152_15
	.p2align	4, , 16
.LBB152_14:                             # %_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_.exit
                                        #   in Loop: Header=BB152_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB152_17
.LBB152_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB152_14
# %bb.16:                               #   in Loop: Header=BB152_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB152_14
.LBB152_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB152_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB152_21
.LBB152_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB152_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB152_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI152_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI152_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB152_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end152:
	.size	_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc, .Lfunc_end152-_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
.LCPI153_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc,@function
_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc: # @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB153_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB153_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB153_4
	.p2align	4, , 16
.LBB153_3:                              # %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit.us
                                        #   in Loop: Header=BB153_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB153_17
.LBB153_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_7 Depth 2
                                        #     Child Loop BB153_10 Depth 2
	bgeu	$s0, $a5, .LBB153_6
# %bb.5:                                #   in Loop: Header=BB153_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB153_9
	.p2align	4, , 16
.LBB153_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB153_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB153_7:                              # %vector.body
                                        #   Parent Loop BB153_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB153_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB153_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB153_11
.LBB153_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB153_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB153_10:                             # %scalar.ph
                                        #   Parent Loop BB153_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB153_10
.LBB153_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB153_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB153_3
# %bb.12:                               #   in Loop: Header=BB153_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB153_3
.LBB153_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB153_15
	.p2align	4, , 16
.LBB153_14:                             # %_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_.exit
                                        #   in Loop: Header=BB153_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB153_17
.LBB153_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beqz	$a0, .LBB153_14
# %bb.16:                               #   in Loop: Header=BB153_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB153_14
.LBB153_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB153_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB153_21
.LBB153_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB153_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB153_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI153_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI153_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB153_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end153:
	.size	_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc, .Lfunc_end153-_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
.LCPI154_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc,@function
_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc: # @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB154_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB154_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB154_4
	.p2align	4, , 16
.LBB154_3:                              # %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit.us
                                        #   in Loop: Header=BB154_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB154_17
.LBB154_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_7 Depth 2
                                        #     Child Loop BB154_10 Depth 2
	bgeu	$s0, $a5, .LBB154_6
# %bb.5:                                #   in Loop: Header=BB154_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB154_9
	.p2align	4, , 16
.LBB154_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB154_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB154_7:                              # %vector.body
                                        #   Parent Loop BB154_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB154_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB154_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB154_11
.LBB154_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB154_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB154_10:                             # %scalar.ph
                                        #   Parent Loop BB154_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB154_10
.LBB154_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB154_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB154_3
# %bb.12:                               #   in Loop: Header=BB154_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB154_3
.LBB154_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB154_15
	.p2align	4, , 16
.LBB154_14:                             # %_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_.exit
                                        #   in Loop: Header=BB154_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB154_17
.LBB154_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beqz	$a0, .LBB154_14
# %bb.16:                               #   in Loop: Header=BB154_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB154_14
.LBB154_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB154_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB154_21
.LBB154_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB154_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB154_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI154_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI154_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB154_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end154:
	.size	_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc, .Lfunc_end154-_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
.LCPI155_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc,@function
_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc: # @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB155_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB155_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 234
	ori	$fp, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB155_4
	.p2align	4, , 16
.LBB155_3:                              # %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit.us
                                        #   in Loop: Header=BB155_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB155_17
.LBB155_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_7 Depth 2
                                        #     Child Loop BB155_10 Depth 2
	bgeu	$s0, $a5, .LBB155_6
# %bb.5:                                #   in Loop: Header=BB155_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB155_9
	.p2align	4, , 16
.LBB155_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB155_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB155_7:                              # %vector.body
                                        #   Parent Loop BB155_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB155_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB155_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB155_11
.LBB155_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB155_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB155_10:                             # %scalar.ph
                                        #   Parent Loop BB155_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB155_10
.LBB155_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB155_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB155_3
# %bb.12:                               #   in Loop: Header=BB155_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB155_3
.LBB155_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -235
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB155_15
	.p2align	4, , 16
.LBB155_14:                             # %_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_.exit
                                        #   in Loop: Header=BB155_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB155_17
.LBB155_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB155_14
# %bb.16:                               #   in Loop: Header=BB155_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB155_14
.LBB155_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB155_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB155_21
.LBB155_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB155_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB155_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI155_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI155_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB155_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end155:
	.size	_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc, .Lfunc_end155-_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
.LCPI156_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc,@function
_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc: # @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB156_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB156_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a6, $zero, 8
	lu12i.w	$a0, 419430
	ori	$s4, $a0, 1639
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr5, $s4
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB156_4
	.p2align	4, , 16
.LBB156_3:                              # %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit.us
                                        #   in Loop: Header=BB156_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB156_17
.LBB156_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_7 Depth 2
                                        #     Child Loop BB156_10 Depth 2
	bgeu	$s0, $a6, .LBB156_6
# %bb.5:                                #   in Loop: Header=BB156_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB156_9
	.p2align	4, , 16
.LBB156_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB156_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB156_7:                              # %vector.body
                                        #   Parent Loop BB156_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.w	$vr2, $vr2, $vr5
	vsrai.w	$vr2, $vr2, 1
	vsrli.w	$vr4, $vr2, 31
	vadd.w	$vr2, $vr2, $vr4
	vmuh.w	$vr3, $vr3, $vr5
	vsrai.w	$vr3, $vr3, 1
	vsrli.w	$vr4, $vr3, 31
	vadd.w	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB156_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB156_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB156_11
.LBB156_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB156_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB156_10:                             # %scalar.ph
                                        #   Parent Loop BB156_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 33
	add.d	$a4, $a4, $a5
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB156_10
.LBB156_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB156_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a3, $a2, 63
	srai.d	$a2, $a2, 33
	add.d	$a2, $a2, $a3
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB156_3
# %bb.12:                               #   in Loop: Header=BB156_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	ori	$a6, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB156_3
.LBB156_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 9
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB156_15
	.p2align	4, , 16
.LBB156_14:                             # %_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_.exit
                                        #   in Loop: Header=BB156_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB156_17
.LBB156_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	addi.w	$a0, $a0, 4
	bltu	$a0, $s2, .LBB156_14
# %bb.16:                               #   in Loop: Header=BB156_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB156_14
.LBB156_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB156_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB156_21
.LBB156_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB156_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB156_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI156_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI156_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB156_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end156:
	.size	_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc, .Lfunc_end156-_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
.LCPI157_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc,@function
_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc: # @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB157_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB157_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a6, $zero, 8
	lu12i.w	$a0, -489336
	ori	$s4, $a0, 2185
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr5, $s4
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB157_4
	.p2align	4, , 16
.LBB157_3:                              # %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit.us
                                        #   in Loop: Header=BB157_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB157_17
.LBB157_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_7 Depth 2
                                        #     Child Loop BB157_10 Depth 2
	bgeu	$s0, $a6, .LBB157_6
# %bb.5:                                #   in Loop: Header=BB157_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB157_9
	.p2align	4, , 16
.LBB157_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB157_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB157_7:                              # %vector.body
                                        #   Parent Loop BB157_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.w	$vr4, $vr2, $vr5
	vadd.w	$vr2, $vr4, $vr2
	vsrai.w	$vr2, $vr2, 6
	vsrli.w	$vr4, $vr2, 31
	vadd.w	$vr2, $vr2, $vr4
	vmuh.w	$vr4, $vr3, $vr5
	vadd.w	$vr3, $vr4, $vr3
	vsrai.w	$vr3, $vr3, 6
	vsrli.w	$vr4, $vr3, 31
	vadd.w	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB157_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB157_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB157_11
.LBB157_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB157_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB157_10:                             # %scalar.ph
                                        #   Parent Loop BB157_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a5, $a4, $s4
	srli.d	$a5, $a5, 32
	add.w	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 31, 31
	srli.d	$a4, $a4, 6
	add.d	$a4, $a4, $a5
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB157_10
.LBB157_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB157_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a3, $a2, $s4
	srli.d	$a3, $a3, 32
	add.w	$a2, $a3, $a2
	bstrpick.d	$a3, $a2, 31, 31
	srli.d	$a2, $a2, 6
	add.d	$a2, $a2, $a3
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB157_3
# %bb.12:                               #   in Loop: Header=BB157_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	ori	$a6, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB157_3
.LBB157_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 239
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB157_15
	.p2align	4, , 16
.LBB157_14:                             # %_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_.exit
                                        #   in Loop: Header=BB157_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB157_17
.LBB157_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	addi.w	$a0, $a0, 119
	bltu	$a0, $s2, .LBB157_14
# %bb.16:                               #   in Loop: Header=BB157_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB157_14
.LBB157_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB157_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB157_21
.LBB157_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB157_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB157_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI157_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI157_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB157_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end157:
	.size	_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc, .Lfunc_end157-_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
.LCPI158_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc,@function
_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc: # @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB158_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB158_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 3
	ori	$fp, $a0, 3712
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB158_4
	.p2align	4, , 16
.LBB158_3:                              # %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit.us
                                        #   in Loop: Header=BB158_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB158_17
.LBB158_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_7 Depth 2
                                        #     Child Loop BB158_10 Depth 2
	bgeu	$s0, $a5, .LBB158_6
# %bb.5:                                #   in Loop: Header=BB158_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB158_9
	.p2align	4, , 16
.LBB158_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB158_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB158_7:                              # %vector.body
                                        #   Parent Loop BB158_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vaddi.wu	$vr0, $vr0, 2
	vaddi.wu	$vr1, $vr1, 2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB158_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB158_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB158_11
.LBB158_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB158_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB158_10:                             # %scalar.ph
                                        #   Parent Loop BB158_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB158_10
.LBB158_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB158_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB158_3
# %bb.12:                               #   in Loop: Header=BB158_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB158_3
.LBB158_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s3, $a0, 384
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB158_15
	.p2align	4, , 16
.LBB158_14:                             # %_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_.exit
                                        #   in Loop: Header=BB158_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB158_17
.LBB158_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB158_14
# %bb.16:                               #   in Loop: Header=BB158_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB158_14
.LBB158_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB158_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB158_21
.LBB158_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB158_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB158_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI158_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI158_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB158_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end158:
	.size	_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc, .Lfunc_end158-_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
.LCPI159_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc,@function
_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc: # @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB159_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB159_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB159_4
	.p2align	4, , 16
.LBB159_3:                              # %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit.us
                                        #   in Loop: Header=BB159_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB159_17
.LBB159_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_7 Depth 2
                                        #     Child Loop BB159_10 Depth 2
	bgeu	$s0, $a5, .LBB159_6
# %bb.5:                                #   in Loop: Header=BB159_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB159_9
	.p2align	4, , 16
.LBB159_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB159_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB159_7:                              # %vector.body
                                        #   Parent Loop BB159_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB159_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB159_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB159_11
.LBB159_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB159_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB159_10:                             # %scalar.ph
                                        #   Parent Loop BB159_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB159_10
.LBB159_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB159_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB159_3
# %bb.12:                               #   in Loop: Header=BB159_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB159_3
.LBB159_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB159_15
	.p2align	4, , 16
.LBB159_14:                             # %_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_.exit
                                        #   in Loop: Header=BB159_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB159_17
.LBB159_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beqz	$a0, .LBB159_14
# %bb.16:                               #   in Loop: Header=BB159_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB159_14
.LBB159_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB159_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB159_21
.LBB159_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB159_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB159_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI159_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI159_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB159_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end159:
	.size	_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc, .Lfunc_end159-_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
.LCPI160_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi19custom_constant_andIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc: # @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB160_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB160_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB160_4
	.p2align	4, , 16
.LBB160_3:                              # %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit.us
                                        #   in Loop: Header=BB160_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB160_17
.LBB160_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_7 Depth 2
                                        #     Child Loop BB160_10 Depth 2
	bgeu	$s0, $a5, .LBB160_6
# %bb.5:                                #   in Loop: Header=BB160_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB160_9
	.p2align	4, , 16
.LBB160_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB160_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB160_7:                              # %vector.body
                                        #   Parent Loop BB160_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB160_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB160_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB160_11
.LBB160_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB160_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB160_10:                             # %scalar.ph
                                        #   Parent Loop BB160_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.wu	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB160_10
.LBB160_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB160_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	andi	$a2, $a2, 10
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB160_3
# %bb.12:                               #   in Loop: Header=BB160_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB160_3
.LBB160_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB160_15
	.p2align	4, , 16
.LBB160_14:                             # %_Z17check_shifted_sumIi19custom_constant_andIiEEvT_.exit
                                        #   in Loop: Header=BB160_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB160_17
.LBB160_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	andi	$a0, $a0, 10
	beqz	$a0, .LBB160_14
# %bb.16:                               #   in Loop: Header=BB160_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB160_14
.LBB160_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB160_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB160_21
.LBB160_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB160_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB160_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI160_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI160_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB160_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end160:
	.size	_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc, .Lfunc_end160-_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
.LCPI161_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc: # @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB161_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB161_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 14
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB161_4
	.p2align	4, , 16
.LBB161_3:                              # %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit.us
                                        #   in Loop: Header=BB161_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB161_17
.LBB161_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_7 Depth 2
                                        #     Child Loop BB161_10 Depth 2
	bgeu	$s0, $a5, .LBB161_6
# %bb.5:                                #   in Loop: Header=BB161_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB161_9
	.p2align	4, , 16
.LBB161_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB161_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB161_7:                              # %vector.body
                                        #   Parent Loop BB161_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB161_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB161_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB161_11
.LBB161_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB161_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB161_10:                             # %scalar.ph
                                        #   Parent Loop BB161_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.wu	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB161_10
.LBB161_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB161_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	andi	$a2, $a2, 14
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB161_3
# %bb.12:                               #   in Loop: Header=BB161_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB161_3
.LBB161_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB161_15
	.p2align	4, , 16
.LBB161_14:                             # %_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_.exit
                                        #   in Loop: Header=BB161_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB161_17
.LBB161_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	andi	$a0, $a0, 14
	beqz	$a0, .LBB161_14
# %bb.16:                               #   in Loop: Header=BB161_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB161_14
.LBB161_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB161_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB161_21
.LBB161_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB161_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB161_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI161_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI161_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB161_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end161:
	.size	_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc, .Lfunc_end161-_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
.LCPI162_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi18custom_constant_orIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc,@function
_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc: # @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB162_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB162_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB162_4
	.p2align	4, , 16
.LBB162_3:                              # %_Z17check_shifted_sumIi18custom_constant_orIiEEvT_.exit.us
                                        #   in Loop: Header=BB162_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB162_15
.LBB162_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_7 Depth 2
                                        #     Child Loop BB162_10 Depth 2
	bgeu	$s0, $a5, .LBB162_6
# %bb.5:                                #   in Loop: Header=BB162_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB162_9
	.p2align	4, , 16
.LBB162_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB162_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB162_7:                              # %vector.body
                                        #   Parent Loop BB162_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB162_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB162_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB162_11
.LBB162_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB162_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB162_10:                             # %scalar.ph
                                        #   Parent Loop BB162_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB162_10
.LBB162_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB162_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ori	$a2, $a2, 10
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB162_3
# %bb.12:                               #   in Loop: Header=BB162_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB162_3
.LBB162_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB162_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB162_14
.LBB162_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB162_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB162_19
.LBB162_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB162_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB162_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI162_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI162_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB162_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end162:
	.size	_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc, .Lfunc_end162-_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
.LCPI163_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc,@function
_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc: # @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB163_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB163_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 63
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB163_4
	.p2align	4, , 16
.LBB163_3:                              # %_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_.exit.us
                                        #   in Loop: Header=BB163_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB163_15
.LBB163_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_7 Depth 2
                                        #     Child Loop BB163_10 Depth 2
	bgeu	$s0, $a5, .LBB163_6
# %bb.5:                                #   in Loop: Header=BB163_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB163_9
	.p2align	4, , 16
.LBB163_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB163_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB163_7:                              # %vector.body
                                        #   Parent Loop BB163_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB163_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB163_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB163_11
.LBB163_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB163_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB163_10:                             # %scalar.ph
                                        #   Parent Loop BB163_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB163_10
.LBB163_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB163_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ori	$a2, $a2, 63
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB163_3
# %bb.12:                               #   in Loop: Header=BB163_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB163_3
.LBB163_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB163_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB163_14
.LBB163_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB163_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB163_19
.LBB163_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB163_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB163_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI163_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI163_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB163_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end163:
	.size	_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc, .Lfunc_end163-_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
.LCPI164_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc: # @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB164_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB164_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB164_4
	.p2align	4, , 16
.LBB164_3:                              # %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit.us
                                        #   in Loop: Header=BB164_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB164_17
.LBB164_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_7 Depth 2
                                        #     Child Loop BB164_10 Depth 2
	bgeu	$s0, $a5, .LBB164_6
# %bb.5:                                #   in Loop: Header=BB164_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB164_9
	.p2align	4, , 16
.LBB164_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB164_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB164_7:                              # %vector.body
                                        #   Parent Loop BB164_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB164_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB164_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB164_11
.LBB164_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB164_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB164_10:                             # %scalar.ph
                                        #   Parent Loop BB164_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB164_10
.LBB164_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB164_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	xori	$a2, $a2, 10
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB164_3
# %bb.12:                               #   in Loop: Header=BB164_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB164_3
.LBB164_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 10
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB164_15
	.p2align	4, , 16
.LBB164_14:                             # %_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_.exit
                                        #   in Loop: Header=BB164_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB164_17
.LBB164_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beq	$a0, $s2, .LBB164_14
# %bb.16:                               #   in Loop: Header=BB164_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB164_14
.LBB164_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB164_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB164_21
.LBB164_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB164_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB164_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI164_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI164_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB164_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end164:
	.size	_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc, .Lfunc_end164-_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
.LCPI165_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc: # @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB165_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB165_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 49
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB165_4
	.p2align	4, , 16
.LBB165_3:                              # %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit.us
                                        #   in Loop: Header=BB165_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB165_17
.LBB165_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_7 Depth 2
                                        #     Child Loop BB165_10 Depth 2
	bgeu	$s0, $a5, .LBB165_6
# %bb.5:                                #   in Loop: Header=BB165_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB165_9
	.p2align	4, , 16
.LBB165_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB165_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB165_7:                              # %vector.body
                                        #   Parent Loop BB165_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB165_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB165_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB165_11
.LBB165_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB165_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB165_10:                             # %scalar.ph
                                        #   Parent Loop BB165_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB165_10
.LBB165_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB165_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	xori	$a2, $a2, 49
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB165_3
# %bb.12:                               #   in Loop: Header=BB165_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB165_3
.LBB165_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 49
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB165_15
	.p2align	4, , 16
.LBB165_14:                             # %_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_.exit
                                        #   in Loop: Header=BB165_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB165_17
.LBB165_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beq	$a0, $s2, .LBB165_14
# %bb.16:                               #   in Loop: Header=BB165_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB165_14
.LBB165_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB165_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB165_21
.LBB165_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB165_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB165_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI165_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI165_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB165_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end165:
	.size	_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc, .Lfunc_end165-_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj10custom_twoIjEEvPT_iPKc
.LCPI166_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj10custom_twoIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj10custom_twoIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj10custom_twoIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj10custom_twoIjEEvPT_iPKc,@function
_Z13test_constantIj10custom_twoIjEEvPT_iPKc: # @_Z13test_constantIj10custom_twoIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB166_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB166_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB166_4
	.p2align	4, , 16
.LBB166_3:                              # %_Z17check_shifted_sumIj10custom_twoIjEEvT_.exit.us
                                        #   in Loop: Header=BB166_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB166_8
.LBB166_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB166_3
# %bb.5:                                #   in Loop: Header=BB166_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB166_3
.LBB166_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB166_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB166_7
.LBB166_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB166_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB166_12
.LBB166_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB166_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB166_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI166_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI166_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB166_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end166:
	.size	_Z13test_constantIj10custom_twoIjEEvPT_iPKc, .Lfunc_end166-_Z13test_constantIj10custom_twoIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
.LCPI167_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc: # @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB167_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB167_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB167_4
	.p2align	4, , 16
.LBB167_3:                              # %_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB167_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB167_8
.LBB167_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB167_3
# %bb.5:                                #   in Loop: Header=BB167_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB167_3
.LBB167_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB167_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB167_7
.LBB167_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB167_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB167_12
.LBB167_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB167_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB167_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI167_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI167_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB167_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end167:
	.size	_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc, .Lfunc_end167-_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
.LCPI168_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc: # @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB168_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB168_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB168_4
	.p2align	4, , 16
.LBB168_3:                              # %_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB168_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB168_8
.LBB168_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB168_3
# %bb.5:                                #   in Loop: Header=BB168_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB168_3
.LBB168_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB168_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB168_7
.LBB168_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB168_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB168_12
.LBB168_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB168_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB168_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI168_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI168_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB168_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end168:
	.size	_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc, .Lfunc_end168-_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
.LCPI169_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc: # @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s3, %pc_hi20(iterations)
	ld.w	$a1, $s3, %pc_lo12(iterations)
	pcalau12i	$s2, %pc_hi20(start_time)
	st.d	$a0, $s2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s1, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB169_8
# %bb.1:                                # %.preheader.lr.ph
	move	$s4, $zero
	blez	$s0, .LBB169_6
# %bb.2:                                # %.preheader.us.preheader
	slli.d	$a0, $s0, 2
	alsl.w	$s5, $s0, $a0, 1
	lu12i.w	$a0, 11
	ori	$s6, $a0, 2944
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB169_4
	.p2align	4, , 16
.LBB169_3:                              # %_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB169_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB169_8
.LBB169_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s5, $s6, .LBB169_3
# %bb.5:                                #   in Loop: Header=BB169_4 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(iterations)
	b	.LBB169_3
.LBB169_6:                              # %.preheader.preheader
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB169_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s3, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	blt	$s4, $a0, .LBB169_7
.LBB169_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s2, $s2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB169_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB169_12
.LBB169_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB169_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB169_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI169_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI169_0)
	sub.d	$a1, $s0, $s2
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB169_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end169:
	.size	_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc, .Lfunc_end169-_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
.LCPI170_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc: # @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB170_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB170_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB170_4
	.p2align	4, , 16
.LBB170_3:                              # %_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB170_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB170_8
.LBB170_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB170_3
# %bb.5:                                #   in Loop: Header=BB170_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB170_3
.LBB170_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB170_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB170_7
.LBB170_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB170_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB170_12
.LBB170_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB170_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB170_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI170_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI170_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB170_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end170:
	.size	_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc, .Lfunc_end170-_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
.LCPI171_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc: # @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB171_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB171_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB171_4
	.p2align	4, , 16
.LBB171_3:                              # %_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB171_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB171_8
.LBB171_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB171_3
# %bb.5:                                #   in Loop: Header=BB171_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB171_3
.LBB171_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB171_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB171_7
.LBB171_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB171_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB171_12
.LBB171_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB171_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB171_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI171_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI171_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB171_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end171:
	.size	_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc, .Lfunc_end171-_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
.LCPI172_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc: # @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB172_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB172_4
.LBB172_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB172_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB172_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI172_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI172_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB172_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end172:
	.size	_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc, .Lfunc_end172-_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
.LCPI173_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc: # @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB173_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB173_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB173_4
	.p2align	4, , 16
.LBB173_3:                              # %_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB173_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB173_8
.LBB173_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB173_3
# %bb.5:                                #   in Loop: Header=BB173_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB173_3
.LBB173_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB173_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB173_7
.LBB173_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB173_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB173_12
.LBB173_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB173_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB173_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI173_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI173_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB173_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end173:
	.size	_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc, .Lfunc_end173-_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
.LCPI174_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc: # @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB174_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB174_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB174_4
	.p2align	4, , 16
.LBB174_3:                              # %_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB174_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB174_8
.LBB174_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB174_3
# %bb.5:                                #   in Loop: Header=BB174_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB174_3
.LBB174_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB174_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB174_7
.LBB174_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB174_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB174_12
.LBB174_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB174_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB174_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI174_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI174_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB174_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end174:
	.size	_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc, .Lfunc_end174-_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
.LCPI175_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc: # @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB175_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB175_4
.LBB175_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB175_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB175_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI175_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI175_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB175_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end175:
	.size	_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc, .Lfunc_end175-_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
.LCPI176_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc: # @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB176_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB176_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB176_4
	.p2align	4, , 16
.LBB176_3:                              # %_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB176_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB176_8
.LBB176_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB176_3
# %bb.5:                                #   in Loop: Header=BB176_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB176_3
.LBB176_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB176_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB176_7
.LBB176_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB176_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB176_12
.LBB176_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB176_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB176_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI176_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI176_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB176_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end176:
	.size	_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc, .Lfunc_end176-_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
.LCPI177_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc: # @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB177_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB177_4
.LBB177_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB177_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB177_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI177_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI177_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB177_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end177:
	.size	_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc, .Lfunc_end177-_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
.LCPI178_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc: # @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB178_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB178_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB178_4
	.p2align	4, , 16
.LBB178_3:                              # %_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB178_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB178_8
.LBB178_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB178_3
# %bb.5:                                #   in Loop: Header=BB178_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB178_3
.LBB178_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB178_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB178_7
.LBB178_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB178_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB178_12
.LBB178_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB178_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB178_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI178_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI178_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB178_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end178:
	.size	_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc, .Lfunc_end178-_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
.LCPI179_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc: # @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB179_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB179_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB179_4
	.p2align	4, , 16
.LBB179_3:                              # %_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB179_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB179_8
.LBB179_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB179_3
# %bb.5:                                #   in Loop: Header=BB179_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB179_3
.LBB179_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB179_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB179_7
.LBB179_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB179_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB179_12
.LBB179_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB179_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB179_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI179_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI179_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB179_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end179:
	.size	_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc, .Lfunc_end179-_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
.LCPI180_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc: # @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB180_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB180_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB180_4
	.p2align	4, , 16
.LBB180_3:                              # %_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_.exit.us
                                        #   in Loop: Header=BB180_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB180_8
.LBB180_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB180_3
# %bb.5:                                #   in Loop: Header=BB180_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB180_3
.LBB180_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB180_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB180_7
.LBB180_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB180_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB180_12
.LBB180_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB180_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB180_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI180_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI180_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB180_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end180:
	.size	_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc, .Lfunc_end180-_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
.LCPI181_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj19custom_constant_addIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc: # @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB181_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB181_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB181_4
	.p2align	4, , 16
.LBB181_3:                              # %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit.us
                                        #   in Loop: Header=BB181_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB181_17
.LBB181_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_7 Depth 2
                                        #     Child Loop BB181_10 Depth 2
	bgeu	$s0, $a5, .LBB181_6
# %bb.5:                                #   in Loop: Header=BB181_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB181_9
	.p2align	4, , 16
.LBB181_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB181_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB181_7:                              # %vector.body
                                        #   Parent Loop BB181_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vaddi.wu	$vr0, $vr0, 10
	vaddi.wu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB181_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB181_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB181_11
.LBB181_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB181_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB181_10:                             # %scalar.ph
                                        #   Parent Loop BB181_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB181_10
.LBB181_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB181_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB181_3
# %bb.12:                               #   in Loop: Header=BB181_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB181_3
.LBB181_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB181_15
	.p2align	4, , 16
.LBB181_14:                             # %_Z17check_shifted_sumIj19custom_constant_addIjEEvT_.exit
                                        #   in Loop: Header=BB181_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB181_17
.LBB181_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB181_14
# %bb.16:                               #   in Loop: Header=BB181_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB181_14
.LBB181_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB181_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB181_21
.LBB181_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB181_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB181_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI181_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI181_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB181_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end181:
	.size	_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc, .Lfunc_end181-_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
.LCPI182_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc: # @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB182_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB182_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB182_4
	.p2align	4, , 16
.LBB182_3:                              # %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit.us
                                        #   in Loop: Header=BB182_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB182_17
.LBB182_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_7 Depth 2
                                        #     Child Loop BB182_10 Depth 2
	bgeu	$s0, $a5, .LBB182_6
# %bb.5:                                #   in Loop: Header=BB182_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB182_9
	.p2align	4, , 16
.LBB182_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB182_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB182_7:                              # %vector.body
                                        #   Parent Loop BB182_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vaddi.wu	$vr0, $vr0, 10
	vaddi.wu	$vr1, $vr1, 10
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB182_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB182_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB182_11
.LBB182_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB182_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB182_10:                             # %scalar.ph
                                        #   Parent Loop BB182_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB182_10
.LBB182_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB182_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB182_3
# %bb.12:                               #   in Loop: Header=BB182_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB182_3
.LBB182_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB182_15
	.p2align	4, , 16
.LBB182_14:                             # %_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_.exit
                                        #   in Loop: Header=BB182_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB182_17
.LBB182_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB182_14
# %bb.16:                               #   in Loop: Header=BB182_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB182_14
.LBB182_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB182_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB182_21
.LBB182_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB182_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB182_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI182_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI182_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB182_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end182:
	.size	_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc, .Lfunc_end182-_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
.LCPI183_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj19custom_constant_subIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc: # @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB183_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB183_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB183_4
	.p2align	4, , 16
.LBB183_3:                              # %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit.us
                                        #   in Loop: Header=BB183_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB183_17
.LBB183_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_7 Depth 2
                                        #     Child Loop BB183_10 Depth 2
	bgeu	$s0, $a5, .LBB183_6
# %bb.5:                                #   in Loop: Header=BB183_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB183_9
	.p2align	4, , 16
.LBB183_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB183_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB183_7:                              # %vector.body
                                        #   Parent Loop BB183_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB183_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB183_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB183_11
.LBB183_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB183_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB183_10:                             # %scalar.ph
                                        #   Parent Loop BB183_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB183_10
.LBB183_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB183_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB183_3
# %bb.12:                               #   in Loop: Header=BB183_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB183_3
.LBB183_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB183_15
	.p2align	4, , 16
.LBB183_14:                             # %_Z17check_shifted_sumIj19custom_constant_subIjEEvT_.exit
                                        #   in Loop: Header=BB183_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB183_17
.LBB183_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB183_14
# %bb.16:                               #   in Loop: Header=BB183_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB183_14
.LBB183_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB183_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB183_21
.LBB183_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB183_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB183_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI183_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI183_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB183_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end183:
	.size	_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc, .Lfunc_end183-_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
.LCPI184_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc: # @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB184_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB184_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB184_4
	.p2align	4, , 16
.LBB184_3:                              # %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit.us
                                        #   in Loop: Header=BB184_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB184_17
.LBB184_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_7 Depth 2
                                        #     Child Loop BB184_10 Depth 2
	bgeu	$s0, $a5, .LBB184_6
# %bb.5:                                #   in Loop: Header=BB184_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB184_9
	.p2align	4, , 16
.LBB184_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB184_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB184_7:                              # %vector.body
                                        #   Parent Loop BB184_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB184_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB184_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB184_11
.LBB184_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB184_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB184_10:                             # %scalar.ph
                                        #   Parent Loop BB184_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB184_10
.LBB184_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB184_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB184_3
# %bb.12:                               #   in Loop: Header=BB184_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB184_3
.LBB184_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB184_15
	.p2align	4, , 16
.LBB184_14:                             # %_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_.exit
                                        #   in Loop: Header=BB184_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB184_17
.LBB184_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB184_14
# %bb.16:                               #   in Loop: Header=BB184_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB184_14
.LBB184_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB184_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB184_21
.LBB184_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB184_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB184_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI184_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI184_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB184_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end184:
	.size	_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc, .Lfunc_end184-_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
.LCPI185_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc,@function
_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc: # @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB185_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB185_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB185_4
	.p2align	4, , 16
.LBB185_3:                              # %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit.us
                                        #   in Loop: Header=BB185_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB185_17
.LBB185_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_7 Depth 2
                                        #     Child Loop BB185_10 Depth 2
	bgeu	$s0, $a5, .LBB185_6
# %bb.5:                                #   in Loop: Header=BB185_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB185_9
	.p2align	4, , 16
.LBB185_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB185_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB185_7:                              # %vector.body
                                        #   Parent Loop BB185_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB185_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB185_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB185_11
.LBB185_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB185_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB185_10:                             # %scalar.ph
                                        #   Parent Loop BB185_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB185_10
.LBB185_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB185_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB185_3
# %bb.12:                               #   in Loop: Header=BB185_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB185_3
.LBB185_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 234
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB185_15
	.p2align	4, , 16
.LBB185_14:                             # %_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_.exit
                                        #   in Loop: Header=BB185_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB185_17
.LBB185_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB185_14
# %bb.16:                               #   in Loop: Header=BB185_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB185_14
.LBB185_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB185_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB185_21
.LBB185_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB185_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB185_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI185_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI185_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB185_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end185:
	.size	_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc, .Lfunc_end185-_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
.LCPI186_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc,@function
_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc: # @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB186_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB186_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB186_4
	.p2align	4, , 16
.LBB186_3:                              # %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit.us
                                        #   in Loop: Header=BB186_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB186_17
.LBB186_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_7 Depth 2
                                        #     Child Loop BB186_10 Depth 2
	bgeu	$s0, $a5, .LBB186_6
# %bb.5:                                #   in Loop: Header=BB186_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB186_9
	.p2align	4, , 16
.LBB186_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB186_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB186_7:                              # %vector.body
                                        #   Parent Loop BB186_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB186_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB186_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB186_11
.LBB186_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB186_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB186_10:                             # %scalar.ph
                                        #   Parent Loop BB186_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB186_10
.LBB186_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB186_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB186_3
# %bb.12:                               #   in Loop: Header=BB186_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB186_3
.LBB186_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 234
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB186_15
	.p2align	4, , 16
.LBB186_14:                             # %_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_.exit
                                        #   in Loop: Header=BB186_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB186_17
.LBB186_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB186_14
# %bb.16:                               #   in Loop: Header=BB186_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB186_14
.LBB186_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB186_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB186_21
.LBB186_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB186_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB186_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI186_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI186_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB186_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end186:
	.size	_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc, .Lfunc_end186-_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
.LCPI187_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc,@function
_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc: # @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB187_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB187_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 234
	ori	$fp, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB187_4
	.p2align	4, , 16
.LBB187_3:                              # %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit.us
                                        #   in Loop: Header=BB187_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB187_17
.LBB187_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_7 Depth 2
                                        #     Child Loop BB187_10 Depth 2
	bgeu	$s0, $a5, .LBB187_6
# %bb.5:                                #   in Loop: Header=BB187_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB187_9
	.p2align	4, , 16
.LBB187_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB187_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB187_7:                              # %vector.body
                                        #   Parent Loop BB187_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB187_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB187_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB187_11
.LBB187_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB187_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB187_10:                             # %scalar.ph
                                        #   Parent Loop BB187_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB187_10
.LBB187_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB187_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB187_3
# %bb.12:                               #   in Loop: Header=BB187_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB187_3
.LBB187_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -235
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB187_15
	.p2align	4, , 16
.LBB187_14:                             # %_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_.exit
                                        #   in Loop: Header=BB187_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB187_17
.LBB187_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB187_14
# %bb.16:                               #   in Loop: Header=BB187_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB187_14
.LBB187_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB187_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB187_21
.LBB187_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB187_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB187_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI187_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI187_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB187_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end187:
	.size	_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc, .Lfunc_end187-_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
.LCPI188_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc,@function
_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc: # @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB188_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB188_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, -209716
	ori	$s4, $a0, 3277
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s4
	lu32i.d	$s4, 0
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB188_4
	.p2align	4, , 16
.LBB188_3:                              # %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit.us
                                        #   in Loop: Header=BB188_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB188_17
.LBB188_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_7 Depth 2
                                        #     Child Loop BB188_10 Depth 2
	bgeu	$s0, $a5, .LBB188_6
# %bb.5:                                #   in Loop: Header=BB188_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB188_9
	.p2align	4, , 16
.LBB188_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB188_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB188_7:                              # %vector.body
                                        #   Parent Loop BB188_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.wu	$vr2, $vr2, $vr4
	vsrli.w	$vr2, $vr2, 2
	vmuh.wu	$vr3, $vr3, $vr4
	vsrli.w	$vr3, $vr3, 2
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB188_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB188_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB188_11
.LBB188_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB188_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB188_10:                             # %scalar.ph
                                        #   Parent Loop BB188_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.wu	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a4, $a4, 34
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB188_10
.LBB188_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB188_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a2, $a2, 34
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB188_3
# %bb.12:                               #   in Loop: Header=BB188_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB188_3
.LBB188_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -209716
	ori	$s2, $a0, 3277
	lu32i.d	$s2, 0
	lu12i.w	$a0, 1
	ori	$s4, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB188_15
	.p2align	4, , 16
.LBB188_14:                             # %_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_.exit
                                        #   in Loop: Header=BB188_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB188_17
.LBB188_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	srli.d	$a0, $a0, 34
	mul.w	$a0, $a0, $s4
	beqz	$a0, .LBB188_14
# %bb.16:                               #   in Loop: Header=BB188_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB188_14
.LBB188_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB188_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB188_21
.LBB188_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB188_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB188_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI188_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI188_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB188_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end188:
	.size	_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc, .Lfunc_end188-_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
.LCPI189_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc,@function
_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc: # @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB189_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB189_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	lu12i.w	$a0, -489336
	ori	$s4, $a0, 2185
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s4
	lu32i.d	$s4, 0
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB189_4
	.p2align	4, , 16
.LBB189_3:                              # %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit.us
                                        #   in Loop: Header=BB189_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB189_17
.LBB189_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_7 Depth 2
                                        #     Child Loop BB189_10 Depth 2
	bgeu	$s0, $a5, .LBB189_6
# %bb.5:                                #   in Loop: Header=BB189_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB189_9
	.p2align	4, , 16
.LBB189_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB189_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB189_7:                              # %vector.body
                                        #   Parent Loop BB189_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.wu	$vr2, $vr2, $vr4
	vsrli.w	$vr2, $vr2, 6
	vmuh.wu	$vr3, $vr3, $vr4
	vsrli.w	$vr3, $vr3, 6
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB189_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB189_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB189_11
.LBB189_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB189_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB189_10:                             # %scalar.ph
                                        #   Parent Loop BB189_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.wu	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	srli.d	$a4, $a4, 38
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB189_10
.LBB189_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB189_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s4
	srli.d	$a2, $a2, 38
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB189_3
# %bb.12:                               #   in Loop: Header=BB189_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB189_3
.LBB189_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, -489336
	ori	$s2, $a0, 2185
	lu32i.d	$s2, 0
	lu12i.w	$a0, 1
	ori	$s4, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB189_15
	.p2align	4, , 16
.LBB189_14:                             # %_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_.exit
                                        #   in Loop: Header=BB189_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB189_17
.LBB189_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	srli.d	$a0, $a0, 38
	mul.w	$a0, $a0, $s4
	beqz	$a0, .LBB189_14
# %bb.16:                               #   in Loop: Header=BB189_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB189_14
.LBB189_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB189_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB189_21
.LBB189_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB189_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB189_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI189_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI189_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB189_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end189:
	.size	_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc, .Lfunc_end189-_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
.LCPI190_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc,@function
_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc: # @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB190_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB190_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 3
	ori	$fp, $a0, 3712
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB190_4
	.p2align	4, , 16
.LBB190_3:                              # %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit.us
                                        #   in Loop: Header=BB190_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB190_17
.LBB190_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_7 Depth 2
                                        #     Child Loop BB190_10 Depth 2
	bgeu	$s0, $a5, .LBB190_6
# %bb.5:                                #   in Loop: Header=BB190_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB190_9
	.p2align	4, , 16
.LBB190_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB190_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB190_7:                              # %vector.body
                                        #   Parent Loop BB190_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vaddi.wu	$vr0, $vr0, 2
	vaddi.wu	$vr1, $vr1, 2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB190_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB190_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB190_11
.LBB190_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB190_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB190_10:                             # %scalar.ph
                                        #   Parent Loop BB190_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.w	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB190_10
.LBB190_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB190_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB190_3
# %bb.12:                               #   in Loop: Header=BB190_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB190_3
.LBB190_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s3, $a0, 384
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB190_15
	.p2align	4, , 16
.LBB190_14:                             # %_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_.exit
                                        #   in Loop: Header=BB190_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB190_17
.LBB190_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beq	$a0, $s3, .LBB190_14
# %bb.16:                               #   in Loop: Header=BB190_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB190_14
.LBB190_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB190_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB190_21
.LBB190_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB190_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB190_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI190_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI190_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB190_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end190:
	.size	_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc, .Lfunc_end190-_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
.LCPI191_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc,@function
_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc: # @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB191_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB191_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB191_4
	.p2align	4, , 16
.LBB191_3:                              # %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit.us
                                        #   in Loop: Header=BB191_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB191_17
.LBB191_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_7 Depth 2
                                        #     Child Loop BB191_10 Depth 2
	bgeu	$s0, $a5, .LBB191_6
# %bb.5:                                #   in Loop: Header=BB191_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB191_9
	.p2align	4, , 16
.LBB191_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB191_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB191_7:                              # %vector.body
                                        #   Parent Loop BB191_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB191_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB191_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB191_11
.LBB191_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB191_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB191_10:                             # %scalar.ph
                                        #   Parent Loop BB191_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB191_10
.LBB191_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB191_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB191_3
# %bb.12:                               #   in Loop: Header=BB191_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB191_3
.LBB191_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB191_15
	.p2align	4, , 16
.LBB191_14:                             # %_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_.exit
                                        #   in Loop: Header=BB191_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB191_17
.LBB191_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB191_14
# %bb.16:                               #   in Loop: Header=BB191_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB191_14
.LBB191_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB191_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB191_21
.LBB191_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB191_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB191_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI191_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI191_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB191_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end191:
	.size	_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc, .Lfunc_end191-_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
.LCPI192_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj19custom_constant_andIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc: # @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB192_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB192_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB192_4
	.p2align	4, , 16
.LBB192_3:                              # %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit.us
                                        #   in Loop: Header=BB192_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB192_17
.LBB192_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_7 Depth 2
                                        #     Child Loop BB192_10 Depth 2
	bgeu	$s0, $a5, .LBB192_6
# %bb.5:                                #   in Loop: Header=BB192_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB192_9
	.p2align	4, , 16
.LBB192_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB192_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB192_7:                              # %vector.body
                                        #   Parent Loop BB192_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB192_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB192_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB192_11
.LBB192_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB192_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB192_10:                             # %scalar.ph
                                        #   Parent Loop BB192_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.wu	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB192_10
.LBB192_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB192_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 10
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB192_3
# %bb.12:                               #   in Loop: Header=BB192_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB192_3
.LBB192_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB192_15
	.p2align	4, , 16
.LBB192_14:                             # %_Z17check_shifted_sumIj19custom_constant_andIjEEvT_.exit
                                        #   in Loop: Header=BB192_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB192_17
.LBB192_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 10
	beqz	$a0, .LBB192_14
# %bb.16:                               #   in Loop: Header=BB192_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB192_14
.LBB192_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB192_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB192_21
.LBB192_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB192_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB192_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI192_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI192_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB192_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end192:
	.size	_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc, .Lfunc_end192-_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
.LCPI193_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc: # @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB193_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB193_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 14
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB193_4
	.p2align	4, , 16
.LBB193_3:                              # %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit.us
                                        #   in Loop: Header=BB193_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB193_17
.LBB193_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_7 Depth 2
                                        #     Child Loop BB193_10 Depth 2
	bgeu	$s0, $a5, .LBB193_6
# %bb.5:                                #   in Loop: Header=BB193_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB193_9
	.p2align	4, , 16
.LBB193_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB193_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB193_7:                              # %vector.body
                                        #   Parent Loop BB193_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB193_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB193_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB193_11
.LBB193_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB193_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB193_10:                             # %scalar.ph
                                        #   Parent Loop BB193_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.wu	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB193_10
.LBB193_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB193_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 14
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB193_3
# %bb.12:                               #   in Loop: Header=BB193_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB193_3
.LBB193_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB193_15
	.p2align	4, , 16
.LBB193_14:                             # %_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_.exit
                                        #   in Loop: Header=BB193_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB193_17
.LBB193_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 14
	beqz	$a0, .LBB193_14
# %bb.16:                               #   in Loop: Header=BB193_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB193_14
.LBB193_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB193_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB193_21
.LBB193_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB193_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB193_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI193_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI193_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB193_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end193:
	.size	_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc, .Lfunc_end193-_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
.LCPI194_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj18custom_constant_orIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc,@function
_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc: # @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB194_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB194_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB194_4
	.p2align	4, , 16
.LBB194_3:                              # %_Z17check_shifted_sumIj18custom_constant_orIjEEvT_.exit.us
                                        #   in Loop: Header=BB194_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB194_15
.LBB194_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_7 Depth 2
                                        #     Child Loop BB194_10 Depth 2
	bgeu	$s0, $a5, .LBB194_6
# %bb.5:                                #   in Loop: Header=BB194_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB194_9
	.p2align	4, , 16
.LBB194_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB194_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB194_7:                              # %vector.body
                                        #   Parent Loop BB194_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB194_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB194_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB194_11
.LBB194_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB194_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB194_10:                             # %scalar.ph
                                        #   Parent Loop BB194_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB194_10
.LBB194_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB194_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 10
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB194_3
# %bb.12:                               #   in Loop: Header=BB194_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB194_3
.LBB194_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB194_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB194_14
.LBB194_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB194_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB194_19
.LBB194_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB194_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB194_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI194_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI194_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB194_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end194:
	.size	_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc, .Lfunc_end194-_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
.LCPI195_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc,@function
_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc: # @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB195_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB195_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 63
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB195_4
	.p2align	4, , 16
.LBB195_3:                              # %_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_.exit.us
                                        #   in Loop: Header=BB195_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB195_15
.LBB195_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_7 Depth 2
                                        #     Child Loop BB195_10 Depth 2
	bgeu	$s0, $a5, .LBB195_6
# %bb.5:                                #   in Loop: Header=BB195_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB195_9
	.p2align	4, , 16
.LBB195_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB195_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB195_7:                              # %vector.body
                                        #   Parent Loop BB195_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB195_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB195_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB195_11
.LBB195_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB195_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB195_10:                             # %scalar.ph
                                        #   Parent Loop BB195_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB195_10
.LBB195_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB195_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 63
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB195_3
# %bb.12:                               #   in Loop: Header=BB195_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB195_3
.LBB195_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB195_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB195_14
.LBB195_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB195_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB195_19
.LBB195_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB195_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB195_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI195_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI195_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB195_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end195:
	.size	_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc, .Lfunc_end195-_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
.LCPI196_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc: # @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB196_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB196_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB196_4
	.p2align	4, , 16
.LBB196_3:                              # %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit.us
                                        #   in Loop: Header=BB196_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB196_17
.LBB196_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_7 Depth 2
                                        #     Child Loop BB196_10 Depth 2
	bgeu	$s0, $a5, .LBB196_6
# %bb.5:                                #   in Loop: Header=BB196_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB196_9
	.p2align	4, , 16
.LBB196_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB196_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB196_7:                              # %vector.body
                                        #   Parent Loop BB196_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB196_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB196_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB196_11
.LBB196_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB196_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB196_10:                             # %scalar.ph
                                        #   Parent Loop BB196_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB196_10
.LBB196_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB196_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 10
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB196_3
# %bb.12:                               #   in Loop: Header=BB196_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB196_3
.LBB196_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB196_15
	.p2align	4, , 16
.LBB196_14:                             # %_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_.exit
                                        #   in Loop: Header=BB196_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB196_17
.LBB196_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xori	$a0, $a0, 10
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB196_14
# %bb.16:                               #   in Loop: Header=BB196_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB196_14
.LBB196_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB196_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB196_21
.LBB196_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB196_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB196_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI196_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI196_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB196_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end196:
	.size	_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc, .Lfunc_end196-_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
.LCPI197_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc: # @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB197_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB197_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.w	$vr4, 49
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB197_4
	.p2align	4, , 16
.LBB197_3:                              # %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit.us
                                        #   in Loop: Header=BB197_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB197_17
.LBB197_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_7 Depth 2
                                        #     Child Loop BB197_10 Depth 2
	bgeu	$s0, $a5, .LBB197_6
# %bb.5:                                #   in Loop: Header=BB197_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB197_9
	.p2align	4, , 16
.LBB197_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB197_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB197_7:                              # %vector.body
                                        #   Parent Loop BB197_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB197_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB197_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vshuf4i.w	$vr1, $vr0, 14
	vadd.w	$vr0, $vr0, $vr1
	vreplvei.w	$vr1, $vr0, 1
	vadd.w	$vr0, $vr0, $vr1
	vpickve2gr.w	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB197_11
.LBB197_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB197_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB197_10:                             # %scalar.ph
                                        #   Parent Loop BB197_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB197_10
.LBB197_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB197_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 49
	mul.w	$a2, $a2, $fp
	beq	$a0, $a2, .LBB197_3
# %bb.12:                               #   in Loop: Header=BB197_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 8
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB197_3
.LBB197_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB197_15
	.p2align	4, , 16
.LBB197_14:                             # %_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_.exit
                                        #   in Loop: Header=BB197_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB197_17
.LBB197_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xori	$a0, $a0, 49
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB197_14
# %bb.16:                               #   in Loop: Header=BB197_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB197_14
.LBB197_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB197_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB197_21
.LBB197_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB197_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB197_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI197_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI197_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB197_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end197:
	.size	_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc, .Lfunc_end197-_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl10custom_twoIlEEvPT_iPKc
.LCPI198_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl10custom_twoIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl10custom_twoIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl10custom_twoIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl10custom_twoIlEEvPT_iPKc,@function
_Z13test_constantIl10custom_twoIlEEvPT_iPKc: # @_Z13test_constantIl10custom_twoIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB198_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB198_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB198_4
	.p2align	4, , 16
.LBB198_3:                              # %_Z17check_shifted_sumIl10custom_twoIlEEvT_.exit.us
                                        #   in Loop: Header=BB198_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB198_8
.LBB198_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB198_3
# %bb.5:                                #   in Loop: Header=BB198_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB198_3
.LBB198_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB198_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB198_7
.LBB198_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB198_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB198_12
.LBB198_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB198_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB198_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI198_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI198_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB198_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end198:
	.size	_Z13test_constantIl10custom_twoIlEEvPT_iPKc, .Lfunc_end198-_Z13test_constantIl10custom_twoIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
.LCPI199_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc: # @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB199_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB199_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB199_4
	.p2align	4, , 16
.LBB199_3:                              # %_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB199_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB199_8
.LBB199_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB199_3
# %bb.5:                                #   in Loop: Header=BB199_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB199_3
.LBB199_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB199_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB199_7
.LBB199_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB199_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB199_12
.LBB199_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB199_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB199_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI199_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI199_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB199_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end199:
	.size	_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc, .Lfunc_end199-_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
.LCPI200_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc: # @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB200_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB200_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB200_4
	.p2align	4, , 16
.LBB200_3:                              # %_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB200_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB200_8
.LBB200_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB200_3
# %bb.5:                                #   in Loop: Header=BB200_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB200_3
.LBB200_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB200_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB200_7
.LBB200_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB200_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB200_12
.LBB200_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB200_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB200_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI200_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI200_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB200_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end200:
	.size	_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc, .Lfunc_end200-_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
.LCPI201_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc: # @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB201_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB201_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB201_4
	.p2align	4, , 16
.LBB201_3:                              # %_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB201_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB201_8
.LBB201_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB201_3
# %bb.5:                                #   in Loop: Header=BB201_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB201_3
.LBB201_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB201_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB201_7
.LBB201_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB201_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB201_12
.LBB201_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB201_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB201_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI201_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI201_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB201_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end201:
	.size	_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc, .Lfunc_end201-_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
.LCPI202_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc: # @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB202_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB202_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB202_4
	.p2align	4, , 16
.LBB202_3:                              # %_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB202_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB202_8
.LBB202_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB202_3
# %bb.5:                                #   in Loop: Header=BB202_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB202_3
.LBB202_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB202_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB202_7
.LBB202_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB202_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB202_12
.LBB202_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB202_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB202_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI202_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI202_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB202_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end202:
	.size	_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc, .Lfunc_end202-_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
.LCPI203_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc: # @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB203_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB203_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB203_4
	.p2align	4, , 16
.LBB203_3:                              # %_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB203_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB203_8
.LBB203_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB203_3
# %bb.5:                                #   in Loop: Header=BB203_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB203_3
.LBB203_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB203_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB203_7
.LBB203_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB203_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB203_12
.LBB203_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB203_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB203_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI203_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI203_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB203_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end203:
	.size	_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc, .Lfunc_end203-_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
.LCPI204_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc: # @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB204_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB204_4
.LBB204_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB204_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB204_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI204_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI204_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB204_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end204:
	.size	_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc, .Lfunc_end204-_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
.LCPI205_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc: # @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB205_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB205_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB205_4
	.p2align	4, , 16
.LBB205_3:                              # %_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB205_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB205_8
.LBB205_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB205_3
# %bb.5:                                #   in Loop: Header=BB205_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB205_3
.LBB205_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB205_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB205_7
.LBB205_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB205_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB205_12
.LBB205_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB205_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB205_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI205_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI205_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB205_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end205:
	.size	_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc, .Lfunc_end205-_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
.LCPI206_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc: # @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB206_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB206_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB206_4
	.p2align	4, , 16
.LBB206_3:                              # %_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB206_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB206_8
.LBB206_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB206_3
# %bb.5:                                #   in Loop: Header=BB206_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB206_3
.LBB206_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB206_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB206_7
.LBB206_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB206_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB206_12
.LBB206_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB206_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB206_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI206_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI206_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB206_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end206:
	.size	_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc, .Lfunc_end206-_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
.LCPI207_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc: # @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB207_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB207_4
.LBB207_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB207_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB207_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI207_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI207_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB207_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end207:
	.size	_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc, .Lfunc_end207-_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
.LCPI208_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc: # @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB208_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB208_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB208_4
	.p2align	4, , 16
.LBB208_3:                              # %_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB208_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB208_8
.LBB208_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB208_3
# %bb.5:                                #   in Loop: Header=BB208_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB208_3
.LBB208_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB208_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB208_7
.LBB208_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB208_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB208_12
.LBB208_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB208_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB208_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI208_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI208_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB208_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end208:
	.size	_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc, .Lfunc_end208-_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
.LCPI209_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc: # @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB209_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB209_4
.LBB209_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB209_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB209_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI209_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI209_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB209_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end209:
	.size	_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc, .Lfunc_end209-_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
.LCPI210_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc: # @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB210_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB210_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB210_4
	.p2align	4, , 16
.LBB210_3:                              # %_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB210_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB210_8
.LBB210_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB210_3
# %bb.5:                                #   in Loop: Header=BB210_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB210_3
.LBB210_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB210_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB210_7
.LBB210_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB210_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB210_12
.LBB210_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB210_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB210_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI210_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI210_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB210_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end210:
	.size	_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc, .Lfunc_end210-_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
.LCPI211_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc: # @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB211_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB211_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB211_4
	.p2align	4, , 16
.LBB211_3:                              # %_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB211_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB211_8
.LBB211_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB211_3
# %bb.5:                                #   in Loop: Header=BB211_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB211_3
.LBB211_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB211_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB211_7
.LBB211_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB211_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB211_12
.LBB211_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB211_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB211_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI211_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI211_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB211_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end211:
	.size	_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc, .Lfunc_end211-_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
.LCPI212_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc: # @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB212_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB212_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB212_4
	.p2align	4, , 16
.LBB212_3:                              # %_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_.exit.us
                                        #   in Loop: Header=BB212_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB212_8
.LBB212_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB212_3
# %bb.5:                                #   in Loop: Header=BB212_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB212_3
.LBB212_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB212_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB212_7
.LBB212_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB212_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB212_12
.LBB212_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB212_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB212_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI212_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI212_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB212_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end212:
	.size	_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc, .Lfunc_end212-_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
.LCPI213_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl19custom_constant_addIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc: # @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB213_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB213_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB213_4
	.p2align	4, , 16
.LBB213_3:                              # %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit.us
                                        #   in Loop: Header=BB213_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB213_17
.LBB213_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_7 Depth 2
                                        #     Child Loop BB213_10 Depth 2
	bgeu	$s0, $a5, .LBB213_6
# %bb.5:                                #   in Loop: Header=BB213_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB213_9
	.p2align	4, , 16
.LBB213_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB213_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB213_7:                              # %vector.body
                                        #   Parent Loop BB213_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vaddi.du	$vr0, $vr0, 10
	vaddi.du	$vr1, $vr1, 10
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB213_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB213_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB213_11
.LBB213_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB213_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB213_10:                             # %scalar.ph
                                        #   Parent Loop BB213_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB213_10
.LBB213_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB213_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB213_3
# %bb.12:                               #   in Loop: Header=BB213_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB213_3
.LBB213_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB213_15
	.p2align	4, , 16
.LBB213_14:                             # %_Z17check_shifted_sumIl19custom_constant_addIlEEvT_.exit
                                        #   in Loop: Header=BB213_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB213_17
.LBB213_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB213_14
# %bb.16:                               #   in Loop: Header=BB213_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB213_14
.LBB213_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB213_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB213_21
.LBB213_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB213_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB213_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI213_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI213_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB213_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end213:
	.size	_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc, .Lfunc_end213-_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
.LCPI214_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc: # @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB214_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB214_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB214_4
	.p2align	4, , 16
.LBB214_3:                              # %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit.us
                                        #   in Loop: Header=BB214_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB214_17
.LBB214_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_7 Depth 2
                                        #     Child Loop BB214_10 Depth 2
	bgeu	$s0, $a5, .LBB214_6
# %bb.5:                                #   in Loop: Header=BB214_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB214_9
	.p2align	4, , 16
.LBB214_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB214_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB214_7:                              # %vector.body
                                        #   Parent Loop BB214_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vaddi.du	$vr0, $vr0, 10
	vaddi.du	$vr1, $vr1, 10
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB214_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB214_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB214_11
.LBB214_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB214_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB214_10:                             # %scalar.ph
                                        #   Parent Loop BB214_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB214_10
.LBB214_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB214_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB214_3
# %bb.12:                               #   in Loop: Header=BB214_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB214_3
.LBB214_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB214_15
	.p2align	4, , 16
.LBB214_14:                             # %_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_.exit
                                        #   in Loop: Header=BB214_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB214_17
.LBB214_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB214_14
# %bb.16:                               #   in Loop: Header=BB214_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB214_14
.LBB214_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB214_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB214_21
.LBB214_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB214_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB214_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI214_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI214_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB214_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end214:
	.size	_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc, .Lfunc_end214-_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
.LCPI215_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl19custom_constant_subIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc: # @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB215_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB215_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB215_4
	.p2align	4, , 16
.LBB215_3:                              # %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit.us
                                        #   in Loop: Header=BB215_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB215_17
.LBB215_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_7 Depth 2
                                        #     Child Loop BB215_10 Depth 2
	bgeu	$s0, $a5, .LBB215_6
# %bb.5:                                #   in Loop: Header=BB215_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB215_9
	.p2align	4, , 16
.LBB215_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB215_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB215_7:                              # %vector.body
                                        #   Parent Loop BB215_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB215_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB215_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB215_11
.LBB215_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB215_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB215_10:                             # %scalar.ph
                                        #   Parent Loop BB215_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB215_10
.LBB215_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB215_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB215_3
# %bb.12:                               #   in Loop: Header=BB215_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB215_3
.LBB215_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB215_15
	.p2align	4, , 16
.LBB215_14:                             # %_Z17check_shifted_sumIl19custom_constant_subIlEEvT_.exit
                                        #   in Loop: Header=BB215_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB215_17
.LBB215_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB215_14
# %bb.16:                               #   in Loop: Header=BB215_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB215_14
.LBB215_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB215_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB215_21
.LBB215_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB215_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB215_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI215_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI215_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB215_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end215:
	.size	_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc, .Lfunc_end215-_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
.LCPI216_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc: # @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB216_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB216_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB216_4
	.p2align	4, , 16
.LBB216_3:                              # %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit.us
                                        #   in Loop: Header=BB216_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB216_17
.LBB216_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_7 Depth 2
                                        #     Child Loop BB216_10 Depth 2
	bgeu	$s0, $a5, .LBB216_6
# %bb.5:                                #   in Loop: Header=BB216_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB216_9
	.p2align	4, , 16
.LBB216_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB216_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB216_7:                              # %vector.body
                                        #   Parent Loop BB216_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB216_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB216_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB216_11
.LBB216_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB216_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB216_10:                             # %scalar.ph
                                        #   Parent Loop BB216_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB216_10
.LBB216_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB216_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB216_3
# %bb.12:                               #   in Loop: Header=BB216_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB216_3
.LBB216_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB216_15
	.p2align	4, , 16
.LBB216_14:                             # %_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_.exit
                                        #   in Loop: Header=BB216_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB216_17
.LBB216_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB216_14
# %bb.16:                               #   in Loop: Header=BB216_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB216_14
.LBB216_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB216_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB216_21
.LBB216_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB216_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB216_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI216_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI216_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB216_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end216:
	.size	_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc, .Lfunc_end216-_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
.LCPI217_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc,@function
_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc: # @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB217_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB217_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB217_4
	.p2align	4, , 16
.LBB217_3:                              # %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit.us
                                        #   in Loop: Header=BB217_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB217_17
.LBB217_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_7 Depth 2
                                        #     Child Loop BB217_10 Depth 2
	bgeu	$s0, $a5, .LBB217_6
# %bb.5:                                #   in Loop: Header=BB217_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB217_9
	.p2align	4, , 16
.LBB217_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB217_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB217_7:                              # %vector.body
                                        #   Parent Loop BB217_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr2, $vr4
	vmadd.d	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB217_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB217_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB217_11
.LBB217_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB217_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB217_10:                             # %scalar.ph
                                        #   Parent Loop BB217_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB217_10
.LBB217_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB217_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB217_3
# %bb.12:                               #   in Loop: Header=BB217_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB217_3
.LBB217_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB217_15
	.p2align	4, , 16
.LBB217_14:                             # %_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_.exit
                                        #   in Loop: Header=BB217_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB217_17
.LBB217_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beqz	$a0, .LBB217_14
# %bb.16:                               #   in Loop: Header=BB217_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB217_14
.LBB217_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB217_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB217_21
.LBB217_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB217_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB217_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI217_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI217_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB217_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end217:
	.size	_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc, .Lfunc_end217-_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
.LCPI218_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc,@function
_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc: # @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB218_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB218_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB218_4
	.p2align	4, , 16
.LBB218_3:                              # %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit.us
                                        #   in Loop: Header=BB218_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB218_17
.LBB218_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_7 Depth 2
                                        #     Child Loop BB218_10 Depth 2
	bgeu	$s0, $a5, .LBB218_6
# %bb.5:                                #   in Loop: Header=BB218_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB218_9
	.p2align	4, , 16
.LBB218_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB218_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB218_7:                              # %vector.body
                                        #   Parent Loop BB218_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr2, $vr4
	vmadd.d	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB218_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB218_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB218_11
.LBB218_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB218_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB218_10:                             # %scalar.ph
                                        #   Parent Loop BB218_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB218_10
.LBB218_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB218_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB218_3
# %bb.12:                               #   in Loop: Header=BB218_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB218_3
.LBB218_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB218_15
	.p2align	4, , 16
.LBB218_14:                             # %_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_.exit
                                        #   in Loop: Header=BB218_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB218_17
.LBB218_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beqz	$a0, .LBB218_14
# %bb.16:                               #   in Loop: Header=BB218_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB218_14
.LBB218_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB218_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB218_21
.LBB218_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB218_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB218_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI218_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI218_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB218_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end218:
	.size	_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc, .Lfunc_end218-_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
.LCPI219_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc,@function
_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc: # @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB219_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB219_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 234
	ori	$fp, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB219_4
	.p2align	4, , 16
.LBB219_3:                              # %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit.us
                                        #   in Loop: Header=BB219_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB219_17
.LBB219_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_7 Depth 2
                                        #     Child Loop BB219_10 Depth 2
	bgeu	$s0, $a5, .LBB219_6
# %bb.5:                                #   in Loop: Header=BB219_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB219_9
	.p2align	4, , 16
.LBB219_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB219_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB219_7:                              # %vector.body
                                        #   Parent Loop BB219_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB219_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB219_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB219_11
.LBB219_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB219_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB219_10:                             # %scalar.ph
                                        #   Parent Loop BB219_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB219_10
.LBB219_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB219_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB219_3
# %bb.12:                               #   in Loop: Header=BB219_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB219_3
.LBB219_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -235
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB219_15
	.p2align	4, , 16
.LBB219_14:                             # %_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_.exit
                                        #   in Loop: Header=BB219_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB219_17
.LBB219_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB219_14
# %bb.16:                               #   in Loop: Header=BB219_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB219_14
.LBB219_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB219_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB219_21
.LBB219_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB219_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB219_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI219_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI219_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB219_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end219:
	.size	_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc, .Lfunc_end219-_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
.LCPI220_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc,@function
_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc: # @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB220_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB220_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a6, $zero, 4
	lu12i.w	$a0, 419430
	ori	$a0, $a0, 1639
	lu32i.d	$a0, 419430
	lu52i.d	$s4, $a0, 1638
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.d	$vr5, $s4
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB220_4
	.p2align	4, , 16
.LBB220_3:                              # %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit.us
                                        #   in Loop: Header=BB220_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB220_17
.LBB220_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_7 Depth 2
                                        #     Child Loop BB220_10 Depth 2
	bgeu	$s0, $a6, .LBB220_6
# %bb.5:                                #   in Loop: Header=BB220_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB220_9
	.p2align	4, , 16
.LBB220_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB220_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB220_7:                              # %vector.body
                                        #   Parent Loop BB220_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.d	$vr2, $vr2, $vr5
	vsrli.d	$vr4, $vr2, 63
	vsrai.d	$vr2, $vr2, 1
	vadd.d	$vr2, $vr2, $vr4
	vmuh.d	$vr3, $vr3, $vr5
	vsrli.d	$vr4, $vr3, 63
	vsrai.d	$vr3, $vr3, 1
	vadd.d	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB220_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB220_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB220_11
.LBB220_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB220_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB220_10:                             # %scalar.ph
                                        #   Parent Loop BB220_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mulh.d	$a4, $a4, $s4
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 1
	add.d	$a4, $a4, $a5
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB220_10
.LBB220_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB220_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mulh.d	$a2, $a2, $s4
	srli.d	$a3, $a2, 63
	srli.d	$a2, $a2, 1
	add.d	$a2, $a2, $a3
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB220_3
# %bb.12:                               #   in Loop: Header=BB220_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	ori	$a6, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB220_3
.LBB220_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 9
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB220_15
	.p2align	4, , 16
.LBB220_14:                             # %_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_.exit
                                        #   in Loop: Header=BB220_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB220_17
.LBB220_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	addi.d	$a0, $a0, 4
	bltu	$a0, $s2, .LBB220_14
# %bb.16:                               #   in Loop: Header=BB220_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB220_14
.LBB220_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB220_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB220_21
.LBB220_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB220_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB220_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI220_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI220_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB220_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end220:
	.size	_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc, .Lfunc_end220-_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
.LCPI221_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc,@function
_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc: # @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB221_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB221_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a6, $zero, 4
	lu12i.w	$a0, -489336
	ori	$a0, $a0, 2185
	lu32i.d	$a0, -489336
	lu52i.d	$s4, $a0, -1912
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.d	$vr5, $s4
	vst	$vr5, $sp, 32                   # 16-byte Folded Spill
	b	.LBB221_4
	.p2align	4, , 16
.LBB221_3:                              # %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit.us
                                        #   in Loop: Header=BB221_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB221_17
.LBB221_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_7 Depth 2
                                        #     Child Loop BB221_10 Depth 2
	bgeu	$s0, $a6, .LBB221_6
# %bb.5:                                #   in Loop: Header=BB221_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB221_9
	.p2align	4, , 16
.LBB221_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB221_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB221_7:                              # %vector.body
                                        #   Parent Loop BB221_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.d	$vr4, $vr2, $vr5
	vadd.d	$vr2, $vr4, $vr2
	vsrli.d	$vr4, $vr2, 63
	vsrai.d	$vr2, $vr2, 6
	vadd.d	$vr2, $vr2, $vr4
	vmuh.d	$vr4, $vr3, $vr5
	vadd.d	$vr3, $vr4, $vr3
	vsrli.d	$vr4, $vr3, 63
	vsrai.d	$vr3, $vr3, 6
	vadd.d	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB221_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB221_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB221_11
.LBB221_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB221_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB221_10:                             # %scalar.ph
                                        #   Parent Loop BB221_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mulh.d	$a5, $a4, $s4
	add.d	$a4, $a5, $a4
	srli.d	$a5, $a4, 63
	srai.d	$a4, $a4, 6
	add.d	$a4, $a4, $a5
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB221_10
.LBB221_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB221_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mulh.d	$a3, $a2, $s4
	add.d	$a2, $a3, $a2
	srli.d	$a3, $a2, 63
	srli.d	$a2, $a2, 6
	add.d	$a2, $a2, $a3
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB221_3
# %bb.12:                               #   in Loop: Header=BB221_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 32                   # 16-byte Folded Reload
	ori	$a6, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB221_3
.LBB221_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 239
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB221_15
	.p2align	4, , 16
.LBB221_14:                             # %_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_.exit
                                        #   in Loop: Header=BB221_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB221_17
.LBB221_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	addi.d	$a0, $a0, 119
	bltu	$a0, $s2, .LBB221_14
# %bb.16:                               #   in Loop: Header=BB221_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB221_14
.LBB221_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB221_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB221_21
.LBB221_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB221_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB221_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI221_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI221_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB221_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end221:
	.size	_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc, .Lfunc_end221-_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
.LCPI222_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc,@function
_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc: # @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB222_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB222_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 3
	ori	$fp, $a0, 3712
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB222_4
	.p2align	4, , 16
.LBB222_3:                              # %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit.us
                                        #   in Loop: Header=BB222_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB222_17
.LBB222_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_7 Depth 2
                                        #     Child Loop BB222_10 Depth 2
	bgeu	$s0, $a5, .LBB222_6
# %bb.5:                                #   in Loop: Header=BB222_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB222_9
	.p2align	4, , 16
.LBB222_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB222_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB222_7:                              # %vector.body
                                        #   Parent Loop BB222_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vaddi.du	$vr0, $vr0, 2
	vaddi.du	$vr1, $vr1, 2
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB222_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB222_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB222_11
.LBB222_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB222_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB222_10:                             # %scalar.ph
                                        #   Parent Loop BB222_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB222_10
.LBB222_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB222_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB222_3
# %bb.12:                               #   in Loop: Header=BB222_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB222_3
.LBB222_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s3, $a0, 384
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB222_15
	.p2align	4, , 16
.LBB222_14:                             # %_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_.exit
                                        #   in Loop: Header=BB222_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB222_17
.LBB222_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB222_14
# %bb.16:                               #   in Loop: Header=BB222_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB222_14
.LBB222_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB222_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB222_21
.LBB222_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB222_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB222_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI222_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI222_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB222_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end222:
	.size	_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc, .Lfunc_end222-_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
.LCPI223_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc,@function
_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc: # @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB223_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB223_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB223_4
	.p2align	4, , 16
.LBB223_3:                              # %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit.us
                                        #   in Loop: Header=BB223_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB223_17
.LBB223_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_7 Depth 2
                                        #     Child Loop BB223_10 Depth 2
	bgeu	$s0, $a5, .LBB223_6
# %bb.5:                                #   in Loop: Header=BB223_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB223_9
	.p2align	4, , 16
.LBB223_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB223_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB223_7:                              # %vector.body
                                        #   Parent Loop BB223_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB223_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB223_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB223_11
.LBB223_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB223_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB223_10:                             # %scalar.ph
                                        #   Parent Loop BB223_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB223_10
.LBB223_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB223_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB223_3
# %bb.12:                               #   in Loop: Header=BB223_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB223_3
.LBB223_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB223_15
	.p2align	4, , 16
.LBB223_14:                             # %_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_.exit
                                        #   in Loop: Header=BB223_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB223_17
.LBB223_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beqz	$a0, .LBB223_14
# %bb.16:                               #   in Loop: Header=BB223_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB223_14
.LBB223_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB223_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB223_21
.LBB223_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB223_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB223_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI223_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI223_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB223_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end223:
	.size	_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc, .Lfunc_end223-_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
.LCPI224_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl19custom_constant_andIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc: # @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB224_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB224_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB224_4
	.p2align	4, , 16
.LBB224_3:                              # %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit.us
                                        #   in Loop: Header=BB224_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB224_17
.LBB224_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_7 Depth 2
                                        #     Child Loop BB224_10 Depth 2
	bgeu	$s0, $a5, .LBB224_6
# %bb.5:                                #   in Loop: Header=BB224_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB224_9
	.p2align	4, , 16
.LBB224_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB224_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB224_7:                              # %vector.body
                                        #   Parent Loop BB224_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB224_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB224_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB224_11
.LBB224_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB224_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB224_10:                             # %scalar.ph
                                        #   Parent Loop BB224_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB224_10
.LBB224_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB224_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 10
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB224_3
# %bb.12:                               #   in Loop: Header=BB224_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB224_3
.LBB224_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB224_15
	.p2align	4, , 16
.LBB224_14:                             # %_Z17check_shifted_sumIl19custom_constant_andIlEEvT_.exit
                                        #   in Loop: Header=BB224_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB224_17
.LBB224_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 10
	beqz	$a0, .LBB224_14
# %bb.16:                               #   in Loop: Header=BB224_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB224_14
.LBB224_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB224_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB224_21
.LBB224_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB224_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB224_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI224_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI224_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB224_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end224:
	.size	_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc, .Lfunc_end224-_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
.LCPI225_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc: # @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB225_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB225_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 14
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB225_4
	.p2align	4, , 16
.LBB225_3:                              # %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit.us
                                        #   in Loop: Header=BB225_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB225_17
.LBB225_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_7 Depth 2
                                        #     Child Loop BB225_10 Depth 2
	bgeu	$s0, $a5, .LBB225_6
# %bb.5:                                #   in Loop: Header=BB225_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB225_9
	.p2align	4, , 16
.LBB225_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB225_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB225_7:                              # %vector.body
                                        #   Parent Loop BB225_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB225_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB225_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB225_11
.LBB225_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB225_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB225_10:                             # %scalar.ph
                                        #   Parent Loop BB225_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB225_10
.LBB225_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB225_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	andi	$a2, $a2, 14
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB225_3
# %bb.12:                               #   in Loop: Header=BB225_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB225_3
.LBB225_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB225_15
	.p2align	4, , 16
.LBB225_14:                             # %_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_.exit
                                        #   in Loop: Header=BB225_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB225_17
.LBB225_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	andi	$a0, $a0, 14
	beqz	$a0, .LBB225_14
# %bb.16:                               #   in Loop: Header=BB225_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB225_14
.LBB225_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB225_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB225_21
.LBB225_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB225_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB225_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI225_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI225_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB225_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end225:
	.size	_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc, .Lfunc_end225-_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
.LCPI226_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl18custom_constant_orIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc,@function
_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc: # @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB226_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB226_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB226_4
	.p2align	4, , 16
.LBB226_3:                              # %_Z17check_shifted_sumIl18custom_constant_orIlEEvT_.exit.us
                                        #   in Loop: Header=BB226_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB226_15
.LBB226_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_7 Depth 2
                                        #     Child Loop BB226_10 Depth 2
	bgeu	$s0, $a5, .LBB226_6
# %bb.5:                                #   in Loop: Header=BB226_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB226_9
	.p2align	4, , 16
.LBB226_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB226_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB226_7:                              # %vector.body
                                        #   Parent Loop BB226_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB226_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB226_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB226_11
.LBB226_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB226_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB226_10:                             # %scalar.ph
                                        #   Parent Loop BB226_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB226_10
.LBB226_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB226_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 10
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB226_3
# %bb.12:                               #   in Loop: Header=BB226_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB226_3
.LBB226_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB226_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB226_14
.LBB226_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB226_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB226_19
.LBB226_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB226_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB226_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI226_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI226_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB226_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end226:
	.size	_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc, .Lfunc_end226-_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
.LCPI227_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc,@function
_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc: # @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB227_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB227_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 63
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB227_4
	.p2align	4, , 16
.LBB227_3:                              # %_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_.exit.us
                                        #   in Loop: Header=BB227_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB227_15
.LBB227_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_7 Depth 2
                                        #     Child Loop BB227_10 Depth 2
	bgeu	$s0, $a5, .LBB227_6
# %bb.5:                                #   in Loop: Header=BB227_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB227_9
	.p2align	4, , 16
.LBB227_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB227_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB227_7:                              # %vector.body
                                        #   Parent Loop BB227_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB227_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB227_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB227_11
.LBB227_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB227_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB227_10:                             # %scalar.ph
                                        #   Parent Loop BB227_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB227_10
.LBB227_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB227_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	ori	$a2, $a2, 63
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB227_3
# %bb.12:                               #   in Loop: Header=BB227_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB227_3
.LBB227_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB227_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB227_14
.LBB227_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB227_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB227_19
.LBB227_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB227_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB227_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI227_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI227_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB227_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end227:
	.size	_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc, .Lfunc_end227-_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
.LCPI228_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc: # @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB228_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB228_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$fp, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB228_4
	.p2align	4, , 16
.LBB228_3:                              # %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit.us
                                        #   in Loop: Header=BB228_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB228_17
.LBB228_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_7 Depth 2
                                        #     Child Loop BB228_10 Depth 2
	bgeu	$s0, $a5, .LBB228_6
# %bb.5:                                #   in Loop: Header=BB228_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB228_9
	.p2align	4, , 16
.LBB228_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB228_4 Depth=1
	move	$a0, $fp
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB228_7:                              # %vector.body
                                        #   Parent Loop BB228_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB228_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB228_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB228_11
.LBB228_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB228_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB228_10:                             # %scalar.ph
                                        #   Parent Loop BB228_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB228_10
.LBB228_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB228_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 10
	mul.d	$a2, $a2, $s3
	beq	$a0, $a2, .LBB228_3
# %bb.12:                               #   in Loop: Header=BB228_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB228_3
.LBB228_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 10
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB228_15
	.p2align	4, , 16
.LBB228_14:                             # %_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_.exit
                                        #   in Loop: Header=BB228_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB228_17
.LBB228_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beq	$a0, $s2, .LBB228_14
# %bb.16:                               #   in Loop: Header=BB228_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB228_14
.LBB228_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB228_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB228_21
.LBB228_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB228_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB228_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI228_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI228_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB228_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end228:
	.size	_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc, .Lfunc_end228-_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
.LCPI229_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc: # @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB229_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB229_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$fp, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 49
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB229_4
	.p2align	4, , 16
.LBB229_3:                              # %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit.us
                                        #   in Loop: Header=BB229_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB229_17
.LBB229_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_7 Depth 2
                                        #     Child Loop BB229_10 Depth 2
	bgeu	$s0, $a5, .LBB229_6
# %bb.5:                                #   in Loop: Header=BB229_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB229_9
	.p2align	4, , 16
.LBB229_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB229_4 Depth=1
	move	$a0, $fp
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB229_7:                              # %vector.body
                                        #   Parent Loop BB229_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB229_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB229_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB229_11
.LBB229_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB229_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB229_10:                             # %scalar.ph
                                        #   Parent Loop BB229_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB229_10
.LBB229_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB229_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xori	$a2, $a2, 49
	mul.d	$a2, $a2, $s3
	beq	$a0, $a2, .LBB229_3
# %bb.12:                               #   in Loop: Header=BB229_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB229_3
.LBB229_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ori	$s2, $zero, 49
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB229_15
	.p2align	4, , 16
.LBB229_14:                             # %_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_.exit
                                        #   in Loop: Header=BB229_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB229_17
.LBB229_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beq	$a0, $s2, .LBB229_14
# %bb.16:                               #   in Loop: Header=BB229_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB229_14
.LBB229_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB229_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB229_21
.LBB229_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB229_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB229_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI229_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI229_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB229_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end229:
	.size	_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc, .Lfunc_end229-_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm10custom_twoImEEvPT_iPKc
.LCPI230_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm10custom_twoImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm10custom_twoImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm10custom_twoImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm10custom_twoImEEvPT_iPKc,@function
_Z13test_constantIm10custom_twoImEEvPT_iPKc: # @_Z13test_constantIm10custom_twoImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB230_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB230_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB230_4
	.p2align	4, , 16
.LBB230_3:                              # %_Z17check_shifted_sumIm10custom_twoImEEvT_.exit.us
                                        #   in Loop: Header=BB230_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB230_8
.LBB230_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB230_3
# %bb.5:                                #   in Loop: Header=BB230_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB230_3
.LBB230_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB230_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB230_7
.LBB230_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB230_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB230_12
.LBB230_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB230_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB230_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI230_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI230_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB230_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end230:
	.size	_Z13test_constantIm10custom_twoImEEvPT_iPKc, .Lfunc_end230-_Z13test_constantIm10custom_twoImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
.LCPI231_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm20custom_add_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc: # @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB231_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB231_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB231_4
	.p2align	4, , 16
.LBB231_3:                              # %_Z17check_shifted_sumIm20custom_add_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB231_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB231_8
.LBB231_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB231_3
# %bb.5:                                #   in Loop: Header=BB231_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB231_3
.LBB231_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB231_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB231_7
.LBB231_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB231_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB231_12
.LBB231_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB231_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB231_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI231_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI231_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB231_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end231:
	.size	_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc, .Lfunc_end231-_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
.LCPI232_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc: # @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB232_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB232_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB232_4
	.p2align	4, , 16
.LBB232_3:                              # %_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB232_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB232_8
.LBB232_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB232_3
# %bb.5:                                #   in Loop: Header=BB232_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB232_3
.LBB232_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB232_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB232_7
.LBB232_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB232_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB232_12
.LBB232_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB232_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB232_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI232_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI232_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB232_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end232:
	.size	_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc, .Lfunc_end232-_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
.LCPI233_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc,@function
_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc: # @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB233_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB233_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB233_4
	.p2align	4, , 16
.LBB233_3:                              # %_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB233_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB233_8
.LBB233_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB233_3
# %bb.5:                                #   in Loop: Header=BB233_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB233_3
.LBB233_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB233_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB233_7
.LBB233_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB233_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB233_12
.LBB233_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB233_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB233_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI233_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI233_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB233_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end233:
	.size	_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc, .Lfunc_end233-_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
.LCPI234_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc,@function
_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc: # @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB234_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB234_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB234_4
	.p2align	4, , 16
.LBB234_3:                              # %_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB234_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB234_8
.LBB234_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB234_3
# %bb.5:                                #   in Loop: Header=BB234_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB234_3
.LBB234_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB234_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB234_7
.LBB234_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB234_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB234_12
.LBB234_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB234_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB234_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI234_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI234_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB234_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end234:
	.size	_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc, .Lfunc_end234-_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
.LCPI235_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc: # @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB235_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB235_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB235_4
	.p2align	4, , 16
.LBB235_3:                              # %_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB235_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB235_8
.LBB235_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB235_3
# %bb.5:                                #   in Loop: Header=BB235_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB235_3
.LBB235_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB235_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB235_7
.LBB235_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB235_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB235_12
.LBB235_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB235_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB235_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI235_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI235_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB235_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end235:
	.size	_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc, .Lfunc_end235-_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
.LCPI236_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc: # @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB236_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB236_4
.LBB236_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB236_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB236_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI236_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI236_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB236_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end236:
	.size	_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc, .Lfunc_end236-_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
.LCPI237_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc: # @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB237_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB237_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB237_4
	.p2align	4, , 16
.LBB237_3:                              # %_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB237_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB237_8
.LBB237_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB237_3
# %bb.5:                                #   in Loop: Header=BB237_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB237_3
.LBB237_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB237_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB237_7
.LBB237_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB237_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB237_12
.LBB237_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB237_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB237_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI237_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI237_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB237_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end237:
	.size	_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc, .Lfunc_end237-_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
.LCPI238_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc,@function
_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc: # @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB238_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB238_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB238_4
	.p2align	4, , 16
.LBB238_3:                              # %_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB238_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB238_8
.LBB238_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB238_3
# %bb.5:                                #   in Loop: Header=BB238_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB238_3
.LBB238_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB238_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB238_7
.LBB238_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB238_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB238_12
.LBB238_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB238_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB238_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI238_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI238_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB238_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end238:
	.size	_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc, .Lfunc_end238-_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
.LCPI239_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc,@function
_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc: # @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB239_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB239_4
.LBB239_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB239_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB239_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI239_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI239_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB239_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end239:
	.size	_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc, .Lfunc_end239-_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
.LCPI240_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc: # @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB240_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB240_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB240_4
	.p2align	4, , 16
.LBB240_3:                              # %_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB240_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB240_8
.LBB240_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB240_3
# %bb.5:                                #   in Loop: Header=BB240_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB240_3
.LBB240_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB240_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB240_7
.LBB240_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB240_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB240_12
.LBB240_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB240_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB240_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI240_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI240_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB240_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end240:
	.size	_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc, .Lfunc_end240-_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
.LCPI241_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc: # @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:                                # %._crit_edge
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$fp, $a2
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s1, %pc_hi20(start_time)
	st.d	$a0, $s1, %pc_lo12(start_time)
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	ld.d	$s2, $s1, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a0, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a2, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a1, %pc_hi20(end_time)
	st.d	$s0, $a1, %pc_lo12(end_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	beqz	$a0, .LBB241_2
# %bb.1:                                # %._crit_edge
	ld.w	$a1, $s1, %pc_lo12(current_test)
	blt	$a1, $a2, .LBB241_4
.LBB241_2:
	addi.w	$a1, $a2, 10
	st.w	$a1, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a1, 4
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB241_5
# %bb.3:                                # %._crit_edge.i
	ld.w	$a1, $s1, %pc_lo12(current_test)
.LBB241_4:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a2, %pc_hi20(.LCPI241_0)
	fld.d	$fa0, $a2, %pc_lo12(.LCPI241_0)
	sub.d	$a2, $s0, $s2
	movgr2fr.d	$fa1, $a2
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a2, $a1, $a0, 4
	slli.d	$a3, $a1, 4
	fstx.d	$fa0, $a0, $a3
	st.d	$fp, $a2, 8
	addi.d	$a0, $a1, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.LBB241_5:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end241:
	.size	_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc, .Lfunc_end241-_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
.LCPI242_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm20custom_and_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc: # @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB242_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB242_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB242_4
	.p2align	4, , 16
.LBB242_3:                              # %_Z17check_shifted_sumIm20custom_and_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB242_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB242_8
.LBB242_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB242_3
# %bb.5:                                #   in Loop: Header=BB242_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB242_3
.LBB242_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB242_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB242_7
.LBB242_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB242_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB242_12
.LBB242_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB242_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB242_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI242_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI242_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB242_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end242:
	.size	_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc, .Lfunc_end242-_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
.LCPI243_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm19custom_or_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc,@function
_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc: # @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB243_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB243_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB243_4
	.p2align	4, , 16
.LBB243_3:                              # %_Z17check_shifted_sumIm19custom_or_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB243_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB243_8
.LBB243_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB243_3
# %bb.5:                                #   in Loop: Header=BB243_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB243_3
.LBB243_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB243_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB243_7
.LBB243_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB243_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB243_12
.LBB243_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB243_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB243_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI243_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI243_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB243_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end243:
	.size	_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc, .Lfunc_end243-_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
.LCPI244_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc: # @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB244_8
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB244_6
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB244_4
	.p2align	4, , 16
.LBB244_3:                              # %_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_.exit.us
                                        #   in Loop: Header=BB244_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB244_8
.LBB244_4:                              # %.preheader.us
                                        # =>This Inner Loop Header: Depth=1
	beq	$s0, $s6, .LBB244_3
# %bb.5:                                #   in Loop: Header=BB244_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB244_3
.LBB244_6:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB244_7:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB244_7
.LBB244_8:                              # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB244_10
# %bb.9:                                # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB244_12
.LBB244_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB244_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB244_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI244_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI244_0)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB244_13:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end244:
	.size	_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc, .Lfunc_end244-_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm19custom_constant_addImEEvPT_iPKc
.LCPI245_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI245_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm19custom_constant_addImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_addImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_addImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm19custom_constant_addImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_addImEEvPT_iPKc: # @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB245_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB245_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI245_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI245_0)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB245_4
	.p2align	4, , 16
.LBB245_3:                              # %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit.us
                                        #   in Loop: Header=BB245_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB245_17
.LBB245_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_7 Depth 2
                                        #     Child Loop BB245_10 Depth 2
	bgeu	$s0, $a5, .LBB245_6
# %bb.5:                                #   in Loop: Header=BB245_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB245_9
	.p2align	4, , 16
.LBB245_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB245_4 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB245_7:                              # %vector.body
                                        #   Parent Loop BB245_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vaddi.du	$vr0, $vr0, 10
	vaddi.du	$vr1, $vr1, 10
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB245_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB245_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB245_11
.LBB245_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB245_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB245_10:                             # %scalar.ph
                                        #   Parent Loop BB245_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB245_10
.LBB245_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB245_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB245_3
# %bb.12:                               #   in Loop: Header=BB245_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB245_3
.LBB245_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI245_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI245_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB245_15
	.p2align	4, , 16
.LBB245_14:                             # %_Z17check_shifted_sumIm19custom_constant_addImEEvT_.exit
                                        #   in Loop: Header=BB245_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB245_17
.LBB245_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB245_14
# %bb.16:                               #   in Loop: Header=BB245_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB245_14
.LBB245_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB245_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB245_21
.LBB245_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB245_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB245_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI245_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI245_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB245_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end245:
	.size	_Z13test_constantIm19custom_constant_addImEEvPT_iPKc, .Lfunc_end245-_Z13test_constantIm19custom_constant_addImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
.LCPI246_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI246_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc: # @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB246_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB246_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI246_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI246_0)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 19
	ori	$fp, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB246_4
	.p2align	4, , 16
.LBB246_3:                              # %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit.us
                                        #   in Loop: Header=BB246_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB246_17
.LBB246_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_7 Depth 2
                                        #     Child Loop BB246_10 Depth 2
	bgeu	$s0, $a5, .LBB246_6
# %bb.5:                                #   in Loop: Header=BB246_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB246_9
	.p2align	4, , 16
.LBB246_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB246_4 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB246_7:                              # %vector.body
                                        #   Parent Loop BB246_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vaddi.du	$vr0, $vr0, 10
	vaddi.du	$vr1, $vr1, 10
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB246_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB246_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB246_11
.LBB246_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB246_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB246_10:                             # %scalar.ph
                                        #   Parent Loop BB246_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB246_10
.LBB246_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB246_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB246_3
# %bb.12:                               #   in Loop: Header=BB246_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB246_3
.LBB246_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI246_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI246_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -20
	ori	$s3, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB246_15
	.p2align	4, , 16
.LBB246_14:                             # %_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_.exit
                                        #   in Loop: Header=BB246_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB246_17
.LBB246_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB246_14
# %bb.16:                               #   in Loop: Header=BB246_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB246_14
.LBB246_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB246_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB246_21
.LBB246_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB246_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB246_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI246_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI246_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB246_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end246:
	.size	_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc, .Lfunc_end246-_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm19custom_constant_subImEEvPT_iPKc
.LCPI247_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI247_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm19custom_constant_subImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_subImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_subImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm19custom_constant_subImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_subImEEvPT_iPKc: # @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB247_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB247_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI247_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI247_0)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB247_4
	.p2align	4, , 16
.LBB247_3:                              # %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit.us
                                        #   in Loop: Header=BB247_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB247_17
.LBB247_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_7 Depth 2
                                        #     Child Loop BB247_10 Depth 2
	bgeu	$s0, $a5, .LBB247_6
# %bb.5:                                #   in Loop: Header=BB247_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB247_9
	.p2align	4, , 16
.LBB247_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB247_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB247_7:                              # %vector.body
                                        #   Parent Loop BB247_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB247_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB247_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB247_11
.LBB247_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB247_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB247_10:                             # %scalar.ph
                                        #   Parent Loop BB247_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB247_10
.LBB247_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB247_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB247_3
# %bb.12:                               #   in Loop: Header=BB247_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB247_3
.LBB247_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI247_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI247_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB247_15
	.p2align	4, , 16
.LBB247_14:                             # %_Z17check_shifted_sumIm19custom_constant_subImEEvT_.exit
                                        #   in Loop: Header=BB247_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB247_17
.LBB247_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB247_14
# %bb.16:                               #   in Loop: Header=BB247_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB247_14
.LBB247_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB247_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB247_21
.LBB247_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB247_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB247_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI247_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI247_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB247_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end247:
	.size	_Z13test_constantIm19custom_constant_subImEEvPT_iPKc, .Lfunc_end247-_Z13test_constantIm19custom_constant_subImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
.LCPI248_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI248_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc: # @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB248_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB248_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI248_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI248_0)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, -20
	ori	$fp, $a0, 1920
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, -10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB248_4
	.p2align	4, , 16
.LBB248_3:                              # %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit.us
                                        #   in Loop: Header=BB248_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB248_17
.LBB248_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_7 Depth 2
                                        #     Child Loop BB248_10 Depth 2
	bgeu	$s0, $a5, .LBB248_6
# %bb.5:                                #   in Loop: Header=BB248_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB248_9
	.p2align	4, , 16
.LBB248_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB248_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB248_7:                              # %vector.body
                                        #   Parent Loop BB248_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB248_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB248_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB248_11
.LBB248_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB248_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB248_10:                             # %scalar.ph
                                        #   Parent Loop BB248_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, -10
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB248_10
.LBB248_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB248_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB248_3
# %bb.12:                               #   in Loop: Header=BB248_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB248_3
.LBB248_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI248_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI248_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, 19
	ori	$s3, $a0, 2176
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB248_15
	.p2align	4, , 16
.LBB248_14:                             # %_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_.exit
                                        #   in Loop: Header=BB248_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB248_17
.LBB248_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB248_14
# %bb.16:                               #   in Loop: Header=BB248_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB248_14
.LBB248_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB248_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB248_21
.LBB248_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB248_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB248_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI248_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI248_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB248_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end248:
	.size	_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc, .Lfunc_end248-_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
.LCPI249_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI249_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc,@function
_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc: # @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB249_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB249_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI249_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI249_0)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB249_4
	.p2align	4, , 16
.LBB249_3:                              # %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit.us
                                        #   in Loop: Header=BB249_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB249_17
.LBB249_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_7 Depth 2
                                        #     Child Loop BB249_10 Depth 2
	bgeu	$s0, $a5, .LBB249_6
# %bb.5:                                #   in Loop: Header=BB249_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB249_9
	.p2align	4, , 16
.LBB249_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB249_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB249_7:                              # %vector.body
                                        #   Parent Loop BB249_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr2, $vr4
	vmadd.d	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB249_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB249_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB249_11
.LBB249_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB249_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB249_10:                             # %scalar.ph
                                        #   Parent Loop BB249_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB249_10
.LBB249_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB249_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB249_3
# %bb.12:                               #   in Loop: Header=BB249_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB249_3
.LBB249_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI249_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI249_0)
	lu12i.w	$a0, 234
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB249_15
	.p2align	4, , 16
.LBB249_14:                             # %_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_.exit
                                        #   in Loop: Header=BB249_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB249_17
.LBB249_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB249_14
# %bb.16:                               #   in Loop: Header=BB249_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB249_14
.LBB249_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB249_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB249_21
.LBB249_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB249_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB249_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI249_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI249_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB249_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end249:
	.size	_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc, .Lfunc_end249-_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
.LCPI250_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI250_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc,@function
_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc: # @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB250_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB250_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	ori	$s4, $zero, 120
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI250_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI250_0)
	lu12i.w	$a0, 234
	ori	$s8, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB250_4
	.p2align	4, , 16
.LBB250_3:                              # %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit.us
                                        #   in Loop: Header=BB250_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB250_17
.LBB250_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_7 Depth 2
                                        #     Child Loop BB250_10 Depth 2
	bgeu	$s0, $a5, .LBB250_6
# %bb.5:                                #   in Loop: Header=BB250_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB250_9
	.p2align	4, , 16
.LBB250_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB250_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB250_7:                              # %vector.body
                                        #   Parent Loop BB250_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr2, $vr4
	vmadd.d	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB250_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB250_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB250_11
.LBB250_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB250_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB250_10:                             # %scalar.ph
                                        #   Parent Loop BB250_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB250_10
.LBB250_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB250_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB250_3
# %bb.12:                               #   in Loop: Header=BB250_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB250_3
.LBB250_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI250_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI250_0)
	lu12i.w	$a0, 234
	ori	$s2, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB250_15
	.p2align	4, , 16
.LBB250_14:                             # %_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_.exit
                                        #   in Loop: Header=BB250_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB250_17
.LBB250_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB250_14
# %bb.16:                               #   in Loop: Header=BB250_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB250_14
.LBB250_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB250_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB250_21
.LBB250_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB250_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB250_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI250_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI250_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB250_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end250:
	.size	_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc, .Lfunc_end250-_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
.LCPI251_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI251_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc,@function
_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc: # @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB251_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB251_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI251_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI251_0)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 234
	ori	$fp, $a0, 1536
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 120
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB251_4
	.p2align	4, , 16
.LBB251_3:                              # %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit.us
                                        #   in Loop: Header=BB251_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB251_17
.LBB251_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_7 Depth 2
                                        #     Child Loop BB251_10 Depth 2
	bgeu	$s0, $a5, .LBB251_6
# %bb.5:                                #   in Loop: Header=BB251_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB251_9
	.p2align	4, , 16
.LBB251_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB251_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB251_7:                              # %vector.body
                                        #   Parent Loop BB251_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB251_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB251_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB251_11
.LBB251_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB251_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB251_10:                             # %scalar.ph
                                        #   Parent Loop BB251_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 120
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB251_10
.LBB251_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB251_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB251_3
# %bb.12:                               #   in Loop: Header=BB251_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB251_3
.LBB251_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI251_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI251_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -235
	ori	$s3, $a0, 2560
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB251_15
	.p2align	4, , 16
.LBB251_14:                             # %_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_.exit
                                        #   in Loop: Header=BB251_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB251_17
.LBB251_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB251_14
# %bb.16:                               #   in Loop: Header=BB251_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB251_14
.LBB251_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB251_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB251_21
.LBB251_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB251_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB251_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI251_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI251_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB251_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end251:
	.size	_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc, .Lfunc_end251-_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
.LCPI252_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI252_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm22custom_constant_divideImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc,@function
_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc: # @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB252_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB252_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	lu12i.w	$a0, -209716
	ori	$a0, $a0, 3277
	lu32i.d	$a0, -209716
	lu52i.d	$s4, $a0, -820
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI252_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI252_0)
	lu52i.d	$s3, $zero, -2048
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.d	$vr4, $s4
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB252_4
	.p2align	4, , 16
.LBB252_3:                              # %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit.us
                                        #   in Loop: Header=BB252_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB252_17
.LBB252_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_7 Depth 2
                                        #     Child Loop BB252_10 Depth 2
	bgeu	$s0, $a5, .LBB252_6
# %bb.5:                                #   in Loop: Header=BB252_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB252_9
	.p2align	4, , 16
.LBB252_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB252_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB252_7:                              # %vector.body
                                        #   Parent Loop BB252_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.du	$vr2, $vr2, $vr4
	vsrli.d	$vr2, $vr2, 2
	vmuh.du	$vr3, $vr3, $vr4
	vsrli.d	$vr3, $vr3, 2
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB252_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB252_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB252_11
.LBB252_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB252_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB252_10:                             # %scalar.ph
                                        #   Parent Loop BB252_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mulh.du	$a4, $a4, $s4
	srli.d	$a4, $a4, 2
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB252_10
.LBB252_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB252_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	xor	$a2, $a2, $s3
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mulh.du	$a2, $a2, $s4
	srli.d	$a2, $a2, 2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB252_3
# %bb.12:                               #   in Loop: Header=BB252_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB252_3
.LBB252_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI252_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI252_0)
	lu52i.d	$s2, $zero, -2048
	lu12i.w	$a0, -209716
	ori	$a0, $a0, 3277
	lu32i.d	$a0, -209716
	lu52i.d	$s3, $a0, -820
	lu12i.w	$a0, 1
	ori	$s4, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB252_15
	.p2align	4, , 16
.LBB252_14:                             # %_Z17check_shifted_sumIm22custom_constant_divideImEEvT_.exit
                                        #   in Loop: Header=BB252_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB252_17
.LBB252_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	xor	$a0, $a0, $s2
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mulh.du	$a0, $a0, $s3
	srli.d	$a0, $a0, 2
	mul.d	$a0, $a0, $s4
	beqz	$a0, .LBB252_14
# %bb.16:                               #   in Loop: Header=BB252_15 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB252_14
.LBB252_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB252_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB252_21
.LBB252_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB252_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB252_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI252_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI252_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB252_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end252:
	.size	_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc, .Lfunc_end252-_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
.LCPI253_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI253_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc,@function
_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc: # @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$a2, %pc_hi20(current_test)
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	blt	$a1, $a0, .LBB253_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB253_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	lu12i.w	$a0, -489336
	ori	$a0, $a0, 2185
	lu32i.d	$a0, -489336
	lu52i.d	$s4, $a0, -1912
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI253_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI253_0)
	lu52i.d	$s3, $zero, -2048
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vreplgr2vr.d	$vr4, $s4
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB253_4
	.p2align	4, , 16
.LBB253_3:                              # %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit.us
                                        #   in Loop: Header=BB253_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB253_17
.LBB253_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB253_7 Depth 2
                                        #     Child Loop BB253_10 Depth 2
	bgeu	$s0, $a5, .LBB253_6
# %bb.5:                                #   in Loop: Header=BB253_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB253_9
	.p2align	4, , 16
.LBB253_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB253_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB253_7:                              # %vector.body
                                        #   Parent Loop BB253_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmuh.du	$vr2, $vr2, $vr4
	vsrli.d	$vr2, $vr2, 6
	vmuh.du	$vr3, $vr3, $vr4
	vsrli.d	$vr3, $vr3, 6
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB253_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB253_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB253_11
.LBB253_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB253_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB253_10:                             # %scalar.ph
                                        #   Parent Loop BB253_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mulh.du	$a4, $a4, $s4
	srli.d	$a4, $a4, 6
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB253_10
.LBB253_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB253_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	xor	$a2, $a2, $s3
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mulh.du	$a2, $a2, $s4
	srli.d	$a2, $a2, 6
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB253_3
# %bb.12:                               #   in Loop: Header=BB253_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB253_3
.LBB253_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI253_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI253_0)
	lu52i.d	$s2, $zero, -2048
	lu12i.w	$a0, -489336
	ori	$a0, $a0, 2185
	lu32i.d	$a0, -489336
	lu52i.d	$s3, $a0, -1912
	lu12i.w	$a0, 1
	ori	$s4, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB253_15
	.p2align	4, , 16
.LBB253_14:                             # %_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_.exit
                                        #   in Loop: Header=BB253_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB253_17
.LBB253_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	xor	$a0, $a0, $s2
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mulh.du	$a0, $a0, $s3
	srli.d	$a0, $a0, 6
	mul.d	$a0, $a0, $s4
	beqz	$a0, .LBB253_14
# %bb.16:                               #   in Loop: Header=BB253_15 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB253_14
.LBB253_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB253_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB253_21
.LBB253_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB253_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB253_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI253_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI253_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB253_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end253:
	.size	_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc, .Lfunc_end253-_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
.LCPI254_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI254_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc,@function
_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc: # @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s8, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB254_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB254_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$a0, $s1, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI254_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI254_0)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	lu12i.w	$a0, 3
	ori	$fp, $a0, 3712
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB254_4
	.p2align	4, , 16
.LBB254_3:                              # %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit.us
                                        #   in Loop: Header=BB254_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB254_17
.LBB254_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB254_7 Depth 2
                                        #     Child Loop BB254_10 Depth 2
	bgeu	$s0, $a5, .LBB254_6
# %bb.5:                                #   in Loop: Header=BB254_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB254_9
	.p2align	4, , 16
.LBB254_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB254_4 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB254_7:                              # %vector.body
                                        #   Parent Loop BB254_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vaddi.du	$vr0, $vr0, 2
	vaddi.du	$vr1, $vr1, 2
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB254_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB254_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB254_11
.LBB254_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB254_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB254_10:                             # %scalar.ph
                                        #   Parent Loop BB254_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $a4
	addi.d	$a0, $a0, 2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB254_10
.LBB254_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB254_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $s3
	add.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB254_3
# %bb.12:                               #   in Loop: Header=BB254_4 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB254_3
.LBB254_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI254_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI254_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	lu12i.w	$a0, -4
	ori	$s3, $a0, 384
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB254_15
	.p2align	4, , 16
.LBB254_14:                             # %_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_.exit
                                        #   in Loop: Header=BB254_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB254_17
.LBB254_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beq	$a0, $s3, .LBB254_14
# %bb.16:                               #   in Loop: Header=BB254_15 Depth=1
	ld.w	$a1, $s8, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB254_14
.LBB254_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB254_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s8, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB254_21
.LBB254_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB254_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s8, %pc_lo12(current_test)
.LBB254_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI254_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI254_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s8, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB254_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end254:
	.size	_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc, .Lfunc_end254-_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
.LCPI255_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI255_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc,@function
_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc: # @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB255_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB255_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI255_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI255_0)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB255_4
	.p2align	4, , 16
.LBB255_3:                              # %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit.us
                                        #   in Loop: Header=BB255_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB255_17
.LBB255_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_7 Depth 2
                                        #     Child Loop BB255_10 Depth 2
	bgeu	$s0, $a5, .LBB255_6
# %bb.5:                                #   in Loop: Header=BB255_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB255_9
	.p2align	4, , 16
.LBB255_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB255_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB255_7:                              # %vector.body
                                        #   Parent Loop BB255_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB255_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB255_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB255_11
.LBB255_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB255_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB255_10:                             # %scalar.ph
                                        #   Parent Loop BB255_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB255_10
.LBB255_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB255_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB255_3
# %bb.12:                               #   in Loop: Header=BB255_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB255_3
.LBB255_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI255_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI255_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB255_15
	.p2align	4, , 16
.LBB255_14:                             # %_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_.exit
                                        #   in Loop: Header=BB255_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB255_17
.LBB255_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB255_14
# %bb.16:                               #   in Loop: Header=BB255_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB255_14
.LBB255_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB255_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB255_21
.LBB255_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB255_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB255_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI255_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI255_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB255_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end255:
	.size	_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc, .Lfunc_end255-_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm19custom_constant_andImEEvPT_iPKc
.LCPI256_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI256_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm19custom_constant_andImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_andImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_andImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm19custom_constant_andImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_andImEEvPT_iPKc: # @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB256_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB256_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI256_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI256_0)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB256_4
	.p2align	4, , 16
.LBB256_3:                              # %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit.us
                                        #   in Loop: Header=BB256_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB256_17
.LBB256_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_7 Depth 2
                                        #     Child Loop BB256_10 Depth 2
	bgeu	$s0, $a5, .LBB256_6
# %bb.5:                                #   in Loop: Header=BB256_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB256_9
	.p2align	4, , 16
.LBB256_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB256_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB256_7:                              # %vector.body
                                        #   Parent Loop BB256_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB256_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB256_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB256_11
.LBB256_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB256_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB256_10:                             # %scalar.ph
                                        #   Parent Loop BB256_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	andi	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB256_10
.LBB256_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB256_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	andi	$a2, $a2, 10
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB256_3
# %bb.12:                               #   in Loop: Header=BB256_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB256_3
.LBB256_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI256_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI256_0)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB256_15
	.p2align	4, , 16
.LBB256_14:                             # %_Z17check_shifted_sumIm19custom_constant_andImEEvT_.exit
                                        #   in Loop: Header=BB256_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB256_17
.LBB256_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	andi	$a0, $a0, 10
	beqz	$a0, .LBB256_14
# %bb.16:                               #   in Loop: Header=BB256_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB256_14
.LBB256_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB256_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB256_21
.LBB256_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB256_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB256_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI256_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI256_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB256_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end256:
	.size	_Z13test_constantIm19custom_constant_andImEEvPT_iPKc, .Lfunc_end256-_Z13test_constantIm19custom_constant_andImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
.LCPI257_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI257_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc: # @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB257_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB257_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI257_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI257_0)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 14
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB257_4
	.p2align	4, , 16
.LBB257_3:                              # %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit.us
                                        #   in Loop: Header=BB257_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB257_17
.LBB257_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_7 Depth 2
                                        #     Child Loop BB257_10 Depth 2
	bgeu	$s0, $a5, .LBB257_6
# %bb.5:                                #   in Loop: Header=BB257_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB257_9
	.p2align	4, , 16
.LBB257_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB257_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB257_7:                              # %vector.body
                                        #   Parent Loop BB257_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB257_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB257_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB257_11
.LBB257_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB257_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB257_10:                             # %scalar.ph
                                        #   Parent Loop BB257_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	andi	$a4, $a4, 14
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB257_10
.LBB257_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB257_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	andi	$a2, $a2, 14
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB257_3
# %bb.12:                               #   in Loop: Header=BB257_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB257_3
.LBB257_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI257_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI257_0)
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB257_15
	.p2align	4, , 16
.LBB257_14:                             # %_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_.exit
                                        #   in Loop: Header=BB257_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB257_17
.LBB257_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	andi	$a0, $a0, 14
	beqz	$a0, .LBB257_14
# %bb.16:                               #   in Loop: Header=BB257_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB257_14
.LBB257_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB257_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB257_21
.LBB257_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB257_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB257_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI257_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI257_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB257_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end257:
	.size	_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc, .Lfunc_end257-_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm18custom_constant_orImEEvPT_iPKc
.LCPI258_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI258_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm18custom_constant_orImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm18custom_constant_orImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm18custom_constant_orImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm18custom_constant_orImEEvPT_iPKc,@function
_Z13test_constantIm18custom_constant_orImEEvPT_iPKc: # @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB258_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB258_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI258_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI258_0)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB258_4
	.p2align	4, , 16
.LBB258_3:                              # %_Z17check_shifted_sumIm18custom_constant_orImEEvT_.exit.us
                                        #   in Loop: Header=BB258_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB258_15
.LBB258_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB258_7 Depth 2
                                        #     Child Loop BB258_10 Depth 2
	bgeu	$s0, $a5, .LBB258_6
# %bb.5:                                #   in Loop: Header=BB258_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB258_9
	.p2align	4, , 16
.LBB258_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB258_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB258_7:                              # %vector.body
                                        #   Parent Loop BB258_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB258_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB258_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB258_11
.LBB258_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB258_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB258_10:                             # %scalar.ph
                                        #   Parent Loop BB258_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	ori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB258_10
.LBB258_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB258_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	ori	$a2, $a2, 10
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB258_3
# %bb.12:                               #   in Loop: Header=BB258_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB258_3
.LBB258_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB258_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB258_14
.LBB258_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB258_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB258_19
.LBB258_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB258_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB258_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI258_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI258_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB258_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end258:
	.size	_Z13test_constantIm18custom_constant_orImEEvPT_iPKc, .Lfunc_end258-_Z13test_constantIm18custom_constant_orImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
.LCPI259_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI259_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc,@function
_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc: # @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB259_15
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB259_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI259_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI259_0)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 63
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB259_4
	.p2align	4, , 16
.LBB259_3:                              # %_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_.exit.us
                                        #   in Loop: Header=BB259_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB259_15
.LBB259_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_7 Depth 2
                                        #     Child Loop BB259_10 Depth 2
	bgeu	$s0, $a5, .LBB259_6
# %bb.5:                                #   in Loop: Header=BB259_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB259_9
	.p2align	4, , 16
.LBB259_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB259_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB259_7:                              # %vector.body
                                        #   Parent Loop BB259_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB259_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB259_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB259_11
.LBB259_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB259_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB259_10:                             # %scalar.ph
                                        #   Parent Loop BB259_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	ori	$a4, $a4, 63
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB259_10
.LBB259_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB259_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	ori	$a2, $a2, 63
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB259_3
# %bb.12:                               #   in Loop: Header=BB259_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB259_3
.LBB259_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB259_14:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$fp, $fp, 1
	blt	$fp, $a0, .LBB259_14
.LBB259_15:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB259_17
# %bb.16:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB259_19
.LBB259_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB259_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB259_19:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI259_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI259_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB259_20:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end259:
	.size	_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc, .Lfunc_end259-_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
.LCPI260_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI260_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm19custom_constant_xorImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc: # @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB260_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB260_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI260_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI260_0)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 10
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB260_4
	.p2align	4, , 16
.LBB260_3:                              # %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit.us
                                        #   in Loop: Header=BB260_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB260_17
.LBB260_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_7 Depth 2
                                        #     Child Loop BB260_10 Depth 2
	bgeu	$s0, $a5, .LBB260_6
# %bb.5:                                #   in Loop: Header=BB260_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB260_9
	.p2align	4, , 16
.LBB260_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB260_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB260_7:                              # %vector.body
                                        #   Parent Loop BB260_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB260_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB260_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB260_11
.LBB260_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB260_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB260_10:                             # %scalar.ph
                                        #   Parent Loop BB260_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xori	$a4, $a4, 10
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB260_10
.LBB260_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB260_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	xori	$a2, $a2, 10
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB260_3
# %bb.12:                               #   in Loop: Header=BB260_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB260_3
.LBB260_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI260_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI260_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB260_15
	.p2align	4, , 16
.LBB260_14:                             # %_Z17check_shifted_sumIm19custom_constant_xorImEEvT_.exit
                                        #   in Loop: Header=BB260_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB260_17
.LBB260_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	xori	$a0, $a0, 10
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB260_14
# %bb.16:                               #   in Loop: Header=BB260_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB260_14
.LBB260_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB260_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB260_21
.LBB260_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB260_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB260_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI260_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI260_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB260_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end260:
	.size	_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc, .Lfunc_end260-_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
.LCPI261_0:
	.dword	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI261_1:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc: # @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB261_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB261_13
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s7, $a0, 2
	addi.d	$s8, $s1, 16
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI261_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI261_0)
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	vrepli.d	$vr4, 49
	vst	$vr4, $sp, 32                   # 16-byte Folded Spill
	b	.LBB261_4
	.p2align	4, , 16
.LBB261_3:                              # %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit.us
                                        #   in Loop: Header=BB261_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB261_17
.LBB261_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_7 Depth 2
                                        #     Child Loop BB261_10 Depth 2
	bgeu	$s0, $a5, .LBB261_6
# %bb.5:                                #   in Loop: Header=BB261_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB261_9
	.p2align	4, , 16
.LBB261_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB261_4 Depth=1
	move	$a0, $s8
	move	$a2, $s7
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB261_7:                              # %vector.body
                                        #   Parent Loop BB261_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB261_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB261_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vreplvei.d	$vr1, $vr0, 1
	vadd.d	$vr0, $vr0, $vr1
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB261_11
.LBB261_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB261_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB261_10:                             # %scalar.ph
                                        #   Parent Loop BB261_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xori	$a4, $a4, 49
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB261_10
.LBB261_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB261_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	xori	$a2, $a2, 49
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB261_3
# %bb.12:                               #   in Loop: Header=BB261_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 32                   # 16-byte Folded Reload
	ori	$a5, $zero, 4
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB261_3
.LBB261_13:                             # %.preheader.preheader
	move	$fp, $zero
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI261_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI261_0)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB261_15
	.p2align	4, , 16
.LBB261_14:                             # %_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_.exit
                                        #   in Loop: Header=BB261_15 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB261_17
.LBB261_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	xori	$a0, $a0, 49
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB261_14
# %bb.16:                               #   in Loop: Header=BB261_15 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB261_14
.LBB261_17:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB261_19
# %bb.18:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB261_21
.LBB261_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB261_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB261_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI261_1)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI261_1)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB261_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end261:
	.size	_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc, .Lfunc_end261-_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf10custom_twoIfEEvPT_iPKc
.LCPI262_0:
	.word	0xc67a0000                      # float -16000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI262_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI262_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI262_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf10custom_twoIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf10custom_twoIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf10custom_twoIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf10custom_twoIfEEvPT_iPKc,@function
_Z13test_constantIf10custom_twoIfEEvPT_iPKc: # @_Z13test_constantIf10custom_twoIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB262_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB262_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI262_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI262_0)
	pcalau12i	$a0, %pc_hi20(.LCPI262_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI262_1)
	pcalau12i	$a0, %pc_hi20(.LCPI262_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI262_2)
	vldi	$vr3, -1280
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB262_4
	.p2align	4, , 16
.LBB262_3:                              # %_Z17check_shifted_sumIf10custom_twoIfEEvT_.exit.us
                                        #   in Loop: Header=BB262_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB262_10
.LBB262_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_5 Depth 2
	move	$a0, $s0
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB262_5:                              #   Parent Loop BB262_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.s	$fa0, $fa0, $fa3
	bnez	$a0, .LBB262_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB262_4 Depth=1
	fadd.s	$fa1, $fa0, $fs1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB262_3
# %bb.7:                                #   in Loop: Header=BB262_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1280
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB262_3
.LBB262_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB262_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB262_9
.LBB262_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB262_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB262_14
.LBB262_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB262_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB262_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI262_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI262_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB262_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end262:
	.size	_Z13test_constantIf10custom_twoIfEEvPT_iPKc, .Lfunc_end262-_Z13test_constantIf10custom_twoIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
.LCPI263_0:
	.word	0xc6bb8000                      # float -24000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI263_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI263_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI263_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc: # @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB263_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB263_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI263_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI263_0)
	pcalau12i	$a0, %pc_hi20(.LCPI263_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI263_1)
	pcalau12i	$a0, %pc_hi20(.LCPI263_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI263_2)
	vldi	$vr3, -1272
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB263_4
	.p2align	4, , 16
.LBB263_3:                              # %_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_.exit.us
                                        #   in Loop: Header=BB263_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB263_10
.LBB263_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_5 Depth 2
	move	$a0, $s0
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB263_5:                              #   Parent Loop BB263_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.s	$fa0, $fa0, $fa3
	bnez	$a0, .LBB263_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB263_4 Depth=1
	fadd.s	$fa1, $fa0, $fs1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB263_3
# %bb.7:                                #   in Loop: Header=BB263_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1272
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB263_3
.LBB263_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB263_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB263_9
.LBB263_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB263_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB263_14
.LBB263_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB263_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB263_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI263_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI263_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB263_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end263:
	.size	_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc, .Lfunc_end263-_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
.LCPI264_0:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI264_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI264_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI264_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc: # @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB264_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB264_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI264_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI264_0)
	pcalau12i	$a0, %pc_hi20(.LCPI264_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI264_1)
	pcalau12i	$a0, %pc_hi20(.LCPI264_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI264_2)
	vldi	$vr3, -1168
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB264_4
	.p2align	4, , 16
.LBB264_3:                              # %_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_.exit.us
                                        #   in Loop: Header=BB264_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB264_10
.LBB264_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_5 Depth 2
	move	$a0, $s0
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB264_5:                              #   Parent Loop BB264_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.s	$fa0, $fa0, $fa3
	bnez	$a0, .LBB264_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB264_4 Depth=1
	fadd.s	$fa1, $fa0, $fs1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB264_3
# %bb.7:                                #   in Loop: Header=BB264_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1168
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB264_3
.LBB264_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB264_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB264_9
.LBB264_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB264_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB264_14
.LBB264_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB264_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB264_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI264_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI264_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB264_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end264:
	.size	_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc, .Lfunc_end264-_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
.LCPI265_0:
	.word	0xc73b8000                      # float -48000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI265_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI265_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI265_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc: # @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB265_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB265_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI265_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI265_0)
	pcalau12i	$a0, %pc_hi20(.LCPI265_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI265_1)
	pcalau12i	$a0, %pc_hi20(.LCPI265_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI265_2)
	vldi	$vr3, -1256
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB265_4
	.p2align	4, , 16
.LBB265_3:                              # %_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_.exit.us
                                        #   in Loop: Header=BB265_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB265_10
.LBB265_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_5 Depth 2
	move	$a0, $s0
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB265_5:                              #   Parent Loop BB265_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.s	$fa0, $fa0, $fa3
	bnez	$a0, .LBB265_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB265_4 Depth=1
	fadd.s	$fa1, $fa0, $fs1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB265_3
# %bb.7:                                #   in Loop: Header=BB265_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1256
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB265_3
.LBB265_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB265_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB265_9
.LBB265_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB265_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB265_14
.LBB265_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB265_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB265_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI265_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI265_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB265_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end265:
	.size	_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc, .Lfunc_end265-_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
.LCPI266_0:
	.word	0xc67a0000                      # float -16000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI266_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI266_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI266_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc: # @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB266_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB266_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI266_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI266_0)
	pcalau12i	$a0, %pc_hi20(.LCPI266_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI266_1)
	pcalau12i	$a0, %pc_hi20(.LCPI266_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI266_2)
	vldi	$vr3, -1280
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB266_4
	.p2align	4, , 16
.LBB266_3:                              # %_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_.exit.us
                                        #   in Loop: Header=BB266_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB266_10
.LBB266_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_5 Depth 2
	move	$a0, $s0
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB266_5:                              #   Parent Loop BB266_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.s	$fa0, $fa0, $fa3
	bnez	$a0, .LBB266_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB266_4 Depth=1
	fadd.s	$fa1, $fa0, $fs1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB266_3
# %bb.7:                                #   in Loop: Header=BB266_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1280
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB266_3
.LBB266_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB266_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB266_9
.LBB266_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB266_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB266_14
.LBB266_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB266_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB266_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI266_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI266_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB266_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end266:
	.size	_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc, .Lfunc_end266-_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
.LCPI267_0:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI267_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI267_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI267_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf19custom_constant_addIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc,@function
_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc: # @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB267_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB267_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1244
	pcalau12i	$a0, %pc_hi20(.LCPI267_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI267_0)
	pcalau12i	$a0, %pc_hi20(.LCPI267_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI267_2)
	pcalau12i	$a0, %pc_hi20(.LCPI267_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI267_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB267_4
	.p2align	4, , 16
.LBB267_3:                              # %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit.us
                                        #   in Loop: Header=BB267_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB267_12
.LBB267_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB267_5:                              #   Parent Loop BB267_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB267_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB267_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa3
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB267_3
# %bb.7:                                #   in Loop: Header=BB267_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1244
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB267_3
.LBB267_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1244
	pcalau12i	$a0, %pc_hi20(.LCPI267_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI267_0)
	pcalau12i	$a0, %pc_hi20(.LCPI267_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI267_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB267_10
	.p2align	4, , 16
.LBB267_9:                              # %_Z17check_shifted_sumIf19custom_constant_addIfEEvT_.exit
                                        #   in Loop: Header=BB267_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB267_12
.LBB267_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB267_9
# %bb.11:                               #   in Loop: Header=BB267_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -1244
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB267_9
.LBB267_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB267_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB267_16
.LBB267_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB267_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB267_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI267_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI267_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB267_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end267:
	.size	_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc, .Lfunc_end267-_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
.LCPI268_0:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI268_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI268_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI268_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc,@function
_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc: # @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB268_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB268_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1168
	vldi	$vr4, -1280
	vldi	$vr5, -1272
	vldi	$vr6, -1264
	pcalau12i	$a0, %pc_hi20(.LCPI268_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI268_0)
	pcalau12i	$a0, %pc_hi20(.LCPI268_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI268_2)
	pcalau12i	$a0, %pc_hi20(.LCPI268_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI268_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB268_4
	.p2align	4, , 16
.LBB268_3:                              # %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit.us
                                        #   in Loop: Header=BB268_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB268_12
.LBB268_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB268_5:                              #   Parent Loop BB268_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa1, $fa1, $fa6
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB268_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB268_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa1, $fa1, $fa6
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB268_3
# %bb.7:                                #   in Loop: Header=BB268_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr6, -1264
	vldi	$vr5, -1272
	vldi	$vr4, -1280
	vldi	$vr3, -1168
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB268_3
.LBB268_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1168
	vldi	$vr3, -1280
	vldi	$vr4, -1272
	vldi	$vr5, -1264
	pcalau12i	$a0, %pc_hi20(.LCPI268_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI268_0)
	pcalau12i	$a0, %pc_hi20(.LCPI268_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI268_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB268_10
	.p2align	4, , 16
.LBB268_9:                              # %_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_.exit
                                        #   in Loop: Header=BB268_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB268_12
.LBB268_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa1, $fa1, $fa5
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB268_9
# %bb.11:                               #   in Loop: Header=BB268_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr5, -1264
	vldi	$vr4, -1272
	vldi	$vr3, -1280
	vldi	$vr2, -1168
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB268_9
.LBB268_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB268_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB268_16
.LBB268_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB268_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB268_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI268_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI268_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB268_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end268:
	.size	_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc, .Lfunc_end268-_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
.LCPI269_0:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI269_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI269_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI269_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf19custom_constant_subIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc,@function
_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc: # @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB269_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB269_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1116
	pcalau12i	$a0, %pc_hi20(.LCPI269_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI269_0)
	pcalau12i	$a0, %pc_hi20(.LCPI269_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI269_2)
	pcalau12i	$a0, %pc_hi20(.LCPI269_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI269_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB269_4
	.p2align	4, , 16
.LBB269_3:                              # %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit.us
                                        #   in Loop: Header=BB269_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB269_12
.LBB269_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB269_5:                              #   Parent Loop BB269_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB269_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB269_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa3
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB269_3
# %bb.7:                                #   in Loop: Header=BB269_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1116
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB269_3
.LBB269_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1116
	pcalau12i	$a0, %pc_hi20(.LCPI269_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI269_0)
	pcalau12i	$a0, %pc_hi20(.LCPI269_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI269_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB269_10
	.p2align	4, , 16
.LBB269_9:                              # %_Z17check_shifted_sumIf19custom_constant_subIfEEvT_.exit
                                        #   in Loop: Header=BB269_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB269_12
.LBB269_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB269_9
# %bb.11:                               #   in Loop: Header=BB269_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -1116
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB269_9
.LBB269_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB269_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB269_16
.LBB269_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB269_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB269_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI269_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI269_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB269_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end269:
	.size	_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc, .Lfunc_end269-_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
.LCPI270_0:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI270_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI270_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI270_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc,@function
_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc: # @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB270_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB270_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1040
	vldi	$vr4, -1152
	vldi	$vr5, -1144
	vldi	$vr6, -1136
	pcalau12i	$a0, %pc_hi20(.LCPI270_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI270_0)
	pcalau12i	$a0, %pc_hi20(.LCPI270_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI270_2)
	pcalau12i	$a0, %pc_hi20(.LCPI270_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI270_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB270_4
	.p2align	4, , 16
.LBB270_3:                              # %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit.us
                                        #   in Loop: Header=BB270_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB270_12
.LBB270_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB270_5:                              #   Parent Loop BB270_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa1, $fa1, $fa6
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB270_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB270_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa1, $fa1, $fa6
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB270_3
# %bb.7:                                #   in Loop: Header=BB270_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr6, -1136
	vldi	$vr5, -1144
	vldi	$vr4, -1152
	vldi	$vr3, -1040
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB270_3
.LBB270_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1040
	vldi	$vr3, -1152
	vldi	$vr4, -1144
	vldi	$vr5, -1136
	pcalau12i	$a0, %pc_hi20(.LCPI270_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI270_0)
	pcalau12i	$a0, %pc_hi20(.LCPI270_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI270_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB270_10
	.p2align	4, , 16
.LBB270_9:                              # %_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_.exit
                                        #   in Loop: Header=BB270_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB270_12
.LBB270_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa1, $fa1, $fa5
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB270_9
# %bb.11:                               #   in Loop: Header=BB270_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr5, -1136
	vldi	$vr4, -1144
	vldi	$vr3, -1152
	vldi	$vr2, -1040
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB270_9
.LBB270_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB270_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB270_16
.LBB270_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB270_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB270_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI270_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI270_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB270_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end270:
	.size	_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc, .Lfunc_end270-_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
.LCPI271_0:
	.word	0xc2f00000                      # float -120
.LCPI271_1:
	.word	0x45fa0000                      # float 8000
.LCPI271_3:
	.word	0x42f00000                      # float 120
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI271_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI271_4:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI271_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc,@function
_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc: # @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB271_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB271_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI271_3)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI271_3)
	pcalau12i	$a0, %pc_hi20(.LCPI271_0)
	fld.s	$fs2, $a0, %pc_lo12(.LCPI271_0)
	pcalau12i	$a0, %pc_hi20(.LCPI271_1)
	fld.s	$fs3, $a0, %pc_lo12(.LCPI271_1)
	pcalau12i	$a0, %pc_hi20(.LCPI271_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI271_4)
	pcalau12i	$a0, %pc_hi20(.LCPI271_2)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI271_2)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB271_4
	.p2align	4, , 16
.LBB271_3:                              # %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit.us
                                        #   in Loop: Header=BB271_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB271_12
.LBB271_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB271_5:                              #   Parent Loop BB271_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB271_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB271_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fmul.s	$fa1, $fa1, $fs2
	fmul.s	$fa1, $fa1, $fs3
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB271_3
# %bb.7:                                #   in Loop: Header=BB271_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB271_3
.LBB271_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI271_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI271_0)
	pcalau12i	$a0, %pc_hi20(.LCPI271_1)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI271_1)
	pcalau12i	$a0, %pc_hi20(.LCPI271_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI271_2)
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB271_10
	.p2align	4, , 16
.LBB271_9:                              # %_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_.exit
                                        #   in Loop: Header=BB271_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB271_12
.LBB271_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fmul.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB271_9
# %bb.11:                               #   in Loop: Header=BB271_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB271_9
.LBB271_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB271_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB271_16
.LBB271_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB271_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB271_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI271_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI271_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB271_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end271:
	.size	_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc, .Lfunc_end271-_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
.LCPI272_0:
	.word	0x45fa0000                      # float 8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI272_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI272_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI272_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc,@function
_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc: # @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB272_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB272_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1272
	vldi	$vr4, -1264
	vldi	$vr5, -1260
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI272_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI272_0)
	pcalau12i	$a0, %pc_hi20(.LCPI272_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI272_2)
	pcalau12i	$a0, %pc_hi20(.LCPI272_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI272_1)
	vldi	$vr6, -1144
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB272_4
	.p2align	4, , 16
.LBB272_3:                              # %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit.us
                                        #   in Loop: Header=BB272_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB272_12
.LBB272_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB272_5:                              #   Parent Loop BB272_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fa1
	fmul.s	$fa1, $fa1, $fa3
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa1, $fa1, $fa5
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB272_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB272_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa1
	fmul.s	$fa1, $fa1, $fa6
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa1, $fa1, $fa5
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB272_3
# %bb.7:                                #   in Loop: Header=BB272_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr6, -1144
	vldi	$vr5, -1260
	vldi	$vr4, -1264
	vldi	$vr3, -1272
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB272_3
.LBB272_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1144
	vldi	$vr3, -1264
	vldi	$vr4, -1260
	pcalau12i	$a0, %pc_hi20(.LCPI272_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI272_0)
	pcalau12i	$a0, %pc_hi20(.LCPI272_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI272_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB272_10
	.p2align	4, , 16
.LBB272_9:                              # %_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_.exit
                                        #   in Loop: Header=BB272_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB272_12
.LBB272_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fa1
	fmul.s	$fa1, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB272_9
# %bb.11:                               #   in Loop: Header=BB272_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr4, -1260
	vldi	$vr3, -1264
	vldi	$vr2, -1144
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB272_9
.LBB272_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB272_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB272_16
.LBB272_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB272_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB272_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI272_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI272_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB272_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end272:
	.size	_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc, .Lfunc_end272-_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
.LCPI273_0:
	.word	0x42f00000                      # float 120
.LCPI273_1:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI273_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI273_3:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI273_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc,@function
_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc: # @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB273_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB273_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI273_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI273_0)
	pcalau12i	$a0, %pc_hi20(.LCPI273_1)
	fld.s	$fs2, $a0, %pc_lo12(.LCPI273_1)
	pcalau12i	$a0, %pc_hi20(.LCPI273_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI273_3)
	pcalau12i	$a0, %pc_hi20(.LCPI273_2)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI273_2)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB273_4
	.p2align	4, , 16
.LBB273_3:                              # %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit.us
                                        #   in Loop: Header=BB273_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB273_12
.LBB273_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB273_5:                              #   Parent Loop BB273_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fs1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB273_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB273_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fs1
	fmul.s	$fa1, $fa1, $fs2
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB273_3
# %bb.7:                                #   in Loop: Header=BB273_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB273_3
.LBB273_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI273_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI273_0)
	pcalau12i	$a0, %pc_hi20(.LCPI273_1)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI273_1)
	pcalau12i	$a0, %pc_hi20(.LCPI273_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI273_2)
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB273_10
	.p2align	4, , 16
.LBB273_9:                              # %_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_.exit
                                        #   in Loop: Header=BB273_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB273_12
.LBB273_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB273_9
# %bb.11:                               #   in Loop: Header=BB273_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB273_9
.LBB273_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB273_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB273_16
.LBB273_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB273_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB273_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI273_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI273_4)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB273_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end273:
	.size	_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc, .Lfunc_end273-_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
.LCPI274_0:
	.word	0x45fa0000                      # float 8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI274_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI274_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI274_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc,@function
_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc: # @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB274_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB274_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1260
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI274_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI274_0)
	pcalau12i	$a0, %pc_hi20(.LCPI274_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI274_2)
	pcalau12i	$a0, %pc_hi20(.LCPI274_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI274_1)
	vldi	$vr4, -1132
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB274_4
	.p2align	4, , 16
.LBB274_3:                              # %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit.us
                                        #   in Loop: Header=BB274_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB274_12
.LBB274_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB274_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB274_5:                              #   Parent Loop BB274_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fdiv.s	$fa1, $fa1, $fa3
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB274_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB274_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fdiv.s	$fa1, $fa1, $fa4
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB274_3
# %bb.7:                                #   in Loop: Header=BB274_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr4, -1132
	vldi	$vr3, -1260
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB274_3
.LBB274_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1132
	pcalau12i	$a0, %pc_hi20(.LCPI274_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI274_0)
	pcalau12i	$a0, %pc_hi20(.LCPI274_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI274_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB274_10
	.p2align	4, , 16
.LBB274_9:                              # %_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_.exit
                                        #   in Loop: Header=BB274_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB274_12
.LBB274_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fdiv.s	$fa1, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB274_9
# %bb.11:                               #   in Loop: Header=BB274_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -1132
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB274_9
.LBB274_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB274_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB274_16
.LBB274_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB274_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB274_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI274_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI274_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB274_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end274:
	.size	_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc, .Lfunc_end274-_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
.LCPI275_0:
	.word	0x45fa0000                      # float 8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI275_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI275_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI275_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc,@function
_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc: # @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB275_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB275_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1184
	vldi	$vr4, -1272
	vldi	$vr5, -1200
	vldi	$vr6, -1260
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI275_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI275_0)
	pcalau12i	$a0, %pc_hi20(.LCPI275_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI275_2)
	pcalau12i	$a0, %pc_hi20(.LCPI275_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI275_1)
	vldi	$vr7, -1056
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB275_4
	.p2align	4, , 16
.LBB275_3:                              # %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit.us
                                        #   in Loop: Header=BB275_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB275_12
.LBB275_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB275_5:                              #   Parent Loop BB275_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fmul.s	$fa1, $fa1, $fa3
	fdiv.s	$fa1, $fa1, $fa4
	fmul.s	$fa1, $fa1, $fa5
	fdiv.s	$fa1, $fa1, $fa6
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB275_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB275_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fmul.s	$fa1, $fa1, $fa7
	fdiv.s	$fa1, $fa1, $fa4
	fmul.s	$fa1, $fa1, $fa5
	fdiv.s	$fa1, $fa1, $fa6
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB275_3
# %bb.7:                                #   in Loop: Header=BB275_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr7, -1056
	vldi	$vr6, -1260
	vldi	$vr5, -1200
	vldi	$vr4, -1272
	vldi	$vr3, -1184
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB275_3
.LBB275_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1056
	vldi	$vr3, -1272
	vldi	$vr4, -1200
	vldi	$vr5, -1260
	pcalau12i	$a0, %pc_hi20(.LCPI275_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI275_0)
	pcalau12i	$a0, %pc_hi20(.LCPI275_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI275_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB275_10
	.p2align	4, , 16
.LBB275_9:                              # %_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_.exit
                                        #   in Loop: Header=BB275_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB275_12
.LBB275_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fmul.s	$fa1, $fa1, $fa2
	fdiv.s	$fa1, $fa1, $fa3
	fmul.s	$fa1, $fa1, $fa4
	fdiv.s	$fa1, $fa1, $fa5
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB275_9
# %bb.11:                               #   in Loop: Header=BB275_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr5, -1260
	vldi	$vr4, -1200
	vldi	$vr3, -1272
	vldi	$vr2, -1056
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB275_9
.LBB275_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB275_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB275_16
.LBB275_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB275_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB275_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI275_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI275_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB275_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end275:
	.size	_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc, .Lfunc_end275-_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
.LCPI276_0:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI276_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI276_2:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI276_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc,@function
_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc: # @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB276_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB276_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1280
	pcalau12i	$a0, %pc_hi20(.LCPI276_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI276_0)
	pcalau12i	$a0, %pc_hi20(.LCPI276_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI276_2)
	pcalau12i	$a0, %pc_hi20(.LCPI276_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI276_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB276_4
	.p2align	4, , 16
.LBB276_3:                              # %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit.us
                                        #   in Loop: Header=BB276_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB276_12
.LBB276_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB276_5:                              #   Parent Loop BB276_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB276_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB276_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa3
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB276_3
# %bb.7:                                #   in Loop: Header=BB276_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1280
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB276_3
.LBB276_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1280
	pcalau12i	$a0, %pc_hi20(.LCPI276_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI276_0)
	pcalau12i	$a0, %pc_hi20(.LCPI276_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI276_1)
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB276_10
	.p2align	4, , 16
.LBB276_9:                              # %_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_.exit
                                        #   in Loop: Header=BB276_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB276_12
.LBB276_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fs0
	fadd.s	$fa1, $fa1, $fs2
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB276_9
# %bb.11:                               #   in Loop: Header=BB276_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -1280
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB276_9
.LBB276_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB276_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB276_16
.LBB276_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB276_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB276_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI276_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI276_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB276_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end276:
	.size	_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc, .Lfunc_end276-_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
.LCPI277_0:
	.word	0xc019999a                      # float -2.4000001
.LCPI277_1:
	.word	0xc5fa0000                      # float -8000
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI277_2:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI277_3:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI277_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc,@function
_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc: # @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB277_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB277_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.w	$fs0, $zero
	vldi	$vr3, -1280
	pcalau12i	$a0, %pc_hi20(.LCPI277_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI277_0)
	pcalau12i	$a0, %pc_hi20(.LCPI277_1)
	fld.s	$fs2, $a0, %pc_lo12(.LCPI277_1)
	pcalau12i	$a0, %pc_hi20(.LCPI277_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI277_3)
	pcalau12i	$a0, %pc_hi20(.LCPI277_2)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI277_2)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB277_4
	.p2align	4, , 16
.LBB277_3:                              # %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit.us
                                        #   in Loop: Header=BB277_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB277_12
.LBB277_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs0
	.p2align	4, , 16
.LBB277_5:                              #   Parent Loop BB277_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fs1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB277_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB277_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa1, $fa1, $fs1
	fmul.s	$fa1, $fa1, $fs2
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB277_3
# %bb.7:                                #   in Loop: Header=BB277_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1280
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB277_3
.LBB277_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1280
	pcalau12i	$a0, %pc_hi20(.LCPI277_0)
	fld.s	$fs0, $a0, %pc_lo12(.LCPI277_0)
	pcalau12i	$a0, %pc_hi20(.LCPI277_1)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI277_1)
	pcalau12i	$a0, %pc_hi20(.LCPI277_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI277_2)
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB277_10
	.p2align	4, , 16
.LBB277_9:                              # %_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_.exit
                                        #   in Loop: Header=BB277_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB277_12
.LBB277_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs1
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB277_9
# %bb.11:                               #   in Loop: Header=BB277_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -1280
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB277_9
.LBB277_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB277_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB277_16
.LBB277_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB277_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB277_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI277_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI277_4)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB277_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end277:
	.size	_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc, .Lfunc_end277-_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId10custom_twoIdEEvPT_iPKc
.LCPI278_0:
	.dword	0xc0cf400000000000              # double -16000
.LCPI278_1:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI278_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI278_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId10custom_twoIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId10custom_twoIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId10custom_twoIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId10custom_twoIdEEvPT_iPKc,@function
_Z13test_constantId10custom_twoIdEEvPT_iPKc: # @_Z13test_constantId10custom_twoIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB278_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB278_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI278_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI278_0)
	pcalau12i	$a0, %pc_hi20(.LCPI278_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI278_1)
	pcalau12i	$a0, %pc_hi20(.LCPI278_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI278_2)
	vldi	$vr3, -1024
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB278_4
	.p2align	4, , 16
.LBB278_3:                              # %_Z17check_shifted_sumId10custom_twoIdEEvT_.exit.us
                                        #   in Loop: Header=BB278_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB278_10
.LBB278_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_5 Depth 2
	move	$a0, $s0
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB278_5:                              #   Parent Loop BB278_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.d	$fa0, $fa0, $fa3
	bnez	$a0, .LBB278_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB278_4 Depth=1
	fadd.d	$fa1, $fa0, $fs1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB278_3
# %bb.7:                                #   in Loop: Header=BB278_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1024
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB278_3
.LBB278_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB278_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB278_9
.LBB278_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB278_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB278_14
.LBB278_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB278_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB278_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI278_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI278_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB278_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end278:
	.size	_Z13test_constantId10custom_twoIdEEvPT_iPKc, .Lfunc_end278-_Z13test_constantId10custom_twoIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
.LCPI279_0:
	.dword	0xc0d7700000000000              # double -24000
.LCPI279_1:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI279_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI279_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId20custom_add_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc,@function
_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc: # @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB279_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB279_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI279_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI279_0)
	pcalau12i	$a0, %pc_hi20(.LCPI279_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI279_1)
	pcalau12i	$a0, %pc_hi20(.LCPI279_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI279_2)
	vldi	$vr3, -1016
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB279_4
	.p2align	4, , 16
.LBB279_3:                              # %_Z17check_shifted_sumId20custom_add_constantsIdEEvT_.exit.us
                                        #   in Loop: Header=BB279_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB279_10
.LBB279_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_5 Depth 2
	move	$a0, $s0
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB279_5:                              #   Parent Loop BB279_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.d	$fa0, $fa0, $fa3
	bnez	$a0, .LBB279_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB279_4 Depth=1
	fadd.d	$fa1, $fa0, $fs1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB279_3
# %bb.7:                                #   in Loop: Header=BB279_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1016
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB279_3
.LBB279_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB279_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB279_9
.LBB279_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB279_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB279_14
.LBB279_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB279_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB279_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI279_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI279_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB279_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end279:
	.size	_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc, .Lfunc_end279-_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
.LCPI280_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI280_1:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI280_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI280_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc,@function
_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc: # @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB280_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB280_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI280_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI280_0)
	pcalau12i	$a0, %pc_hi20(.LCPI280_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI280_1)
	pcalau12i	$a0, %pc_hi20(.LCPI280_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI280_2)
	vldi	$vr3, -912
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB280_4
	.p2align	4, , 16
.LBB280_3:                              # %_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_.exit.us
                                        #   in Loop: Header=BB280_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB280_10
.LBB280_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB280_5 Depth 2
	move	$a0, $s0
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB280_5:                              #   Parent Loop BB280_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.d	$fa0, $fa0, $fa3
	bnez	$a0, .LBB280_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB280_4 Depth=1
	fadd.d	$fa1, $fa0, $fs1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB280_3
# %bb.7:                                #   in Loop: Header=BB280_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -912
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB280_3
.LBB280_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB280_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB280_9
.LBB280_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB280_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB280_14
.LBB280_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB280_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB280_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI280_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI280_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB280_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end280:
	.size	_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc, .Lfunc_end280-_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
.LCPI281_0:
	.dword	0xc0e7700000000000              # double -48000
.LCPI281_1:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI281_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI281_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc,@function
_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc: # @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB281_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB281_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI281_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI281_0)
	pcalau12i	$a0, %pc_hi20(.LCPI281_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI281_1)
	pcalau12i	$a0, %pc_hi20(.LCPI281_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI281_2)
	vldi	$vr3, -1000
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB281_4
	.p2align	4, , 16
.LBB281_3:                              # %_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_.exit.us
                                        #   in Loop: Header=BB281_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB281_10
.LBB281_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_5 Depth 2
	move	$a0, $s0
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB281_5:                              #   Parent Loop BB281_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.d	$fa0, $fa0, $fa3
	bnez	$a0, .LBB281_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB281_4 Depth=1
	fadd.d	$fa1, $fa0, $fs1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB281_3
# %bb.7:                                #   in Loop: Header=BB281_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1000
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB281_3
.LBB281_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB281_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB281_9
.LBB281_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB281_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB281_14
.LBB281_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB281_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB281_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI281_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI281_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB281_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end281:
	.size	_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc, .Lfunc_end281-_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
.LCPI282_0:
	.dword	0xc0cf400000000000              # double -16000
.LCPI282_1:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI282_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI282_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc,@function
_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc: # @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	move	$fp, $a2
	move	$s0, $a1
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$s3, %pc_hi20(start_time)
	st.d	$a0, $s3, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s2, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB282_10
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB282_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI282_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI282_0)
	pcalau12i	$a0, %pc_hi20(.LCPI282_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI282_1)
	pcalau12i	$a0, %pc_hi20(.LCPI282_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI282_2)
	vldi	$vr3, -1024
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s1, $a0, %pc_lo12(.L.str.299)
	b	.LBB282_4
	.p2align	4, , 16
.LBB282_3:                              # %_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_.exit.us
                                        #   in Loop: Header=BB282_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB282_10
.LBB282_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_5 Depth 2
	move	$a0, $s0
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB282_5:                              #   Parent Loop BB282_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$a0, $a0, -1
	fadd.d	$fa0, $fa0, $fa3
	bnez	$a0, .LBB282_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB282_4 Depth=1
	fadd.d	$fa1, $fa0, $fs1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB282_3
# %bb.7:                                #   in Loop: Header=BB282_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1024
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB282_3
.LBB282_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	.p2align	4, , 16
.LBB282_9:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s1, $s1, 1
	blt	$s1, $a0, .LBB282_9
.LBB282_10:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s3, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB282_12
# %bb.11:                               # %._crit_edge14
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB282_14
.LBB282_12:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB282_15
# %bb.13:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB282_14:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI282_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI282_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB282_15:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end282:
	.size	_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc, .Lfunc_end282-_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId19custom_constant_addIdEEvPT_iPKc
.LCPI283_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI283_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI283_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI283_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId19custom_constant_addIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId19custom_constant_addIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId19custom_constant_addIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId19custom_constant_addIdEEvPT_iPKc,@function
_Z13test_constantId19custom_constant_addIdEEvPT_iPKc: # @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB283_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB283_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -988
	pcalau12i	$a0, %pc_hi20(.LCPI283_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI283_0)
	pcalau12i	$a0, %pc_hi20(.LCPI283_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI283_2)
	pcalau12i	$a0, %pc_hi20(.LCPI283_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI283_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB283_4
	.p2align	4, , 16
.LBB283_3:                              # %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit.us
                                        #   in Loop: Header=BB283_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB283_12
.LBB283_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB283_5:                              #   Parent Loop BB283_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB283_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB283_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fa3
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB283_3
# %bb.7:                                #   in Loop: Header=BB283_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -988
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB283_3
.LBB283_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -988
	pcalau12i	$a0, %pc_hi20(.LCPI283_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI283_0)
	pcalau12i	$a0, %pc_hi20(.LCPI283_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI283_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB283_10
	.p2align	4, , 16
.LBB283_9:                              # %_Z17check_shifted_sumId19custom_constant_addIdEEvT_.exit
                                        #   in Loop: Header=BB283_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB283_12
.LBB283_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fa2
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB283_9
# %bb.11:                               #   in Loop: Header=BB283_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -988
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB283_9
.LBB283_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB283_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB283_16
.LBB283_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB283_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB283_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI283_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI283_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB283_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end283:
	.size	_Z13test_constantId19custom_constant_addIdEEvPT_iPKc, .Lfunc_end283-_Z13test_constantId19custom_constant_addIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
.LCPI284_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI284_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI284_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI284_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc,@function
_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc: # @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB284_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB284_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -912
	vldi	$vr4, -1024
	vldi	$vr5, -1016
	vldi	$vr6, -1008
	pcalau12i	$a0, %pc_hi20(.LCPI284_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI284_0)
	pcalau12i	$a0, %pc_hi20(.LCPI284_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI284_2)
	pcalau12i	$a0, %pc_hi20(.LCPI284_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI284_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB284_4
	.p2align	4, , 16
.LBB284_3:                              # %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit.us
                                        #   in Loop: Header=BB284_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB284_12
.LBB284_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB284_5:                              #   Parent Loop BB284_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fa4
	fadd.d	$fa1, $fa1, $fa5
	fadd.d	$fa1, $fa1, $fa6
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB284_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB284_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fa4
	fadd.d	$fa1, $fa1, $fa5
	fadd.d	$fa1, $fa1, $fa6
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB284_3
# %bb.7:                                #   in Loop: Header=BB284_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr6, -1008
	vldi	$vr5, -1016
	vldi	$vr4, -1024
	vldi	$vr3, -912
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB284_3
.LBB284_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -912
	vldi	$vr3, -1024
	vldi	$vr4, -1016
	vldi	$vr5, -1008
	pcalau12i	$a0, %pc_hi20(.LCPI284_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI284_0)
	pcalau12i	$a0, %pc_hi20(.LCPI284_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI284_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB284_10
	.p2align	4, , 16
.LBB284_9:                              # %_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_.exit
                                        #   in Loop: Header=BB284_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB284_12
.LBB284_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fa2
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fa4
	fadd.d	$fa1, $fa1, $fa5
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB284_9
# %bb.11:                               #   in Loop: Header=BB284_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr5, -1008
	vldi	$vr4, -1016
	vldi	$vr3, -1024
	vldi	$vr2, -912
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB284_9
.LBB284_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB284_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB284_16
.LBB284_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB284_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB284_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI284_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI284_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB284_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end284:
	.size	_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc, .Lfunc_end284-_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId19custom_constant_subIdEEvPT_iPKc
.LCPI285_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI285_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI285_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI285_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId19custom_constant_subIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId19custom_constant_subIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId19custom_constant_subIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId19custom_constant_subIdEEvPT_iPKc,@function
_Z13test_constantId19custom_constant_subIdEEvPT_iPKc: # @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB285_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB285_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -860
	pcalau12i	$a0, %pc_hi20(.LCPI285_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI285_0)
	pcalau12i	$a0, %pc_hi20(.LCPI285_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI285_2)
	pcalau12i	$a0, %pc_hi20(.LCPI285_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI285_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB285_4
	.p2align	4, , 16
.LBB285_3:                              # %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit.us
                                        #   in Loop: Header=BB285_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB285_12
.LBB285_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB285_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB285_5:                              #   Parent Loop BB285_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB285_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB285_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fa3
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB285_3
# %bb.7:                                #   in Loop: Header=BB285_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -860
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB285_3
.LBB285_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -860
	pcalau12i	$a0, %pc_hi20(.LCPI285_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI285_0)
	pcalau12i	$a0, %pc_hi20(.LCPI285_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI285_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB285_10
	.p2align	4, , 16
.LBB285_9:                              # %_Z17check_shifted_sumId19custom_constant_subIdEEvT_.exit
                                        #   in Loop: Header=BB285_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB285_12
.LBB285_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fa2
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB285_9
# %bb.11:                               #   in Loop: Header=BB285_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -860
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB285_9
.LBB285_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB285_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB285_16
.LBB285_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB285_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB285_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI285_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI285_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB285_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end285:
	.size	_Z13test_constantId19custom_constant_subIdEEvPT_iPKc, .Lfunc_end285-_Z13test_constantId19custom_constant_subIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
.LCPI286_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI286_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI286_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI286_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc,@function
_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc: # @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB286_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB286_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -784
	vldi	$vr4, -896
	vldi	$vr5, -888
	vldi	$vr6, -880
	pcalau12i	$a0, %pc_hi20(.LCPI286_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI286_0)
	pcalau12i	$a0, %pc_hi20(.LCPI286_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI286_2)
	pcalau12i	$a0, %pc_hi20(.LCPI286_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI286_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB286_4
	.p2align	4, , 16
.LBB286_3:                              # %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit.us
                                        #   in Loop: Header=BB286_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB286_12
.LBB286_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB286_5:                              #   Parent Loop BB286_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fa4
	fadd.d	$fa1, $fa1, $fa5
	fadd.d	$fa1, $fa1, $fa6
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB286_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB286_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fa4
	fadd.d	$fa1, $fa1, $fa5
	fadd.d	$fa1, $fa1, $fa6
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB286_3
# %bb.7:                                #   in Loop: Header=BB286_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr6, -880
	vldi	$vr5, -888
	vldi	$vr4, -896
	vldi	$vr3, -784
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB286_3
.LBB286_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -784
	vldi	$vr3, -896
	vldi	$vr4, -888
	vldi	$vr5, -880
	pcalau12i	$a0, %pc_hi20(.LCPI286_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI286_0)
	pcalau12i	$a0, %pc_hi20(.LCPI286_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI286_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB286_10
	.p2align	4, , 16
.LBB286_9:                              # %_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_.exit
                                        #   in Loop: Header=BB286_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB286_12
.LBB286_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fa2
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fa4
	fadd.d	$fa1, $fa1, $fa5
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB286_9
# %bb.11:                               #   in Loop: Header=BB286_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr5, -880
	vldi	$vr4, -888
	vldi	$vr3, -896
	vldi	$vr2, -784
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB286_9
.LBB286_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB286_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB286_16
.LBB286_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB286_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB286_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI286_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI286_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB286_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end286:
	.size	_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc, .Lfunc_end286-_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
.LCPI287_0:
	.dword	0xc05e000000000000              # double -120
.LCPI287_1:
	.dword	0x40bf400000000000              # double 8000
.LCPI287_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI287_3:
	.dword	0x405e000000000000              # double 120
.LCPI287_4:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI287_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc,@function
_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc: # @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB287_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB287_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI287_3)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI287_3)
	pcalau12i	$a0, %pc_hi20(.LCPI287_0)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI287_0)
	pcalau12i	$a0, %pc_hi20(.LCPI287_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI287_1)
	pcalau12i	$a0, %pc_hi20(.LCPI287_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI287_4)
	pcalau12i	$a0, %pc_hi20(.LCPI287_2)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI287_2)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB287_4
	.p2align	4, , 16
.LBB287_3:                              # %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit.us
                                        #   in Loop: Header=BB287_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB287_12
.LBB287_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB287_5:                              #   Parent Loop BB287_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB287_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB287_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fmul.d	$fa1, $fa1, $fs2
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB287_3
# %bb.7:                                #   in Loop: Header=BB287_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB287_3
.LBB287_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI287_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI287_0)
	pcalau12i	$a0, %pc_hi20(.LCPI287_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI287_1)
	pcalau12i	$a0, %pc_hi20(.LCPI287_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI287_2)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB287_10
	.p2align	4, , 16
.LBB287_9:                              # %_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_.exit
                                        #   in Loop: Header=BB287_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB287_12
.LBB287_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fmul.d	$fa1, $fa0, $fs0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB287_9
# %bb.11:                               #   in Loop: Header=BB287_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB287_9
.LBB287_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB287_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB287_16
.LBB287_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB287_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB287_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI287_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI287_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB287_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end287:
	.size	_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc, .Lfunc_end287-_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
.LCPI288_0:
	.dword	0x40bf400000000000              # double 8000
.LCPI288_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI288_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI288_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc,@function
_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc: # @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB288_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB288_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -1016
	vldi	$vr4, -1008
	vldi	$vr5, -1004
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI288_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI288_0)
	pcalau12i	$a0, %pc_hi20(.LCPI288_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI288_2)
	pcalau12i	$a0, %pc_hi20(.LCPI288_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI288_1)
	vldi	$vr6, -888
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB288_4
	.p2align	4, , 16
.LBB288_3:                              # %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit.us
                                        #   in Loop: Header=BB288_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB288_12
.LBB288_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB288_5:                              #   Parent Loop BB288_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fa1
	fmul.d	$fa1, $fa1, $fa3
	fmul.d	$fa1, $fa1, $fa4
	fmul.d	$fa1, $fa1, $fa5
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB288_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB288_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fa1
	fmul.d	$fa1, $fa1, $fa6
	fmul.d	$fa1, $fa1, $fa4
	fmul.d	$fa1, $fa1, $fa5
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB288_3
# %bb.7:                                #   in Loop: Header=BB288_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr6, -888
	vldi	$vr5, -1004
	vldi	$vr4, -1008
	vldi	$vr3, -1016
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB288_3
.LBB288_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -888
	vldi	$vr3, -1008
	vldi	$vr4, -1004
	pcalau12i	$a0, %pc_hi20(.LCPI288_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI288_0)
	pcalau12i	$a0, %pc_hi20(.LCPI288_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI288_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB288_10
	.p2align	4, , 16
.LBB288_9:                              # %_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_.exit
                                        #   in Loop: Header=BB288_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB288_12
.LBB288_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fa0
	fmul.d	$fa1, $fa1, $fa2
	fmul.d	$fa1, $fa1, $fa3
	fmul.d	$fa1, $fa1, $fa4
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB288_9
# %bb.11:                               #   in Loop: Header=BB288_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr4, -1004
	vldi	$vr3, -1008
	vldi	$vr2, -888
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB288_9
.LBB288_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB288_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB288_16
.LBB288_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB288_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB288_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI288_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI288_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB288_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end288:
	.size	_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc, .Lfunc_end288-_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
.LCPI289_0:
	.dword	0x405e000000000000              # double 120
.LCPI289_1:
	.dword	0xc0bf400000000000              # double -8000
.LCPI289_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI289_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI289_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc,@function
_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc: # @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB289_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB289_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI289_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI289_0)
	pcalau12i	$a0, %pc_hi20(.LCPI289_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI289_1)
	pcalau12i	$a0, %pc_hi20(.LCPI289_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI289_3)
	pcalau12i	$a0, %pc_hi20(.LCPI289_2)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI289_2)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB289_4
	.p2align	4, , 16
.LBB289_3:                              # %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit.us
                                        #   in Loop: Header=BB289_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB289_12
.LBB289_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB289_5:                              #   Parent Loop BB289_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB289_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB289_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB289_3
# %bb.7:                                #   in Loop: Header=BB289_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB289_3
.LBB289_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI289_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI289_0)
	pcalau12i	$a0, %pc_hi20(.LCPI289_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI289_1)
	pcalau12i	$a0, %pc_hi20(.LCPI289_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI289_2)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB289_10
	.p2align	4, , 16
.LBB289_9:                              # %_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_.exit
                                        #   in Loop: Header=BB289_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB289_12
.LBB289_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fs0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB289_9
# %bb.11:                               #   in Loop: Header=BB289_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB289_9
.LBB289_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB289_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB289_16
.LBB289_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB289_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB289_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI289_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI289_4)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB289_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end289:
	.size	_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc, .Lfunc_end289-_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
.LCPI290_0:
	.dword	0x40bf400000000000              # double 8000
.LCPI290_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI290_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI290_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId22custom_constant_divideIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc,@function
_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc: # @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB290_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB290_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -1004
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI290_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI290_0)
	pcalau12i	$a0, %pc_hi20(.LCPI290_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI290_2)
	pcalau12i	$a0, %pc_hi20(.LCPI290_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI290_1)
	vldi	$vr4, -876
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB290_4
	.p2align	4, , 16
.LBB290_3:                              # %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit.us
                                        #   in Loop: Header=BB290_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB290_12
.LBB290_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB290_5:                              #   Parent Loop BB290_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fdiv.d	$fa1, $fa1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB290_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB290_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fdiv.d	$fa1, $fa1, $fa4
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB290_3
# %bb.7:                                #   in Loop: Header=BB290_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr4, -876
	vldi	$vr3, -1004
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB290_3
.LBB290_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -876
	pcalau12i	$a0, %pc_hi20(.LCPI290_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI290_0)
	pcalau12i	$a0, %pc_hi20(.LCPI290_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI290_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB290_10
	.p2align	4, , 16
.LBB290_9:                              # %_Z17check_shifted_sumId22custom_constant_divideIdEEvT_.exit
                                        #   in Loop: Header=BB290_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB290_12
.LBB290_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fdiv.d	$fa1, $fa0, $fa2
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB290_9
# %bb.11:                               #   in Loop: Header=BB290_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -876
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB290_9
.LBB290_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB290_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB290_16
.LBB290_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB290_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB290_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI290_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI290_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB290_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end290:
	.size	_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc, .Lfunc_end290-_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
.LCPI291_0:
	.dword	0x40bf400000000000              # double 8000
.LCPI291_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI291_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI291_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc,@function
_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc: # @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB291_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB291_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -928
	vldi	$vr4, -1016
	vldi	$vr5, -944
	vldi	$vr6, -1004
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI291_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI291_0)
	pcalau12i	$a0, %pc_hi20(.LCPI291_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI291_2)
	pcalau12i	$a0, %pc_hi20(.LCPI291_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI291_1)
	vldi	$vr7, -800
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB291_4
	.p2align	4, , 16
.LBB291_3:                              # %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit.us
                                        #   in Loop: Header=BB291_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB291_12
.LBB291_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB291_5:                              #   Parent Loop BB291_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fmul.d	$fa1, $fa1, $fa3
	fdiv.d	$fa1, $fa1, $fa4
	fmul.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fa6
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB291_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB291_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fmul.d	$fa1, $fa1, $fa7
	fdiv.d	$fa1, $fa1, $fa4
	fmul.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fa6
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB291_3
# %bb.7:                                #   in Loop: Header=BB291_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr7, -800
	vldi	$vr6, -1004
	vldi	$vr5, -944
	vldi	$vr4, -1016
	vldi	$vr3, -928
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB291_3
.LBB291_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -800
	vldi	$vr3, -1016
	vldi	$vr4, -944
	vldi	$vr5, -1004
	pcalau12i	$a0, %pc_hi20(.LCPI291_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI291_0)
	pcalau12i	$a0, %pc_hi20(.LCPI291_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI291_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB291_10
	.p2align	4, , 16
.LBB291_9:                              # %_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_.exit
                                        #   in Loop: Header=BB291_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB291_12
.LBB291_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fmul.d	$fa1, $fa0, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fmul.d	$fa1, $fa1, $fa4
	fdiv.d	$fa1, $fa1, $fa5
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB291_9
# %bb.11:                               #   in Loop: Header=BB291_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr5, -1004
	vldi	$vr4, -944
	vldi	$vr3, -1016
	vldi	$vr2, -800
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB291_9
.LBB291_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB291_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB291_16
.LBB291_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB291_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB291_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI291_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI291_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB291_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end291:
	.size	_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc, .Lfunc_end291-_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
.LCPI292_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI292_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI292_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI292_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc,@function
_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc: # @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB292_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB292_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -1024
	pcalau12i	$a0, %pc_hi20(.LCPI292_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI292_0)
	pcalau12i	$a0, %pc_hi20(.LCPI292_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI292_2)
	pcalau12i	$a0, %pc_hi20(.LCPI292_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI292_1)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB292_4
	.p2align	4, , 16
.LBB292_3:                              # %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit.us
                                        #   in Loop: Header=BB292_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB292_12
.LBB292_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB292_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB292_5:                              #   Parent Loop BB292_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB292_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB292_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fa3
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB292_3
# %bb.7:                                #   in Loop: Header=BB292_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1024
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB292_3
.LBB292_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1024
	pcalau12i	$a0, %pc_hi20(.LCPI292_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI292_0)
	pcalau12i	$a0, %pc_hi20(.LCPI292_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI292_1)
	movgr2fr.d	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB292_10
	.p2align	4, , 16
.LBB292_9:                              # %_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_.exit
                                        #   in Loop: Header=BB292_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB292_12
.LBB292_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fa2
	fmul.d	$fa1, $fa1, $fs0
	fadd.d	$fa1, $fa1, $fs2
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB292_9
# %bb.11:                               #   in Loop: Header=BB292_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -1024
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB292_9
.LBB292_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB292_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB292_16
.LBB292_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB292_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB292_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI292_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI292_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB292_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end292:
	.size	_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc, .Lfunc_end292-_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
.LCPI293_0:
	.dword	0xc003333333333333              # double -2.3999999999999999
.LCPI293_1:
	.dword	0xc0bf400000000000              # double -8000
.LCPI293_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI293_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI293_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
	.p2align	5
	.type	_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc,@function
_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc: # @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	ori	$a0, $zero, 1
	pcalau12i	$s3, %pc_hi20(current_test)
	blt	$a1, $a0, .LBB293_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB293_8
# %bb.2:                                # %.preheader.us.preheader
	move	$s6, $zero
	movgr2fr.d	$fs0, $zero
	vldi	$vr3, -1024
	pcalau12i	$a0, %pc_hi20(.LCPI293_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI293_0)
	pcalau12i	$a0, %pc_hi20(.LCPI293_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI293_1)
	pcalau12i	$a0, %pc_hi20(.LCPI293_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI293_3)
	pcalau12i	$a0, %pc_hi20(.LCPI293_2)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI293_2)
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s2, $a0, %pc_lo12(.L.str.299)
	b	.LBB293_4
	.p2align	4, , 16
.LBB293_3:                              # %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit.us
                                        #   in Loop: Header=BB293_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB293_12
.LBB293_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB293_5:                              #   Parent Loop BB293_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB293_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB293_4 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB293_3
# %bb.7:                                #   in Loop: Header=BB293_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -1024
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB293_3
.LBB293_8:                              # %.preheader.preheader
	move	$s1, $zero
	pcalau12i	$s2, %pc_hi20(init_value)
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	vldi	$vr2, -1024
	pcalau12i	$a0, %pc_hi20(.LCPI293_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI293_0)
	pcalau12i	$a0, %pc_hi20(.LCPI293_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI293_1)
	pcalau12i	$a0, %pc_hi20(.LCPI293_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI293_2)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.299)
	addi.d	$s0, $a0, %pc_lo12(.L.str.299)
	b	.LBB293_10
	.p2align	4, , 16
.LBB293_9:                              # %_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_.exit
                                        #   in Loop: Header=BB293_10 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB293_12
.LBB293_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fa0, $fa2
	fadd.d	$fa1, $fa1, $fs0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB293_9
# %bb.11:                               #   in Loop: Header=BB293_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr2, -1024
	fld.d	$fa0, $s2, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB293_9
.LBB293_12:                             # %._crit_edge14
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB293_14
# %bb.13:                               # %._crit_edge14
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB293_16
.LBB293_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB293_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB293_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI293_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI293_4)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB293_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end293:
	.size	_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc, .Lfunc_end293-_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
	.cfi_endproc
                                        # -- End function
	.type	results,@object                 # @results
	.bss
	.globl	results
	.p2align	3, 0x0
results:
	.dword	0
	.size	results, 8

	.type	current_test,@object            # @current_test
	.globl	current_test
	.p2align	2, 0x0
current_test:
	.word	0                               # 0x0
	.size	current_test, 4

	.type	allocated_results,@object       # @allocated_results
	.globl	allocated_results
	.p2align	2, 0x0
allocated_results:
	.word	0                               # 0x0
	.size	allocated_results, 4

	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Could not allocate %d results\n"
	.size	.L.str, 31

	.type	.L.str.1,@object                # @.str.1
.L.str.1:
	.asciz	"\ntest %*s description   absolute   operations   ratio with\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object                # @.str.2
.L.str.2:
	.asciz	" "
	.size	.L.str.2, 2

	.type	.L.str.3,@object                # @.str.3
.L.str.3:
	.asciz	"number %*s time       per second   test0\n\n"
	.size	.L.str.3, 43

	.type	.L.str.4,@object                # @.str.4
.L.str.4:
	.asciz	"%2i %*s\"%s\"  %5.2f sec   %5.2f M     %.2f\n"
	.size	.L.str.4, 43

	.type	.L.str.5,@object                # @.str.5
.L.str.5:
	.space	1
	.size	.L.str.5, 1

	.type	.L.str.6,@object                # @.str.6
.L.str.6:
	.asciz	"\nTotal absolute time for %s: %.2f sec\n"
	.size	.L.str.6, 39

	.type	.L.str.7,@object                # @.str.7
.L.str.7:
	.asciz	"\n%s Penalty: %.2f\n\n"
	.size	.L.str.7, 20

	.type	.L.str.8,@object                # @.str.8
.L.str.8:
	.asciz	"\ntest %*s description   absolute\n"
	.size	.L.str.8, 34

	.type	.L.str.9,@object                # @.str.9
.L.str.9:
	.asciz	"number %*s time\n\n"
	.size	.L.str.9, 18

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	"%2i %*s\"%s\"  %5.2f sec\n"
	.size	.L.str.10, 24

	.type	start_time,@object              # @start_time
	.bss
	.globl	start_time
	.p2align	3, 0x0
start_time:
	.dword	0                               # 0x0
	.size	start_time, 8

	.type	end_time,@object                # @end_time
	.globl	end_time
	.p2align	3, 0x0
end_time:
	.dword	0                               # 0x0
	.size	end_time, 8

	.type	base_iterations,@object         # @base_iterations
	.data
	.globl	base_iterations
	.p2align	2, 0x0
base_iterations:
	.word	5000                            # 0x1388
	.size	base_iterations, 4

	.type	iterations,@object              # @iterations
	.globl	iterations
	.p2align	2, 0x0
iterations:
	.word	5000                            # 0x1388
	.size	iterations, 4

	.type	init_value,@object              # @init_value
	.globl	init_value
	.p2align	3, 0x0
init_value:
	.dword	0x3ff0000000000000              # double 1
	.size	init_value, 8

	.type	dataDouble,@object              # @dataDouble
	.bss
	.globl	dataDouble
	.p2align	3, 0x0
dataDouble:
	.space	64000
	.size	dataDouble, 64000

	.type	dataFloat,@object               # @dataFloat
	.globl	dataFloat
	.p2align	2, 0x0
dataFloat:
	.space	32000
	.size	dataFloat, 32000

	.type	data64unsigned,@object          # @data64unsigned
	.globl	data64unsigned
	.p2align	3, 0x0
data64unsigned:
	.space	64000
	.size	data64unsigned, 64000

	.type	data64,@object                  # @data64
	.globl	data64
	.p2align	3, 0x0
data64:
	.space	64000
	.size	data64, 64000

	.type	data32unsigned,@object          # @data32unsigned
	.globl	data32unsigned
	.p2align	2, 0x0
data32unsigned:
	.space	32000
	.size	data32unsigned, 32000

	.type	data32,@object                  # @data32
	.globl	data32
	.p2align	2, 0x0
data32:
	.space	32000
	.size	data32, 32000

	.type	data16unsigned,@object          # @data16unsigned
	.globl	data16unsigned
	.p2align	1, 0x0
data16unsigned:
	.space	16000
	.size	data16unsigned, 16000

	.type	data16,@object                  # @data16
	.globl	data16
	.p2align	1, 0x0
data16:
	.space	16000
	.size	data16, 16000

	.type	data8unsigned,@object           # @data8unsigned
	.globl	data8unsigned
	.p2align	3, 0x0
data8unsigned:
	.space	8000
	.size	data8unsigned, 8000

	.type	data8,@object                   # @data8
	.globl	data8
	.p2align	3, 0x0
data8:
	.space	8000
	.size	data8, 8000

	.type	.L.str.11,@object               # @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"int8_t constant"
	.size	.L.str.11, 16

	.type	.L.str.12,@object               # @.str.12
.L.str.12:
	.asciz	"int8_t add constants"
	.size	.L.str.12, 21

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	"int8_t subtract constants"
	.size	.L.str.13, 26

	.type	.L.str.14,@object               # @.str.14
.L.str.14:
	.asciz	"int8_t multiply constants"
	.size	.L.str.14, 26

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	"int8_t divide constants"
	.size	.L.str.15, 24

	.type	.L.str.16,@object               # @.str.16
.L.str.16:
	.asciz	"int8_t mod constants"
	.size	.L.str.16, 21

	.type	.L.str.17,@object               # @.str.17
.L.str.17:
	.asciz	"int8_t equal constants"
	.size	.L.str.17, 23

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"int8_t notequal constants"
	.size	.L.str.18, 26

	.type	.L.str.19,@object               # @.str.19
.L.str.19:
	.asciz	"int8_t greater than constants"
	.size	.L.str.19, 30

	.type	.L.str.20,@object               # @.str.20
.L.str.20:
	.asciz	"int8_t less than constants"
	.size	.L.str.20, 27

	.type	.L.str.21,@object               # @.str.21
.L.str.21:
	.asciz	"int8_t greater than equal constants"
	.size	.L.str.21, 36

	.type	.L.str.22,@object               # @.str.22
.L.str.22:
	.asciz	"int8_t less than equal constants"
	.size	.L.str.22, 33

	.type	.L.str.23,@object               # @.str.23
.L.str.23:
	.asciz	"int8_t and constants"
	.size	.L.str.23, 21

	.type	.L.str.24,@object               # @.str.24
.L.str.24:
	.asciz	"int8_t or constants"
	.size	.L.str.24, 20

	.type	.L.str.25,@object               # @.str.25
.L.str.25:
	.asciz	"int8_t xor constants"
	.size	.L.str.25, 21

	.type	.L.str.26,@object               # @.str.26
.L.str.26:
	.asciz	"int8_t constant add"
	.size	.L.str.26, 20

	.type	.L.str.27,@object               # @.str.27
.L.str.27:
	.asciz	"int8_t multiple constant adds"
	.size	.L.str.27, 30

	.type	.L.str.28,@object               # @.str.28
.L.str.28:
	.asciz	"int8_t constant subtract"
	.size	.L.str.28, 25

	.type	.L.str.29,@object               # @.str.29
.L.str.29:
	.asciz	"int8_t multiple constant subtracts"
	.size	.L.str.29, 35

	.type	.L.str.30,@object               # @.str.30
.L.str.30:
	.asciz	"int8_t constant multiply"
	.size	.L.str.30, 25

	.type	.L.str.31,@object               # @.str.31
.L.str.31:
	.asciz	"int8_t multiple constant multiplies"
	.size	.L.str.31, 36

	.type	.L.str.32,@object               # @.str.32
.L.str.32:
	.asciz	"int8_t multiple constant multiply2"
	.size	.L.str.32, 35

	.type	.L.str.33,@object               # @.str.33
.L.str.33:
	.asciz	"int8_t constant divide"
	.size	.L.str.33, 23

	.type	.L.str.34,@object               # @.str.34
.L.str.34:
	.asciz	"int8_t multiple constant divides"
	.size	.L.str.34, 33

	.type	.L.str.35,@object               # @.str.35
.L.str.35:
	.asciz	"int8_t multiple constant divide2"
	.size	.L.str.35, 33

	.type	.L.str.36,@object               # @.str.36
.L.str.36:
	.asciz	"int8_t multiple constant mixed"
	.size	.L.str.36, 31

	.type	.L.str.37,@object               # @.str.37
.L.str.37:
	.asciz	"int8_t constant and"
	.size	.L.str.37, 20

	.type	.L.str.38,@object               # @.str.38
.L.str.38:
	.asciz	"int8_t multiple constant and"
	.size	.L.str.38, 29

	.type	.L.str.39,@object               # @.str.39
.L.str.39:
	.asciz	"int8_t constant or"
	.size	.L.str.39, 19

	.type	.L.str.40,@object               # @.str.40
.L.str.40:
	.asciz	"int8_t multiple constant or"
	.size	.L.str.40, 28

	.type	.L.str.41,@object               # @.str.41
.L.str.41:
	.asciz	"int8_t constant xor"
	.size	.L.str.41, 20

	.type	.L.str.42,@object               # @.str.42
.L.str.42:
	.asciz	"int8_t multiple constant xor"
	.size	.L.str.42, 29

	.type	.L.str.43,@object               # @.str.43
.L.str.43:
	.asciz	"uint8_t constant"
	.size	.L.str.43, 17

	.type	.L.str.44,@object               # @.str.44
.L.str.44:
	.asciz	"uint8_t add constants"
	.size	.L.str.44, 22

	.type	.L.str.45,@object               # @.str.45
.L.str.45:
	.asciz	"uint8_t subtract constants"
	.size	.L.str.45, 27

	.type	.L.str.46,@object               # @.str.46
.L.str.46:
	.asciz	"uint8_t multiply constants"
	.size	.L.str.46, 27

	.type	.L.str.47,@object               # @.str.47
.L.str.47:
	.asciz	"uint8_t divide constants"
	.size	.L.str.47, 25

	.type	.L.str.48,@object               # @.str.48
.L.str.48:
	.asciz	"uint8_t mod constants"
	.size	.L.str.48, 22

	.type	.L.str.49,@object               # @.str.49
.L.str.49:
	.asciz	"uint8_t equal constants"
	.size	.L.str.49, 24

	.type	.L.str.50,@object               # @.str.50
.L.str.50:
	.asciz	"uint8_t notequal constants"
	.size	.L.str.50, 27

	.type	.L.str.51,@object               # @.str.51
.L.str.51:
	.asciz	"uint8_t greater than constants"
	.size	.L.str.51, 31

	.type	.L.str.52,@object               # @.str.52
.L.str.52:
	.asciz	"uint8_t less than constants"
	.size	.L.str.52, 28

	.type	.L.str.53,@object               # @.str.53
.L.str.53:
	.asciz	"uint8_t greater than equal constants"
	.size	.L.str.53, 37

	.type	.L.str.54,@object               # @.str.54
.L.str.54:
	.asciz	"uint8_t less than equal constants"
	.size	.L.str.54, 34

	.type	.L.str.55,@object               # @.str.55
.L.str.55:
	.asciz	"uint8_t and constants"
	.size	.L.str.55, 22

	.type	.L.str.56,@object               # @.str.56
.L.str.56:
	.asciz	"uint8_t or constants"
	.size	.L.str.56, 21

	.type	.L.str.57,@object               # @.str.57
.L.str.57:
	.asciz	"uint8_t xor constants"
	.size	.L.str.57, 22

	.type	.L.str.58,@object               # @.str.58
.L.str.58:
	.asciz	"uint8_t constant add"
	.size	.L.str.58, 21

	.type	.L.str.59,@object               # @.str.59
.L.str.59:
	.asciz	"uint8_t multiple constant adds"
	.size	.L.str.59, 31

	.type	.L.str.60,@object               # @.str.60
.L.str.60:
	.asciz	"uint8_t constant subtract"
	.size	.L.str.60, 26

	.type	.L.str.61,@object               # @.str.61
.L.str.61:
	.asciz	"uint8_t multiple constant subtracts"
	.size	.L.str.61, 36

	.type	.L.str.62,@object               # @.str.62
.L.str.62:
	.asciz	"uint8_t constant multiply"
	.size	.L.str.62, 26

	.type	.L.str.63,@object               # @.str.63
.L.str.63:
	.asciz	"uint8_t multiple constant multiplies"
	.size	.L.str.63, 37

	.type	.L.str.64,@object               # @.str.64
.L.str.64:
	.asciz	"uint8_t multiple constant multiply2"
	.size	.L.str.64, 36

	.type	.L.str.65,@object               # @.str.65
.L.str.65:
	.asciz	"uint8_t constant divide"
	.size	.L.str.65, 24

	.type	.L.str.66,@object               # @.str.66
.L.str.66:
	.asciz	"uint8_t multiple constant divides"
	.size	.L.str.66, 34

	.type	.L.str.67,@object               # @.str.67
.L.str.67:
	.asciz	"uint8_t multiple constant divide2"
	.size	.L.str.67, 34

	.type	.L.str.68,@object               # @.str.68
.L.str.68:
	.asciz	"uint8_t multiple constant mixed"
	.size	.L.str.68, 32

	.type	.L.str.69,@object               # @.str.69
.L.str.69:
	.asciz	"uint8_t constant and"
	.size	.L.str.69, 21

	.type	.L.str.70,@object               # @.str.70
.L.str.70:
	.asciz	"uint8_t multiple constant and"
	.size	.L.str.70, 30

	.type	.L.str.71,@object               # @.str.71
.L.str.71:
	.asciz	"uint8_t constant or"
	.size	.L.str.71, 20

	.type	.L.str.72,@object               # @.str.72
.L.str.72:
	.asciz	"uint8_t multiple constant or"
	.size	.L.str.72, 29

	.type	.L.str.73,@object               # @.str.73
.L.str.73:
	.asciz	"uint8_t constant xor"
	.size	.L.str.73, 21

	.type	.L.str.74,@object               # @.str.74
.L.str.74:
	.asciz	"uint8_t multiple constant xor"
	.size	.L.str.74, 30

	.type	.L.str.75,@object               # @.str.75
.L.str.75:
	.asciz	"int16_t constant"
	.size	.L.str.75, 17

	.type	.L.str.76,@object               # @.str.76
.L.str.76:
	.asciz	"int16_t add constants"
	.size	.L.str.76, 22

	.type	.L.str.77,@object               # @.str.77
.L.str.77:
	.asciz	"int16_t subtract constants"
	.size	.L.str.77, 27

	.type	.L.str.78,@object               # @.str.78
.L.str.78:
	.asciz	"int16_t multiply constants"
	.size	.L.str.78, 27

	.type	.L.str.79,@object               # @.str.79
.L.str.79:
	.asciz	"int16_t divide constants"
	.size	.L.str.79, 25

	.type	.L.str.80,@object               # @.str.80
.L.str.80:
	.asciz	"int16_t mod constants"
	.size	.L.str.80, 22

	.type	.L.str.81,@object               # @.str.81
.L.str.81:
	.asciz	"int16_t equal constants"
	.size	.L.str.81, 24

	.type	.L.str.82,@object               # @.str.82
.L.str.82:
	.asciz	"int16_t notequal constants"
	.size	.L.str.82, 27

	.type	.L.str.83,@object               # @.str.83
.L.str.83:
	.asciz	"int16_t greater than constants"
	.size	.L.str.83, 31

	.type	.L.str.84,@object               # @.str.84
.L.str.84:
	.asciz	"int16_t less than constants"
	.size	.L.str.84, 28

	.type	.L.str.85,@object               # @.str.85
.L.str.85:
	.asciz	"int16_t greater than equal constants"
	.size	.L.str.85, 37

	.type	.L.str.86,@object               # @.str.86
.L.str.86:
	.asciz	"int16_t less than equal constants"
	.size	.L.str.86, 34

	.type	.L.str.87,@object               # @.str.87
.L.str.87:
	.asciz	"int16_t and constants"
	.size	.L.str.87, 22

	.type	.L.str.88,@object               # @.str.88
.L.str.88:
	.asciz	"int16_t or constants"
	.size	.L.str.88, 21

	.type	.L.str.89,@object               # @.str.89
.L.str.89:
	.asciz	"int16_t xor constants"
	.size	.L.str.89, 22

	.type	.L.str.90,@object               # @.str.90
.L.str.90:
	.asciz	"int16_t constant add"
	.size	.L.str.90, 21

	.type	.L.str.91,@object               # @.str.91
.L.str.91:
	.asciz	"int16_t multiple constant adds"
	.size	.L.str.91, 31

	.type	.L.str.92,@object               # @.str.92
.L.str.92:
	.asciz	"int16_t constant subtract"
	.size	.L.str.92, 26

	.type	.L.str.93,@object               # @.str.93
.L.str.93:
	.asciz	"int16_t multiple constant subtracts"
	.size	.L.str.93, 36

	.type	.L.str.94,@object               # @.str.94
.L.str.94:
	.asciz	"int16_t constant multiply"
	.size	.L.str.94, 26

	.type	.L.str.95,@object               # @.str.95
.L.str.95:
	.asciz	"int16_t multiple constant multiplies"
	.size	.L.str.95, 37

	.type	.L.str.96,@object               # @.str.96
.L.str.96:
	.asciz	"int16_t multiple constant multiply2"
	.size	.L.str.96, 36

	.type	.L.str.97,@object               # @.str.97
.L.str.97:
	.asciz	"int16_t constant divide"
	.size	.L.str.97, 24

	.type	.L.str.98,@object               # @.str.98
.L.str.98:
	.asciz	"int16_t multiple constant divides"
	.size	.L.str.98, 34

	.type	.L.str.99,@object               # @.str.99
.L.str.99:
	.asciz	"int16_t multiple constant divide2"
	.size	.L.str.99, 34

	.type	.L.str.100,@object              # @.str.100
.L.str.100:
	.asciz	"int16_t multiple constant mixed"
	.size	.L.str.100, 32

	.type	.L.str.101,@object              # @.str.101
.L.str.101:
	.asciz	"int16_t constant and"
	.size	.L.str.101, 21

	.type	.L.str.102,@object              # @.str.102
.L.str.102:
	.asciz	"int16_t multiple constant and"
	.size	.L.str.102, 30

	.type	.L.str.103,@object              # @.str.103
.L.str.103:
	.asciz	"int16_t constant or"
	.size	.L.str.103, 20

	.type	.L.str.104,@object              # @.str.104
.L.str.104:
	.asciz	"int16_t multiple constant or"
	.size	.L.str.104, 29

	.type	.L.str.105,@object              # @.str.105
.L.str.105:
	.asciz	"int16_t constant xor"
	.size	.L.str.105, 21

	.type	.L.str.106,@object              # @.str.106
.L.str.106:
	.asciz	"int16_t multiple constant xor"
	.size	.L.str.106, 30

	.type	.L.str.107,@object              # @.str.107
.L.str.107:
	.asciz	"uint16_t constant"
	.size	.L.str.107, 18

	.type	.L.str.108,@object              # @.str.108
.L.str.108:
	.asciz	"uint16_t add constants"
	.size	.L.str.108, 23

	.type	.L.str.109,@object              # @.str.109
.L.str.109:
	.asciz	"uint16_t subtract constants"
	.size	.L.str.109, 28

	.type	.L.str.110,@object              # @.str.110
.L.str.110:
	.asciz	"uint16_t multiply constants"
	.size	.L.str.110, 28

	.type	.L.str.111,@object              # @.str.111
.L.str.111:
	.asciz	"uint16_t divide constants"
	.size	.L.str.111, 26

	.type	.L.str.112,@object              # @.str.112
.L.str.112:
	.asciz	"uint16_t mod constants"
	.size	.L.str.112, 23

	.type	.L.str.113,@object              # @.str.113
.L.str.113:
	.asciz	"uint16_t equal constants"
	.size	.L.str.113, 25

	.type	.L.str.114,@object              # @.str.114
.L.str.114:
	.asciz	"uint16_t notequal constants"
	.size	.L.str.114, 28

	.type	.L.str.115,@object              # @.str.115
.L.str.115:
	.asciz	"uint16_t greater than constants"
	.size	.L.str.115, 32

	.type	.L.str.116,@object              # @.str.116
.L.str.116:
	.asciz	"uint16_t less than constants"
	.size	.L.str.116, 29

	.type	.L.str.117,@object              # @.str.117
.L.str.117:
	.asciz	"uint16_t greater than equal constants"
	.size	.L.str.117, 38

	.type	.L.str.118,@object              # @.str.118
.L.str.118:
	.asciz	"uint16_t less than equal constants"
	.size	.L.str.118, 35

	.type	.L.str.119,@object              # @.str.119
.L.str.119:
	.asciz	"uint16_t and constants"
	.size	.L.str.119, 23

	.type	.L.str.120,@object              # @.str.120
.L.str.120:
	.asciz	"uint16_t or constants"
	.size	.L.str.120, 22

	.type	.L.str.121,@object              # @.str.121
.L.str.121:
	.asciz	"uint16_t xor constants"
	.size	.L.str.121, 23

	.type	.L.str.122,@object              # @.str.122
.L.str.122:
	.asciz	"uint16_t constant add"
	.size	.L.str.122, 22

	.type	.L.str.123,@object              # @.str.123
.L.str.123:
	.asciz	"uint16_t multiple constant adds"
	.size	.L.str.123, 32

	.type	.L.str.124,@object              # @.str.124
.L.str.124:
	.asciz	"uint16_t constant subtract"
	.size	.L.str.124, 27

	.type	.L.str.125,@object              # @.str.125
.L.str.125:
	.asciz	"uint16_t multiple constant subtracts"
	.size	.L.str.125, 37

	.type	.L.str.126,@object              # @.str.126
.L.str.126:
	.asciz	"uint16_t constant multiply"
	.size	.L.str.126, 27

	.type	.L.str.127,@object              # @.str.127
.L.str.127:
	.asciz	"uint16_t multiple constant multiplies"
	.size	.L.str.127, 38

	.type	.L.str.128,@object              # @.str.128
.L.str.128:
	.asciz	"uint16_t multiple constant multiply2"
	.size	.L.str.128, 37

	.type	.L.str.129,@object              # @.str.129
.L.str.129:
	.asciz	"uint16_t constant divide"
	.size	.L.str.129, 25

	.type	.L.str.130,@object              # @.str.130
.L.str.130:
	.asciz	"uint16_t multiple constant divides"
	.size	.L.str.130, 35

	.type	.L.str.131,@object              # @.str.131
.L.str.131:
	.asciz	"uint16_t multiple constant divide2"
	.size	.L.str.131, 35

	.type	.L.str.132,@object              # @.str.132
.L.str.132:
	.asciz	"uint16_t multiple constant mixed"
	.size	.L.str.132, 33

	.type	.L.str.133,@object              # @.str.133
.L.str.133:
	.asciz	"uint16_t constant and"
	.size	.L.str.133, 22

	.type	.L.str.134,@object              # @.str.134
.L.str.134:
	.asciz	"uint16_t multiple constant and"
	.size	.L.str.134, 31

	.type	.L.str.135,@object              # @.str.135
.L.str.135:
	.asciz	"uint16_t constant or"
	.size	.L.str.135, 21

	.type	.L.str.136,@object              # @.str.136
.L.str.136:
	.asciz	"uint16_t multiple constant or"
	.size	.L.str.136, 30

	.type	.L.str.137,@object              # @.str.137
.L.str.137:
	.asciz	"uint16_t constant xor"
	.size	.L.str.137, 22

	.type	.L.str.138,@object              # @.str.138
.L.str.138:
	.asciz	"uint16_t multiple constant xor"
	.size	.L.str.138, 31

	.type	.L.str.139,@object              # @.str.139
.L.str.139:
	.asciz	"int32_t constant"
	.size	.L.str.139, 17

	.type	.L.str.140,@object              # @.str.140
.L.str.140:
	.asciz	"int32_t add constants"
	.size	.L.str.140, 22

	.type	.L.str.141,@object              # @.str.141
.L.str.141:
	.asciz	"int32_t subtract constants"
	.size	.L.str.141, 27

	.type	.L.str.142,@object              # @.str.142
.L.str.142:
	.asciz	"int32_t multiply constants"
	.size	.L.str.142, 27

	.type	.L.str.143,@object              # @.str.143
.L.str.143:
	.asciz	"int32_t divide constants"
	.size	.L.str.143, 25

	.type	.L.str.144,@object              # @.str.144
.L.str.144:
	.asciz	"int32_t mod constants"
	.size	.L.str.144, 22

	.type	.L.str.145,@object              # @.str.145
.L.str.145:
	.asciz	"int32_t equal constants"
	.size	.L.str.145, 24

	.type	.L.str.146,@object              # @.str.146
.L.str.146:
	.asciz	"int32_t notequal constants"
	.size	.L.str.146, 27

	.type	.L.str.147,@object              # @.str.147
.L.str.147:
	.asciz	"int32_t greater than constants"
	.size	.L.str.147, 31

	.type	.L.str.148,@object              # @.str.148
.L.str.148:
	.asciz	"int32_t less than constants"
	.size	.L.str.148, 28

	.type	.L.str.149,@object              # @.str.149
.L.str.149:
	.asciz	"int32_t greater than equal constants"
	.size	.L.str.149, 37

	.type	.L.str.150,@object              # @.str.150
.L.str.150:
	.asciz	"int32_t less than equal constants"
	.size	.L.str.150, 34

	.type	.L.str.151,@object              # @.str.151
.L.str.151:
	.asciz	"int32_t and constants"
	.size	.L.str.151, 22

	.type	.L.str.152,@object              # @.str.152
.L.str.152:
	.asciz	"int32_t or constants"
	.size	.L.str.152, 21

	.type	.L.str.153,@object              # @.str.153
.L.str.153:
	.asciz	"int32_t xor constants"
	.size	.L.str.153, 22

	.type	.L.str.154,@object              # @.str.154
.L.str.154:
	.asciz	"int32_t constant add"
	.size	.L.str.154, 21

	.type	.L.str.155,@object              # @.str.155
.L.str.155:
	.asciz	"int32_t multiple constant adds"
	.size	.L.str.155, 31

	.type	.L.str.156,@object              # @.str.156
.L.str.156:
	.asciz	"int32_t constant subtract"
	.size	.L.str.156, 26

	.type	.L.str.157,@object              # @.str.157
.L.str.157:
	.asciz	"int32_t multiple constant subtracts"
	.size	.L.str.157, 36

	.type	.L.str.158,@object              # @.str.158
.L.str.158:
	.asciz	"int32_t constant multiply"
	.size	.L.str.158, 26

	.type	.L.str.159,@object              # @.str.159
.L.str.159:
	.asciz	"int32_t multiple constant multiplies"
	.size	.L.str.159, 37

	.type	.L.str.160,@object              # @.str.160
.L.str.160:
	.asciz	"int32_t multiple constant multiply2"
	.size	.L.str.160, 36

	.type	.L.str.161,@object              # @.str.161
.L.str.161:
	.asciz	"int32_t constant divide"
	.size	.L.str.161, 24

	.type	.L.str.162,@object              # @.str.162
.L.str.162:
	.asciz	"int32_t multiple constant divides"
	.size	.L.str.162, 34

	.type	.L.str.163,@object              # @.str.163
.L.str.163:
	.asciz	"int32_t multiple constant divide2"
	.size	.L.str.163, 34

	.type	.L.str.164,@object              # @.str.164
.L.str.164:
	.asciz	"int32_t multiple constant mixed"
	.size	.L.str.164, 32

	.type	.L.str.165,@object              # @.str.165
.L.str.165:
	.asciz	"int32_t constant and"
	.size	.L.str.165, 21

	.type	.L.str.166,@object              # @.str.166
.L.str.166:
	.asciz	"int32_t multiple constant and"
	.size	.L.str.166, 30

	.type	.L.str.167,@object              # @.str.167
.L.str.167:
	.asciz	"int32_t constant or"
	.size	.L.str.167, 20

	.type	.L.str.168,@object              # @.str.168
.L.str.168:
	.asciz	"int32_t multiple constant or"
	.size	.L.str.168, 29

	.type	.L.str.169,@object              # @.str.169
.L.str.169:
	.asciz	"int32_t constant xor"
	.size	.L.str.169, 21

	.type	.L.str.170,@object              # @.str.170
.L.str.170:
	.asciz	"int32_t multiple constant xor"
	.size	.L.str.170, 30

	.type	.L.str.171,@object              # @.str.171
.L.str.171:
	.asciz	"uint32_t constant"
	.size	.L.str.171, 18

	.type	.L.str.172,@object              # @.str.172
.L.str.172:
	.asciz	"uint32_t add constants"
	.size	.L.str.172, 23

	.type	.L.str.173,@object              # @.str.173
.L.str.173:
	.asciz	"uint32_t subtract constants"
	.size	.L.str.173, 28

	.type	.L.str.174,@object              # @.str.174
.L.str.174:
	.asciz	"uint32_t multiply constants"
	.size	.L.str.174, 28

	.type	.L.str.175,@object              # @.str.175
.L.str.175:
	.asciz	"uint32_t divide constants"
	.size	.L.str.175, 26

	.type	.L.str.176,@object              # @.str.176
.L.str.176:
	.asciz	"uint32_t mod constants"
	.size	.L.str.176, 23

	.type	.L.str.177,@object              # @.str.177
.L.str.177:
	.asciz	"uint32_t equal constants"
	.size	.L.str.177, 25

	.type	.L.str.178,@object              # @.str.178
.L.str.178:
	.asciz	"uint32_t notequal constants"
	.size	.L.str.178, 28

	.type	.L.str.179,@object              # @.str.179
.L.str.179:
	.asciz	"uint32_t greater than constants"
	.size	.L.str.179, 32

	.type	.L.str.180,@object              # @.str.180
.L.str.180:
	.asciz	"uint32_t less than constants"
	.size	.L.str.180, 29

	.type	.L.str.181,@object              # @.str.181
.L.str.181:
	.asciz	"uint32_t greater than equal constants"
	.size	.L.str.181, 38

	.type	.L.str.182,@object              # @.str.182
.L.str.182:
	.asciz	"uint32_t less than equal constants"
	.size	.L.str.182, 35

	.type	.L.str.183,@object              # @.str.183
.L.str.183:
	.asciz	"uint32_t and constants"
	.size	.L.str.183, 23

	.type	.L.str.184,@object              # @.str.184
.L.str.184:
	.asciz	"uint32_t or constants"
	.size	.L.str.184, 22

	.type	.L.str.185,@object              # @.str.185
.L.str.185:
	.asciz	"uint32_t xor constants"
	.size	.L.str.185, 23

	.type	.L.str.186,@object              # @.str.186
.L.str.186:
	.asciz	"uint32_t constant add"
	.size	.L.str.186, 22

	.type	.L.str.187,@object              # @.str.187
.L.str.187:
	.asciz	"uint32_t multiple constant adds"
	.size	.L.str.187, 32

	.type	.L.str.188,@object              # @.str.188
.L.str.188:
	.asciz	"uint32_t constant subtract"
	.size	.L.str.188, 27

	.type	.L.str.189,@object              # @.str.189
.L.str.189:
	.asciz	"uint32_t multiple constant subtracts"
	.size	.L.str.189, 37

	.type	.L.str.190,@object              # @.str.190
.L.str.190:
	.asciz	"uint32_t constant multiply"
	.size	.L.str.190, 27

	.type	.L.str.191,@object              # @.str.191
.L.str.191:
	.asciz	"uint32_t multiple constant multiplies"
	.size	.L.str.191, 38

	.type	.L.str.192,@object              # @.str.192
.L.str.192:
	.asciz	"uint32_t multiple constant multiply2"
	.size	.L.str.192, 37

	.type	.L.str.193,@object              # @.str.193
.L.str.193:
	.asciz	"uint32_t constant divide"
	.size	.L.str.193, 25

	.type	.L.str.194,@object              # @.str.194
.L.str.194:
	.asciz	"uint32_t multiple constant divides"
	.size	.L.str.194, 35

	.type	.L.str.195,@object              # @.str.195
.L.str.195:
	.asciz	"uint32_t multiple constant divide2"
	.size	.L.str.195, 35

	.type	.L.str.196,@object              # @.str.196
.L.str.196:
	.asciz	"uint32_t multiple constant mixed"
	.size	.L.str.196, 33

	.type	.L.str.197,@object              # @.str.197
.L.str.197:
	.asciz	"uint32_t constant and"
	.size	.L.str.197, 22

	.type	.L.str.198,@object              # @.str.198
.L.str.198:
	.asciz	"uint32_t multiple constant and"
	.size	.L.str.198, 31

	.type	.L.str.199,@object              # @.str.199
.L.str.199:
	.asciz	"uint32_t constant or"
	.size	.L.str.199, 21

	.type	.L.str.200,@object              # @.str.200
.L.str.200:
	.asciz	"uint32_t multiple constant or"
	.size	.L.str.200, 30

	.type	.L.str.201,@object              # @.str.201
.L.str.201:
	.asciz	"uint32_t constant xor"
	.size	.L.str.201, 22

	.type	.L.str.202,@object              # @.str.202
.L.str.202:
	.asciz	"uint32_t multiple constant xor"
	.size	.L.str.202, 31

	.type	.L.str.203,@object              # @.str.203
.L.str.203:
	.asciz	"int64_t constant"
	.size	.L.str.203, 17

	.type	.L.str.204,@object              # @.str.204
.L.str.204:
	.asciz	"int64_t add constants"
	.size	.L.str.204, 22

	.type	.L.str.205,@object              # @.str.205
.L.str.205:
	.asciz	"int64_t subtract constants"
	.size	.L.str.205, 27

	.type	.L.str.206,@object              # @.str.206
.L.str.206:
	.asciz	"int64_t multiply constants"
	.size	.L.str.206, 27

	.type	.L.str.207,@object              # @.str.207
.L.str.207:
	.asciz	"int64_t divide constants"
	.size	.L.str.207, 25

	.type	.L.str.208,@object              # @.str.208
.L.str.208:
	.asciz	"int64_t mod constants"
	.size	.L.str.208, 22

	.type	.L.str.209,@object              # @.str.209
.L.str.209:
	.asciz	"int64_t equal constants"
	.size	.L.str.209, 24

	.type	.L.str.210,@object              # @.str.210
.L.str.210:
	.asciz	"int64_t notequal constants"
	.size	.L.str.210, 27

	.type	.L.str.211,@object              # @.str.211
.L.str.211:
	.asciz	"int64_t greater than constants"
	.size	.L.str.211, 31

	.type	.L.str.212,@object              # @.str.212
.L.str.212:
	.asciz	"int64_t less than constants"
	.size	.L.str.212, 28

	.type	.L.str.213,@object              # @.str.213
.L.str.213:
	.asciz	"int64_t greater than equal constants"
	.size	.L.str.213, 37

	.type	.L.str.214,@object              # @.str.214
.L.str.214:
	.asciz	"int64_t less than equal constants"
	.size	.L.str.214, 34

	.type	.L.str.215,@object              # @.str.215
.L.str.215:
	.asciz	"int64_t and constants"
	.size	.L.str.215, 22

	.type	.L.str.216,@object              # @.str.216
.L.str.216:
	.asciz	"int64_t or constants"
	.size	.L.str.216, 21

	.type	.L.str.217,@object              # @.str.217
.L.str.217:
	.asciz	"int64_t xor constants"
	.size	.L.str.217, 22

	.type	.L.str.218,@object              # @.str.218
.L.str.218:
	.asciz	"int64_t constant add"
	.size	.L.str.218, 21

	.type	.L.str.219,@object              # @.str.219
.L.str.219:
	.asciz	"int64_t multiple constant adds"
	.size	.L.str.219, 31

	.type	.L.str.220,@object              # @.str.220
.L.str.220:
	.asciz	"int64_t constant subtract"
	.size	.L.str.220, 26

	.type	.L.str.221,@object              # @.str.221
.L.str.221:
	.asciz	"int64_t multiple constant subtracts"
	.size	.L.str.221, 36

	.type	.L.str.222,@object              # @.str.222
.L.str.222:
	.asciz	"int64_t constant multiply"
	.size	.L.str.222, 26

	.type	.L.str.223,@object              # @.str.223
.L.str.223:
	.asciz	"int64_t multiple constant multiplies"
	.size	.L.str.223, 37

	.type	.L.str.224,@object              # @.str.224
.L.str.224:
	.asciz	"int64_t multiple constant multiply2"
	.size	.L.str.224, 36

	.type	.L.str.225,@object              # @.str.225
.L.str.225:
	.asciz	"int64_t constant divide"
	.size	.L.str.225, 24

	.type	.L.str.226,@object              # @.str.226
.L.str.226:
	.asciz	"int64_t multiple constant divides"
	.size	.L.str.226, 34

	.type	.L.str.227,@object              # @.str.227
.L.str.227:
	.asciz	"int64_t multiple constant divide2"
	.size	.L.str.227, 34

	.type	.L.str.228,@object              # @.str.228
.L.str.228:
	.asciz	"int64_t multiple constant mixed"
	.size	.L.str.228, 32

	.type	.L.str.229,@object              # @.str.229
.L.str.229:
	.asciz	"int64_t constant and"
	.size	.L.str.229, 21

	.type	.L.str.230,@object              # @.str.230
.L.str.230:
	.asciz	"int64_t multiple constant and"
	.size	.L.str.230, 30

	.type	.L.str.231,@object              # @.str.231
.L.str.231:
	.asciz	"int64_t constant or"
	.size	.L.str.231, 20

	.type	.L.str.232,@object              # @.str.232
.L.str.232:
	.asciz	"int64_t multiple constant or"
	.size	.L.str.232, 29

	.type	.L.str.233,@object              # @.str.233
.L.str.233:
	.asciz	"int64_t constant xor"
	.size	.L.str.233, 21

	.type	.L.str.234,@object              # @.str.234
.L.str.234:
	.asciz	"int64_t multiple constant xor"
	.size	.L.str.234, 30

	.type	.L.str.235,@object              # @.str.235
.L.str.235:
	.asciz	"uint64_t constant"
	.size	.L.str.235, 18

	.type	.L.str.236,@object              # @.str.236
.L.str.236:
	.asciz	"uint64_t add constants"
	.size	.L.str.236, 23

	.type	.L.str.237,@object              # @.str.237
.L.str.237:
	.asciz	"uint64_t subtract constants"
	.size	.L.str.237, 28

	.type	.L.str.238,@object              # @.str.238
.L.str.238:
	.asciz	"uint64_t multiply constants"
	.size	.L.str.238, 28

	.type	.L.str.239,@object              # @.str.239
.L.str.239:
	.asciz	"uint64_t divide constants"
	.size	.L.str.239, 26

	.type	.L.str.240,@object              # @.str.240
.L.str.240:
	.asciz	"uint64_t mod constants"
	.size	.L.str.240, 23

	.type	.L.str.241,@object              # @.str.241
.L.str.241:
	.asciz	"uint64_t equal constants"
	.size	.L.str.241, 25

	.type	.L.str.242,@object              # @.str.242
.L.str.242:
	.asciz	"uint64_t notequal constants"
	.size	.L.str.242, 28

	.type	.L.str.243,@object              # @.str.243
.L.str.243:
	.asciz	"uint64_t greater than constants"
	.size	.L.str.243, 32

	.type	.L.str.244,@object              # @.str.244
.L.str.244:
	.asciz	"uint64_t less than constants"
	.size	.L.str.244, 29

	.type	.L.str.245,@object              # @.str.245
.L.str.245:
	.asciz	"uint64_t greater than equal constants"
	.size	.L.str.245, 38

	.type	.L.str.246,@object              # @.str.246
.L.str.246:
	.asciz	"uint64_t less than equal constants"
	.size	.L.str.246, 35

	.type	.L.str.247,@object              # @.str.247
.L.str.247:
	.asciz	"uint64_t and constants"
	.size	.L.str.247, 23

	.type	.L.str.248,@object              # @.str.248
.L.str.248:
	.asciz	"uint64_t or constants"
	.size	.L.str.248, 22

	.type	.L.str.249,@object              # @.str.249
.L.str.249:
	.asciz	"uint64_t xor constants"
	.size	.L.str.249, 23

	.type	.L.str.250,@object              # @.str.250
.L.str.250:
	.asciz	"uint64_t constant add"
	.size	.L.str.250, 22

	.type	.L.str.251,@object              # @.str.251
.L.str.251:
	.asciz	"uint64_t multiple constant adds"
	.size	.L.str.251, 32

	.type	.L.str.252,@object              # @.str.252
.L.str.252:
	.asciz	"uint64_t constant subtract"
	.size	.L.str.252, 27

	.type	.L.str.253,@object              # @.str.253
.L.str.253:
	.asciz	"uint64_t multiple constant subtracts"
	.size	.L.str.253, 37

	.type	.L.str.254,@object              # @.str.254
.L.str.254:
	.asciz	"uint64_t constant multiply"
	.size	.L.str.254, 27

	.type	.L.str.255,@object              # @.str.255
.L.str.255:
	.asciz	"uint64_t multiple constant multiplies"
	.size	.L.str.255, 38

	.type	.L.str.256,@object              # @.str.256
.L.str.256:
	.asciz	"uint64_t multiple constant multiply2"
	.size	.L.str.256, 37

	.type	.L.str.257,@object              # @.str.257
.L.str.257:
	.asciz	"uint64_t constant divide"
	.size	.L.str.257, 25

	.type	.L.str.258,@object              # @.str.258
.L.str.258:
	.asciz	"uint64_t multiple constant divides"
	.size	.L.str.258, 35

	.type	.L.str.259,@object              # @.str.259
.L.str.259:
	.asciz	"uint64_t multiple constant divide2"
	.size	.L.str.259, 35

	.type	.L.str.260,@object              # @.str.260
.L.str.260:
	.asciz	"uint64_t multiple constant mixed"
	.size	.L.str.260, 33

	.type	.L.str.261,@object              # @.str.261
.L.str.261:
	.asciz	"uint64_t constant and"
	.size	.L.str.261, 22

	.type	.L.str.262,@object              # @.str.262
.L.str.262:
	.asciz	"uint64_t multiple constant and"
	.size	.L.str.262, 31

	.type	.L.str.263,@object              # @.str.263
.L.str.263:
	.asciz	"uint64_t constant or"
	.size	.L.str.263, 21

	.type	.L.str.264,@object              # @.str.264
.L.str.264:
	.asciz	"uint64_t multiple constant or"
	.size	.L.str.264, 30

	.type	.L.str.265,@object              # @.str.265
.L.str.265:
	.asciz	"uint64_t constant xor"
	.size	.L.str.265, 22

	.type	.L.str.266,@object              # @.str.266
.L.str.266:
	.asciz	"uint64_t multiple constant xor"
	.size	.L.str.266, 31

	.type	.L.str.267,@object              # @.str.267
.L.str.267:
	.asciz	"float constant"
	.size	.L.str.267, 15

	.type	.L.str.268,@object              # @.str.268
.L.str.268:
	.asciz	"float add constants"
	.size	.L.str.268, 20

	.type	.L.str.269,@object              # @.str.269
.L.str.269:
	.asciz	"float subtract constants"
	.size	.L.str.269, 25

	.type	.L.str.270,@object              # @.str.270
.L.str.270:
	.asciz	"float multiply constants"
	.size	.L.str.270, 25

	.type	.L.str.271,@object              # @.str.271
.L.str.271:
	.asciz	"float divide constants"
	.size	.L.str.271, 23

	.type	.L.str.272,@object              # @.str.272
.L.str.272:
	.asciz	"float constant add"
	.size	.L.str.272, 19

	.type	.L.str.273,@object              # @.str.273
.L.str.273:
	.asciz	"float multiple constant adds"
	.size	.L.str.273, 29

	.type	.L.str.274,@object              # @.str.274
.L.str.274:
	.asciz	"float constant subtract"
	.size	.L.str.274, 24

	.type	.L.str.275,@object              # @.str.275
.L.str.275:
	.asciz	"float multiple constant subtracts"
	.size	.L.str.275, 34

	.type	.L.str.276,@object              # @.str.276
.L.str.276:
	.asciz	"float constant multiply"
	.size	.L.str.276, 24

	.type	.L.str.277,@object              # @.str.277
.L.str.277:
	.asciz	"float multiple constant multiplies"
	.size	.L.str.277, 35

	.type	.L.str.278,@object              # @.str.278
.L.str.278:
	.asciz	"float multiple constant multiply2"
	.size	.L.str.278, 34

	.type	.L.str.279,@object              # @.str.279
.L.str.279:
	.asciz	"float constant divide"
	.size	.L.str.279, 22

	.type	.L.str.280,@object              # @.str.280
.L.str.280:
	.asciz	"float multiple constant divides"
	.size	.L.str.280, 32

	.type	.L.str.281,@object              # @.str.281
.L.str.281:
	.asciz	"float multiple constant divide2"
	.size	.L.str.281, 32

	.type	.L.str.282,@object              # @.str.282
.L.str.282:
	.asciz	"float multiple constant mixed"
	.size	.L.str.282, 30

	.type	.L.str.283,@object              # @.str.283
.L.str.283:
	.asciz	"double constant"
	.size	.L.str.283, 16

	.type	.L.str.284,@object              # @.str.284
.L.str.284:
	.asciz	"double add constants"
	.size	.L.str.284, 21

	.type	.L.str.285,@object              # @.str.285
.L.str.285:
	.asciz	"double subtract constants"
	.size	.L.str.285, 26

	.type	.L.str.286,@object              # @.str.286
.L.str.286:
	.asciz	"double multiply constants"
	.size	.L.str.286, 26

	.type	.L.str.287,@object              # @.str.287
.L.str.287:
	.asciz	"double divide constants"
	.size	.L.str.287, 24

	.type	.L.str.288,@object              # @.str.288
.L.str.288:
	.asciz	"double constant add"
	.size	.L.str.288, 20

	.type	.L.str.289,@object              # @.str.289
.L.str.289:
	.asciz	"double multiple constant adds"
	.size	.L.str.289, 30

	.type	.L.str.290,@object              # @.str.290
.L.str.290:
	.asciz	"double constant subtract"
	.size	.L.str.290, 25

	.type	.L.str.291,@object              # @.str.291
.L.str.291:
	.asciz	"double multiple constant subtracts"
	.size	.L.str.291, 35

	.type	.L.str.292,@object              # @.str.292
.L.str.292:
	.asciz	"double constant multiply"
	.size	.L.str.292, 25

	.type	.L.str.293,@object              # @.str.293
.L.str.293:
	.asciz	"double multiple constant multiplies"
	.size	.L.str.293, 36

	.type	.L.str.294,@object              # @.str.294
.L.str.294:
	.asciz	"double multiple constant multiply2"
	.size	.L.str.294, 35

	.type	.L.str.295,@object              # @.str.295
.L.str.295:
	.asciz	"double constant divide"
	.size	.L.str.295, 23

	.type	.L.str.296,@object              # @.str.296
.L.str.296:
	.asciz	"double multiple constant divides"
	.size	.L.str.296, 33

	.type	.L.str.297,@object              # @.str.297
.L.str.297:
	.asciz	"double multiple constant divide2"
	.size	.L.str.297, 33

	.type	.L.str.298,@object              # @.str.298
.L.str.298:
	.asciz	"double multiple constant mixed"
	.size	.L.str.298, 31

	.type	.L.str.299,@object              # @.str.299
.L.str.299:
	.asciz	"test %i failed\n"
	.size	.L.str.299, 16

	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym dataDouble
	.addrsig_sym dataFloat
	.addrsig_sym data64unsigned
	.addrsig_sym data64
	.addrsig_sym data32unsigned
	.addrsig_sym data32
	.addrsig_sym data16unsigned
	.addrsig_sym data16
	.addrsig_sym data8unsigned
	.addrsig_sym data8
