	.file	"paq8p.cpp"
	.section	.text.unlikely.,"ax",@progbits
	.globl	_Z4quitPKc                      # -- Begin function _Z4quitPKc
	.p2align	5
	.type	_Z4quitPKc,@function
_Z4quitPKc:                             # @_Z4quitPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ori	$a0, $zero, 8
	pcaddu18i	$ra, %call36(__cxa_allocate_exception)
	jirl	$ra, $ra, 0
	st.d	$fp, $a0, 0
	pcalau12i	$a1, %got_pc_hi20(_ZTIPKc)
	ld.d	$a1, $a1, %got_pc_lo12(_ZTIPKc)
	move	$a2, $zero
	pcaddu18i	$ra, %call36(__cxa_throw)
	jirl	$ra, $ra, 0
.Lfunc_end0:
	.size	_Z4quitPKc, .Lfunc_end0-_Z4quitPKc
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z6equalsPKcS0_                 # -- Begin function _Z6equalsPKcS0_
	.p2align	5
	.type	_Z6equalsPKcS0_,@function
_Z6equalsPKcS0_:                        # @_Z6equalsPKcS0_
# %bb.0:
	.p2align	4, , 16
.LBB1_1:                                # =>This Inner Loop Header: Depth=1
	ld.bu	$a3, $a0, 0
	ld.bu	$a2, $a1, 0
	beqz	$a3, .LBB1_5
# %bb.2:                                #   in Loop: Header=BB1_1 Depth=1
	beqz	$a2, .LBB1_5
# %bb.3:                                #   in Loop: Header=BB1_1 Depth=1
	ext.w.b	$a4, $a3
	addi.d	$a3, $a3, -65
	andi	$a3, $a3, 255
	sltui	$a3, $a3, 26
	ori	$a5, $a4, 32
	masknez	$a4, $a4, $a3
	maskeqz	$a3, $a5, $a3
	or	$a3, $a3, $a4
	ext.w.b	$a4, $a2
	addi.d	$a2, $a2, -65
	andi	$a2, $a2, 255
	sltui	$a2, $a2, 26
	ori	$a5, $a4, 32
	masknez	$a4, $a4, $a2
	maskeqz	$a2, $a5, $a2
	or	$a2, $a2, $a4
	addi.d	$a0, $a0, 1
	addi.d	$a1, $a1, 1
	beq	$a3, $a2, .LBB1_1
# %bb.4:
	move	$a0, $zero
	ret
.LBB1_5:                                # %.critedge
	xor	$a0, $a3, $a2
	sltui	$a0, $a0, 1
	ret
.Lfunc_end1:
	.size	_Z6equalsPKcS0_, .Lfunc_end1-_Z6equalsPKcS0_
                                        # -- End function
	.section	.text._ZN6RandomD2Ev,"axG",@progbits,_ZN6RandomD2Ev,comdat
	.weak	_ZN6RandomD2Ev                  # -- Begin function _ZN6RandomD2Ev
	.p2align	5
	.type	_ZN6RandomD2Ev,@function
_ZN6RandomD2Ev:                         # @_ZN6RandomD2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 2
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB2_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB2_2:                                # %_ZN5ArrayIjLi0EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end2:
	.size	_ZN6RandomD2Ev, .Lfunc_end2-_ZN6RandomD2Ev
                                        # -- End function
	.section	.text._ZN3BufC2Ei,"axG",@progbits,_ZN3BufC2Ei,comdat
	.weak	_ZN3BufC2Ei                     # -- Begin function _ZN3BufC2Ei
	.p2align	5
	.type	_ZN3BufC2Ei,@function
_ZN3BufC2Ei:                            # @_ZN3BufC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB3_5
# %bb.1:
	move	$a2, $a1
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$a0, $a0, %pc_lo12(programChecker)
	ld.w	$a1, $a0, 0
	ld.w	$a3, $a0, 4
	add.w	$a1, $a1, $a2
	st.w	$a1, $a0, 0
	bge	$a3, $a1, .LBB3_3
# %bb.2:
	st.w	$a1, $a0, 4
.LBB3_3:                                # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	move	$a0, $a2
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB3_6
# %bb.4:                                # %_ZN5ArrayIhLi0EEC2Ei.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB3_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB3_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end3:
	.size	_ZN3BufC2Ei, .Lfunc_end3-_ZN3BufC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN3BufD2Ev,"axG",@progbits,_ZN3BufD2Ev,comdat
	.weak	_ZN3BufD2Ev                     # -- Begin function _ZN3BufD2Ev
	.p2align	5
	.type	_ZN3BufD2Ev,@function
_ZN3BufD2Ev:                            # @_ZN3BufD2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB4_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB4_2:                                # %_ZN5ArrayIhLi0EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end4:
	.size	_ZN3BufD2Ev, .Lfunc_end4-_ZN3BufD2Ev
                                        # -- End function
	.section	.text._ZN4IlogD2Ev,"axG",@progbits,_ZN4IlogD2Ev,comdat
	.weak	_ZN4IlogD2Ev                    # -- Begin function _ZN4IlogD2Ev
	.p2align	5
	.type	_ZN4IlogD2Ev,@function
_ZN4IlogD2Ev:                           # @_ZN4IlogD2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB5_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB5_2:                                # %_ZN5ArrayIhLi0EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end5:
	.size	_ZN4IlogD2Ev, .Lfunc_end5-_ZN4IlogD2Ev
                                        # -- End function
	.text
	.globl	_ZN4IlogC2Ev                    # -- Begin function _ZN4IlogC2Ev
	.p2align	5
	.type	_ZN4IlogC2Ev,@function
_ZN4IlogC2Ev:                           # @_ZN4IlogC2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	lu12i.w	$a0, 16
	lu32i.d	$a0, 65536
	st.d	$a0, $fp, 0
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$a0, $a0, %pc_lo12(programChecker)
	ld.w	$a1, $a0, 0
	ld.w	$a2, $a0, 4
	addu16i.d	$a3, $a1, 1
	addi.w	$a1, $a3, 0
	st.w	$a3, $a0, 0
	bge	$a2, $a1, .LBB6_2
# %bb.1:
	st.w	$a1, $a0, 4
.LBB6_2:                                # %_ZN14ProgramChecker5allocEi.exit.i.i
	lu12i.w	$a0, 16
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB6_6
# %bb.3:                                # %_ZN5ArrayIhLi0EEC2Ei.exit
	move	$a1, $zero
	st.d	$a0, $fp, 16
	lu12i.w	$a0, 3456
	ori	$a2, $zero, 3
	lu12i.w	$a3, 189096
	ori	$a3, $a3, 3786
	lu12i.w	$a4, 15
	ori	$a4, $a4, 4094
	.p2align	4, , 16
.LBB6_4:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $fp, 16
	div.wu	$a6, $a3, $a2
	add.d	$a0, $a6, $a0
	srli.d	$a6, $a0, 24
	add.d	$a5, $a5, $a1
	st.b	$a6, $a5, 2
	addi.d	$a1, $a1, 1
	addi.w	$a2, $a2, 2
	bne	$a1, $a4, .LBB6_4
# %bb.5:
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB6_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end6:
	.size	_ZN4IlogC2Ev, .Lfunc_end6-_ZN4IlogC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayIhLi0EEC2Ei,"axG",@progbits,_ZN5ArrayIhLi0EEC2Ei,comdat
	.weak	_ZN5ArrayIhLi0EEC2Ei            # -- Begin function _ZN5ArrayIhLi0EEC2Ei
	.p2align	5
	.type	_ZN5ArrayIhLi0EEC2Ei,@function
_ZN5ArrayIhLi0EEC2Ei:                   # @_ZN5ArrayIhLi0EEC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB7_5
# %bb.1:
	move	$a2, $a1
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$a0, $a0, %pc_lo12(programChecker)
	ld.w	$a1, $a0, 0
	ld.w	$a3, $a0, 4
	add.w	$a1, $a1, $a2
	st.w	$a1, $a0, 0
	bge	$a3, $a1, .LBB7_3
# %bb.2:
	st.w	$a1, $a0, 4
.LBB7_3:                                # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	move	$a0, $a2
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB7_6
# %bb.4:                                # %_ZN5ArrayIhLi0EE6createEi.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB7_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB7_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end7:
	.size	_ZN5ArrayIhLi0EEC2Ei, .Lfunc_end7-_ZN5ArrayIhLi0EEC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayIhLi0EED2Ev,"axG",@progbits,_ZN5ArrayIhLi0EED2Ev,comdat
	.weak	_ZN5ArrayIhLi0EED2Ev            # -- Begin function _ZN5ArrayIhLi0EED2Ev
	.p2align	5
	.type	_ZN5ArrayIhLi0EED2Ev,@function
_ZN5ArrayIhLi0EED2Ev:                   # @_ZN5ArrayIhLi0EED2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB8_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB8_2:                                # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end8:
	.size	_ZN5ArrayIhLi0EED2Ev, .Lfunc_end8-_ZN5ArrayIhLi0EED2Ev
                                        # -- End function
	.text
	.globl	_Z6squashi                      # -- Begin function _Z6squashi
	.p2align	5
	.type	_Z6squashi,@function
_Z6squashi:                             # @_Z6squashi
# %bb.0:
	ori	$a2, $zero, 2047
	ori	$a1, $zero, 4095
	blt	$a2, $a0, .LBB9_4
# %bb.1:
	addi.w	$a1, $zero, -2047
	bge	$a0, $a1, .LBB9_3
# %bb.2:
	move	$a0, $zero
	ret
.LBB9_3:
	andi	$a1, $a0, 127
	srai.d	$a0, $a0, 7
	pcalau12i	$a2, %pc_hi20(_ZZ6squashiE1t)
	addi.d	$a2, $a2, %pc_lo12(_ZZ6squashiE1t)
	alsl.d	$a0, $a0, $a2, 2
	ld.w	$a2, $a0, 64
	ld.w	$a0, $a0, 68
	ori	$a3, $zero, 128
	sub.d	$a3, $a3, $a1
	mul.d	$a2, $a2, $a3
	mul.d	$a0, $a0, $a1
	add.d	$a0, $a2, $a0
	addi.w	$a0, $a0, 64
	srai.d	$a1, $a0, 7
.LBB9_4:
	move	$a0, $a1
	ret
.Lfunc_end9:
	.size	_Z6squashi, .Lfunc_end9-_Z6squashi
                                        # -- End function
	.section	.text._ZN7StretchD2Ev,"axG",@progbits,_ZN7StretchD2Ev,comdat
	.weak	_ZN7StretchD2Ev                 # -- Begin function _ZN7StretchD2Ev
	.p2align	5
	.type	_ZN7StretchD2Ev,@function
_ZN7StretchD2Ev:                        # @_ZN7StretchD2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 1
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB10_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB10_2:                               # %_ZN5ArrayIsLi0EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end10:
	.size	_ZN7StretchD2Ev, .Lfunc_end10-_ZN7StretchD2Ev
                                        # -- End function
	.text
	.globl	_ZN7StretchC2Ev                 # -- Begin function _ZN7StretchC2Ev
	.p2align	5
	.type	_ZN7StretchC2Ev,@function
_ZN7StretchC2Ev:                        # @_ZN7StretchC2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	lu12i.w	$s0, 1
	move	$fp, $a0
	move	$a0, $s0
	lu32i.d	$a0, 4096
	st.d	$a0, $fp, 0
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$a0, $a0, %pc_lo12(programChecker)
	ld.w	$a1, $a0, 0
	ld.w	$a2, $a0, 4
	lu12i.w	$a3, 2
	add.w	$a1, $a1, $a3
	st.w	$a1, $a0, 0
	bge	$a2, $a1, .LBB11_2
# %bb.1:
	st.w	$a1, $a0, 4
.LBB11_2:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	lu12i.w	$a0, 2
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB11_22
# %bb.3:                                # %_ZN5ArrayIsLi0EEC2Ei.exit
	st.d	$a0, $fp, 16
	addi.d	$a1, $a0, 16
	addi.w	$a2, $zero, -2047
	pcalau12i	$a3, %pc_hi20(_ZZ6squashiE1t)
	addi.d	$a3, $a3, %pc_lo12(_ZZ6squashiE1t)
	move	$t2, $zero
	ori	$a4, $zero, 128
	ori	$a5, $zero, 2048
	ori	$a6, $zero, 8
	ori	$a7, $zero, 16
	b	.LBB11_6
	.p2align	4, , 16
.LBB11_4:                               # %_Z6squashi.exit.._crit_edge_crit_edge
                                        #   in Loop: Header=BB11_6 Depth=1
	addi.w	$t0, $t1, 1
.LBB11_5:                               # %._crit_edge
                                        #   in Loop: Header=BB11_6 Depth=1
	addi.w	$a2, $a2, 1
	move	$t2, $t0
	beq	$a2, $a5, .LBB11_21
.LBB11_6:                               # %_Z6squashi.exit
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_15 Depth 2
                                        #     Child Loop BB11_12 Depth 2
                                        #     Child Loop BB11_20 Depth 2
	srai.d	$t0, $a2, 7
	alsl.d	$t0, $t0, $a3, 2
	ld.w	$t1, $t0, 64
	ld.w	$t0, $t0, 68
	andi	$t3, $a2, 127
	sub.d	$t4, $a4, $t3
	mul.d	$t1, $t1, $t4
	mul.d	$t0, $t0, $t3
	add.d	$t0, $t1, $t0
	addi.w	$t0, $t0, 64
	srai.d	$t1, $t0, 7
	blt	$t1, $t2, .LBB11_4
# %bb.7:                                # %iter.check
                                        #   in Loop: Header=BB11_6 Depth=1
	addi.w	$t0, $t1, 1
	sub.w	$t3, $t0, $t2
	bgeu	$t3, $a6, .LBB11_9
# %bb.8:                                #   in Loop: Header=BB11_6 Depth=1
	move	$t5, $t2
	b	.LBB11_19
	.p2align	4, , 16
.LBB11_9:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB11_6 Depth=1
	vreplgr2vr.h	$vr0, $a2
	bgeu	$t3, $a7, .LBB11_14
# %bb.10:                               #   in Loop: Header=BB11_6 Depth=1
	move	$t4, $zero
.LBB11_11:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB11_6 Depth=1
	bstrpick.d	$t5, $t3, 30, 3
	slli.d	$t6, $t5, 3
	alsl.d	$t5, $t5, $t2, 3
	slli.d	$t7, $t4, 1
	alsl.d	$t2, $t2, $t7, 1
	add.d	$t2, $a0, $t2
	sub.d	$t4, $t4, $t6
	.p2align	4, , 16
.LBB11_12:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB11_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vst	$vr0, $t2, 0
	addi.d	$t4, $t4, 8
	addi.d	$t2, $t2, 16
	bnez	$t4, .LBB11_12
# %bb.13:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB11_6 Depth=1
	beq	$t6, $t3, .LBB11_5
	b	.LBB11_19
.LBB11_14:                              # %vector.ph
                                        #   in Loop: Header=BB11_6 Depth=1
	andi	$t5, $t3, 8
	bstrpick.d	$t4, $t3, 30, 4
	slli.d	$t4, $t4, 4
	alsl.d	$t6, $t2, $a1, 1
	move	$t7, $t4
	.p2align	4, , 16
.LBB11_15:                              # %vector.body
                                        #   Parent Loop BB11_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vst	$vr0, $t6, -16
	vst	$vr0, $t6, 0
	addi.d	$t7, $t7, -16
	addi.d	$t6, $t6, 32
	bnez	$t7, .LBB11_15
# %bb.16:                               # %middle.block
                                        #   in Loop: Header=BB11_6 Depth=1
	beq	$t4, $t3, .LBB11_5
# %bb.17:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB11_6 Depth=1
	bnez	$t5, .LBB11_11
# %bb.18:                               #   in Loop: Header=BB11_6 Depth=1
	add.d	$t5, $t4, $t2
	.p2align	4, , 16
.LBB11_19:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB11_6 Depth=1
	alsl.d	$t2, $t5, $a0, 1
	sub.d	$t1, $t1, $t5
	addi.d	$t1, $t1, 1
	.p2align	4, , 16
.LBB11_20:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB11_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	st.h	$a2, $t2, 0
	addi.d	$t1, $t1, -1
	addi.d	$t2, $t2, 2
	bnez	$t1, .LBB11_20
	b	.LBB11_5
.LBB11_21:
	ori	$a1, $s0, 4094
	ori	$a2, $zero, 2047
	stx.h	$a2, $a0, $a1
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB11_22:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end11:
	.size	_ZN7StretchC2Ev, .Lfunc_end11-_ZN7StretchC2Ev
	.cfi_endproc
                                        # -- End function
	.globl	_Z11dot_productPsS_i            # -- Begin function _Z11dot_productPsS_i
	.p2align	5
	.type	_Z11dot_productPsS_i,@function
_Z11dot_productPsS_i:                   # @_Z11dot_productPsS_i
# %bb.0:
	blez	$a2, .LBB12_3
# %bb.1:                                # %.lr.ph.preheader
	addi.d	$sp, $sp, -16
	st.d	$fp, $sp, 8                     # 8-byte Folded Spill
	st.d	$s0, $sp, 0                     # 8-byte Folded Spill
	addi.d	$a2, $a2, 7
	bstrpick.d	$a2, $a2, 30, 3
	slli.d	$a3, $a2, 3
	ori	$a2, $zero, 2
	sltu	$a4, $a2, $a3
	masknez	$a2, $a2, $a4
	maskeqz	$a4, $a3, $a4
	or	$a2, $a4, $a2
	addi.d	$a4, $a2, -1
	ori	$a2, $zero, 1
	bne	$a4, $a2, .LBB12_4
# %bb.2:
	move	$a4, $zero
	move	$a2, $zero
	b	.LBB12_7
.LBB12_3:
	move	$a0, $zero
	ret
.LBB12_4:                               # %vector.ph
	move	$a2, $zero
	move	$a7, $zero
	srli.d	$a4, $a4, 1
	addi.d	$a5, $a4, 1
	bstrpick.d	$a4, $a5, 62, 1
	slli.d	$a6, $a4, 1
	slli.d	$a4, $a4, 2
	addi.d	$t0, $a1, 4
	addi.d	$t1, $a0, 4
	move	$t2, $a6
	.p2align	4, , 16
.LBB12_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$t3, $t1, -4
	ld.h	$t4, $t1, 0
	ld.h	$t5, $t0, -4
	ld.h	$t6, $t0, 0
	ld.h	$t7, $t1, -2
	ld.h	$t8, $t1, 2
	ld.h	$fp, $t0, -2
	ld.h	$s0, $t0, 2
	mul.d	$t3, $t5, $t3
	mul.d	$t4, $t6, $t4
	mul.d	$t5, $fp, $t7
	mul.d	$t6, $s0, $t8
	add.w	$t3, $t5, $t3
	add.w	$t4, $t6, $t4
	srli.d	$t3, $t3, 8
	srli.d	$t4, $t4, 8
	add.d	$a2, $t3, $a2
	add.d	$a7, $t4, $a7
	addi.d	$t2, $t2, -2
	addi.d	$t0, $t0, 8
	addi.d	$t1, $t1, 8
	bnez	$t2, .LBB12_5
# %bb.6:                                # %middle.block
	add.w	$a2, $a7, $a2
	beq	$a5, $a6, .LBB12_9
.LBB12_7:                               # %.lr.ph.preheader17
	slli.d	$a5, $a4, 1
	addi.d	$a5, $a5, 2
	add.d	$a1, $a1, $a5
	add.d	$a0, $a0, $a5
	.p2align	4, , 16
.LBB12_8:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$a5, $a0, -2
	ld.h	$a6, $a1, -2
	ld.h	$a7, $a0, 0
	ld.h	$t0, $a1, 0
	mul.d	$a5, $a6, $a5
	mul.d	$a6, $t0, $a7
	add.w	$a5, $a6, $a5
	srli.d	$a5, $a5, 8
	add.w	$a2, $a5, $a2
	addi.d	$a4, $a4, 2
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 4
	bltu	$a4, $a3, .LBB12_8
.LBB12_9:
	ld.d	$s0, $sp, 0                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	move	$a0, $a2
	ret
.Lfunc_end12:
	.size	_Z11dot_productPsS_i, .Lfunc_end12-_Z11dot_productPsS_i
                                        # -- End function
	.globl	_Z5trainPsS_ii                  # -- Begin function _Z5trainPsS_ii
	.p2align	5
	.type	_Z5trainPsS_ii,@function
_Z5trainPsS_ii:                         # @_Z5trainPsS_ii
# %bb.0:
	blez	$a2, .LBB13_7
# %bb.1:                                # %.lr.ph.preheader
	addi.w	$a6, $a2, 7
	move	$a2, $a6
	bstrins.d	$a2, $zero, 2, 0
	ori	$a4, $zero, 1
	slt	$a5, $a4, $a2
	masknez	$a4, $a4, $a5
	maskeqz	$a2, $a2, $a5
	or	$a4, $a2, $a4
	ori	$a7, $zero, 8
	lu12i.w	$a2, -8
	lu12i.w	$a5, 7
	blt	$a6, $a7, .LBB13_4
# %bb.2:                                # %vector.memcheck
	alsl.d	$a6, $a4, $a0, 1
	bgeu	$a1, $a6, .LBB13_8
# %bb.3:                                # %vector.memcheck
	alsl.d	$a6, $a4, $a1, 1
	bgeu	$a0, $a6, .LBB13_8
.LBB13_4:
	move	$a6, $zero
.LBB13_5:                               # %.lr.ph.preheader17
	alsl.d	$a0, $a6, $a0, 1
	alsl.d	$a1, $a6, $a1, 1
	sub.d	$a4, $a6, $a4
	ori	$a5, $a5, 4095
	.p2align	4, , 16
.LBB13_6:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$a6, $a0, 0
	ld.h	$a7, $a1, 0
	mul.w	$a6, $a3, $a6
	srli.d	$a6, $a6, 15
	addi.w	$a6, $a6, 1
	srai.d	$a6, $a6, 1
	add.d	$a6, $a6, $a7
	slt	$a7, $a2, $a6
	maskeqz	$a6, $a6, $a7
	masknez	$a7, $a2, $a7
	or	$a6, $a6, $a7
	slt	$a7, $a6, $a5
	maskeqz	$a6, $a6, $a7
	masknez	$a7, $a5, $a7
	or	$a6, $a6, $a7
	st.h	$a6, $a1, 0
	addi.d	$a0, $a0, 2
	addi.d	$a4, $a4, 1
	addi.d	$a1, $a1, 2
	bnez	$a4, .LBB13_6
.LBB13_7:                               # %._crit_edge
	ret
.LBB13_8:                               # %vector.ph
	bstrpick.d	$a6, $a4, 30, 3
	slli.d	$a6, $a6, 3
	vreplgr2vr.w	$vr0, $a3
	vreplgr2vr.w	$vr1, $a2
	ori	$a7, $a5, 4095
	vreplgr2vr.w	$vr2, $a7
	move	$a7, $a1
	move	$t0, $a0
	move	$t1, $a6
	.p2align	4, , 16
.LBB13_9:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr3, $a7, 0
	vilvh.h	$vr4, $vr3, $vr3
	vslli.w	$vr4, $vr4, 16
	vsrai.w	$vr4, $vr4, 16
	vld	$vr5, $t0, 0
	vilvl.h	$vr3, $vr3, $vr3
	vslli.w	$vr3, $vr3, 16
	vsrai.w	$vr3, $vr3, 16
	vilvl.h	$vr6, $vr5, $vr5
	vslli.w	$vr6, $vr6, 16
	vsrai.w	$vr6, $vr6, 16
	vilvh.h	$vr5, $vr5, $vr5
	vslli.w	$vr5, $vr5, 16
	vsrai.w	$vr5, $vr5, 16
	vmul.w	$vr5, $vr0, $vr5
	vmul.w	$vr6, $vr0, $vr6
	vsrai.w	$vr6, $vr6, 15
	vsrai.w	$vr5, $vr5, 15
	vaddi.wu	$vr5, $vr5, 1
	vsrai.w	$vr5, $vr5, 1
	vaddi.wu	$vr6, $vr6, 1
	vsrai.w	$vr6, $vr6, 1
	vadd.w	$vr3, $vr6, $vr3
	vadd.w	$vr4, $vr5, $vr4
	vmax.w	$vr4, $vr4, $vr1
	vmax.w	$vr3, $vr3, $vr1
	vmin.w	$vr3, $vr3, $vr2
	vmin.w	$vr4, $vr4, $vr2
	vpickev.h	$vr3, $vr4, $vr3
	vst	$vr3, $a7, 0
	addi.d	$t1, $t1, -8
	addi.d	$t0, $t0, 16
	addi.d	$a7, $a7, 16
	bnez	$t1, .LBB13_9
# %bb.10:                               # %middle.block
	beq	$a6, $a4, .LBB13_7
	b	.LBB13_5
.Lfunc_end13:
	.size	_Z5trainPsS_ii, .Lfunc_end13-_Z5trainPsS_ii
                                        # -- End function
	.globl	_ZN5MixerD2Ev                   # -- Begin function _ZN5MixerD2Ev
	.p2align	5
	.type	_ZN5MixerD2Ev,@function
_ZN5MixerD2Ev:                          # @_ZN5MixerD2Ev
# %bb.0:
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	move	$fp, $a0
	ld.d	$s0, $a0, 128
	beqz	$s0, .LBB14_2
# %bb.1:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN5MixerD2Ev)
	jirl	$ra, $ra, 0
	ori	$a1, $zero, 136
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
.LBB14_2:
	ld.w	$a0, $fp, 104
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$s0, $a1, %pc_lo12(programChecker)
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	slli.d	$a0, $a0, 2
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB14_4
# %bb.3:
	st.w	$a0, $s0, 4
.LBB14_4:                               # %_ZN5ArrayIiLi0EED2Ev.exit
	ld.d	$a0, $fp, 112
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 64
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	slli.d	$a0, $a0, 2
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB14_6
# %bb.5:
	st.w	$a0, $s0, 4
.LBB14_6:                               # %_ZN5ArrayIiLi0EED2Ev.exit1
	ld.d	$a0, $fp, 72
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 40
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	slli.d	$a0, $a0, 1
	sub.d	$a0, $a1, $a0
	addi.w	$a0, $a0, -16
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB14_8
# %bb.7:
	st.w	$a0, $s0, 4
.LBB14_8:                               # %_ZN5ArrayIsLi16EED2Ev.exit
	ld.d	$a0, $fp, 48
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 16
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	slli.d	$a0, $a0, 1
	sub.d	$a0, $a1, $a0
	addi.w	$a0, $a0, -16
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB14_10
# %bb.9:
	st.w	$a0, $s0, 4
.LBB14_10:                              # %_ZN5ArrayIsLi16EED2Ev.exit3
	ld.d	$a0, $fp, 24
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end14:
	.size	_ZN5MixerD2Ev, .Lfunc_end14-_ZN5MixerD2Ev
                                        # -- End function
	.section	.text._ZN5ArrayIiLi0EED2Ev,"axG",@progbits,_ZN5ArrayIiLi0EED2Ev,comdat
	.weak	_ZN5ArrayIiLi0EED2Ev            # -- Begin function _ZN5ArrayIiLi0EED2Ev
	.p2align	5
	.type	_ZN5ArrayIiLi0EED2Ev,@function
_ZN5ArrayIiLi0EED2Ev:                   # @_ZN5ArrayIiLi0EED2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 2
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB15_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB15_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end15:
	.size	_ZN5ArrayIiLi0EED2Ev, .Lfunc_end15-_ZN5ArrayIiLi0EED2Ev
                                        # -- End function
	.section	.text._ZN5ArrayIsLi16EED2Ev,"axG",@progbits,_ZN5ArrayIsLi16EED2Ev,comdat
	.weak	_ZN5ArrayIsLi16EED2Ev           # -- Begin function _ZN5ArrayIsLi16EED2Ev
	.p2align	5
	.type	_ZN5ArrayIsLi16EED2Ev,@function
_ZN5ArrayIsLi16EED2Ev:                  # @_ZN5ArrayIsLi16EED2Ev
# %bb.0:
	ld.w	$a1, $a0, 0
	slli.d	$a2, $a1, 1
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.d	$a2, $a3, $a2
	addi.w	$a2, $a2, -16
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB16_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB16_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end16:
	.size	_ZN5ArrayIsLi16EED2Ev, .Lfunc_end16-_ZN5ArrayIsLi16EED2Ev
                                        # -- End function
	.text
	.globl	_ZN5MixerC2Eiiii                # -- Begin function _ZN5MixerC2Eiiii
	.p2align	5
	.type	_ZN5MixerC2Eiiii,@function
_ZN5MixerC2Eiiii:                       # @_ZN5MixerC2Eiiii
.Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception0
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s1, $a4
	move	$s0, $a3
	move	$s2, $a2
	move	$fp, $a0
	addi.w	$s3, $a1, 7
	bstrins.d	$s3, $zero, 2, 0
	st.w	$s3, $a0, 0
	st.w	$a2, $a0, 4
	st.w	$a3, $a0, 8
	st.w	$s3, $a0, 20
	st.w	$s3, $a0, 16
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$s5, $a0, %pc_lo12(programChecker)
	blez	$a1, .LBB17_22
# %bb.1:
	slli.d	$a1, $s3, 1
	ori	$a0, $zero, 16
	ld.w	$a2, $s5, 0
	ld.w	$a3, $s5, 4
	alsl.w	$a0, $s3, $a0, 1
	addi.d	$a1, $a1, 16
	add.w	$a1, $a2, $a1
	st.w	$a1, $s5, 0
	bge	$a3, $a1, .LBB17_3
# %bb.2:
	st.w	$a1, $s5, 4
.LBB17_3:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 24
	beqz	$a0, .LBB17_40
# %bb.4:
	bstrins.d	$a0, $zero, 3, 0
	addi.d	$a0, $a0, 16
	st.d	$a0, $fp, 32
	mul.w	$s3, $s3, $s2
	st.w	$s3, $fp, 44
	st.w	$s3, $fp, 40
	blez	$s3, .LBB17_23
.LBB17_5:
	slli.d	$a1, $s3, 1
	ori	$a0, $zero, 16
	ld.w	$a2, $s5, 0
	ld.w	$a3, $s5, 4
	alsl.w	$a0, $s3, $a0, 1
	addi.d	$a1, $a1, 16
	add.w	$a1, $a2, $a1
	st.w	$a1, $s5, 0
	bge	$a3, $a1, .LBB17_7
# %bb.6:
	st.w	$a1, $s5, 4
.LBB17_7:                               # %_ZN14ProgramChecker5allocEi.exit.i.i22
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 48
	beqz	$a0, .LBB17_41
# %bb.8:
	bstrins.d	$a0, $zero, 3, 0
	addi.d	$s4, $a0, 16
	st.d	$s4, $fp, 56
	st.w	$s0, $fp, 68
	st.w	$s0, $fp, 64
	blez	$s0, .LBB17_24
.LBB17_9:
	ld.w	$a0, $s5, 0
	ld.w	$s6, $s5, 4
	slli.w	$s2, $s0, 2
	alsl.w	$s7, $s0, $a0, 2
	alsl.d	$a0, $s0, $a0, 2
	st.w	$a0, $s5, 0
	bge	$s6, $s7, .LBB17_11
# %bb.10:
	st.w	$s7, $s5, 4
	move	$s6, $s7
.LBB17_11:                              # %_ZN14ProgramChecker5allocEi.exit.i.i25
	ori	$a1, $zero, 1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 72
	beqz	$a0, .LBB17_43
# %bb.12:
	st.d	$a0, $fp, 80
	st.d	$zero, $fp, 88
	st.w	$zero, $fp, 96
	st.w	$s0, $fp, 108
	st.w	$s0, $fp, 104
	add.w	$a0, $s7, $s2
	st.w	$a0, $s5, 0
	bge	$s6, $a0, .LBB17_14
# %bb.13:
	st.w	$a0, $s5, 4
.LBB17_14:                              # %_ZN14ProgramChecker5allocEi.exit.i.i28
	ori	$a1, $zero, 1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 112
	beqz	$a0, .LBB17_45
# %bb.15:                               # %.lr.ph
	move	$a1, $zero
	addi.d	$s2, $fp, 104
	st.d	$a0, $fp, 120
	addi.d	$s5, $fp, 128
	ori	$a2, $zero, 8
	st.d	$zero, $fp, 128
	bltu	$s0, $a2, .LBB17_19
# %bb.16:                               # %vector.ph
	bstrpick.d	$a1, $s0, 30, 3
	slli.d	$a1, $a1, 3
	addi.d	$a2, $a0, 16
	ori	$a3, $zero, 2048
	vreplgr2vr.w	$vr0, $a3
	move	$a3, $a1
	.p2align	4, , 16
.LBB17_17:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a2, -16
	vst	$vr0, $a2, 0
	addi.d	$a3, $a3, -8
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB17_17
# %bb.18:                               # %middle.block
	beq	$a1, $s0, .LBB17_21
.LBB17_19:                              # %scalar.ph.preheader
	alsl.d	$a0, $a1, $a0, 2
	ori	$a2, $zero, 2048
	.p2align	4, , 16
.LBB17_20:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	st.w	$a2, $a0, 0
	addi.d	$a1, $a1, 1
	addi.d	$a0, $a0, 4
	bltu	$a1, $s0, .LBB17_20
.LBB17_21:                              # %.preheader
	bgtz	$s3, .LBB17_25
	b	.LBB17_35
.LBB17_22:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 24
	mul.w	$s3, $s3, $s2
	st.w	$s3, $fp, 44
	st.w	$s3, $fp, 40
	bgtz	$s3, .LBB17_5
.LBB17_23:
	move	$s4, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 48
	st.w	$s0, $fp, 68
	st.w	$s0, $fp, 64
	bgtz	$s0, .LBB17_9
.LBB17_24:                              # %_ZN5ArrayIiLi0EEC2Ei.exit31
	addi.d	$s2, $fp, 104
	st.w	$zero, $fp, 96
	st.d	$zero, $fp, 88
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 72
	st.w	$s0, $fp, 108
	st.w	$s0, $fp, 104
	addi.d	$s5, $fp, 128
	st.d	$zero, $fp, 112
	vst	$vr0, $fp, 120
	blez	$s3, .LBB17_35
.LBB17_25:                              # %iter.check
	ori	$a0, $zero, 16
	vreplgr2vr.h	$vr0, $s1
	bgeu	$s3, $a0, .LBB17_29
# %bb.26:
	move	$a0, $zero
.LBB17_27:                              # %vec.epilog.ph
	sub.d	$a1, $s3, $a0
	alsl.d	$a0, $a0, $s4, 1
	.p2align	4, , 16
.LBB17_28:                              # %vec.epilog.vector.body
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, 0
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB17_28
	b	.LBB17_35
.LBB17_29:                              # %vector.ph53
	andi	$a1, $s3, 8
	bstrpick.d	$a0, $s3, 30, 4
	slli.d	$a0, $a0, 4
	addi.d	$a2, $s4, 16
	move	$a3, $a0
	.p2align	4, , 16
.LBB17_30:                              # %vector.body56
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a2, -16
	vst	$vr0, $a2, 0
	addi.d	$a3, $a3, -16
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB17_30
# %bb.31:                               # %middle.block59
	beq	$s3, $a0, .LBB17_35
# %bb.32:                               # %vec.epilog.iter.check
	bnez	$a1, .LBB17_27
# %bb.33:                               # %vec.epilog.scalar.ph.preheader
	slli.d	$a1, $s3, 1
	bstrpick.d	$a1, $a1, 31, 5
	slli.d	$a1, $a1, 5
	add.d	$a1, $s4, $a1
	sub.d	$a0, $s3, $a0
	.p2align	4, , 16
.LBB17_34:                              # %vec.epilog.scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	st.h	$s1, $a1, 0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 2
	bnez	$a0, .LBB17_34
.LBB17_35:                              # %._crit_edge
	ori	$a0, $zero, 2
	blt	$s0, $a0, .LBB17_39
# %bb.36:
.Ltmp9:                                 # EH_LABEL
	ori	$a0, $zero, 136
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
.Ltmp10:                                # EH_LABEL
# %bb.37:
.Ltmp12:                                # EH_LABEL
	move	$s1, $a0
	lu12i.w	$a0, 7
	ori	$a4, $a0, 4095
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	move	$a0, $s1
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZN5MixerC2Eiiii)
	jirl	$ra, $ra, 0
.Ltmp13:                                # EH_LABEL
# %bb.38:
	st.d	$s1, $s5, 0
.LBB17_39:
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB17_40:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.LBB17_41:
.Ltmp0:                                 # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp1:                                 # EH_LABEL
# %bb.42:                               # %.noexc
.LBB17_43:
.Ltmp6:                                 # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp7:                                 # EH_LABEL
# %bb.44:                               # %.noexc27
.LBB17_45:
.Ltmp3:                                 # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp4:                                 # EH_LABEL
# %bb.46:                               # %.noexc30
.LBB17_47:
.Ltmp14:                                # EH_LABEL
	move	$s0, $a0
	ori	$a1, $zero, 136
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdlPvm)
	jirl	$ra, $ra, 0
	b	.LBB17_49
.LBB17_48:
.Ltmp11:                                # EH_LABEL
	move	$s0, $a0
.LBB17_49:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EED2Ev)
	jirl	$ra, $ra, 0
	b	.LBB17_51
.LBB17_50:
.Ltmp5:                                 # EH_LABEL
	move	$s0, $a0
.LBB17_51:
	addi.d	$a0, $fp, 64
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EED2Ev)
	jirl	$ra, $ra, 0
	b	.LBB17_53
.LBB17_52:
.Ltmp8:                                 # EH_LABEL
	move	$s0, $a0
.LBB17_53:
	addi.d	$a0, $fp, 40
	pcaddu18i	$ra, %call36(_ZN5ArrayIsLi16EED2Ev)
	jirl	$ra, $ra, 0
	addi.d	$a0, $fp, 16
	pcaddu18i	$ra, %call36(_ZN5ArrayIsLi16EED2Ev)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB17_54:
.Ltmp2:                                 # EH_LABEL
	move	$s0, $a0
	addi.d	$a0, $fp, 16
	pcaddu18i	$ra, %call36(_ZN5ArrayIsLi16EED2Ev)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end17:
	.size	_ZN5MixerC2Eiiii, .Lfunc_end17-_ZN5MixerC2Eiiii
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table17:
.Lexception0:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end0-.Lcst_begin0
.Lcst_begin0:
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    # >> Call Site 1 <<
	.uleb128 .Ltmp9-.Lfunc_begin0           #   Call between .Lfunc_begin0 and .Ltmp9
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp9-.Lfunc_begin0           # >> Call Site 2 <<
	.uleb128 .Ltmp10-.Ltmp9                 #   Call between .Ltmp9 and .Ltmp10
	.uleb128 .Ltmp11-.Lfunc_begin0          #     jumps to .Ltmp11
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp12-.Lfunc_begin0          # >> Call Site 3 <<
	.uleb128 .Ltmp13-.Ltmp12                #   Call between .Ltmp12 and .Ltmp13
	.uleb128 .Ltmp14-.Lfunc_begin0          #     jumps to .Ltmp14
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp13-.Lfunc_begin0          # >> Call Site 4 <<
	.uleb128 .Ltmp0-.Ltmp13                 #   Call between .Ltmp13 and .Ltmp0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp0-.Lfunc_begin0           # >> Call Site 5 <<
	.uleb128 .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.uleb128 .Ltmp2-.Lfunc_begin0           #     jumps to .Ltmp2
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp6-.Lfunc_begin0           # >> Call Site 6 <<
	.uleb128 .Ltmp7-.Ltmp6                  #   Call between .Ltmp6 and .Ltmp7
	.uleb128 .Ltmp8-.Lfunc_begin0           #     jumps to .Ltmp8
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp3-.Lfunc_begin0           # >> Call Site 7 <<
	.uleb128 .Ltmp4-.Ltmp3                  #   Call between .Ltmp3 and .Ltmp4
	.uleb128 .Ltmp5-.Lfunc_begin0           #     jumps to .Ltmp5
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp4-.Lfunc_begin0           # >> Call Site 8 <<
	.uleb128 .Lfunc_end17-.Ltmp4            #   Call between .Ltmp4 and .Lfunc_end17
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end0:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN5ArrayIiLi0EEC2Ei,"axG",@progbits,_ZN5ArrayIiLi0EEC2Ei,comdat
	.weak	_ZN5ArrayIiLi0EEC2Ei            # -- Begin function _ZN5ArrayIiLi0EEC2Ei
	.p2align	5
	.type	_ZN5ArrayIiLi0EEC2Ei,@function
_ZN5ArrayIiLi0EEC2Ei:                   # @_ZN5ArrayIiLi0EEC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB18_5
# %bb.1:
	slli.w	$a0, $a1, 2
	pcalau12i	$a2, %pc_hi20(programChecker)
	addi.d	$a2, $a2, %pc_lo12(programChecker)
	ld.w	$a4, $a2, 0
	ld.w	$a5, $a2, 4
	alsl.w	$a3, $a1, $a4, 2
	alsl.d	$a1, $a1, $a4, 2
	st.w	$a1, $a2, 0
	bge	$a5, $a3, .LBB18_3
# %bb.2:
	st.w	$a3, $a2, 4
.LBB18_3:                               # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB18_6
# %bb.4:                                # %_ZN5ArrayIiLi0EE6createEi.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB18_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB18_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_ZN5ArrayIiLi0EEC2Ei, .Lfunc_end18-_ZN5ArrayIiLi0EEC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN4APM1C2Ei
.LCPI19_0:
	.dword	27021803924750336               # 0x60003000200000
	.dword	202663838674321568              # 0x2d001b0010000a0
.LCPI19_1:
	.dword	1396129216189170832             # 0x13600c2007800490
	.dword	6962640684841967232             # 0x60a044d02eb01e80
.LCPI19_2:
	.dword	-3368486772486930448            # 0xd140bb209f507ff0
	.dword	-544667476264165008             # 0xf870f3d0ec90e170
.LCPI19_3:
	.dword	-76281638587139232              # 0xfef0fe40fd20fb60
	.dword	-13229594495615152              # 0xffd0ffc0ff90ff50
	.text
	.globl	_ZN4APM1C2Ei
	.p2align	5
	.type	_ZN4APM1C2Ei,@function
_ZN4APM1C2Ei:                           # @_ZN4APM1C2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$s0, $a0
	st.w	$zero, $a0, 0
	st.w	$a1, $a0, 4
	slli.d	$a0, $a1, 5
	add.d	$a0, $a0, $a1
	st.w	$a0, $s0, 12
	st.w	$a0, $s0, 8
	blez	$a1, .LBB19_7
# %bb.1:
	move	$fp, $a1
	slli.d	$a1, $a1, 6
	alsl.w	$a0, $fp, $a1, 1
	alsl.d	$a2, $fp, $a1, 1
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	add.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB19_3
# %bb.2:
	st.w	$a2, $a1, 4
.LBB19_3:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	ori	$s1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s0, 16
	beqz	$a0, .LBB19_9
# %bb.4:                                # %.preheader.lr.ph
	pcalau12i	$a1, %pc_hi20(.LCPI19_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI19_0)
	vst	$vr0, $a0, 0
	pcalau12i	$a1, %pc_hi20(.LCPI19_1)
	vld	$vr0, $a1, %pc_lo12(.LCPI19_1)
	pcalau12i	$a1, %pc_hi20(.LCPI19_2)
	vld	$vr1, $a1, %pc_lo12(.LCPI19_2)
	pcalau12i	$a1, %pc_hi20(.LCPI19_3)
	vld	$vr2, $a1, %pc_lo12(.LCPI19_3)
	vst	$vr0, $a0, 16
	vst	$vr1, $a0, 32
	st.d	$a0, $s0, 24
	vst	$vr2, $a0, 48
	lu12i.w	$a1, 15
	ori	$a1, $a1, 4080
	st.h	$a1, $a0, 64
	beq	$fp, $s1, .LBB19_8
# %bb.5:                                # %.preheader.preheader
	bstrpick.d	$a2, $fp, 31, 0
	addi.d	$a1, $a0, 130
	addi.d	$a2, $a2, -1
	.p2align	4, , 16
.LBB19_6:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a0, 0
	vst	$vr0, $a1, -64
	vld	$vr0, $a0, 16
	vst	$vr0, $a1, -48
	vld	$vr0, $a0, 32
	vst	$vr0, $a1, -32
	vld	$vr0, $a0, 48
	vst	$vr0, $a1, -16
	ld.h	$a3, $a0, 64
	st.h	$a3, $a1, 0
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 66
	bnez	$a2, .LBB19_6
	b	.LBB19_8
.LBB19_7:                               # %_ZN5ArrayItLi0EEC2Ei.exit
	vrepli.b	$vr0, 0
	vst	$vr0, $s0, 16
.LBB19_8:                               # %._crit_edge
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB19_9:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end19:
	.size	_ZN4APM1C2Ei, .Lfunc_end19-_ZN4APM1C2Ei
	.cfi_endproc
                                        # -- End function
	.globl	_ZN8StateMapC2Ei                # -- Begin function _ZN8StateMapC2Ei
	.p2align	5
	.type	_ZN8StateMapC2Ei,@function
_ZN8StateMapC2Ei:                       # @_ZN8StateMapC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$s0, $a0
	st.w	$a1, $a0, 0
	st.w	$zero, $a0, 4
	st.w	$a1, $a0, 12
	st.w	$a1, $a0, 8
	blez	$a1, .LBB20_6
# %bb.1:
	move	$fp, $a1
	slli.w	$a0, $a1, 2
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	alsl.w	$a2, $fp, $a3, 2
	alsl.d	$a3, $fp, $a3, 2
	st.w	$a3, $a1, 0
	bge	$a4, $a2, .LBB20_3
# %bb.2:
	st.w	$a2, $a1, 4
.LBB20_3:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s0, 16
	beqz	$a0, .LBB20_13
# %bb.4:                                # %.lr.ph
	st.d	$a0, $s0, 24
	ori	$a2, $zero, 8
	lu12i.w	$a1, -524288
	bgeu	$fp, $a2, .LBB20_7
# %bb.5:
	move	$a2, $zero
	b	.LBB20_10
.LBB20_6:                               # %_ZN5ArrayIjLi0EEC2Ei.exit
	vrepli.b	$vr0, 0
	vst	$vr0, $s0, 16
	b	.LBB20_12
.LBB20_7:                               # %vector.ph
	bstrpick.d	$a2, $fp, 30, 3
	slli.d	$a2, $a2, 3
	addi.d	$a3, $a0, 16
	vreplgr2vr.w	$vr0, $a1
	move	$a4, $a2
	.p2align	4, , 16
.LBB20_8:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a3, -16
	vst	$vr0, $a3, 0
	addi.d	$a4, $a4, -8
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB20_8
# %bb.9:                                # %middle.block
	beq	$a2, $fp, .LBB20_12
.LBB20_10:                              # %scalar.ph.preheader
	alsl.d	$a0, $a2, $a0, 2
	lu32i.d	$a1, 0
	.p2align	4, , 16
.LBB20_11:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	st.w	$a1, $a0, 0
	addi.d	$a2, $a2, 1
	addi.d	$a0, $a0, 4
	bltu	$a2, $fp, .LBB20_11
.LBB20_12:                              # %._crit_edge
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB20_13:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end20:
	.size	_ZN8StateMapC2Ei, .Lfunc_end20-_ZN8StateMapC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayIjLi0EEC2Ei,"axG",@progbits,_ZN5ArrayIjLi0EEC2Ei,comdat
	.weak	_ZN5ArrayIjLi0EEC2Ei            # -- Begin function _ZN5ArrayIjLi0EEC2Ei
	.p2align	5
	.type	_ZN5ArrayIjLi0EEC2Ei,@function
_ZN5ArrayIjLi0EEC2Ei:                   # @_ZN5ArrayIjLi0EEC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB21_5
# %bb.1:
	slli.w	$a0, $a1, 2
	pcalau12i	$a2, %pc_hi20(programChecker)
	addi.d	$a2, $a2, %pc_lo12(programChecker)
	ld.w	$a4, $a2, 0
	ld.w	$a5, $a2, 4
	alsl.w	$a3, $a1, $a4, 2
	alsl.d	$a1, $a1, $a4, 2
	st.w	$a1, $a2, 0
	bge	$a5, $a3, .LBB21_3
# %bb.2:
	st.w	$a3, $a2, 4
.LBB21_3:                               # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB21_6
# %bb.4:                                # %_ZN5ArrayIjLi0EE6createEi.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB21_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB21_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end21:
	.size	_ZN5ArrayIjLi0EEC2Ei, .Lfunc_end21-_ZN5ArrayIjLi0EEC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayIjLi0EED2Ev,"axG",@progbits,_ZN5ArrayIjLi0EED2Ev,comdat
	.weak	_ZN5ArrayIjLi0EED2Ev            # -- Begin function _ZN5ArrayIjLi0EED2Ev
	.p2align	5
	.type	_ZN5ArrayIjLi0EED2Ev,@function
_ZN5ArrayIjLi0EED2Ev:                   # @_ZN5ArrayIjLi0EED2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 2
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB22_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB22_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end22:
	.size	_ZN5ArrayIjLi0EED2Ev, .Lfunc_end22-_ZN5ArrayIjLi0EED2Ev
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN3APMC2Ei
.LCPI23_0:
	.word	0                               # 0x0
	.word	1                               # 0x1
	.word	2                               # 0x2
	.word	3                               # 0x3
	.text
	.globl	_ZN3APMC2Ei
	.p2align	5
	.type	_ZN3APMC2Ei,@function
_ZN3APMC2Ei:                            # @_ZN3APMC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	slli.d	$s1, $a1, 4
	alsl.d	$a0, $a1, $s1, 3
	st.w	$a0, $fp, 0
	st.w	$zero, $fp, 4
	st.w	$a0, $fp, 12
	st.w	$a0, $fp, 8
	blez	$a1, .LBB23_8
# %bb.1:
	move	$s0, $a1
	alsl.d	$a0, $a1, $a1, 1
	slli.w	$a0, $a0, 5
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a2, $a1, 0
	ld.w	$a3, $a1, 4
	add.w	$a2, $a2, $a0
	st.w	$a2, $a1, 0
	bge	$a3, $a2, .LBB23_3
# %bb.2:
	st.w	$a2, $a1, 4
.LBB23_3:                               # %_ZN14ProgramChecker5allocEi.exit.i.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 16
	beqz	$a0, .LBB23_10
# %bb.4:                                # %.lr.ph.i
	alsl.w	$a1, $s0, $s1, 3
	st.d	$a0, $fp, 24
	addi.d	$a2, $a0, 16
	lu12i.w	$a3, -524288
	vreplgr2vr.w	$vr0, $a3
	move	$a3, $a1
	.p2align	4, , 16
.LBB23_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a2, -16
	vst	$vr0, $a2, 0
	addi.d	$a3, $a3, -8
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB23_5
# %bb.6:                                # %vector.body15.preheader
	pcalau12i	$a2, %pc_hi20(.LCPI23_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI23_0)
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	vreplgr2vr.w	$vr1, $a2
	vrepli.w	$vr2, 24
	lu12i.w	$a2, 128
	vreplgr2vr.w	$vr3, $a2
	lu12i.w	$a2, 21845
	ori	$a2, $a2, 1366
	vreplgr2vr.w	$vr4, $a2
	addi.d	$a2, $zero, -2048
	vreplgr2vr.w	$vr5, $a2
	vrepli.w	$vr6, 127
	pcalau12i	$a2, %pc_hi20(_ZZ6squashiE1t)
	addi.d	$a2, $a2, %pc_lo12(_ZZ6squashiE1t)
	vrepli.w	$vr7, 128
	lu12i.w	$a3, -256
	vreplgr2vr.w	$vr8, $a3
	vrepli.w	$vr9, 6
	.p2align	4, , 16
.LBB23_7:                               # %vector.body15
                                        # =>This Inner Loop Header: Depth=1
	vmuh.wu	$vr10, $vr0, $vr1
	vsrli.w	$vr10, $vr10, 4
	vori.b	$vr11, $vr0, 0
	vmsub.w	$vr11, $vr10, $vr2
	vslli.w	$vr10, $vr11, 13
	vbitseti.w	$vr10, $vr10, 12
	vmuh.wu	$vr10, $vr10, $vr4
	vadd.w	$vr11, $vr10, $vr5
	vand.v	$vr10, $vr10, $vr6
	vsrai.w	$vr11, $vr11, 7
	vshuf4i.w	$vr12, $vr11, 50
	vslli.d	$vr12, $vr12, 32
	vsrai.d	$vr12, $vr12, 32
	vshuf4i.w	$vr11, $vr11, 16
	vslli.d	$vr11, $vr11, 32
	vsrai.d	$vr11, $vr11, 32
	vpickve2gr.d	$a3, $vr11, 0
	alsl.d	$a3, $a3, $a2, 2
	vpickve2gr.d	$a4, $vr11, 1
	alsl.d	$a4, $a4, $a2, 2
	vpickve2gr.d	$a5, $vr12, 0
	alsl.d	$a5, $a5, $a2, 2
	vpickve2gr.d	$a6, $vr12, 1
	alsl.d	$a6, $a6, $a2, 2
	ld.w	$a7, $a3, 64
	ld.w	$t0, $a4, 64
	ld.w	$t1, $a5, 64
	ld.w	$t2, $a6, 64
	vinsgr2vr.w	$vr11, $a7, 0
	vinsgr2vr.w	$vr11, $t0, 1
	vinsgr2vr.w	$vr11, $t1, 2
	vinsgr2vr.w	$vr11, $t2, 3
	vsub.w	$vr12, $vr7, $vr10
	vmul.w	$vr11, $vr11, $vr12
	ld.w	$a3, $a3, 68
	ld.w	$a4, $a4, 68
	ld.w	$a5, $a5, 68
	ld.w	$a6, $a6, 68
	vinsgr2vr.w	$vr12, $a3, 0
	vinsgr2vr.w	$vr12, $a4, 1
	vinsgr2vr.w	$vr12, $a5, 2
	vinsgr2vr.w	$vr12, $a6, 3
	vmadd.w	$vr11, $vr12, $vr10
	vslli.w	$vr10, $vr11, 13
	vadd.w	$vr10, $vr10, $vr3
	vand.v	$vr10, $vr10, $vr8
	vor.v	$vr10, $vr10, $vr9
	vst	$vr10, $a0, 0
	vaddi.wu	$vr0, $vr0, 4
	addi.d	$a1, $a1, -4
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB23_7
	b	.LBB23_9
.LBB23_8:                               # %_ZN8StateMapC2Ei.exit
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 16
.LBB23_9:                               # %._crit_edge
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB23_10:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end23:
	.size	_ZN3APMC2Ei, .Lfunc_end23-_ZN3APMC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN10ContextMapC2Eii
.LCPI24_0:
	.word	256                             # 0x100
	.word	0                               # 0x0
	.word	256                             # 0x100
	.word	256                             # 0x100
	.text
	.globl	_ZN10ContextMapC2Eii
	.p2align	5
	.type	_ZN10ContextMapC2Eii,@function
_ZN10ContextMapC2Eii:                   # @_ZN10ContextMapC2Eii
.Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception1
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a2
	move	$fp, $a0
	st.w	$a2, $a0, 0
	srai.d	$a0, $a1, 6
	st.w	$a0, $fp, 12
	st.w	$a0, $fp, 8
	pcalau12i	$a2, %pc_hi20(programChecker)
	addi.d	$s2, $a2, %pc_lo12(programChecker)
	blez	$a0, .LBB24_18
# %bb.1:
	bstrpick.d	$a0, $a1, 31, 6
	ld.w	$a1, $s2, 0
	ld.w	$a2, $s2, 4
	slli.d	$a0, $a0, 6
	addi.w	$a0, $a0, 64
	add.w	$a1, $a1, $a0
	st.w	$a1, $s2, 0
	bge	$a2, $a1, .LBB24_3
# %bb.2:
	st.w	$a1, $s2, 4
.LBB24_3:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 16
	beqz	$a0, .LBB24_39
# %bb.4:
	bstrins.d	$a0, $zero, 5, 0
	addi.d	$s7, $a0, 64
	st.d	$s7, $fp, 24
	st.w	$s0, $fp, 36
	st.w	$s0, $fp, 32
	blez	$s0, .LBB24_19
.LBB24_5:
	ld.w	$a0, $s2, 0
	ld.w	$s1, $s2, 4
	slli.w	$s5, $s0, 3
	alsl.w	$s3, $s0, $a0, 3
	alsl.d	$a0, $s0, $a0, 3
	st.w	$a0, $s2, 0
	bge	$s1, $s3, .LBB24_7
# %bb.6:
	st.w	$s3, $s2, 4
	move	$s1, $s3
.LBB24_7:                               # %_ZN14ProgramChecker5allocEi.exit.i.i35
	ori	$a1, $zero, 1
	move	$a0, $s5
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 40
	beqz	$a0, .LBB24_40
# %bb.8:
	move	$s6, $a0
	st.d	$a0, $fp, 48
	st.w	$s0, $fp, 60
	st.w	$s0, $fp, 56
	add.w	$s4, $s3, $s5
	st.w	$s4, $s2, 0
	bge	$s1, $s4, .LBB24_10
# %bb.9:
	st.w	$s4, $s2, 4
	move	$s1, $s4
.LBB24_10:                              # %_ZN14ProgramChecker5allocEi.exit.i.i37
	ori	$a1, $zero, 1
	move	$a0, $s5
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 64
	beqz	$a0, .LBB24_42
# %bb.11:
	move	$s8, $a0
	st.d	$a0, $fp, 72
	st.w	$s0, $fp, 84
	st.w	$s0, $fp, 80
	slli.w	$a0, $s0, 2
	alsl.w	$s3, $s0, $s4, 2
	alsl.d	$a1, $s0, $s4, 2
	st.w	$a1, $s2, 0
	bge	$s1, $s3, .LBB24_13
# %bb.12:
	st.w	$s3, $s2, 4
	move	$s1, $s3
.LBB24_13:                              # %_ZN14ProgramChecker5allocEi.exit.i.i41
	addi.d	$s4, $fp, 56
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 88
	beqz	$a0, .LBB24_44
# %bb.14:
	st.d	$a0, $fp, 96
	st.w	$s0, $fp, 108
	st.w	$s0, $fp, 104
	add.w	$a0, $s3, $s5
	st.w	$a0, $s2, 0
	bge	$s1, $a0, .LBB24_16
# %bb.15:
	st.w	$a0, $s2, 4
.LBB24_16:                              # %_ZN14ProgramChecker5allocEi.exit.i.i44
	addi.d	$s3, $fp, 80
	ori	$a1, $zero, 1
	move	$a0, $s5
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 112
	beqz	$a0, .LBB24_46
# %bb.17:
	move	$s5, $a0
	st.d	$s8, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $fp, 104
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $fp, 120
	b	.LBB24_20
.LBB24_18:
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 16
	st.w	$s0, $fp, 36
	st.w	$s0, $fp, 32
	bgtz	$s0, .LBB24_5
.LBB24_19:
	move	$s5, $zero
	st.d	$zero, $sp, 64                  # 8-byte Folded Spill
	st.d	$zero, $sp, 72                  # 8-byte Folded Spill
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 40
	addi.d	$s4, $fp, 56
	st.w	$s0, $fp, 60
	st.w	$s0, $fp, 56
	vst	$vr0, $fp, 64
	addi.d	$s3, $fp, 80
	st.w	$s0, $fp, 84
	st.w	$s0, $fp, 80
	vst	$vr0, $fp, 88
	addi.d	$a0, $fp, 104
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	st.w	$s0, $fp, 108
	st.w	$s0, $fp, 104
	vst	$vr0, $fp, 112
.LBB24_20:                              # %_ZN5ArrayIPhLi0EEC2Ei.exit47
	st.w	$zero, $fp, 136
	slti	$a0, $s0, 0
	slli.d	$s6, $s0, 5
	addi.d	$a1, $s6, 8
	addi.w	$a2, $zero, -1
	maskeqz	$a2, $a2, $a0
	masknez	$a0, $a1, $a0
	or	$a0, $a2, $a0
.Ltmp27:                                # EH_LABEL
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
.Ltmp28:                                # EH_LABEL
# %bb.21:
	move	$s8, $a0
	st.d	$s0, $a0, 0
	addi.d	$s1, $a0, 8
	beqz	$s0, .LBB24_30
# %bb.22:                               # %.preheader49
	st.d	$s5, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	ld.w	$s7, $s2, 0
	ld.w	$s3, $s2, 4
	pcalau12i	$a0, %pc_hi20(.LCPI24_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI24_0)
	vst	$vr0, $sp, 96                   # 16-byte Folded Spill
	move	$s4, $zero
	lu12i.w	$a0, -524288
	vreplgr2vr.w	$vr0, $a0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	.p2align	4, , 16
.LBB24_23:                              # =>This Inner Loop Header: Depth=1
	add.d	$s5, $s8, $s4
	addi.w	$s7, $s7, 1024
	vld	$vr0, $sp, 96                   # 16-byte Folded Reload
	vst	$vr0, $s5, 8
	bge	$s3, $s7, .LBB24_25
# %bb.24:                               #   in Loop: Header=BB24_23 Depth=1
	st.w	$s7, $s2, 4
	move	$s3, $s7
.LBB24_25:                              # %_ZN14ProgramChecker5allocEi.exit.i.i.i
                                        #   in Loop: Header=BB24_23 Depth=1
	ori	$a0, $zero, 1024
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s5, 24
	beqz	$a0, .LBB24_37
# %bb.26:                               # %.lr.ph.i
                                        #   in Loop: Header=BB24_23 Depth=1
	st.d	$a0, $s5, 32
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vst	$vr0, $a0, 0
	vst	$vr0, $a0, 16
	vst	$vr0, $a0, 32
	vst	$vr0, $a0, 48
	vst	$vr0, $a0, 64
	vst	$vr0, $a0, 80
	vst	$vr0, $a0, 96
	vst	$vr0, $a0, 112
	vst	$vr0, $a0, 128
	vst	$vr0, $a0, 144
	vst	$vr0, $a0, 160
	vst	$vr0, $a0, 176
	vst	$vr0, $a0, 192
	vst	$vr0, $a0, 208
	vst	$vr0, $a0, 224
	vst	$vr0, $a0, 240
	vst	$vr0, $a0, 256
	vst	$vr0, $a0, 272
	vst	$vr0, $a0, 288
	vst	$vr0, $a0, 304
	vst	$vr0, $a0, 320
	vst	$vr0, $a0, 336
	vst	$vr0, $a0, 352
	vst	$vr0, $a0, 368
	vst	$vr0, $a0, 384
	vst	$vr0, $a0, 400
	vst	$vr0, $a0, 416
	vst	$vr0, $a0, 432
	vst	$vr0, $a0, 448
	vst	$vr0, $a0, 464
	vst	$vr0, $a0, 480
	vst	$vr0, $a0, 496
	vst	$vr0, $a0, 512
	vst	$vr0, $a0, 528
	vst	$vr0, $a0, 544
	vst	$vr0, $a0, 560
	vst	$vr0, $a0, 576
	vst	$vr0, $a0, 592
	vst	$vr0, $a0, 608
	vst	$vr0, $a0, 624
	vst	$vr0, $a0, 640
	vst	$vr0, $a0, 656
	vst	$vr0, $a0, 672
	vst	$vr0, $a0, 688
	vst	$vr0, $a0, 704
	vst	$vr0, $a0, 720
	vst	$vr0, $a0, 736
	vst	$vr0, $a0, 752
	vst	$vr0, $a0, 768
	vst	$vr0, $a0, 784
	vst	$vr0, $a0, 800
	vst	$vr0, $a0, 816
	vst	$vr0, $a0, 832
	vst	$vr0, $a0, 848
	vst	$vr0, $a0, 864
	vst	$vr0, $a0, 880
	vst	$vr0, $a0, 896
	vst	$vr0, $a0, 912
	vst	$vr0, $a0, 928
	vst	$vr0, $a0, 944
	vst	$vr0, $a0, 960
	vst	$vr0, $a0, 976
	vst	$vr0, $a0, 992
	addi.d	$s4, $s4, 32
	vst	$vr0, $a0, 1008
	bne	$s6, $s4, .LBB24_23
# %bb.27:
	st.w	$s7, $s2, 0
	st.d	$s1, $fp, 128
	ld.d	$a6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$t0, $sp, 56                    # 8-byte Folded Reload
	blez	$s0, .LBB24_36
# %bb.28:                               # %.lr.ph
	ori	$a1, $zero, 4
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 15
	bgeu	$s0, $a1, .LBB24_31
# %bb.29:
	move	$a1, $zero
	b	.LBB24_34
.LBB24_30:                              # %.thread
	st.d	$s1, $fp, 128
	b	.LBB24_36
.LBB24_31:                              # %vector.ph78
	bstrpick.d	$a1, $s0, 30, 2
	slli.d	$a1, $a1, 2
	vreplgr2vr.d	$vr0, $a0
	addi.d	$a2, $t0, 16
	addi.d	$a3, $a7, 16
	addi.d	$a4, $a6, 16
	move	$a5, $a1
	.p2align	4, , 16
.LBB24_32:                              # %vector.body79
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a4, -16
	vst	$vr0, $a4, 0
	vst	$vr0, $a3, -16
	vst	$vr0, $a3, 0
	vld	$vr1, $a4, -16
	vld	$vr2, $a4, 0
	vaddi.du	$vr1, $vr1, 3
	vaddi.du	$vr2, $vr2, 3
	vst	$vr1, $a2, -16
	vst	$vr2, $a2, 0
	addi.d	$a5, $a5, -4
	addi.d	$a2, $a2, 32
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB24_32
# %bb.33:                               # %middle.block83
	beq	$a1, $s0, .LBB24_36
.LBB24_34:                              # %scalar.ph77.preheader
	alsl.d	$a2, $a1, $t0, 3
	alsl.d	$a3, $a1, $a7, 3
	alsl.d	$a4, $a1, $a6, 3
	sub.d	$a1, $s0, $a1
	.p2align	4, , 16
.LBB24_35:                              # %scalar.ph77
                                        # =>This Inner Loop Header: Depth=1
	st.d	$a0, $a4, 0
	st.d	$a0, $a3, 0
	ld.d	$a5, $a4, 0
	addi.d	$a5, $a5, 3
	st.d	$a5, $a2, 0
	addi.d	$a2, $a2, 8
	addi.d	$a3, $a3, 8
	addi.d	$a1, $a1, -1
	addi.d	$a4, $a4, 8
	bnez	$a1, .LBB24_35
.LBB24_36:                              # %._crit_edge
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB24_37:
	st.w	$s7, $s2, 0
.Ltmp30:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp31:                                # EH_LABEL
# %bb.38:                               # %.noexc48
.LBB24_39:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.LBB24_40:
.Ltmp24:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp25:                                # EH_LABEL
# %bb.41:                               # %.noexc
.LBB24_42:
.Ltmp21:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp22:                                # EH_LABEL
# %bb.43:                               # %.noexc39
.LBB24_44:
.Ltmp18:                                # EH_LABEL
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp19:                                # EH_LABEL
# %bb.45:                               # %.noexc43
.LBB24_46:
.Ltmp15:                                # EH_LABEL
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp16:                                # EH_LABEL
# %bb.47:                               # %.noexc46
.LBB24_48:
.Ltmp17:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB24_58
.LBB24_49:
.Ltmp20:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB24_59
.LBB24_50:
.Ltmp23:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB24_60
.LBB24_51:
.Ltmp26:                                # EH_LABEL
	move	$s0, $a0
	addi.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(_ZN5ArrayIN10ContextMap1EELi64EED2Ev)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB24_52:
.Ltmp29:                                # EH_LABEL
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a0
	b	.LBB24_57
.LBB24_53:
.Ltmp32:                                # EH_LABEL
	move	$s0, $a0
	beqz	$s4, .LBB24_56
# %bb.54:                               # %.preheader.preheader
	addi.d	$s1, $s8, -24
	.p2align	4, , 16
.LBB24_55:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a0, $s1, $s4
	pcaddu18i	$ra, %call36(_ZN8StateMapD2Ev)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s4, -32
	bnez	$s4, .LBB24_55
.LBB24_56:                              # %.loopexit
	move	$a0, $s8
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZdaPvm)
	jirl	$ra, $ra, 0
.LBB24_57:
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN5ArrayIPhLi0EED2Ev)
	jirl	$ra, $ra, 0
.LBB24_58:
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN5ArrayIjLi0EED2Ev)
	jirl	$ra, $ra, 0
.LBB24_59:
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN5ArrayIPhLi0EED2Ev)
	jirl	$ra, $ra, 0
.LBB24_60:
	addi.d	$a0, $fp, 32
	pcaddu18i	$ra, %call36(_ZN5ArrayIPhLi0EED2Ev)
	jirl	$ra, $ra, 0
	addi.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(_ZN5ArrayIN10ContextMap1EELi64EED2Ev)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end24:
	.size	_ZN10ContextMapC2Eii, .Lfunc_end24-_ZN10ContextMapC2Eii
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table24:
.Lexception1:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end1-.Lcst_begin1
.Lcst_begin1:
	.uleb128 .Lfunc_begin1-.Lfunc_begin1    # >> Call Site 1 <<
	.uleb128 .Ltmp27-.Lfunc_begin1          #   Call between .Lfunc_begin1 and .Ltmp27
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp27-.Lfunc_begin1          # >> Call Site 2 <<
	.uleb128 .Ltmp28-.Ltmp27                #   Call between .Ltmp27 and .Ltmp28
	.uleb128 .Ltmp29-.Lfunc_begin1          #     jumps to .Ltmp29
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp28-.Lfunc_begin1          # >> Call Site 3 <<
	.uleb128 .Ltmp30-.Ltmp28                #   Call between .Ltmp28 and .Ltmp30
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp30-.Lfunc_begin1          # >> Call Site 4 <<
	.uleb128 .Ltmp31-.Ltmp30                #   Call between .Ltmp30 and .Ltmp31
	.uleb128 .Ltmp32-.Lfunc_begin1          #     jumps to .Ltmp32
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp31-.Lfunc_begin1          # >> Call Site 5 <<
	.uleb128 .Ltmp24-.Ltmp31                #   Call between .Ltmp31 and .Ltmp24
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp24-.Lfunc_begin1          # >> Call Site 6 <<
	.uleb128 .Ltmp25-.Ltmp24                #   Call between .Ltmp24 and .Ltmp25
	.uleb128 .Ltmp26-.Lfunc_begin1          #     jumps to .Ltmp26
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp21-.Lfunc_begin1          # >> Call Site 7 <<
	.uleb128 .Ltmp22-.Ltmp21                #   Call between .Ltmp21 and .Ltmp22
	.uleb128 .Ltmp23-.Lfunc_begin1          #     jumps to .Ltmp23
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp18-.Lfunc_begin1          # >> Call Site 8 <<
	.uleb128 .Ltmp19-.Ltmp18                #   Call between .Ltmp18 and .Ltmp19
	.uleb128 .Ltmp20-.Lfunc_begin1          #     jumps to .Ltmp20
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp15-.Lfunc_begin1          # >> Call Site 9 <<
	.uleb128 .Ltmp16-.Ltmp15                #   Call between .Ltmp15 and .Ltmp16
	.uleb128 .Ltmp17-.Lfunc_begin1          #     jumps to .Ltmp17
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp16-.Lfunc_begin1          # >> Call Site 10 <<
	.uleb128 .Lfunc_end24-.Ltmp16           #   Call between .Ltmp16 and .Lfunc_end24
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end1:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN5ArrayIPhLi0EEC2Ei,"axG",@progbits,_ZN5ArrayIPhLi0EEC2Ei,comdat
	.weak	_ZN5ArrayIPhLi0EEC2Ei           # -- Begin function _ZN5ArrayIPhLi0EEC2Ei
	.p2align	5
	.type	_ZN5ArrayIPhLi0EEC2Ei,@function
_ZN5ArrayIPhLi0EEC2Ei:                  # @_ZN5ArrayIPhLi0EEC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB25_5
# %bb.1:
	slli.w	$a0, $a1, 3
	pcalau12i	$a2, %pc_hi20(programChecker)
	addi.d	$a2, $a2, %pc_lo12(programChecker)
	ld.w	$a4, $a2, 0
	ld.w	$a5, $a2, 4
	alsl.w	$a3, $a1, $a4, 3
	alsl.d	$a1, $a1, $a4, 3
	st.w	$a1, $a2, 0
	bge	$a5, $a3, .LBB25_3
# %bb.2:
	st.w	$a3, $a2, 4
.LBB25_3:                               # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB25_6
# %bb.4:                                # %_ZN5ArrayIPhLi0EE6createEi.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB25_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB25_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end25:
	.size	_ZN5ArrayIPhLi0EEC2Ei, .Lfunc_end25-_ZN5ArrayIPhLi0EEC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayIPhLi0EED2Ev,"axG",@progbits,_ZN5ArrayIPhLi0EED2Ev,comdat
	.weak	_ZN5ArrayIPhLi0EED2Ev           # -- Begin function _ZN5ArrayIPhLi0EED2Ev
	.p2align	5
	.type	_ZN5ArrayIPhLi0EED2Ev,@function
_ZN5ArrayIPhLi0EED2Ev:                  # @_ZN5ArrayIPhLi0EED2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 3
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB26_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB26_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end26:
	.size	_ZN5ArrayIPhLi0EED2Ev, .Lfunc_end26-_ZN5ArrayIPhLi0EED2Ev
                                        # -- End function
	.section	.text._ZN5ArrayIN10ContextMap1EELi64EED2Ev,"axG",@progbits,_ZN5ArrayIN10ContextMap1EELi64EED2Ev,comdat
	.weak	_ZN5ArrayIN10ContextMap1EELi64EED2Ev # -- Begin function _ZN5ArrayIN10ContextMap1EELi64EED2Ev
	.p2align	5
	.type	_ZN5ArrayIN10ContextMap1EELi64EED2Ev,@function
_ZN5ArrayIN10ContextMap1EELi64EED2Ev:   # @_ZN5ArrayIN10ContextMap1EELi64EED2Ev
# %bb.0:
	ld.w	$a1, $a0, 0
	slli.d	$a2, $a1, 6
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.d	$a2, $a3, $a2
	addi.w	$a2, $a2, -64
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB27_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB27_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end27:
	.size	_ZN5ArrayIN10ContextMap1EELi64EED2Ev, .Lfunc_end27-_ZN5ArrayIN10ContextMap1EELi64EED2Ev
                                        # -- End function
	.text
	.globl	_ZN10ContextMapD2Ev             # -- Begin function _ZN10ContextMapD2Ev
	.p2align	5
	.type	_ZN10ContextMapD2Ev,@function
_ZN10ContextMapD2Ev:                    # @_ZN10ContextMapD2Ev
# %bb.0:
	addi.d	$sp, $sp, -64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	move	$fp, $a0
	ld.d	$s2, $a0, 128
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$s1, $a0, %pc_lo12(programChecker)
	beqz	$s2, .LBB28_7
# %bb.1:
	ld.d	$a0, $s2, -8
	addi.d	$s0, $s2, -8
	slli.d	$s3, $a0, 5
	beqz	$a0, .LBB28_6
# %bb.2:                                # %.preheader.preheader
	move	$s4, $s3
	b	.LBB28_4
	.p2align	4, , 16
.LBB28_3:                               # %_ZN8StateMapD2Ev.exit
                                        #   in Loop: Header=BB28_4 Depth=1
	ld.d	$a0, $a0, -16
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s4, -32
	beqz	$s4, .LBB28_6
.LBB28_4:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a0, $s2, $s4
	ld.w	$a1, $a0, -24
	ld.w	$a2, $s1, 0
	ld.w	$a3, $s1, 4
	slli.d	$a1, $a1, 2
	sub.w	$a1, $a2, $a1
	st.w	$a1, $s1, 0
	bge	$a3, $a1, .LBB28_3
# %bb.5:                                #   in Loop: Header=BB28_4 Depth=1
	st.w	$a1, $s1, 4
	b	.LBB28_3
.LBB28_6:                               # %.loopexit
	addi.d	$a1, $s3, 8
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPvm)
	jirl	$ra, $ra, 0
.LBB28_7:
	ld.w	$a0, $fp, 104
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	slli.d	$a0, $a0, 3
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB28_9
# %bb.8:
	st.w	$a0, $s1, 4
.LBB28_9:                               # %_ZN5ArrayIPhLi0EED2Ev.exit
	ld.d	$a0, $fp, 112
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 80
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	slli.d	$a0, $a0, 2
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB28_11
# %bb.10:
	st.w	$a0, $s1, 4
.LBB28_11:                              # %_ZN5ArrayIjLi0EED2Ev.exit
	ld.d	$a0, $fp, 88
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 56
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	slli.d	$a0, $a0, 3
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB28_13
# %bb.12:
	st.w	$a0, $s1, 4
.LBB28_13:                              # %_ZN5ArrayIPhLi0EED2Ev.exit2
	ld.d	$a0, $fp, 64
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 32
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	slli.d	$a0, $a0, 3
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB28_15
# %bb.14:
	st.w	$a0, $s1, 4
.LBB28_15:                              # %_ZN5ArrayIPhLi0EED2Ev.exit3
	ld.d	$a0, $fp, 40
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 8
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	slli.d	$a0, $a0, 6
	sub.d	$a0, $a1, $a0
	addi.w	$a0, $a0, -64
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB28_17
# %bb.16:
	st.w	$a0, $s1, 4
.LBB28_17:                              # %_ZN5ArrayIN10ContextMap1EELi64EED2Ev.exit
	ld.d	$a0, $fp, 16
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end28:
	.size	_ZN10ContextMapD2Ev, .Lfunc_end28-_ZN10ContextMapD2Ev
                                        # -- End function
	.globl	_ZN10ContextMap4mix1ER5Mixeriiii # -- Begin function _ZN10ContextMap4mix1ER5Mixeriiii
	.p2align	5
	.type	_ZN10ContextMap4mix1ER5Mixeriiii,@function
_ZN10ContextMap4mix1ER5Mixeriiii:       # @_ZN10ContextMap4mix1ER5Mixeriiii
# %bb.0:
	addi.d	$sp, $sp, -208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	move	$fp, $a0
	ld.w	$a0, $a0, 136
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	blez	$a0, .LBB29_36
# %bb.1:                                # %.lr.ph
	move	$s4, $a4
	move	$t6, $a2
	move	$s3, $a1
	addi.d	$s5, $fp, 48
	pcalau12i	$a0, %pc_hi20(_ZL11State_table)
	addi.d	$t7, $a0, %pc_lo12(_ZL11State_table)
	move	$s7, $zero
	move	$s8, $zero
	move	$s0, $zero
	move	$s1, $zero
	move	$t8, $zero
	add.d	$s2, $t7, $a5
	addi.d	$s6, $fp, 120
	addi.d	$ra, $fp, 72
	andi	$a0, $a2, 3
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	andi	$a0, $a2, 1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a0, $zero, 8
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	sub.d	$a0, $a0, $a1
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	ori	$a0, $zero, 7
	sub.d	$a0, $a0, $a1
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $fp, 48
	pcalau12i	$a1, %pc_hi20(bpos)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	pcalau12i	$a1, %pc_hi20(ilog+16)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a1, 1
	ori	$a1, $a1, 4094
	st.d	$a1, $sp, 96                    # 8-byte Folded Spill
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	st.d	$t7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$a4, $sp, 8                     # 8-byte Folded Spill
	b	.LBB29_4
	.p2align	4, , 16
.LBB29_2:                               #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a3, $fp, 128
	add.d	$a3, $a3, $s8
	ld.w	$a6, $a3, 4
	ld.d	$a7, $a3, 24
	slli.d	$a6, $a6, 2
	ldx.wu	$t0, $a7, $a6
	andi	$t1, $t0, 1023
	addi.d	$t2, $t1, -1023
	sltui	$t2, $t2, 1
	addi.d	$t3, $t0, 1
	ori	$t4, $t0, 1023
	masknez	$t3, $t3, $t2
	maskeqz	$t2, $t4, $t2
	or	$t2, $t2, $t3
	ld.w	$a5, $a5, %pc_lo12(y)
	srli.d	$t0, $t0, 10
	slli.d	$t1, $t1, 2
	ldx.w	$a4, $a4, $t1
	slli.d	$a5, $a5, 22
	sub.w	$a5, $a5, $t0
	srli.d	$a5, $a5, 3
	mul.d	$a4, $a5, $a4
	bstrpick.d	$a4, $a4, 31, 10
	slli.d	$a4, $a4, 10
	add.d	$a4, $a4, $t2
	stx.w	$a4, $a7, $a6
	st.w	$zero, $a3, 4
	ld.wu	$a3, $a7, 0
	ld.d	$a2, $a2, %pc_lo12(stretch+16)
	srli.d	$a4, $a3, 19
	ld.d	$a5, $sp, 96                    # 8-byte Folded Reload
	and	$a4, $a4, $a5
	ldx.h	$a2, $a2, $a4
	ld.w	$a4, $s3, 96
	srli.d	$a2, $a2, 2
	alsl.d	$a5, $a4, $a1, 1
	slli.d	$a6, $a4, 1
	stx.h	$a2, $a1, $a6
	srli.d	$a1, $a3, 24
	xori	$a2, $a1, 255
	sub.d	$a1, $a1, $a2
	st.h	$a1, $a5, 2
	st.h	$zero, $a5, 4
	st.h	$a1, $a5, 6
	addi.d	$a2, $a4, 5
	st.w	$a2, $s3, 96
	st.h	$a1, $a5, 8
.LBB29_3:                               #   in Loop: Header=BB29_4 Depth=1
	ld.w	$a1, $fp, 136
	addi.d	$s1, $s1, 1
	addi.d	$s0, $s0, 8
	addi.d	$s8, $s8, 32
	addi.d	$s7, $s7, 4
	bge	$s1, $a1, .LBB29_37
.LBB29_4:                               # =>This Inner Loop Header: Depth=1
	ldx.d	$a0, $a0, $s0
	beqz	$a0, .LBB29_8
# %bb.5:                                #   in Loop: Header=BB29_4 Depth=1
	ld.bu	$a1, $a0, 0
	slli.d	$a1, $a1, 2
	ldx.bu	$a1, $s2, $a1
	ori	$a2, $zero, 204
	bltu	$a1, $a2, .LBB29_7
# %bb.6:                                #   in Loop: Header=BB29_4 Depth=1
	pcalau12i	$a2, %pc_hi20(rnd)
	addi.d	$a2, $a2, %pc_lo12(rnd)
	ld.w	$a3, $a2, 24
	addi.d	$a4, $a3, 1
	st.w	$a4, $a2, 24
	ld.d	$a2, $a2, 16
	addi.d	$a5, $a3, 41
	andi	$a5, $a5, 63
	slli.d	$a5, $a5, 2
	ldx.w	$a5, $a2, $a5
	addi.d	$a3, $a3, 10
	andi	$a3, $a3, 63
	slli.d	$a3, $a3, 2
	ldx.w	$a3, $a2, $a3
	xor	$a3, $a3, $a5
	andi	$a4, $a4, 63
	slli.d	$a4, $a4, 2
	stx.w	$a3, $a2, $a4
	ori	$a2, $zero, 452
	sub.d	$a2, $a2, $a1
	srli.d	$a2, $a2, 3
	sll.w	$a2, $a3, $a2
	sltui	$a2, $a2, 1
	addi.d	$a3, $a1, -4
	masknez	$a3, $a3, $a2
	maskeqz	$a1, $a1, $a2
	or	$a1, $a1, $a3
.LBB29_7:                               #   in Loop: Header=BB29_4 Depth=1
	st.b	$a1, $a0, 0
.LBB29_8:                               #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(bpos)
	ori	$a1, $zero, 2
	blt	$a0, $a1, .LBB29_10
# %bb.9:                                #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a1, $s6, 0
	ldx.d	$a1, $a1, $s0
	ld.bu	$a1, $a1, 0
	beqz	$a1, .LBB29_17
.LBB29_10:                              #   in Loop: Header=BB29_4 Depth=1
	ori	$a1, $zero, 7
	bltu	$a1, $a0, .LBB29_18
# %bb.11:                               #   in Loop: Header=BB29_4 Depth=1
	ori	$a1, $zero, 1
	sll.d	$a0, $a1, $a0
	andi	$a1, $a0, 74
	bnez	$a1, .LBB29_15
# %bb.12:                               #   in Loop: Header=BB29_4 Depth=1
	andi	$a1, $a0, 36
	bnez	$a1, .LBB29_16
# %bb.13:                               #   in Loop: Header=BB29_4 Depth=1
	andi	$a0, $a0, 144
	beqz	$a0, .LBB29_18
# %bb.14:                               #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a0, $ra, 0
	ldx.d	$a0, $a0, $s0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	addi.d	$a0, $a0, 3
	move	$a1, $s5
	b	.LBB29_31
	.p2align	4, , 16
.LBB29_15:                              #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a0, $ra, 0
	ldx.d	$a0, $a0, $s0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	addi.d	$a0, $a0, 1
	move	$a1, $s5
	b	.LBB29_31
	.p2align	4, , 16
.LBB29_16:                              #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a0, $fp, 96
	ldx.wu	$a1, $a0, $s7
	ld.w	$a0, $fp, 8
	add.w	$a2, $a1, $t6
	ld.d	$a3, $fp, 24
	addi.w	$a0, $a0, -1
	and	$a0, $a0, $a2
	slli.d	$a0, $a0, 6
	add.d	$a0, $a3, $a0
	srli.d	$a1, $a1, 16
	move	$s2, $t8
	pcaddu18i	$ra, %call36(_ZN10ContextMap1E3getEt)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	move	$t8, $s2
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$t7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$t6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a1, $fp, 48
	stx.d	$a0, $a1, $s0
	move	$a1, $ra
	b	.LBB29_31
.LBB29_17:                              #   in Loop: Header=BB29_4 Depth=1
	move	$a0, $zero
	move	$a1, $s5
	b	.LBB29_31
.LBB29_18:                              #   in Loop: Header=BB29_4 Depth=1
	st.d	$t8, $sp, 24                    # 8-byte Folded Spill
	ld.d	$a0, $fp, 96
	ldx.wu	$a1, $a0, $s7
	ld.w	$a0, $fp, 8
	add.w	$a2, $a1, $t6
	ld.d	$a3, $fp, 24
	addi.w	$a0, $a0, -1
	and	$a0, $a0, $a2
	slli.d	$a0, $a0, 6
	add.d	$a0, $a3, $a0
	srli.d	$a1, $a1, 16
	pcaddu18i	$ra, %call36(_ZN10ContextMap1E3getEt)
	jirl	$ra, $ra, 0
	ld.d	$a1, $fp, 48
	ld.d	$a2, $fp, 72
	stx.d	$a0, $a1, $s0
	stx.d	$a0, $a2, $s0
	ld.bu	$a1, $a0, 3
	ori	$a2, $zero, 2
	bne	$a1, $a2, .LBB29_20
# %bb.19:                               #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a1, $fp, 96
	ld.bu	$s2, $a0, 4
	ldx.wu	$a1, $a1, $s7
	addi.d	$s4, $s2, 256
	ld.w	$a0, $fp, 8
	srli.d	$a2, $s4, 6
	add.w	$a2, $a2, $a1
	ld.d	$a3, $fp, 24
	addi.w	$a0, $a0, -1
	and	$a0, $a2, $a0
	slli.d	$a0, $a0, 6
	add.d	$a0, $a3, $a0
	srli.d	$a1, $a1, 16
	pcaddu18i	$ra, %call36(_ZN10ContextMap1E3getEt)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s2, 5, 5
	addi.d	$a1, $a1, 1
	st.b	$a1, $a0, 0
	bstrpick.d	$a2, $s4, 4, 4
	addi.d	$a2, $a2, 1
	stx.b	$a2, $a0, $a1
	bstrpick.d	$a1, $s4, 3, 3
	addi.d	$a1, $a1, 1
	bstrpick.d	$a2, $s2, 5, 4
	add.d	$a0, $a0, $a2
	st.b	$a1, $a0, 3
	ld.d	$a0, $fp, 96
	ldx.wu	$a1, $a0, $s7
	ld.w	$a0, $fp, 8
	srli.d	$a2, $s4, 3
	add.w	$a2, $a1, $a2
	ld.d	$a3, $fp, 24
	addi.w	$a0, $a0, -1
	and	$a0, $a0, $a2
	slli.d	$a0, $a0, 6
	add.d	$a0, $a3, $a0
	srli.d	$a1, $a1, 16
	pcaddu18i	$ra, %call36(_ZN10ContextMap1E3getEt)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s2, 2, 2
	addi.d	$a1, $a1, 1
	st.b	$a1, $a0, 0
	bstrpick.d	$a2, $s4, 1, 1
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	addi.d	$a2, $a2, 1
	stx.b	$a2, $a0, $a1
	andi	$a1, $s2, 1
	addi.d	$a1, $a1, 1
	bstrpick.d	$a2, $s2, 2, 1
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	st.b	$a1, $a0, 3
	ld.d	$a0, $fp, 72
	ldx.d	$a0, $a0, $s0
	st.b	$zero, $a0, 6
.LBB29_20:                              #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a0, $s6, 0
	ldx.d	$a0, $a0, $s0
	ld.bu	$a1, $a0, 0
	ld.d	$t6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$t7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$t8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	beqz	$a1, .LBB29_24
# %bb.21:                               #   in Loop: Header=BB29_4 Depth=1
	ld.bu	$a2, $a0, 1
	bne	$s4, $a2, .LBB29_25
# %bb.22:                               #   in Loop: Header=BB29_4 Depth=1
	ori	$a2, $zero, 253
	bltu	$a2, $a1, .LBB29_27
# %bb.23:                               #   in Loop: Header=BB29_4 Depth=1
	addi.d	$a1, $a1, 2
	b	.LBB29_29
.LBB29_24:                              #   in Loop: Header=BB29_4 Depth=1
	ori	$a1, $zero, 2
	b	.LBB29_26
.LBB29_25:                              #   in Loop: Header=BB29_4 Depth=1
	ori	$a1, $zero, 1
.LBB29_26:                              #   in Loop: Header=BB29_4 Depth=1
	st.b	$a1, $a0, 0
	ld.d	$a0, $s6, 0
	ldx.d	$a0, $a0, $s0
	st.b	$s4, $a0, 1
	b	.LBB29_30
.LBB29_27:                              #   in Loop: Header=BB29_4 Depth=1
	ori	$a2, $zero, 255
	bne	$a1, $a2, .LBB29_30
# %bb.28:                               #   in Loop: Header=BB29_4 Depth=1
	ori	$a1, $zero, 128
.LBB29_29:                              #   in Loop: Header=BB29_4 Depth=1
	st.b	$a1, $a0, 0
.LBB29_30:                              #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a0, $ra, 0
	ldx.d	$a0, $a0, $s0
	addi.d	$a0, $a0, 3
	move	$a1, $s6
	.p2align	4, , 16
.LBB29_31:                              #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a1, $a1, 0
	ld.d	$a2, $s6, 0
	stx.d	$a0, $a1, $s0
	ldx.d	$a0, $a2, $s0
	ld.bu	$a1, $a0, 1
	addi.d	$a2, $a1, 256
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	srl.w	$a2, $a2, $a3
	bne	$a2, $t6, .LBB29_33
# %bb.32:                               #   in Loop: Header=BB29_4 Depth=1
	ld.bu	$a0, $a0, 0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	srl.w	$a1, $a1, $a2
	ld.d	$a2, $sp, 80                    # 8-byte Folded Reload
	ld.d	$a2, $a2, %pc_lo12(ilog+16)
	slli.d	$a1, $a1, 1
	andi	$a1, $a1, 2
	addu16i.d	$a1, $a1, 1
	add.d	$a2, $a2, $a0
	ld.bu	$a2, $a2, 1
	addi.d	$a1, $a1, -1
	andi	$a0, $a0, 1
	xori	$a0, $a0, 3
	sll.w	$a0, $a2, $a0
	mul.d	$a2, $a0, $a1
	b	.LBB29_34
	.p2align	4, , 16
.LBB29_33:                              #   in Loop: Header=BB29_4 Depth=1
	move	$a2, $zero
.LBB29_34:                              #   in Loop: Header=BB29_4 Depth=1
	ld.w	$a4, $s3, 96
	ld.d	$a0, $s5, 0
	addi.d	$a3, $a4, 1
	ld.d	$a1, $s3, 32
	st.w	$a3, $s3, 96
	ldx.d	$a3, $a0, $s0
	slli.d	$a4, $a4, 1
	stx.h	$a2, $a1, $a4
	pcalau12i	$a5, %pc_hi20(y)
	pcalau12i	$a2, %pc_hi20(_ZL2dt)
	addi.d	$a4, $a2, %pc_lo12(_ZL2dt)
	pcalau12i	$a2, %pc_hi20(stretch+16)
	beqz	$a3, .LBB29_2
# %bb.35:                               #   in Loop: Header=BB29_4 Depth=1
	ld.d	$a6, $fp, 128
	add.d	$a6, $a6, $s8
	ld.w	$a7, $a6, 4
	ld.d	$t0, $a6, 24
	slli.d	$a7, $a7, 2
	ldx.wu	$t1, $t0, $a7
	ld.bu	$a3, $a3, 0
	andi	$t2, $t1, 1023
	addi.d	$t3, $t2, -1023
	sltui	$t3, $t3, 1
	addi.d	$t4, $t1, 1
	ori	$t5, $t1, 1023
	masknez	$t4, $t4, $t3
	maskeqz	$t3, $t5, $t3
	or	$t3, $t3, $t4
	ld.w	$a5, $a5, %pc_lo12(y)
	srli.d	$t1, $t1, 10
	slli.d	$t2, $t2, 2
	ldx.w	$a4, $a4, $t2
	slli.d	$a5, $a5, 22
	sub.w	$a5, $a5, $t1
	srli.d	$a5, $a5, 3
	mul.d	$a4, $a5, $a4
	bstrpick.d	$a4, $a4, 31, 10
	slli.d	$a4, $a4, 10
	add.d	$a4, $a4, $t3
	stx.w	$a4, $t0, $a7
	st.w	$a3, $a6, 4
	slli.d	$a4, $a3, 2
	ldx.wu	$a4, $t0, $a4
	alsl.d	$a5, $a3, $t7, 2
	ld.bu	$a6, $a5, 2
	ld.d	$a2, $a2, %pc_lo12(stretch+16)
	ld.bu	$a5, $a5, 3
	srli.d	$a7, $a4, 19
	ld.d	$t0, $sp, 96                    # 8-byte Folded Reload
	and	$a7, $a7, $t0
	ldx.h	$a2, $a2, $a7
	ld.w	$a7, $s3, 96
	sltui	$a6, $a6, 1
	sltui	$a5, $a5, 1
	srai.d	$a2, $a2, 2
	alsl.d	$t0, $a7, $a1, 1
	slli.d	$t1, $a7, 1
	stx.h	$a2, $a1, $t1
	srli.d	$a1, $a4, 24
	xori	$a4, $a1, 255
	sub.d	$t1, $a1, $a4
	st.h	$t1, $t0, 2
	sub.d	$t1, $a6, $a5
	mul.d	$a2, $t1, $a2
	st.h	$a2, $t0, 4
	maskeqz	$a2, $a1, $a6
	maskeqz	$t1, $a4, $a5
	sub.d	$a2, $a2, $t1
	st.h	$a2, $t0, 6
	maskeqz	$a1, $a1, $a5
	maskeqz	$a2, $a4, $a6
	sub.d	$a1, $a1, $a2
	addi.d	$a2, $a7, 5
	st.w	$a2, $s3, 96
	st.h	$a1, $t0, 8
	sltu	$a1, $zero, $a3
	add.w	$t8, $t8, $a1
	b	.LBB29_3
.LBB29_36:
	move	$t8, $zero
.LBB29_37:                              # %._crit_edge
	ori	$a0, $zero, 7
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	bne	$a1, $a0, .LBB29_39
# %bb.38:
	st.w	$zero, $fp, 136
.LBB29_39:
	move	$a0, $t8
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.Lfunc_end29:
	.size	_ZN10ContextMap4mix1ER5Mixeriiii, .Lfunc_end29-_ZN10ContextMap4mix1ER5Mixeriiii
                                        # -- End function
	.section	.text._ZN10ContextMap1E3getEt,"axG",@progbits,_ZN10ContextMap1E3getEt,comdat
	.weak	_ZN10ContextMap1E3getEt         # -- Begin function _ZN10ContextMap1E3getEt
	.p2align	5
	.type	_ZN10ContextMap1E3getEt,@function
_ZN10ContextMap1E3getEt:                # @_ZN10ContextMap1E3getEt
# %bb.0:
	ld.bu	$a3, $a0, 14
	andi	$a4, $a3, 15
	slli.d	$a2, $a4, 1
	ldx.hu	$a5, $a0, $a2
	addi.d	$a2, $a0, 15
	bne	$a5, $a1, .LBB30_2
# %bb.1:
	slli.d	$a0, $a4, 3
	sub.d	$a0, $a0, $a4
	add.d	$a0, $a2, $a0
	ret
.LBB30_2:                               # %.preheader
	ld.hu	$a5, $a0, 0
	bne	$a5, $a1, .LBB30_4
# %bb.3:
	move	$t0, $zero
	b	.LBB30_20
.LBB30_4:
	ld.hu	$a5, $a0, 2
	ori	$t0, $zero, 1
	beq	$a5, $a1, .LBB30_20
# %bb.5:
	ld.bu	$a6, $a0, 15
	sltui	$a5, $a4, 1
	sltui	$a7, $a3, 16
	masknez	$t0, $a6, $a7
	lu12i.w	$t1, 15
	ori	$t1, $t1, 4095
	maskeqz	$a7, $t1, $a7
	or	$a7, $a7, $t0
	ld.bu	$t0, $a0, 22
	masknez	$a7, $a7, $a5
	maskeqz	$a5, $t1, $a5
	or	$t1, $a5, $a7
	srli.d	$a5, $a3, 4
	bgeu	$t0, $t1, .LBB30_7
# %bb.6:
	addi.d	$a6, $a4, -1
	sltu	$a6, $zero, $a6
	addi.d	$a7, $a5, -1
	sltu	$a7, $zero, $a7
	and	$a7, $a6, $a7
	masknez	$a6, $t1, $a7
	maskeqz	$t0, $t0, $a7
	or	$a6, $t0, $a6
	ld.hu	$t1, $a0, 4
	ori	$t0, $zero, 2
	bne	$t1, $a1, .LBB30_8
	b	.LBB30_20
.LBB30_7:
	move	$a7, $zero
	ld.hu	$t1, $a0, 4
	ori	$t0, $zero, 2
	beq	$t1, $a1, .LBB30_20
.LBB30_8:
	ld.bu	$t0, $a0, 29
	bgeu	$t0, $a6, .LBB30_10
# %bb.9:
	addi.d	$t1, $a4, -2
	sltui	$t1, $t1, 1
	addi.d	$t2, $a5, -2
	sltui	$t2, $t2, 1
	or	$t1, $t1, $t2
	masknez	$t0, $t0, $t1
	maskeqz	$a6, $a6, $t1
	or	$a6, $a6, $t0
	ori	$t0, $zero, 2
	masknez	$t0, $t0, $t1
	maskeqz	$a7, $a7, $t1
	or	$a7, $a7, $t0
.LBB30_10:
	ld.hu	$t1, $a0, 6
	ori	$t0, $zero, 3
	beq	$t1, $a1, .LBB30_20
# %bb.11:
	ld.bu	$t0, $a0, 36
	bgeu	$t0, $a6, .LBB30_13
# %bb.12:
	addi.d	$t1, $a4, -3
	sltui	$t1, $t1, 1
	addi.d	$t2, $a5, -3
	sltui	$t2, $t2, 1
	or	$t1, $t1, $t2
	masknez	$t0, $t0, $t1
	maskeqz	$a6, $a6, $t1
	or	$a6, $a6, $t0
	ori	$t0, $zero, 3
	masknez	$t0, $t0, $t1
	maskeqz	$a7, $a7, $t1
	or	$a7, $a7, $t0
.LBB30_13:
	ld.hu	$t1, $a0, 8
	ori	$t0, $zero, 4
	beq	$t1, $a1, .LBB30_20
# %bb.14:
	ld.bu	$t0, $a0, 43
	bgeu	$t0, $a6, .LBB30_16
# %bb.15:
	addi.d	$t1, $a4, -4
	sltui	$t1, $t1, 1
	addi.d	$t2, $a5, -4
	sltui	$t2, $t2, 1
	or	$t1, $t1, $t2
	masknez	$t0, $t0, $t1
	maskeqz	$a6, $a6, $t1
	or	$a6, $a6, $t0
	ori	$t0, $zero, 4
	masknez	$t0, $t0, $t1
	maskeqz	$a7, $a7, $t1
	or	$a7, $a7, $t0
.LBB30_16:
	ld.hu	$t1, $a0, 10
	ori	$t0, $zero, 5
	beq	$t1, $a1, .LBB30_20
# %bb.17:
	ld.bu	$t0, $a0, 50
	bgeu	$t0, $a6, .LBB30_19
# %bb.18:
	addi.d	$t1, $a4, -5
	sltui	$t1, $t1, 1
	addi.d	$t2, $a5, -5
	sltui	$t2, $t2, 1
	or	$t1, $t1, $t2
	masknez	$t0, $t0, $t1
	maskeqz	$a6, $a6, $t1
	or	$a6, $a6, $t0
	ori	$t0, $zero, 5
	masknez	$t0, $t0, $t1
	maskeqz	$a7, $a7, $t1
	or	$a7, $a7, $t0
.LBB30_19:
	ld.hu	$t1, $a0, 12
	ori	$t0, $zero, 6
	bne	$t1, $a1, .LBB30_21
.LBB30_20:
	slli.d	$a1, $a3, 4
	or	$a1, $a1, $t0
	st.b	$a1, $a0, 14
	slli.d	$a0, $t0, 3
	sub.d	$a0, $a0, $t0
	add.d	$a0, $a2, $a0
	ret
.LBB30_21:
	ld.bu	$a3, $a0, 57
	sltu	$a3, $a3, $a6
	addi.d	$a4, $a4, -6
	sltui	$a4, $a4, 1
	addi.d	$a5, $a5, -6
	sltui	$a5, $a5, 1
	ori	$a6, $zero, 6
	masknez	$a6, $a6, $a5
	maskeqz	$a5, $a7, $a5
	or	$a5, $a5, $a6
	masknez	$a5, $a5, $a4
	maskeqz	$a4, $a7, $a4
	or	$a4, $a4, $a5
	maskeqz	$a4, $a4, $a3
	masknez	$a3, $a7, $a3
	or	$a3, $a4, $a3
	addi.d	$a4, $a3, 240
	st.b	$a4, $a0, 14
	slli.d	$a4, $a3, 1
	stx.h	$a1, $a0, $a4
	slli.d	$a0, $a3, 3
	sub.d	$a1, $a0, $a3
	add.d	$a0, $a2, $a1
	stx.w	$zero, $a2, $a1
	st.w	$zero, $a0, 3
	ret
.Lfunc_end30:
	.size	_ZN10ContextMap1E3getEt, .Lfunc_end30-_ZN10ContextMap1E3getEt
                                        # -- End function
	.text
	.globl	_Z10matchModelR5Mixer           # -- Begin function _Z10matchModelR5Mixer
	.p2align	5
	.type	_Z10matchModelR5Mixer,@function
_Z10matchModelR5Mixer:                  # @_Z10matchModelR5Mixer
.Lfunc_begin2:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception2
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	pcalau12i	$a1, %pc_hi20(_ZGVZ10matchModelR5MixerE1t)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ10matchModelR5MixerE1t)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB31_27
.LBB31_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ10matchModelR5MixerE4scm1)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ10matchModelR5MixerE4scm1)
	dbar	20
	beqz	$a0, .LBB31_30
.LBB31_2:
	pcalau12i	$a5, %pc_hi20(bpos)
	ld.w	$t0, $a5, %pc_lo12(bpos)
	pcalau12i	$a3, %pc_hi20(_ZZ10matchModelR5MixerE3len)
	ld.w	$a4, $a3, %pc_lo12(_ZZ10matchModelR5MixerE3len)
	lu12i.w	$a1, 1
	pcalau12i	$a7, %pc_hi20(pos)
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a6, $a0, %pc_lo12(buf)
	pcalau12i	$a0, %pc_hi20(_ZZ10matchModelR5MixerE6result)
	pcalau12i	$a2, %pc_hi20(_ZZ10matchModelR5MixerE4scm1)
	addi.d	$a2, $a2, %pc_lo12(_ZZ10matchModelR5MixerE4scm1)
	beqz	$t0, .LBB31_11
# %bb.3:
	pcalau12i	$t0, %pc_hi20(c0)
	beqz	$a4, .LBB31_14
.LBB31_4:
	ld.w	$a7, $a7, %pc_lo12(pos)
	addi.w	$t2, $a7, -1
	ld.w	$t1, $a6, 0
	ld.d	$a6, $a6, 16
	pcalau12i	$a7, %pc_hi20(_ZZ10matchModelR5MixerE3ptr)
	ld.w	$a7, $a7, %pc_lo12(_ZZ10matchModelR5MixerE3ptr)
	addi.w	$t1, $t1, -1
	and	$t2, $t1, $t2
	ldx.bu	$t2, $a6, $t2
	addi.w	$t3, $a7, -1
	and	$t3, $t3, $t1
	ldx.bu	$t3, $a6, $t3
	bne	$t2, $t3, .LBB31_10
# %bb.5:
	and	$a7, $a7, $t1
	ldx.bu	$a6, $a6, $a7
	ld.w	$a5, $a5, %pc_lo12(bpos)
	ld.w	$a7, $t0, %pc_lo12(c0)
	addi.d	$t1, $a6, 256
	ori	$t2, $zero, 8
	sub.d	$t2, $t2, $a5
	srl.w	$t1, $t1, $t2
	bne	$a7, $t1, .LBB31_10
# %bb.6:
	lu12i.w	$a7, 15
	ori	$t1, $a7, 4095
	blt	$a4, $t1, .LBB31_8
# %bb.7:
	ori	$a4, $a7, 4094
	st.w	$a4, $a3, %pc_lo12(_ZZ10matchModelR5MixerE3len)
.LBB31_8:
	ori	$a3, $zero, 7
	sub.d	$a3, $a3, $a5
	srl.w	$a3, $a6, $a3
	pcalau12i	$a5, %pc_hi20(ilog+16)
	ld.d	$a6, $a5, %pc_lo12(ilog+16)
	ld.d	$a5, $fp, 32
	ld.w	$t1, $fp, 96
	andi	$t2, $a3, 1
	bstrpick.d	$a3, $a4, 15, 0
	ldx.bu	$a7, $a6, $a3
	alsl.d	$a6, $t1, $a5, 1
	slti	$a3, $a4, 32
	ori	$t3, $zero, 32
	masknez	$t3, $t3, $a3
	maskeqz	$a3, $a4, $a3
	or	$a4, $a3, $t3
	addi.w	$a3, $t1, 2
	slli.d	$a7, $a7, 2
	beqz	$t2, .LBB31_24
# %bb.9:
	st.h	$a7, $a6, 0
	slli.d	$a4, $a4, 6
	b	.LBB31_25
.LBB31_10:
	ld.w	$a4, $fp, 96
	ld.d	$a5, $fp, 32
	st.w	$zero, $a3, %pc_lo12(_ZZ10matchModelR5MixerE3len)
	slli.d	$a3, $a4, 1
	stx.w	$zero, $a5, $a3
	addi.w	$a3, $a4, 2
	b	.LBB31_15
.LBB31_11:
	pcalau12i	$t1, %pc_hi20(_ZZ10matchModelR5MixerE1h)
	ld.w	$t0, $a7, %pc_lo12(pos)
	ld.w	$t5, $a6, 0
	ld.w	$t2, $t1, %pc_lo12(_ZZ10matchModelR5MixerE1h)
	ld.d	$t3, $a6, 16
	addi.w	$t6, $t0, -1
	addi.w	$t4, $t5, -1
	and	$t7, $t4, $t6
	ldx.bu	$t7, $t3, $t7
	ori	$t8, $a1, 3880
	mul.d	$t2, $t2, $t8
	add.d	$t2, $t7, $t2
	addi.w	$t7, $t2, 1
	pcalau12i	$t2, %pc_hi20(_ZZ10matchModelR5MixerE1t)
	addi.d	$t2, $t2, %pc_lo12(_ZZ10matchModelR5MixerE1t)
	ld.w	$t8, $t2, 0
	addi.w	$t8, $t8, -1
	and	$t7, $t7, $t8
	st.w	$t7, $t1, %pc_lo12(_ZZ10matchModelR5MixerE1h)
	slli.d	$t1, $t7, 2
	beqz	$a4, .LBB31_17
# %bb.12:
	pcalau12i	$t3, %pc_hi20(_ZZ10matchModelR5MixerE3ptr)
	ld.w	$t4, $t3, %pc_lo12(_ZZ10matchModelR5MixerE3ptr)
	addi.w	$a4, $a4, 1
	ld.d	$t2, $t2, 16
	st.w	$a4, $a3, %pc_lo12(_ZZ10matchModelR5MixerE3len)
	addi.d	$t4, $t4, 1
	st.w	$t4, $t3, %pc_lo12(_ZZ10matchModelR5MixerE3ptr)
.LBB31_13:                              # %.loopexit
	stx.w	$t0, $t2, $t1
	ld.w	$t0, $a7, %pc_lo12(pos)
	ld.w	$t1, $a2, 0
	st.w	$a4, $a0, %pc_lo12(_ZZ10matchModelR5MixerE6result)
	slli.d	$t0, $t0, 8
	addi.d	$t1, $t1, -256
	and	$t0, $t1, $t0
	st.w	$t0, $a2, 24
	pcalau12i	$t0, %pc_hi20(c0)
	bnez	$a4, .LBB31_4
.LBB31_14:
	ld.w	$a3, $fp, 96
	ld.d	$a5, $fp, 32
	slli.d	$a4, $a3, 1
	stx.w	$zero, $a5, $a4
	addi.w	$a3, $a3, 2
.LBB31_15:
	st.w	$a3, $fp, 96
.LBB31_16:
	ld.d	$a4, $a2, 32
	pcalau12i	$a6, %pc_hi20(y)
	ld.w	$a6, $a6, %pc_lo12(y)
	ld.hu	$a7, $a4, 0
	slli.d	$a6, $a6, 16
	addi.d	$a6, $a6, 64
	sub.d	$a6, $a6, $a7
	srli.d	$a6, $a6, 7
	ld.w	$t1, $a2, 24
	ld.w	$t0, $t0, %pc_lo12(c0)
	add.d	$a6, $a7, $a6
	ld.d	$a7, $a2, 16
	st.h	$a6, $a4, 0
	add.w	$a4, $t0, $t1
	slli.d	$a6, $a4, 1
	alsl.d	$a4, $a4, $a7, 1
	ldx.hu	$a6, $a7, $a6
	st.d	$a4, $a2, 32
	pcalau12i	$a2, %pc_hi20(stretch+16)
	ld.d	$a2, $a2, %pc_lo12(stretch+16)
	srli.d	$a4, $a6, 3
	ori	$a1, $a1, 4094
	and	$a1, $a4, $a1
	ldx.h	$a1, $a2, $a1
	ld.w	$a0, $a0, %pc_lo12(_ZZ10matchModelR5MixerE6result)
	addi.d	$a2, $a3, 1
	st.w	$a2, $fp, 96
	slli.d	$a2, $a3, 1
	stx.h	$a1, $a5, $a2
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB31_17:
	ld.d	$t2, $t2, 16
	ldx.w	$t7, $t2, $t1
	move	$a4, $zero
	pcalau12i	$t8, %pc_hi20(_ZZ10matchModelR5MixerE3ptr)
	st.w	$t7, $t8, %pc_lo12(_ZZ10matchModelR5MixerE3ptr)
	beqz	$t7, .LBB31_13
# %bb.18:
	sub.w	$t8, $t0, $t7
	bge	$t8, $t5, .LBB31_13
# %bb.19:                               # %.preheader
	and	$a4, $t6, $t4
	ldx.bu	$a4, $t3, $a4
	addi.w	$t5, $t7, -1
	and	$t5, $t5, $t4
	ldx.bu	$t5, $t3, $t5
	bne	$a4, $t5, .LBB31_26
# %bb.20:                               # %.lr.ph.preheader
	move	$a4, $zero
	addi.w	$t5, $t7, -2
	addi.w	$t6, $t0, -2
	lu12i.w	$t7, 15
	ori	$t7, $t7, 4093
	.p2align	4, , 16
.LBB31_21:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	addi.w	$a4, $a4, 1
	bltu	$t7, $a4, .LBB31_23
# %bb.22:                               # %.lr.ph
                                        #   in Loop: Header=BB31_21 Depth=1
	and	$t8, $t6, $t4
	ldx.bu	$t8, $t3, $t8
	and	$s0, $t5, $t4
	ldx.bu	$s0, $t3, $s0
	addi.w	$t5, $t5, -1
	addi.w	$t6, $t6, -1
	beq	$t8, $s0, .LBB31_21
.LBB31_23:                              # %..loopexit_crit_edge
	st.w	$a4, $a3, %pc_lo12(_ZZ10matchModelR5MixerE3len)
	b	.LBB31_13
.LBB31_24:
	sub.d	$a7, $zero, $a7
	st.h	$a7, $a6, 0
	slli.d	$a4, $a4, 6
	sub.d	$a4, $zero, $a4
.LBB31_25:
	st.w	$a3, $fp, 96
	st.h	$a4, $a6, 2
	b	.LBB31_16
.LBB31_26:
	move	$a4, $zero
	b	.LBB31_13
.LBB31_27:
	pcalau12i	$a0, %pc_hi20(_ZGVZ10matchModelR5MixerE1t)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ10matchModelR5MixerE1t)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB31_1
# %bb.28:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp33:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ10matchModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZZ10matchModelR5MixerE1t)
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp34:                                # EH_LABEL
# %bb.29:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ10matchModelR5MixerE1t)
	addi.d	$a1, $a1, %pc_lo12(_ZZ10matchModelR5MixerE1t)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ10matchModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ10matchModelR5MixerE1t)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB31_1
.LBB31_30:
	pcalau12i	$a0, %pc_hi20(_ZGVZ10matchModelR5MixerE4scm1)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ10matchModelR5MixerE4scm1)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB31_2
# %bb.31:
.Ltmp36:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ10matchModelR5MixerE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZZ10matchModelR5MixerE4scm1)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp37:                                # EH_LABEL
# %bb.32:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ10matchModelR5MixerE4scm1)
	addi.d	$a1, $a1, %pc_lo12(_ZZ10matchModelR5MixerE4scm1)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ10matchModelR5MixerE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ10matchModelR5MixerE4scm1)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB31_2
.LBB31_33:
.Ltmp38:                                # EH_LABEL
	b	.LBB31_35
.LBB31_34:
.Ltmp35:                                # EH_LABEL
.LBB31_35:
	move	$fp, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end31:
	.size	_Z10matchModelR5Mixer, .Lfunc_end31-_Z10matchModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table31:
.Lexception2:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end2-.Lcst_begin2
.Lcst_begin2:
	.uleb128 .Lfunc_begin2-.Lfunc_begin2    # >> Call Site 1 <<
	.uleb128 .Ltmp33-.Lfunc_begin2          #   Call between .Lfunc_begin2 and .Ltmp33
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp33-.Lfunc_begin2          # >> Call Site 2 <<
	.uleb128 .Ltmp34-.Ltmp33                #   Call between .Ltmp33 and .Ltmp34
	.uleb128 .Ltmp35-.Lfunc_begin2          #     jumps to .Ltmp35
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp34-.Lfunc_begin2          # >> Call Site 3 <<
	.uleb128 .Ltmp36-.Ltmp34                #   Call between .Ltmp34 and .Ltmp36
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp36-.Lfunc_begin2          # >> Call Site 4 <<
	.uleb128 .Ltmp37-.Ltmp36                #   Call between .Ltmp36 and .Ltmp37
	.uleb128 .Ltmp38-.Lfunc_begin2          #     jumps to .Ltmp38
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp37-.Lfunc_begin2          # >> Call Site 5 <<
	.uleb128 .Lfunc_end31-.Ltmp37           #   Call between .Ltmp37 and .Lfunc_end31
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end2:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN25SmallStationaryContextMapC2Ei,"axG",@progbits,_ZN25SmallStationaryContextMapC2Ei,comdat
	.weak	_ZN25SmallStationaryContextMapC2Ei # -- Begin function _ZN25SmallStationaryContextMapC2Ei
	.p2align	5
	.type	_ZN25SmallStationaryContextMapC2Ei,@function
_ZN25SmallStationaryContextMapC2Ei:     # @_ZN25SmallStationaryContextMapC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
	bstrpick.d	$a0, $a1, 31, 31
	add.w	$a0, $a1, $a0
	srai.d	$s0, $a0, 1
	st.w	$s0, $fp, 4
	ori	$a0, $zero, 2
	st.w	$s0, $fp, 0
	bge	$a1, $a0, .LBB32_2
# %bb.1:                                # %_ZN5ArrayItLi0EEC2Ei.exit
	move	$a0, $zero
	st.w	$zero, $fp, 24
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	b	.LBB32_17
.LBB32_2:
	slli.d	$a0, $s0, 1
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	alsl.w	$a2, $s0, $a3, 1
	alsl.d	$a3, $s0, $a3, 1
	st.w	$a3, $a1, 0
	bge	$a4, $a2, .LBB32_4
# %bb.3:
	st.w	$a2, $a1, 4
.LBB32_4:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB32_18
# %bb.5:                                # %iter.check
	move	$a3, $zero
	st.d	$a0, $fp, 16
	st.w	$zero, $fp, 24
	bstrpick.d	$a2, $s0, 31, 0
	ori	$a4, $zero, 8
	lu12i.w	$a1, 8
	bltu	$s0, $a4, .LBB32_15
# %bb.6:                                # %vector.main.loop.iter.check
	ori	$a3, $zero, 16
	bgeu	$s0, $a3, .LBB32_11
# %bb.7:
	move	$a3, $zero
.LBB32_8:                               # %vec.epilog.ph
	move	$a5, $a3
	bstrpick.d	$a3, $a2, 29, 3
	slli.d	$a3, $a3, 3
	sub.d	$a4, $a5, $a3
	slli.d	$a5, $a5, 1
	vreplgr2vr.h	$vr0, $a1
	.p2align	4, , 16
.LBB32_9:                               # %vec.epilog.vector.body
                                        # =>This Inner Loop Header: Depth=1
	vstx	$vr0, $a0, $a5
	addi.d	$a4, $a4, 8
	addi.d	$a5, $a5, 16
	bnez	$a4, .LBB32_9
# %bb.10:                               # %vec.epilog.middle.block
	bne	$a3, $a2, .LBB32_15
	b	.LBB32_17
.LBB32_11:                              # %vector.ph
	andi	$a4, $a2, 8
	bstrpick.d	$a3, $a2, 29, 4
	slli.d	$a3, $a3, 4
	addi.d	$a5, $a0, 16
	vreplgr2vr.h	$vr0, $a1
	move	$a6, $a3
	.p2align	4, , 16
.LBB32_12:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a5, -16
	vst	$vr0, $a5, 0
	addi.d	$a6, $a6, -16
	addi.d	$a5, $a5, 32
	bnez	$a6, .LBB32_12
# %bb.13:                               # %middle.block
	beq	$a3, $a2, .LBB32_17
# %bb.14:                               # %vec.epilog.iter.check
	bnez	$a4, .LBB32_8
.LBB32_15:                              # %vec.epilog.scalar.ph.preheader
	slli.d	$a4, $a3, 1
	sub.d	$a2, $a2, $a3
	.p2align	4, , 16
.LBB32_16:                              # %vec.epilog.scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	stx.h	$a1, $a0, $a4
	addi.d	$a2, $a2, -1
	addi.d	$a4, $a4, 2
	bnez	$a2, .LBB32_16
.LBB32_17:                              # %._crit_edge
	st.d	$a0, $fp, 32
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB32_18:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end32:
	.size	_ZN25SmallStationaryContextMapC2Ei, .Lfunc_end32-_ZN25SmallStationaryContextMapC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN25SmallStationaryContextMapD2Ev,"axG",@progbits,_ZN25SmallStationaryContextMapD2Ev,comdat
	.weak	_ZN25SmallStationaryContextMapD2Ev # -- Begin function _ZN25SmallStationaryContextMapD2Ev
	.p2align	5
	.type	_ZN25SmallStationaryContextMapD2Ev,@function
_ZN25SmallStationaryContextMapD2Ev:     # @_ZN25SmallStationaryContextMapD2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 1
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB33_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB33_2:                               # %_ZN5ArrayItLi0EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end33:
	.size	_ZN25SmallStationaryContextMapD2Ev, .Lfunc_end33-_ZN25SmallStationaryContextMapD2Ev
                                        # -- End function
	.text
	.globl	_Z8picModelR5Mixer              # -- Begin function _Z8picModelR5Mixer
	.p2align	5
	.type	_Z8picModelR5Mixer,@function
_Z8picModelR5Mixer:                     # @_Z8picModelR5Mixer
.Lfunc_begin3:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception3
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	pcalau12i	$a1, %pc_hi20(_ZGVZ8picModelR5MixerE1t)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ8picModelR5MixerE1t)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB34_3
.LBB34_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8picModelR5MixerE2sm)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8picModelR5MixerE2sm)
	dbar	20
	beqz	$a0, .LBB34_6
.LBB34_2:
	pcalau12i	$a0, %pc_hi20(_ZZ8picModelR5MixerE2sm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8picModelR5MixerE2sm)
	pcalau12i	$a5, %pc_hi20(_ZZ8picModelR5MixerE3cxt.0)
	ld.w	$a3, $a5, %pc_lo12(_ZZ8picModelR5MixerE3cxt.0)
	pcalau12i	$a2, %pc_hi20(_ZZ8picModelR5MixerE1t+16)
	ld.d	$a4, $a2, %pc_lo12(_ZZ8picModelR5MixerE1t+16)
	ldx.bu	$a6, $a4, $a3
	pcalau12i	$a1, %pc_hi20(_ZL11State_table)
	addi.d	$a7, $a1, %pc_lo12(_ZL11State_table)
	pcalau12i	$a1, %pc_hi20(y)
	ld.w	$t0, $a1, %pc_lo12(y)
	alsl.d	$a6, $a6, $a7, 2
	ldx.b	$a6, $a6, $t0
	stx.b	$a6, $a4, $a3
	pcalau12i	$a6, %pc_hi20(_ZZ8picModelR5MixerE3cxt.1)
	ld.w	$a3, $a6, %pc_lo12(_ZZ8picModelR5MixerE3cxt.1)
	ld.d	$a4, $a2, %pc_lo12(_ZZ8picModelR5MixerE1t+16)
	ldx.bu	$t0, $a4, $a3
	ld.w	$t1, $a1, %pc_lo12(y)
	alsl.d	$t0, $t0, $a7, 2
	ldx.b	$t0, $t0, $t1
	stx.b	$t0, $a4, $a3
	pcalau12i	$a3, %pc_hi20(_ZZ8picModelR5MixerE3cxt.2)
	ld.w	$a4, $a3, %pc_lo12(_ZZ8picModelR5MixerE3cxt.2)
	ld.d	$t0, $a2, %pc_lo12(_ZZ8picModelR5MixerE1t+16)
	ldx.bu	$t1, $t0, $a4
	ld.w	$t2, $a1, %pc_lo12(y)
	alsl.d	$a7, $t1, $a7, 2
	ldx.b	$a7, $a7, $t2
	stx.b	$a7, $t0, $a4
	pcalau12i	$t0, %pc_hi20(_ZZ8picModelR5MixerE2r0)
	ld.w	$t1, $t0, %pc_lo12(_ZZ8picModelR5MixerE2r0)
	ld.wu	$a4, $a1, %pc_lo12(y)
	alsl.w	$a7, $t1, $a4, 1
	pcalau12i	$t2, %pc_hi20(_ZZ8picModelR5MixerE2r1)
	pcalau12i	$t3, %pc_hi20(pos)
	ld.w	$t3, $t3, %pc_lo12(pos)
	ld.w	$t4, $t2, %pc_lo12(_ZZ8picModelR5MixerE2r1)
	alsl.d	$t1, $t1, $a4, 1
	st.w	$t1, $t0, %pc_lo12(_ZZ8picModelR5MixerE2r0)
	addi.w	$t0, $t3, -215
	pcalau12i	$t1, %pc_hi20(buf)
	addi.d	$t1, $t1, %pc_lo12(buf)
	ld.w	$t5, $t1, 0
	addi.w	$t5, $t5, -1
	ld.d	$t1, $t1, 16
	and	$t0, $t5, $t0
	pcalau12i	$t6, %pc_hi20(bpos)
	ld.w	$t6, $t6, %pc_lo12(bpos)
	ldx.bu	$t0, $t1, $t0
	ori	$t7, $zero, 7
	sub.d	$t6, $t7, $t6
	srl.w	$t0, $t0, $t6
	bstrins.d	$t0, $t4, 63, 1
	st.w	$t0, $t2, %pc_lo12(_ZZ8picModelR5MixerE2r1)
	pcalau12i	$t0, %pc_hi20(_ZZ8picModelR5MixerE2r2)
	addi.w	$t2, $t3, -431
	and	$t2, $t5, $t2
	ldx.bu	$t2, $t1, $t2
	ld.w	$t7, $t0, %pc_lo12(_ZZ8picModelR5MixerE2r2)
	srl.w	$t2, $t2, $t6
	bstrins.d	$t2, $t7, 63, 1
	st.w	$t2, $t0, %pc_lo12(_ZZ8picModelR5MixerE2r2)
	pcalau12i	$t0, %pc_hi20(_ZZ8picModelR5MixerE2r3)
	addi.w	$t2, $t3, -647
	and	$t2, $t5, $t2
	ldx.bu	$t1, $t1, $t2
	ld.wu	$t2, $t0, %pc_lo12(_ZZ8picModelR5MixerE2r3)
	slli.d	$t3, $t4, 1
	srl.w	$t1, $t1, $t6
	bstrins.d	$t1, $t2, 63, 1
	st.w	$t1, $t0, %pc_lo12(_ZZ8picModelR5MixerE2r3)
	srli.d	$t0, $t4, 3
	bstrpick.d	$t1, $t0, 5, 3
	move	$t4, $a7
	bstrins.d	$t4, $t1, 63, 3
	srli.d	$t1, $t7, 8
	bstrins.d	$t4, $t1, 7, 6
	st.w	$t4, $a5, %pc_lo12(_ZZ8picModelR5MixerE3cxt.0)
	bstrpick.d	$a5, $t0, 5, 1
	move	$t0, $a4
	bstrins.d	$t0, $a5, 63, 1
	srli.d	$a5, $t7, 7
	bstrins.d	$t0, $a5, 6, 6
	srli.d	$a5, $t2, 7
	bstrins.d	$t0, $a5, 7, 7
	ori	$t1, $t0, 256
	st.w	$t1, $a6, %pc_lo12(_ZZ8picModelR5MixerE3cxt.1)
	andi	$a5, $a7, 63
	bstrpick.d	$a6, $t3, 13, 1
	slli.d	$a6, $a6, 1
	xor	$a5, $a6, $a5
	slli.d	$a6, $t7, 3
	bstrpick.d	$a6, $a6, 14, 8
	slli.d	$a6, $a6, 8
	xor	$a5, $a5, $a6
	slli.d	$a6, $t2, 6
	bstrpick.d	$a6, $a6, 15, 11
	slli.d	$a6, $a6, 11
	xor	$a5, $a5, $a6
	addi.d	$a5, $a5, 512
	st.w	$a5, $a3, %pc_lo12(_ZZ8picModelR5MixerE3cxt.2)
	ld.w	$a3, $a0, 4
	ld.d	$a7, $a0, 24
	ld.d	$a6, $a2, %pc_lo12(_ZZ8picModelR5MixerE1t+16)
	pcalau12i	$a2, %pc_hi20(stretch+16)
	slli.d	$t2, $a3, 2
	ldx.wu	$t0, $a7, $t2
	ld.d	$a3, $a2, %pc_lo12(stretch+16)
	ld.d	$a2, $fp, 32
	ldx.bu	$t3, $a6, $t4
	andi	$t4, $t0, 1023
	addi.d	$t5, $t4, -1023
	sltui	$t5, $t5, 1
	addi.d	$t6, $t0, 1
	ori	$t7, $t0, 1023
	masknez	$t6, $t6, $t5
	maskeqz	$t5, $t7, $t5
	or	$t5, $t5, $t6
	srli.d	$t0, $t0, 10
	slli.d	$a4, $a4, 22
	sub.w	$a4, $a4, $t0
	srli.d	$a4, $a4, 3
	slli.d	$t4, $t4, 2
	pcalau12i	$t0, %pc_hi20(_ZL2dt)
	addi.d	$t0, $t0, %pc_lo12(_ZL2dt)
	ldx.w	$t4, $t0, $t4
	mul.d	$t4, $a4, $t4
	addi.w	$a4, $zero, -1024
	lu32i.d	$a4, 0
	and	$t4, $t4, $a4
	add.d	$t4, $t4, $t5
	stx.w	$t4, $a7, $t2
	st.w	$t3, $a0, 4
	slli.d	$t2, $t3, 2
	ldx.wu	$a7, $a7, $t2
	srli.d	$t2, $a7, 19
	lu12i.w	$a7, 1
	ori	$a7, $a7, 4094
	and	$t2, $t2, $a7
	ld.w	$t3, $fp, 96
	ldx.h	$t2, $a3, $t2
	ld.w	$t4, $a0, 36
	ld.d	$t5, $a0, 56
	addi.d	$t6, $t3, 1
	st.w	$t6, $fp, 96
	slli.d	$t4, $t4, 2
	ldx.wu	$t6, $t5, $t4
	slli.d	$t3, $t3, 1
	stx.h	$t2, $a2, $t3
	ldx.bu	$t1, $a6, $t1
	andi	$t2, $t6, 1023
	addi.d	$t3, $t2, -1023
	sltui	$t3, $t3, 1
	addi.d	$t7, $t6, 1
	ori	$t8, $t6, 1023
	masknez	$t7, $t7, $t3
	maskeqz	$t3, $t8, $t3
	or	$t3, $t3, $t7
	ld.w	$t7, $a1, %pc_lo12(y)
	srli.d	$t6, $t6, 10
	slli.d	$t2, $t2, 2
	ldx.w	$t2, $t0, $t2
	slli.d	$t7, $t7, 22
	sub.w	$t6, $t7, $t6
	srli.d	$t6, $t6, 3
	mul.d	$t2, $t6, $t2
	and	$t2, $t2, $a4
	add.d	$t2, $t2, $t3
	stx.w	$t2, $t5, $t4
	st.w	$t1, $a0, 36
	slli.d	$t1, $t1, 2
	ldx.wu	$t1, $t5, $t1
	srli.d	$t1, $t1, 19
	and	$t1, $t1, $a7
	ld.w	$t2, $fp, 96
	ldx.h	$t1, $a3, $t1
	ld.w	$t3, $a0, 68
	ld.d	$t4, $a0, 88
	addi.d	$t5, $t2, 1
	st.w	$t5, $fp, 96
	slli.d	$t3, $t3, 2
	ldx.wu	$t5, $t4, $t3
	slli.d	$t2, $t2, 1
	stx.h	$t1, $a2, $t2
	ldx.bu	$a5, $a6, $a5
	andi	$a6, $t5, 1023
	addi.d	$t1, $a6, -1023
	sltui	$t1, $t1, 1
	addi.d	$t2, $t5, 1
	ori	$t6, $t5, 1023
	masknez	$t2, $t2, $t1
	maskeqz	$t1, $t6, $t1
	or	$t1, $t1, $t2
	ld.w	$a1, $a1, %pc_lo12(y)
	srli.d	$t2, $t5, 10
	slli.d	$a6, $a6, 2
	ldx.w	$a6, $t0, $a6
	slli.d	$a1, $a1, 22
	sub.w	$a1, $a1, $t2
	srli.d	$a1, $a1, 3
	mul.d	$a1, $a1, $a6
	and	$a1, $a1, $a4
	add.d	$a1, $a1, $t1
	stx.w	$a1, $t4, $t3
	st.w	$a5, $a0, 68
	slli.d	$a0, $a5, 2
	ldx.wu	$a0, $t4, $a0
	ld.w	$a1, $fp, 96
	srli.d	$a0, $a0, 19
	and	$a0, $a0, $a7
	ldx.h	$a0, $a3, $a0
	addi.d	$a3, $a1, 1
	st.w	$a3, $fp, 96
	slli.d	$a1, $a1, 1
	stx.h	$a0, $a2, $a1
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB34_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8picModelR5MixerE1t)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8picModelR5MixerE1t)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB34_1
# %bb.4:
.Ltmp39:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8picModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8picModelR5MixerE1t)
	lu12i.w	$a1, 16
	ori	$a1, $a1, 512
	pcaddu18i	$ra, %call36(_ZN5ArrayIhLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp40:                                # EH_LABEL
# %bb.5:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIhLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIhLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8picModelR5MixerE1t)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8picModelR5MixerE1t)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8picModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8picModelR5MixerE1t)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB34_1
.LBB34_6:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8picModelR5MixerE2sm)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8picModelR5MixerE2sm)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB34_2
# %bb.7:                                # %.preheader21.preheader
.Ltmp42:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8picModelR5MixerE2sm)
	addi.d	$s1, $a0, %pc_lo12(_ZZ8picModelR5MixerE2sm)
	ori	$a1, $zero, 256
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp43:                                # EH_LABEL
# %bb.8:                                # %.preheader21.1
	addi.d	$s2, $s1, 32
.Ltmp45:                                # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp46:                                # EH_LABEL
# %bb.9:                                # %.preheader21.2
	addi.d	$s2, $s1, 64
.Ltmp47:                                # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp48:                                # EH_LABEL
# %bb.10:
	pcalau12i	$a0, %pc_hi20(__cxx_global_array_dtor)
	addi.d	$a0, $a0, %pc_lo12(__cxx_global_array_dtor)
	pcalau12i	$a1, %pc_hi20(__dso_handle)
	addi.d	$a2, $a1, %pc_lo12(__dso_handle)
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8picModelR5MixerE2sm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8picModelR5MixerE2sm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB34_2
.LBB34_11:
.Ltmp44:                                # EH_LABEL
	b	.LBB34_13
.LBB34_12:
.Ltmp41:                                # EH_LABEL
.LBB34_13:
	move	$fp, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB34_14:                              # %.preheader.preheader
.Ltmp49:                                # EH_LABEL
	move	$fp, $a0
.LBB34_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	addi.d	$s2, $s2, -32
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapD2Ev)
	jirl	$ra, $ra, 0
	bne	$s2, $s1, .LBB34_15
# %bb.16:                               # %.loopexit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end34:
	.size	_Z8picModelR5Mixer, .Lfunc_end34-_Z8picModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table34:
.Lexception3:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end3-.Lcst_begin3
.Lcst_begin3:
	.uleb128 .Lfunc_begin3-.Lfunc_begin3    # >> Call Site 1 <<
	.uleb128 .Ltmp39-.Lfunc_begin3          #   Call between .Lfunc_begin3 and .Ltmp39
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp39-.Lfunc_begin3          # >> Call Site 2 <<
	.uleb128 .Ltmp40-.Ltmp39                #   Call between .Ltmp39 and .Ltmp40
	.uleb128 .Ltmp41-.Lfunc_begin3          #     jumps to .Ltmp41
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp40-.Lfunc_begin3          # >> Call Site 3 <<
	.uleb128 .Ltmp42-.Ltmp40                #   Call between .Ltmp40 and .Ltmp42
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp42-.Lfunc_begin3          # >> Call Site 4 <<
	.uleb128 .Ltmp43-.Ltmp42                #   Call between .Ltmp42 and .Ltmp43
	.uleb128 .Ltmp44-.Lfunc_begin3          #     jumps to .Ltmp44
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp45-.Lfunc_begin3          # >> Call Site 5 <<
	.uleb128 .Ltmp48-.Ltmp45                #   Call between .Ltmp45 and .Ltmp48
	.uleb128 .Ltmp49-.Lfunc_begin3          #     jumps to .Ltmp49
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp48-.Lfunc_begin3          # >> Call Site 6 <<
	.uleb128 .Lfunc_end34-.Ltmp48           #   Call between .Ltmp48 and .Lfunc_end34
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end3:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	5                               # -- Begin function __cxx_global_array_dtor
	.type	__cxx_global_array_dtor,@function
__cxx_global_array_dtor:                # @__cxx_global_array_dtor
# %bb.0:
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ8picModelR5MixerE2sm)
	addi.d	$fp, $a0, %pc_lo12(_ZZ8picModelR5MixerE2sm)
	ld.w	$a0, $fp, 72
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$s0, $a1, %pc_lo12(programChecker)
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	slli.d	$a0, $a0, 2
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB35_2
# %bb.1:
	st.w	$a0, $s0, 4
.LBB35_2:                               # %_ZN8StateMapD2Ev.exit
	ld.d	$a0, $fp, 80
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 40
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	slli.d	$a0, $a0, 2
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB35_4
# %bb.3:
	st.w	$a0, $s0, 4
.LBB35_4:                               # %_ZN8StateMapD2Ev.exit.1
	ld.d	$a0, $fp, 48
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 8
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	slli.d	$a0, $a0, 2
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB35_6
# %bb.5:
	st.w	$a0, $s0, 4
.LBB35_6:                               # %_ZN8StateMapD2Ev.exit.2
	ld.d	$a0, $fp, 16
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end35:
	.size	__cxx_global_array_dtor, .Lfunc_end35-__cxx_global_array_dtor
                                        # -- End function
	.text
	.globl	_Z9wordModelR5Mixer             # -- Begin function _Z9wordModelR5Mixer
	.p2align	5
	.type	_Z9wordModelR5Mixer,@function
_Z9wordModelR5Mixer:                    # @_Z9wordModelR5Mixer
.Lfunc_begin4:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception4
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	pcalau12i	$a1, %pc_hi20(_ZGVZ9wordModelR5MixerE2cm)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ9wordModelR5MixerE2cm)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB36_11
.LBB36_1:
	pcalau12i	$a2, %pc_hi20(bpos)
	ld.w	$a3, $a2, %pc_lo12(bpos)
	pcalau12i	$a1, %pc_hi20(pos)
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a0, $a0, %pc_lo12(buf)
	bnez	$a3, .LBB36_10
# %bb.2:
	pcalau12i	$a3, %pc_hi20(_ZZ9wordModelR5MixerE2cm)
	addi.d	$a3, $a3, %pc_lo12(_ZZ9wordModelR5MixerE2cm)
	pcalau12i	$a4, %pc_hi20(c4)
	ld.bu	$a4, $a4, %pc_lo12(c4)
	addi.d	$a5, $a4, -65
	sltui	$a5, $a5, 26
	ori	$a6, $a4, 32
	masknez	$a4, $a4, $a5
	maskeqz	$a5, $a6, $a5
	or	$a5, $a5, $a4
	pcalau12i	$a6, %pc_hi20(_ZZ9wordModelR5MixerE5word0)
	ld.w	$a7, $a6, %pc_lo12(_ZZ9wordModelR5MixerE5word0)
	ori	$t0, $zero, 127
	pcalau12i	$a4, %pc_hi20(_ZZ9wordModelR5MixerE3nl1)
	pcalau12i	$t6, %pc_hi20(_ZZ9wordModelR5MixerE5word1)
	pcalau12i	$t7, %pc_hi20(_ZZ9wordModelR5MixerE5word2)
	pcalau12i	$t4, %pc_hi20(_ZZ9wordModelR5MixerE5word3)
	pcalau12i	$t3, %pc_hi20(_ZZ9wordModelR5MixerE5word4)
	pcalau12i	$t2, %pc_hi20(_ZZ9wordModelR5MixerE5word5)
	pcalau12i	$t5, %pc_hi20(_ZZ9wordModelR5MixerE5text0)
	bltu	$t0, $a5, .LBB36_8
# %bb.3:
	addi.d	$t0, $a5, -97
	ori	$t1, $zero, 26
	bltu	$t0, $t1, .LBB36_8
# %bb.4:
	beqz	$a7, .LBB36_6
# %bb.5:
	ld.w	$t0, $t3, %pc_lo12(_ZZ9wordModelR5MixerE5word4)
	ld.w	$t1, $t4, %pc_lo12(_ZZ9wordModelR5MixerE5word3)
	ori	$t8, $zero, 23
	mul.d	$t0, $t0, $t8
	st.w	$t0, $t2, %pc_lo12(_ZZ9wordModelR5MixerE5word5)
	alsl.d	$t0, $t1, $t1, 3
	ld.w	$t8, $t7, %pc_lo12(_ZZ9wordModelR5MixerE5word2)
	alsl.d	$t0, $t0, $t1, 1
	ld.w	$t1, $t6, %pc_lo12(_ZZ9wordModelR5MixerE5word1)
	st.w	$t0, $t3, %pc_lo12(_ZZ9wordModelR5MixerE5word4)
	alsl.d	$t0, $t8, $t8, 4
	st.w	$t0, $t4, %pc_lo12(_ZZ9wordModelR5MixerE5word3)
	alsl.d	$t0, $t1, $t1, 1
	alsl.d	$t0, $t0, $t1, 2
	st.w	$t0, $t7, %pc_lo12(_ZZ9wordModelR5MixerE5word2)
	alsl.d	$t0, $a7, $a7, 2
	alsl.d	$a7, $t0, $a7, 1
	st.w	$a7, $t6, %pc_lo12(_ZZ9wordModelR5MixerE5word1)
	st.w	$zero, $a6, %pc_lo12(_ZZ9wordModelR5MixerE5word0)
.LBB36_6:
	ld.w	$a6, $a1, %pc_lo12(pos)
	pcalau12i	$t0, %pc_hi20(_ZZ9wordModelR5MixerE2nl)
	ld.w	$a7, $t0, %pc_lo12(_ZZ9wordModelR5MixerE2nl)
	move	$s0, $zero
	ori	$t1, $zero, 10
	bne	$a5, $t1, .LBB36_9
# %bb.7:
	st.w	$a7, $a4, %pc_lo12(_ZZ9wordModelR5MixerE3nl1)
	addi.d	$a7, $a6, -1
	st.w	$a7, $t0, %pc_lo12(_ZZ9wordModelR5MixerE2nl)
	b	.LBB36_9
.LBB36_8:                               # %.thread
	lu12i.w	$t0, 2
	ori	$t0, $t0, 224
	mul.d	$a7, $a7, $t0
	add.d	$s0, $a7, $a5
	st.w	$s0, $a6, %pc_lo12(_ZZ9wordModelR5MixerE5word0)
	ld.w	$t0, $t5, %pc_lo12(_ZZ9wordModelR5MixerE5text0)
	lu12i.w	$a6, 3
	ori	$t1, $a6, 3664
	ld.w	$a6, $a1, %pc_lo12(pos)
	pcalau12i	$a7, %pc_hi20(_ZZ9wordModelR5MixerE2nl)
	ld.w	$a7, $a7, %pc_lo12(_ZZ9wordModelR5MixerE2nl)
	mul.d	$t0, $t0, $t1
	add.d	$a5, $t0, $a5
	st.w	$a5, $t5, %pc_lo12(_ZZ9wordModelR5MixerE5text0)
.LBB36_9:
	sub.w	$a5, $a6, $a7
	slti	$a7, $a5, 255
	maskeqz	$a5, $a5, $a7
	ori	$t0, $zero, 255
	masknez	$a7, $t0, $a7
	ld.w	$t0, $a4, %pc_lo12(_ZZ9wordModelR5MixerE3nl1)
	ld.w	$t1, $a0, 0
	or	$a4, $a5, $a7
	ld.d	$a5, $a0, 16
	add.w	$a7, $a4, $t0
	addi.w	$t0, $t1, -1
	and	$a7, $t0, $a7
	ldx.bu	$t1, $a5, $a7
	addi.w	$a6, $a6, -1
	and	$a6, $t0, $a6
	ldx.bu	$a6, $a5, $a6
	ld.w	$s1, $a3, 136
	ori	$a7, $zero, 271
	mul.d	$a7, $s0, $a7
	add.d	$t8, $a7, $a6
	addi.d	$a6, $s1, 1
	st.w	$a6, $a3, 136
	lu12i.w	$a6, 241126
	ori	$a6, $a6, 2227
	mul.d	$a7, $t8, $a6
	add.d	$a7, $a7, $s1
	rotri.w	$s2, $a7, 16
	lu12i.w	$a7, 30140
	ori	$a7, $a7, 3351
	ld.d	$t0, $a3, 96
	mul.d	$s2, $s2, $a7
	add.d	$s2, $s2, $s1
	slli.d	$s1, $s1, 2
	stx.w	$s2, $t0, $s1
	ld.w	$s1, $a3, 136
	addi.d	$s2, $s1, 1
	st.w	$s2, $a3, 136
	mul.d	$s2, $s0, $a6
	add.d	$s2, $s1, $s2
	rotri.w	$s2, $s2, 16
	mul.d	$s2, $s2, $a7
	add.d	$s2, $s2, $s1
	slli.d	$s1, $s1, 2
	stx.w	$s2, $t0, $s1
	ld.w	$s1, $t6, %pc_lo12(_ZZ9wordModelR5MixerE5word1)
	ld.w	$s2, $a3, 136
	add.d	$t6, $s1, $t8
	addi.d	$s3, $s2, 1
	st.w	$s3, $a3, 136
	mul.d	$s3, $t6, $a6
	add.d	$s3, $s3, $s2
	rotri.w	$s3, $s3, 16
	mul.d	$s3, $s3, $a7
	add.d	$s3, $s3, $s2
	slli.d	$s2, $s2, 2
	stx.w	$s3, $t0, $s2
	ld.w	$s2, $a3, 136
	slli.d	$s3, $s1, 5
	sub.d	$s1, $s3, $s1
	add.d	$s0, $s1, $s0
	addi.d	$s1, $s2, 1
	st.w	$s1, $a3, 136
	mul.d	$s0, $s0, $a6
	add.d	$s0, $s2, $s0
	rotri.w	$s0, $s0, 16
	mul.d	$s0, $s0, $a7
	add.d	$s0, $s0, $s2
	slli.d	$s1, $s2, 2
	stx.w	$s0, $t0, $s1
	ld.w	$t7, $t7, %pc_lo12(_ZZ9wordModelR5MixerE5word2)
	ld.w	$s0, $a3, 136
	ori	$s1, $zero, 29
	mul.d	$s1, $t7, $s1
	add.d	$s1, $s1, $t6
	addi.d	$s2, $s0, 1
	st.w	$s2, $a3, 136
	mul.d	$s1, $s1, $a6
	add.d	$s1, $s1, $s0
	rotri.w	$s1, $s1, 16
	mul.d	$s1, $s1, $a7
	add.d	$s1, $s1, $s0
	slli.d	$s0, $s0, 2
	stx.w	$s1, $t0, $s0
	ld.wu	$t5, $t5, %pc_lo12(_ZZ9wordModelR5MixerE5text0)
	ld.w	$s0, $a3, 136
	bstrpick.d	$s1, $t5, 23, 0
	addi.d	$s2, $s0, 1
	st.w	$s2, $a3, 136
	mul.d	$s1, $s1, $a6
	add.d	$s1, $s1, $s0
	rotri.w	$s1, $s1, 16
	mul.d	$s1, $s1, $a7
	add.d	$s1, $s1, $s0
	slli.d	$s0, $s0, 2
	stx.w	$s1, $t0, $s0
	ld.w	$s0, $a3, 136
	bstrpick.d	$t5, $t5, 19, 0
	addi.d	$s1, $s0, 1
	st.w	$s1, $a3, 136
	mul.d	$t5, $t5, $a6
	add.d	$t5, $s0, $t5
	rotri.w	$t5, $t5, 16
	mul.d	$t5, $t5, $a7
	add.d	$t5, $t5, $s0
	slli.d	$s0, $s0, 2
	stx.w	$t5, $t0, $s0
	ld.w	$s0, $a3, 136
	add.d	$t5, $t7, $t8
	addi.d	$t7, $s0, 1
	st.w	$t7, $a3, 136
	mul.d	$t7, $t5, $a6
	add.d	$t7, $s0, $t7
	rotri.w	$t7, $t7, 16
	mul.d	$t7, $t7, $a7
	add.d	$t7, $t7, $s0
	slli.d	$s0, $s0, 2
	stx.w	$t7, $t0, $s0
	ld.w	$t4, $t4, %pc_lo12(_ZZ9wordModelR5MixerE5word3)
	ld.w	$t7, $a3, 136
	add.d	$s0, $t4, $t8
	addi.d	$s1, $t7, 1
	st.w	$s1, $a3, 136
	mul.d	$s0, $s0, $a6
	add.d	$s0, $s0, $t7
	rotri.w	$s0, $s0, 16
	mul.d	$s0, $s0, $a7
	add.d	$s0, $s0, $t7
	slli.d	$t7, $t7, 2
	stx.w	$s0, $t0, $t7
	ld.w	$t3, $t3, %pc_lo12(_ZZ9wordModelR5MixerE5word4)
	ld.w	$t7, $a3, 136
	add.d	$t3, $t3, $t8
	addi.d	$s0, $t7, 1
	st.w	$s0, $a3, 136
	mul.d	$t3, $t3, $a6
	add.d	$t3, $t3, $t7
	rotri.w	$t3, $t3, 16
	mul.d	$t3, $t3, $a7
	add.d	$t3, $t3, $t7
	slli.d	$t7, $t7, 2
	stx.w	$t3, $t0, $t7
	ld.w	$t2, $t2, %pc_lo12(_ZZ9wordModelR5MixerE5word5)
	ld.w	$t3, $a3, 136
	add.d	$t2, $t2, $t8
	addi.d	$t7, $t3, 1
	st.w	$t7, $a3, 136
	mul.d	$t2, $t2, $a6
	add.d	$t2, $t2, $t3
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t2, $t2, $t3
	slli.d	$t3, $t3, 2
	stx.w	$t2, $t0, $t3
	ld.w	$t2, $a1, %pc_lo12(pos)
	ld.w	$t3, $a0, 0
	addi.w	$t7, $t2, -1
	addi.w	$t3, $t3, -1
	and	$t7, $t3, $t7
	ldx.bu	$t7, $a5, $t7
	addi.w	$t8, $t2, -3
	and	$t8, $t3, $t8
	ldx.bu	$t8, $a5, $t8
	addi.w	$t2, $t2, -5
	and	$t2, $t3, $t2
	ldx.bu	$t2, $a5, $t2
	slli.d	$t3, $t8, 8
	ld.w	$t8, $a3, 136
	or	$t3, $t3, $t7
	slli.d	$t2, $t2, 16
	or	$t2, $t3, $t2
	addi.d	$t3, $t8, 1
	st.w	$t3, $a3, 136
	mul.d	$t2, $t2, $a6
	add.d	$t2, $t2, $t8
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t2, $t2, $t8
	slli.d	$t3, $t8, 2
	stx.w	$t2, $t0, $t3
	ld.w	$t2, $a1, %pc_lo12(pos)
	ld.w	$t3, $a0, 0
	addi.w	$t7, $t2, -2
	addi.w	$t3, $t3, -1
	and	$t7, $t3, $t7
	ldx.bu	$t7, $a5, $t7
	addi.w	$t8, $t2, -4
	and	$t8, $t3, $t8
	ldx.bu	$t8, $a5, $t8
	addi.w	$t2, $t2, -6
	and	$t2, $t3, $t2
	ldx.bu	$t2, $a5, $t2
	slli.d	$t3, $t8, 8
	ld.w	$t8, $a3, 136
	or	$t3, $t3, $t7
	slli.d	$t2, $t2, 16
	or	$t2, $t3, $t2
	addi.d	$t3, $t8, 1
	st.w	$t3, $a3, 136
	mul.d	$t2, $t2, $a6
	add.d	$t2, $t2, $t8
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t2, $t2, $t8
	slli.d	$t3, $t8, 2
	stx.w	$t2, $t0, $t3
	ld.w	$t2, $a3, 136
	add.d	$t3, $t4, $t6
	addi.d	$t6, $t2, 1
	st.w	$t6, $a3, 136
	mul.d	$t3, $t3, $a6
	add.d	$t3, $t2, $t3
	rotri.w	$t3, $t3, 16
	mul.d	$t3, $t3, $a7
	add.d	$t3, $t3, $t2
	slli.d	$t2, $t2, 2
	stx.w	$t3, $t0, $t2
	ld.w	$t2, $a3, 136
	add.d	$t3, $t4, $t5
	addi.d	$t4, $t2, 1
	st.w	$t4, $a3, 136
	mul.d	$t3, $t3, $a6
	add.d	$t3, $t2, $t3
	rotri.w	$t3, $t3, 16
	mul.d	$t3, $t3, $a7
	add.d	$t3, $t3, $t2
	slli.d	$t2, $t2, 2
	stx.w	$t3, $t0, $t2
	ld.w	$t2, $a1, %pc_lo12(pos)
	ld.w	$t3, $a0, 0
	addi.w	$t2, $t2, -1
	addi.w	$t3, $t3, -1
	and	$t2, $t3, $t2
	ldx.bu	$t2, $a5, $t2
	slli.d	$t3, $a4, 16
	ld.w	$t4, $a3, 136
	slli.d	$t2, $t2, 8
	or	$t2, $t2, $t3
	or	$t2, $t2, $t1
	addi.d	$t3, $t4, 1
	st.w	$t3, $a3, 136
	mul.d	$t2, $t2, $a6
	add.d	$t2, $t2, $t4
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t2, $t2, $t4
	slli.d	$t3, $t4, 2
	stx.w	$t2, $t0, $t3
	ld.w	$t2, $a1, %pc_lo12(pos)
	ld.w	$t3, $a0, 0
	addi.w	$t2, $t2, -1
	addi.w	$t3, $t3, -1
	and	$t2, $t3, $t2
	ldx.bu	$t2, $a5, $t2
	ld.w	$t3, $a3, 136
	slli.d	$t2, $t2, 8
	or	$t1, $t2, $t1
	addi.d	$t2, $t3, 1
	st.w	$t2, $a3, 136
	mul.d	$t1, $t1, $a6
	add.d	$t1, $t1, $t3
	rotri.w	$t1, $t1, 16
	mul.d	$t1, $t1, $a7
	add.d	$t1, $t1, $t3
	slli.d	$t2, $t3, 2
	stx.w	$t1, $t0, $t2
	ld.w	$t1, $a1, %pc_lo12(pos)
	ld.w	$t2, $a0, 0
	addi.w	$t1, $t1, -1
	addi.w	$t2, $t2, -1
	and	$t1, $t2, $t1
	ldx.bu	$a5, $a5, $t1
	ld.w	$t1, $a3, 136
	slli.d	$t2, $a4, 8
	or	$a5, $t2, $a5
	addi.d	$t2, $t1, 1
	st.w	$t2, $a3, 136
	mul.d	$a5, $a5, $a6
	add.d	$a5, $a5, $t1
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t1
	slli.d	$t1, $t1, 2
	stx.w	$a5, $t0, $t1
	ld.w	$a5, $a3, 136
	addi.d	$t1, $a5, 1
	st.w	$t1, $a3, 136
	mul.d	$a3, $a4, $a6
	add.d	$a3, $a5, $a3
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $a7
	add.d	$a3, $a3, $a5
	slli.d	$a4, $a5, 2
	stx.w	$a3, $t0, $a4
	ld.w	$a3, $a2, %pc_lo12(bpos)
.LBB36_10:
	pcalau12i	$a2, %pc_hi20(c0)
	ld.w	$a1, $a1, %pc_lo12(pos)
	ld.w	$a4, $a0, 0
	ld.w	$a2, $a2, %pc_lo12(c0)
	ld.d	$a0, $a0, 16
	addi.w	$a1, $a1, -1
	addi.w	$a4, $a4, -1
	and	$a1, $a4, $a1
	ldx.bu	$a4, $a0, $a1
	pcalau12i	$a0, %pc_hi20(y)
	ld.w	$a5, $a0, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ9wordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9wordModelR5MixerE2cm)
	move	$a1, $fp
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	pcaddu18i	$t8, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jr	$t8
.LBB36_11:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9wordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9wordModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB36_1
# %bb.12:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 256
	sll.w	$a1, $a1, $a0
.Ltmp50:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9wordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9wordModelR5MixerE2cm)
	ori	$a2, $zero, 20
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp51:                                # EH_LABEL
# %bb.13:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9wordModelR5MixerE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9wordModelR5MixerE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9wordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9wordModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB36_1
.LBB36_14:
.Ltmp52:                                # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9wordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9wordModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end36:
	.size	_Z9wordModelR5Mixer, .Lfunc_end36-_Z9wordModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table36:
.Lexception4:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end4-.Lcst_begin4
.Lcst_begin4:
	.uleb128 .Lfunc_begin4-.Lfunc_begin4    # >> Call Site 1 <<
	.uleb128 .Ltmp50-.Lfunc_begin4          #   Call between .Lfunc_begin4 and .Ltmp50
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp50-.Lfunc_begin4          # >> Call Site 2 <<
	.uleb128 .Ltmp51-.Ltmp50                #   Call between .Ltmp50 and .Ltmp51
	.uleb128 .Ltmp52-.Lfunc_begin4          #     jumps to .Ltmp52
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp51-.Lfunc_begin4          # >> Call Site 3 <<
	.uleb128 .Lfunc_end36-.Ltmp51           #   Call between .Ltmp51 and .Lfunc_end36
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end4:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z11recordModelR5Mixer          # -- Begin function _Z11recordModelR5Mixer
	.p2align	5
	.type	_Z11recordModelR5Mixer,@function
_Z11recordModelR5Mixer:                 # @_Z11recordModelR5Mixer
.Lfunc_begin5:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception5
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	st.d	$s8, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a1, %pc_hi20(_ZGVZ11recordModelR5MixerE2cm)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ11recordModelR5MixerE2cm)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB37_38
.LBB37_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cn)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cn)
	dbar	20
	beqz	$a0, .LBB37_41
.LBB37_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2co)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2co)
	dbar	20
	beqz	$a0, .LBB37_44
.LBB37_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cp)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cp)
	dbar	20
	beqz	$a0, .LBB37_47
.LBB37_4:
	pcalau12i	$s0, %pc_hi20(bpos)
	ld.w	$a3, $s0, %pc_lo12(bpos)
	pcalau12i	$s2, %pc_hi20(pos)
	ld.w	$t6, $s2, %pc_lo12(pos)
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$s1, $a0, %pc_lo12(buf)
	bnez	$a3, .LBB37_36
# %bb.5:
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2cm)
	addi.d	$t4, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2cm)
	pcalau12i	$a0, %pc_hi20(c4)
	ld.wu	$t3, $a0, %pc_lo12(c4)
	bstrpick.d	$a5, $t3, 15, 0
	andi	$a6, $t3, 255
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE5cpos1)
	addi.d	$a7, $a0, %pc_lo12(_ZZ11recordModelR5MixerE5cpos1)
	slli.d	$a0, $a6, 2
	ldx.w	$a1, $a7, $a0
	sub.w	$t0, $t6, $a1
	ori	$t7, $zero, 2
	pcalau12i	$t1, %pc_hi20(_ZZ11recordModelR5MixerE7rcount1)
	pcalau12i	$t5, %pc_hi20(_ZZ11recordModelR5MixerE4rlen)
	pcalau12i	$t2, %pc_hi20(_ZZ11recordModelR5MixerE7rcount2)
	pcalau12i	$a2, %pc_hi20(_ZZ11recordModelR5MixerE5cpos2)
	addi.d	$a2, $a2, %pc_lo12(_ZZ11recordModelR5MixerE5cpos2)
	pcalau12i	$a3, %pc_hi20(_ZZ11recordModelR5MixerE5cpos3)
	addi.d	$a3, $a3, %pc_lo12(_ZZ11recordModelR5MixerE5cpos3)
	pcalau12i	$a4, %pc_hi20(_ZZ11recordModelR5MixerE5cpos4)
	addi.d	$a4, $a4, %pc_lo12(_ZZ11recordModelR5MixerE5cpos4)
	blt	$t0, $t7, .LBB37_19
# %bb.6:
	ldx.w	$t7, $a2, $a0
	sub.w	$t8, $a1, $t7
	bne	$t0, $t8, .LBB37_19
# %bb.7:
	ldx.w	$t8, $a3, $a0
	sub.w	$t7, $t7, $t8
	bne	$t0, $t7, .LBB37_19
# %bb.8:
	ldx.w	$t7, $a4, $a0
	sub.w	$t7, $t8, $t7
	bne	$t0, $t7, .LBB37_19
# %bb.9:
	ori	$t7, $zero, 15
	bgeu	$t7, $t0, .LBB37_12
.LBB37_10:
	pcalau12i	$t6, %pc_hi20(_ZZ11recordModelR5MixerE5rlen1)
	ld.w	$t7, $t6, %pc_lo12(_ZZ11recordModelR5MixerE5rlen1)
	bne	$t0, $t7, .LBB37_14
# %bb.11:
	ld.w	$t6, $t1, %pc_lo12(_ZZ11recordModelR5MixerE7rcount1)
	addi.w	$t6, $t6, 1
	st.w	$t6, $t1, %pc_lo12(_ZZ11recordModelR5MixerE7rcount1)
	b	.LBB37_20
.LBB37_12:
	ld.w	$t8, $s1, 0
	alsl.d	$s3, $t0, $t0, 2
	ld.d	$t7, $s1, 16
	addi.w	$t8, $t8, -1
	sub.w	$s3, $s3, $t6
	andn	$s3, $t8, $s3
	ldx.bu	$s3, $t7, $s3
	andi	$s4, $a5, 255
	bne	$s3, $s4, .LBB37_19
# %bb.13:
	slli.d	$s4, $t0, 2
	alsl.d	$s4, $t0, $s4, 1
	sub.w	$t6, $s4, $t6
	andn	$t6, $t8, $t6
	ldx.bu	$t6, $t7, $t6
	beq	$t6, $s3, .LBB37_10
	b	.LBB37_19
.LBB37_14:
	pcalau12i	$t8, %pc_hi20(_ZZ11recordModelR5MixerE5rlen2)
	ld.w	$t7, $t8, %pc_lo12(_ZZ11recordModelR5MixerE5rlen2)
	bne	$t0, $t7, .LBB37_16
# %bb.15:
	ld.w	$t6, $t2, %pc_lo12(_ZZ11recordModelR5MixerE7rcount2)
	addi.d	$t6, $t6, 1
	b	.LBB37_18
.LBB37_16:
	ld.w	$s3, $t1, %pc_lo12(_ZZ11recordModelR5MixerE7rcount1)
	ld.w	$t7, $t2, %pc_lo12(_ZZ11recordModelR5MixerE7rcount2)
	bge	$t7, $s3, .LBB37_37
# %bb.17:
	st.w	$t0, $t8, %pc_lo12(_ZZ11recordModelR5MixerE5rlen2)
	ori	$t6, $zero, 1
.LBB37_18:                              # %thread-pre-split.sink.split
	st.w	$t6, $t2, %pc_lo12(_ZZ11recordModelR5MixerE7rcount2)
.LBB37_19:                              # %thread-pre-split
	ld.w	$t6, $t1, %pc_lo12(_ZZ11recordModelR5MixerE7rcount1)
.LBB37_20:
	ori	$t7, $zero, 16
	blt	$t6, $t7, .LBB37_22
# %bb.21:
	ld.w	$t7, $t5, %pc_lo12(_ZZ11recordModelR5MixerE4rlen)
	pcalau12i	$t6, %pc_hi20(_ZZ11recordModelR5MixerE5rlen1)
	ld.w	$t6, $t6, %pc_lo12(_ZZ11recordModelR5MixerE5rlen1)
	bne	$t7, $t6, .LBB37_24
.LBB37_22:                              # %thread-pre-split63
	ld.w	$t7, $t2, %pc_lo12(_ZZ11recordModelR5MixerE7rcount2)
	ori	$t6, $zero, 16
	blt	$t7, $t6, .LBB37_25
.LBB37_23:
	ld.w	$t7, $t5, %pc_lo12(_ZZ11recordModelR5MixerE4rlen)
	pcalau12i	$t6, %pc_hi20(_ZZ11recordModelR5MixerE5rlen2)
	ld.w	$t6, $t6, %pc_lo12(_ZZ11recordModelR5MixerE5rlen2)
	beq	$t7, $t6, .LBB37_25
.LBB37_24:                              # %.sink.split
	st.w	$t6, $t5, %pc_lo12(_ZZ11recordModelR5MixerE4rlen)
	st.w	$zero, $t2, %pc_lo12(_ZZ11recordModelR5MixerE7rcount2)
	st.w	$zero, $t1, %pc_lo12(_ZZ11recordModelR5MixerE7rcount1)
.LBB37_25:
	pcalau12i	$t1, %pc_hi20(_ZZ11recordModelR5MixerE2cn)
	addi.d	$s3, $t1, %pc_lo12(_ZZ11recordModelR5MixerE2cn)
	pcalau12i	$t1, %pc_hi20(_ZZ11recordModelR5MixerE2co)
	addi.d	$t2, $t1, %pc_lo12(_ZZ11recordModelR5MixerE2co)
	slli.d	$t1, $a6, 8
	slti	$t6, $t0, 255
	ori	$t7, $zero, 255
	masknez	$t7, $t7, $t6
	maskeqz	$t0, $t0, $t6
	or	$t0, $t0, $t7
	bstrpick.d	$t6, $t0, 62, 61
	ld.w	$t7, $t4, 136
	add.w	$t0, $t0, $t6
	srli.d	$t0, $t0, 2
	or	$t1, $t0, $t1
	addi.d	$t0, $t7, 1
	st.w	$t0, $t4, 136
	lu12i.w	$t0, 241126
	ori	$t0, $t0, 2227
	mul.d	$t1, $t1, $t0
	add.d	$t1, $t7, $t1
	rotri.w	$t6, $t1, 16
	lu12i.w	$t1, 30140
	ori	$t1, $t1, 3351
	ld.d	$s5, $t4, 96
	mul.d	$t6, $t6, $t1
	add.d	$t6, $t6, $t7
	slli.d	$t7, $t7, 2
	stx.w	$t6, $s5, $t7
	ld.w	$s6, $s2, %pc_lo12(pos)
	bstrpick.d	$s4, $t3, 15, 8
	slli.d	$t6, $a5, 9
	pcalau12i	$t3, %pc_hi20(_ZZ11recordModelR5MixerE5wpos1)
	addi.d	$t8, $t3, %pc_lo12(_ZZ11recordModelR5MixerE5wpos1)
	slli.d	$t3, $a5, 2
	ldx.w	$t7, $t8, $t3
	sub.w	$t3, $s6, $t7
	bstrpick.d	$s6, $t3, 31, 24
	beqz	$s6, .LBB37_27
# %bb.26:
	pcalau12i	$s6, %pc_hi20(ilog+16)
	ld.d	$s6, $s6, %pc_lo12(ilog+16)
	bstrpick.d	$t3, $t3, 31, 16
	ldx.bu	$t3, $s6, $t3
	addi.d	$s6, $t3, 256
	b	.LBB37_30
.LBB37_27:
	bstrpick.d	$s6, $t3, 31, 16
	beqz	$s6, .LBB37_29
# %bb.28:
	pcalau12i	$s6, %pc_hi20(ilog+16)
	ld.d	$s6, $s6, %pc_lo12(ilog+16)
	bstrpick.d	$t3, $t3, 31, 8
	ldx.bu	$t3, $s6, $t3
	addi.d	$s6, $t3, 128
	b	.LBB37_30
.LBB37_29:
	pcalau12i	$s6, %pc_hi20(ilog+16)
	ld.d	$s6, $s6, %pc_lo12(ilog+16)
	ldx.bu	$s6, $s6, $t3
.LBB37_30:                              # %_Z4llogj.exit
	pcalau12i	$t3, %pc_hi20(_ZZ11recordModelR5MixerE2cp)
	addi.d	$t3, $t3, %pc_lo12(_ZZ11recordModelR5MixerE2cp)
	ld.w	$s7, $t4, 136
	srli.d	$s6, $s6, 2
	or	$t6, $s6, $t6
	addi.d	$s6, $s7, 1
	st.w	$s6, $t4, 136
	mul.d	$t6, $t6, $t0
	add.d	$t6, $t6, $s7
	rotri.w	$t6, $t6, 16
	mul.d	$t6, $t6, $t1
	add.d	$t6, $t6, $s7
	slli.d	$s6, $s7, 2
	stx.w	$t6, $s5, $s6
	ld.w	$t5, $t5, %pc_lo12(_ZZ11recordModelR5MixerE4rlen)
	ld.w	$s6, $s2, %pc_lo12(pos)
	ld.w	$s7, $s1, 0
	ld.d	$t6, $s1, 16
	sub.w	$s8, $s6, $t5
	addi.w	$s7, $s7, -1
	and	$s8, $s7, $s8
	ldx.bu	$s8, $t6, $s8
	slli.d	$ra, $t5, 1
	sub.w	$s6, $s6, $ra
	and	$s6, $s7, $s6
	ldx.bu	$s6, $t6, $s6
	slli.d	$s7, $s8, 10
	ld.w	$s8, $t4, 136
	slli.d	$s6, $s6, 18
	or	$s6, $s7, $s6
	or	$s6, $s6, $t5
	addi.d	$s7, $s8, 1
	st.w	$s7, $t4, 136
	mul.d	$t4, $s6, $t0
	add.d	$t4, $t4, $s8
	rotri.w	$t4, $t4, 16
	mul.d	$t4, $t4, $t1
	add.d	$t4, $t4, $s8
	slli.d	$s6, $s8, 2
	stx.w	$t4, $s5, $s6
	ld.w	$t4, $s3, 136
	slli.d	$s5, $t5, 8
	or	$s6, $s5, $a5
	addi.d	$s7, $t4, 1
	st.w	$s7, $s3, 136
	mul.d	$s6, $s6, $t0
	add.d	$s6, $t4, $s6
	rotri.w	$s6, $s6, 16
	ld.d	$s7, $s3, 96
	mul.d	$s6, $s6, $t1
	add.d	$s6, $s6, $t4
	slli.d	$t4, $t4, 2
	stx.w	$s6, $s7, $t4
	ld.w	$t4, $s3, 136
	slli.d	$s6, $t5, 16
	or	$s4, $s6, $s4
	addi.d	$s6, $t4, 1
	st.w	$s6, $s3, 136
	mul.d	$s4, $s4, $t0
	add.d	$s4, $t4, $s4
	rotri.w	$s4, $s4, 16
	mul.d	$s4, $s4, $t1
	add.d	$s4, $s4, $t4
	slli.d	$t4, $t4, 2
	stx.w	$s4, $s7, $t4
	ld.w	$t4, $s3, 136
	or	$s4, $s5, $a6
	addi.d	$s5, $t4, 1
	st.w	$s5, $s3, 136
	mul.d	$s3, $s4, $t0
	add.d	$s3, $t4, $s3
	rotri.w	$s3, $s3, 16
	mul.d	$s3, $s3, $t1
	add.d	$s3, $s3, $t4
	slli.d	$t4, $t4, 2
	stx.w	$s3, $s7, $t4
	ld.w	$t4, $s2, %pc_lo12(pos)
	ld.w	$s3, $s1, 0
	addi.w	$s4, $t4, -1
	addi.w	$s3, $s3, -1
	and	$s3, $s3, $s4
	ldx.bu	$s3, $t6, $s3
	slli.d	$s4, $s3, 2
	ldx.w	$s4, $a7, $s4
	slli.d	$s3, $s3, 8
	sub.w	$t4, $t4, $s4
	slti	$s4, $t4, 255
	maskeqz	$t4, $t4, $s4
	ori	$s5, $zero, 255
	ld.w	$s6, $t2, 136
	masknez	$s4, $s5, $s4
	or	$t4, $t4, $s4
	or	$t4, $t4, $s3
	addi.d	$s3, $s6, 1
	st.w	$s3, $t2, 136
	mul.d	$t4, $t4, $t0
	add.d	$t4, $t4, $s6
	rotri.w	$s3, $t4, 16
	ld.d	$t4, $t2, 96
	mul.d	$s3, $s3, $t1
	add.d	$s3, $s3, $s6
	slli.d	$s4, $s6, 2
	stx.w	$s3, $t4, $s4
	ld.w	$s3, $s2, %pc_lo12(pos)
	ld.w	$s4, $s1, 0
	addi.w	$s5, $s3, -1
	addi.w	$s4, $s4, -1
	and	$s5, $s4, $s5
	ldx.bu	$s5, $t6, $s5
	addi.w	$s6, $s3, -2
	and	$s4, $s4, $s6
	ldx.bu	$s4, $t6, $s4
	alsl.d	$a6, $a6, $a7, 2
	alsl.d	$a5, $a5, $t8, 2
	slli.d	$a7, $s5, 17
	slli.d	$t8, $s4, 9
	sub.w	$t7, $s3, $t7
	bstrpick.d	$s3, $t7, 31, 24
	or	$a7, $t8, $a7
	beqz	$s3, .LBB37_32
# %bb.31:
	pcalau12i	$t8, %pc_hi20(ilog+16)
	ld.d	$t8, $t8, %pc_lo12(ilog+16)
	bstrpick.d	$t7, $t7, 31, 16
	ldx.bu	$t7, $t8, $t7
	addi.d	$t7, $t7, 256
	b	.LBB37_35
.LBB37_32:
	bstrpick.d	$t8, $t7, 31, 16
	beqz	$t8, .LBB37_34
# %bb.33:
	pcalau12i	$t8, %pc_hi20(ilog+16)
	ld.d	$t8, $t8, %pc_lo12(ilog+16)
	bstrpick.d	$t7, $t7, 31, 8
	ldx.bu	$t7, $t8, $t7
	addi.d	$t7, $t7, 128
	b	.LBB37_35
.LBB37_34:
	pcalau12i	$t8, %pc_hi20(ilog+16)
	ld.d	$t8, $t8, %pc_lo12(ilog+16)
	ldx.bu	$t7, $t8, $t7
.LBB37_35:                              # %_Z4llogj.exit59
	ld.w	$t8, $t2, 136
	srli.d	$t7, $t7, 2
	or	$a7, $a7, $t7
	addi.d	$t7, $t8, 1
	st.w	$t7, $t2, 136
	mul.d	$a7, $a7, $t0
	add.d	$a7, $a7, $t8
	rotri.w	$a7, $a7, 16
	mul.d	$a7, $a7, $t1
	add.d	$a7, $a7, $t8
	slli.d	$t7, $t8, 2
	stx.w	$a7, $t4, $t7
	ld.w	$a7, $s2, %pc_lo12(pos)
	ld.w	$t7, $s1, 0
	addi.w	$t8, $a7, -1
	addi.w	$t7, $t7, -1
	and	$t8, $t7, $t8
	ldx.bu	$t8, $t6, $t8
	sub.w	$s3, $a7, $t5
	and	$t7, $t7, $s3
	ldx.bu	$t7, $t6, $t7
	ld.w	$s3, $t2, 136
	slli.d	$t8, $t8, 8
	or	$t7, $t8, $t7
	addi.d	$t8, $s3, 1
	st.w	$t8, $t2, 136
	mul.d	$t2, $t7, $t0
	add.d	$t2, $t2, $s3
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $t1
	add.d	$t2, $t2, $s3
	slli.d	$t7, $s3, 2
	stx.w	$t2, $t4, $t7
	ld.w	$t2, $s2, %pc_lo12(pos)
	ld.w	$t4, $s1, 0
	sub.w	$t2, $t2, $t5
	addi.w	$t4, $t4, -1
	and	$t2, $t4, $t2
	ldx.bu	$t2, $t6, $t2
	mod.w	$a7, $a7, $t5
	slli.d	$t2, $t2, 10
	ld.w	$t4, $t3, 136
	slli.d	$t7, $a7, 18
	or	$t2, $t5, $t2
	or	$t2, $t2, $t7
	addi.d	$t8, $t4, 1
	st.w	$t8, $t3, 136
	mul.d	$t2, $t2, $t0
	add.d	$t2, $t2, $t4
	rotri.w	$t2, $t2, 16
	ld.d	$t8, $t3, 96
	mul.d	$t2, $t2, $t1
	add.d	$t2, $t2, $t4
	slli.d	$t4, $t4, 2
	stx.w	$t2, $t8, $t4
	ld.w	$t2, $s2, %pc_lo12(pos)
	ld.w	$t4, $s1, 0
	addi.w	$t2, $t2, -1
	addi.w	$t4, $t4, -1
	and	$t2, $t4, $t2
	ldx.bu	$t2, $t6, $t2
	ld.w	$t4, $t3, 136
	slli.d	$t2, $t2, 10
	or	$t2, $t5, $t2
	or	$t2, $t2, $t7
	addi.d	$t6, $t4, 1
	st.w	$t6, $t3, 136
	mul.d	$t2, $t2, $t0
	add.d	$t2, $t2, $t4
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $t1
	add.d	$t2, $t2, $t4
	slli.d	$t4, $t4, 2
	stx.w	$t2, $t8, $t4
	ld.w	$t2, $t3, 136
	slli.d	$t4, $t5, 12
	or	$a7, $a7, $t4
	addi.d	$t4, $t2, 1
	st.w	$t4, $t3, 136
	mul.d	$a7, $a7, $t0
	add.d	$a7, $t2, $a7
	rotri.w	$a7, $a7, 16
	mul.d	$a7, $a7, $t1
	add.d	$a7, $a7, $t2
	slli.d	$t0, $t2, 2
	stx.w	$a7, $t8, $t0
	ldx.w	$a7, $a3, $a0
	ldx.w	$t0, $a2, $a0
	stx.w	$a7, $a4, $a0
	ld.w	$t6, $s2, %pc_lo12(pos)
	stx.w	$t0, $a3, $a0
	ld.w	$a3, $s0, %pc_lo12(bpos)
	stx.w	$a1, $a2, $a0
	st.w	$t6, $a6, 0
	st.w	$t6, $a5, 0
.LBB37_36:
	pcalau12i	$s4, %pc_hi20(c0)
	ld.w	$a0, $s1, 0
	ld.w	$a2, $s4, %pc_lo12(c0)
	ld.d	$a1, $s1, 16
	addi.w	$a4, $t6, -1
	addi.w	$a0, $a0, -1
	and	$a0, $a0, $a4
	ldx.bu	$a4, $a1, $a0
	pcalau12i	$s3, %pc_hi20(y)
	ld.w	$a5, $s3, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2cm)
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jirl	$ra, $ra, 0
	ld.w	$a2, $s4, %pc_lo12(c0)
	ld.w	$a0, $s2, %pc_lo12(pos)
	ld.w	$a1, $s1, 0
	ld.w	$a3, $s0, %pc_lo12(bpos)
	ld.d	$a4, $s1, 16
	addi.w	$a0, $a0, -1
	addi.w	$a1, $a1, -1
	and	$a0, $a1, $a0
	ldx.bu	$a4, $a4, $a0
	ld.w	$a5, $s3, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2cn)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2cn)
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jirl	$ra, $ra, 0
	ld.w	$a2, $s4, %pc_lo12(c0)
	ld.w	$a0, $s2, %pc_lo12(pos)
	ld.w	$a1, $s1, 0
	ld.w	$a3, $s0, %pc_lo12(bpos)
	ld.d	$a4, $s1, 16
	addi.w	$a0, $a0, -1
	addi.w	$a1, $a1, -1
	and	$a0, $a1, $a0
	ldx.bu	$a4, $a4, $a0
	ld.w	$a5, $s3, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2co)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2co)
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jirl	$ra, $ra, 0
	ld.w	$a2, $s4, %pc_lo12(c0)
	ld.w	$a0, $s2, %pc_lo12(pos)
	ld.w	$a1, $s1, 0
	ld.w	$a3, $s0, %pc_lo12(bpos)
	ld.d	$a4, $s1, 16
	addi.w	$a0, $a0, -1
	addi.w	$a1, $a1, -1
	and	$a0, $a1, $a0
	ldx.bu	$a4, $a4, $a0
	ld.w	$a5, $s3, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2cp)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2cp)
	move	$a1, $fp
	ld.d	$s8, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	pcaddu18i	$t8, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jr	$t8
.LBB37_37:                              # %.thread
	st.w	$t0, $t6, %pc_lo12(_ZZ11recordModelR5MixerE5rlen1)
	ori	$t6, $zero, 1
	st.w	$t6, $t1, %pc_lo12(_ZZ11recordModelR5MixerE7rcount1)
	ori	$t6, $zero, 16
	bge	$t7, $t6, .LBB37_23
	b	.LBB37_25
.LBB37_38:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cm)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cm)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB37_1
# %bb.39:
.Ltmp53:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2cm)
	lu12i.w	$a1, 8
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp54:                                # EH_LABEL
# %bb.40:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ11recordModelR5MixerE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ11recordModelR5MixerE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB37_1
.LBB37_41:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cn)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cn)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB37_2
# %bb.42:
.Ltmp56:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2cn)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2cn)
	lu12i.w	$a1, 4
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp57:                                # EH_LABEL
# %bb.43:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ11recordModelR5MixerE2cn)
	addi.d	$a1, $a1, %pc_lo12(_ZZ11recordModelR5MixerE2cn)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cn)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cn)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB37_2
.LBB37_44:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2co)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2co)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB37_3
# %bb.45:
.Ltmp59:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2co)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2co)
	lu12i.w	$a1, 16
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp60:                                # EH_LABEL
# %bb.46:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ11recordModelR5MixerE2co)
	addi.d	$a1, $a1, %pc_lo12(_ZZ11recordModelR5MixerE2co)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2co)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2co)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB37_3
.LBB37_47:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cp)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cp)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB37_4
# %bb.48:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp62:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ11recordModelR5MixerE2cp)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11recordModelR5MixerE2cp)
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp63:                                # EH_LABEL
# %bb.49:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ11recordModelR5MixerE2cp)
	addi.d	$a1, $a1, %pc_lo12(_ZZ11recordModelR5MixerE2cp)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ11recordModelR5MixerE2cp)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ11recordModelR5MixerE2cp)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB37_4
.LBB37_50:
.Ltmp64:                                # EH_LABEL
	b	.LBB37_54
.LBB37_51:
.Ltmp61:                                # EH_LABEL
	b	.LBB37_54
.LBB37_52:
.Ltmp58:                                # EH_LABEL
	b	.LBB37_54
.LBB37_53:
.Ltmp55:                                # EH_LABEL
.LBB37_54:
	move	$fp, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end37:
	.size	_Z11recordModelR5Mixer, .Lfunc_end37-_Z11recordModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table37:
.Lexception5:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end5-.Lcst_begin5
.Lcst_begin5:
	.uleb128 .Lfunc_begin5-.Lfunc_begin5    # >> Call Site 1 <<
	.uleb128 .Ltmp53-.Lfunc_begin5          #   Call between .Lfunc_begin5 and .Ltmp53
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp53-.Lfunc_begin5          # >> Call Site 2 <<
	.uleb128 .Ltmp54-.Ltmp53                #   Call between .Ltmp53 and .Ltmp54
	.uleb128 .Ltmp55-.Lfunc_begin5          #     jumps to .Ltmp55
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp54-.Lfunc_begin5          # >> Call Site 3 <<
	.uleb128 .Ltmp56-.Ltmp54                #   Call between .Ltmp54 and .Ltmp56
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp56-.Lfunc_begin5          # >> Call Site 4 <<
	.uleb128 .Ltmp57-.Ltmp56                #   Call between .Ltmp56 and .Ltmp57
	.uleb128 .Ltmp58-.Lfunc_begin5          #     jumps to .Ltmp58
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp57-.Lfunc_begin5          # >> Call Site 5 <<
	.uleb128 .Ltmp59-.Ltmp57                #   Call between .Ltmp57 and .Ltmp59
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp59-.Lfunc_begin5          # >> Call Site 6 <<
	.uleb128 .Ltmp60-.Ltmp59                #   Call between .Ltmp59 and .Ltmp60
	.uleb128 .Ltmp61-.Lfunc_begin5          #     jumps to .Ltmp61
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp60-.Lfunc_begin5          # >> Call Site 7 <<
	.uleb128 .Ltmp62-.Ltmp60                #   Call between .Ltmp60 and .Ltmp62
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp62-.Lfunc_begin5          # >> Call Site 8 <<
	.uleb128 .Ltmp63-.Ltmp62                #   Call between .Ltmp62 and .Ltmp63
	.uleb128 .Ltmp64-.Lfunc_begin5          #     jumps to .Ltmp64
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp63-.Lfunc_begin5          # >> Call Site 9 <<
	.uleb128 .Lfunc_end37-.Ltmp63           #   Call between .Ltmp63 and .Lfunc_end37
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end5:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z11sparseModelR5Mixerii        # -- Begin function _Z11sparseModelR5Mixerii
	.p2align	5
	.type	_Z11sparseModelR5Mixerii,@function
_Z11sparseModelR5Mixerii:               # @_Z11sparseModelR5Mixerii
.Lfunc_begin6:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception6
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a3, %pc_hi20(_ZGVZ11sparseModelR5MixeriiE2cm)
	ld.b	$a3, $a3, %pc_lo12(_ZGVZ11sparseModelR5MixeriiE2cm)
	move	$s4, $a0
	dbar	20
	beqz	$a3, .LBB38_11
.LBB38_1:
	pcalau12i	$s3, %pc_hi20(bpos)
	ld.w	$a3, $s3, %pc_lo12(bpos)
	pcalau12i	$s2, %pc_hi20(pos)
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$s1, $a0, %pc_lo12(buf)
	bnez	$a3, .LBB38_10
# %bb.2:
	st.d	$s4, $sp, 16                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ11sparseModelR5MixeriiE2cm)
	addi.d	$s4, $a0, %pc_lo12(_ZZ11sparseModelR5MixeriiE2cm)
	pcalau12i	$s6, %pc_hi20(c4)
	ld.wu	$a3, $s6, %pc_lo12(c4)
	ld.w	$a4, $s4, 136
	lu12i.w	$a0, 3855
	ori	$a5, $a0, 240
	and	$a3, $a3, $a5
	addi.d	$a5, $a4, 1
	st.w	$a5, $s4, 136
	lu12i.w	$a5, 241126
	ori	$s5, $a5, 2227
	mul.d	$a3, $a3, $s5
	add.d	$a3, $a3, $a4
	rotri.w	$a3, $a3, 16
	lu12i.w	$a5, 30140
	ori	$s8, $a5, 3351
	ld.d	$s7, $s4, 96
	mul.d	$a3, $a3, $s8
	add.d	$a3, $a3, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a3, $s7, $a4
	ld.wu	$a3, $s6, %pc_lo12(c4)
	lu12i.w	$a4, -61681
	ld.w	$a5, $s4, 136
	ori	$a4, $a4, 240
	lu32i.d	$a4, 0
	and	$a3, $a3, $a4
	addi.d	$a4, $a5, 1
	st.w	$a4, $s4, 136
	mul.d	$a3, $a3, $s5
	add.d	$a3, $a5, $a3
	add.d	$a3, $a3, $s5
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $s8
	add.d	$a3, $a3, $a5
	slli.d	$a4, $a5, 2
	stx.w	$a3, $s7, $a4
	ld.wu	$a3, $s6, %pc_lo12(c4)
	ld.w	$a4, $s4, 136
	lu12i.w	$a5, 3983
	ori	$a5, $a5, 2296
	and	$a3, $a3, $a5
	addi.d	$a5, $a4, 1
	st.w	$a5, $s4, 136
	mul.d	$a3, $a3, $s5
	add.d	$a3, $a4, $a3
	lu12i.w	$a5, 482253
	ori	$a5, $a5, 358
	add.d	$a3, $a3, $a5
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $s8
	add.d	$a3, $a3, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a3, $s7, $a4
	ld.wu	$a3, $s6, %pc_lo12(c4)
	lu12i.w	$a4, -28785
	ld.w	$a5, $s4, 136
	ori	$a4, $a4, 2296
	lu32i.d	$a4, 0
	and	$a3, $a3, $a4
	addi.d	$a4, $a5, 1
	st.w	$a4, $s4, 136
	mul.d	$a3, $a3, $s5
	add.d	$a3, $a5, $a3
	lu12i.w	$a4, -325197
	ori	$a4, $a4, 2585
	add.d	$a3, $a3, $a4
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $s8
	add.d	$a3, $a3, $a5
	slli.d	$a4, $a5, 2
	stx.w	$a3, $s7, $a4
	ld.wu	$a3, $s6, %pc_lo12(c4)
	ld.w	$a4, $s4, 136
	lu12i.w	$a5, 3598
	ori	$a5, $a5, 224
	and	$a3, $a3, $a5
	addi.d	$a5, $a4, 1
	st.w	$a5, $s4, 136
	mul.d	$a3, $a3, $s5
	add.d	$a3, $a4, $a3
	lu12i.w	$a5, -84070
	ori	$a5, $a5, 716
	add.d	$a3, $a3, $a5
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $s8
	add.d	$a3, $a3, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a3, $s7, $a4
	ld.wu	$a3, $s6, %pc_lo12(c4)
	lu12i.w	$a4, -127474
	ld.w	$a5, $s4, 136
	ori	$a4, $a4, 224
	lu32i.d	$a4, 0
	and	$a3, $a3, $a4
	addi.d	$a4, $a5, 1
	st.w	$a4, $s4, 136
	mul.d	$a3, $a3, $s5
	add.d	$a3, $a5, $a3
	lu12i.w	$a4, 157056
	ori	$a4, $a4, 2943
	add.d	$a3, $a3, $a4
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $s8
	add.d	$a3, $a3, $a5
	slli.d	$a4, $a5, 2
	stx.w	$a3, $s7, $a4
	ld.wu	$a3, $s6, %pc_lo12(c4)
	ld.w	$a4, $s4, 136
	ori	$a0, $a0, 255
	and	$a0, $a3, $a0
	addi.d	$a3, $a4, 1
	st.w	$a3, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a4, $a0
	lu12i.w	$a3, 398183
	ori	$a3, $a3, 1074
	add.d	$a0, $a0, $a3
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a4
	slli.d	$a3, $a4, 2
	stx.w	$a0, $s7, $a3
	ld.w	$a0, $s4, 136
	addi.d	$a3, $a0, 1
	st.w	$a3, $s4, 136
	mul.d	$a3, $a1, $s5
	add.d	$a3, $a0, $a3
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $s8
	add.d	$a3, $a3, $a0
	slli.d	$a0, $a0, 2
	stx.w	$a3, $s7, $a0
	ld.w	$a0, $s4, 136
	addi.d	$a3, $a0, 1
	st.w	$a3, $s4, 136
	mul.d	$a2, $a2, $s5
	add.d	$a2, $a0, $a2
	rotri.w	$a2, $a2, 16
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $a0
	slli.d	$a0, $a0, 2
	stx.w	$a2, $s7, $a0
	ld.wu	$a0, $s6, %pc_lo12(c4)
	ld.w	$a2, $s4, 136
	lu12i.w	$a3, 4080
	ori	$a3, $a3, 255
	and	$a0, $a0, $a3
	addi.d	$a3, $a2, 1
	st.w	$a3, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a0, $a2
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a2
	slli.d	$a2, $a2, 2
	stx.w	$a0, $s7, $a2
	ld.wu	$a0, $s6, %pc_lo12(c4)
	ld.w	$a2, $s4, 136
	ori	$a3, $zero, 255
	bstrins.d	$a3, $a3, 32, 24
	and	$a0, $a0, $a3
	addi.d	$a3, $a2, 1
	st.w	$a3, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a0, $a2
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a2
	slli.d	$a2, $a2, 2
	stx.w	$a0, $s7, $a2
	ld.w	$a0, $s2, %pc_lo12(pos)
	ld.w	$a2, $s1, 0
	addi.w	$a3, $a0, -1
	addi.w	$a2, $a2, -1
	ld.d	$fp, $s1, 16
	and	$a3, $a2, $a3
	addi.w	$a0, $a0, -5
	and	$a0, $a2, $a0
	ldx.bu	$a0, $fp, $a0
	ldx.bu	$a2, $fp, $a3
	ld.w	$a3, $s4, 136
	slli.d	$a0, $a0, 8
	or	$a0, $a0, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a0, $a3
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a3
	slli.d	$a2, $a3, 2
	stx.w	$a0, $s7, $a2
	ld.w	$a0, $s2, %pc_lo12(pos)
	ld.w	$a2, $s1, 0
	addi.w	$a3, $a0, -1
	addi.w	$a2, $a2, -1
	and	$a3, $a2, $a3
	addi.w	$a0, $a0, -6
	and	$a0, $a2, $a0
	ldx.bu	$a0, $fp, $a0
	ldx.bu	$a2, $fp, $a3
	ld.w	$a3, $s4, 136
	slli.d	$a0, $a0, 8
	or	$a0, $a0, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a0, $a3
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a3
	slli.d	$a2, $a3, 2
	stx.w	$a0, $s7, $a2
	ld.w	$a0, $s2, %pc_lo12(pos)
	ld.w	$a2, $s1, 0
	addi.w	$a3, $a0, -3
	addi.w	$a2, $a2, -1
	and	$a3, $a2, $a3
	addi.w	$a0, $a0, -6
	and	$a0, $a2, $a0
	ldx.bu	$a0, $fp, $a0
	ldx.bu	$a2, $fp, $a3
	ld.w	$a3, $s4, 136
	slli.d	$a0, $a0, 8
	or	$a0, $a0, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a0, $a3
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a3
	slli.d	$a2, $a3, 2
	stx.w	$a0, $s7, $a2
	ld.w	$a0, $s2, %pc_lo12(pos)
	ld.w	$a2, $s1, 0
	addi.w	$a3, $a0, -4
	addi.w	$a2, $a2, -1
	and	$a3, $a2, $a3
	addi.w	$a0, $a0, -8
	and	$a0, $a2, $a0
	ldx.bu	$a0, $fp, $a0
	ldx.bu	$a2, $fp, $a3
	ld.w	$a3, $s4, 136
	slli.d	$a0, $a0, 8
	or	$a0, $a0, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a0, $a3
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a3
	slli.d	$a2, $a3, 2
	stx.w	$a0, $s7, $a2
	addi.d	$a0, $zero, -4
	.p2align	4, , 16
.LBB38_3:                               # =>This Inner Loop Header: Depth=1
	ld.w	$a2, $s2, %pc_lo12(pos)
	ld.w	$a3, $s1, 0
	add.d	$a2, $a0, $a2
	addi.w	$a4, $a2, 2
	addi.w	$a3, $a3, -1
	and	$a4, $a3, $a4
	ldx.bu	$a4, $fp, $a4
	addi.w	$a2, $a2, 1
	and	$a2, $a3, $a2
	ldx.bu	$a2, $fp, $a2
	ld.w	$a3, $s4, 136
	slli.d	$a4, $a4, 8
	or	$a2, $a4, $a2
	addi.d	$a4, $a3, 1
	st.w	$a4, $s4, 136
	mul.d	$a2, $a2, $s5
	add.d	$a2, $a2, $a3
	rotri.w	$a2, $a2, 16
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $a3
	slli.d	$a3, $a3, 2
	stx.w	$a2, $s7, $a3
	ld.w	$a2, $s2, %pc_lo12(pos)
	ld.w	$a3, $s1, 0
	add.w	$a2, $a0, $a2
	addi.w	$a4, $a2, 2
	addi.w	$a3, $a3, -1
	and	$a4, $a3, $a4
	ldx.bu	$a4, $fp, $a4
	and	$a2, $a3, $a2
	ldx.bu	$a2, $fp, $a2
	ld.w	$a3, $s4, 136
	slli.d	$a4, $a4, 8
	or	$a2, $a4, $a2
	addi.d	$a4, $a3, 1
	st.w	$a4, $s4, 136
	mul.d	$a2, $a2, $s5
	add.d	$a2, $a2, $a3
	rotri.w	$a2, $a2, 16
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $a3
	slli.d	$a3, $a3, 2
	stx.w	$a2, $s7, $a3
	ld.w	$a2, $s2, %pc_lo12(pos)
	ld.w	$a3, $s1, 0
	add.d	$a2, $a0, $a2
	addi.w	$a2, $a2, 3
	addi.w	$a3, $a3, -1
	and	$a2, $a3, $a2
	ldx.bu	$a2, $fp, $a2
	ld.w	$a3, $s4, 136
	slli.d	$a2, $a2, 8
	or	$a2, $a2, $a1
	addi.d	$a4, $a3, 1
	st.w	$a4, $s4, 136
	mul.d	$a2, $a2, $s5
	add.d	$a2, $a2, $a3
	rotri.w	$a2, $a2, 16
	mul.d	$a2, $a2, $s8
	add.d	$a2, $a2, $a3
	slli.d	$a3, $a3, 2
	addi.w	$a0, $a0, -1
	addi.w	$a4, $zero, -11
	stx.w	$a2, $s7, $a3
	bne	$a0, $a4, .LBB38_3
# %bb.4:
	ld.wu	$a0, $s6, %pc_lo12(c4)
	andi	$a1, $a0, 1
	bnez	$a1, .LBB38_6
# %bb.5:
	move	$a1, $zero
	b	.LBB38_9
.LBB38_6:
	andi	$s0, $a0, 255
	move	$a0, $s0
	pcaddu18i	$ra, %call36(isalpha)
	jirl	$ra, $ra, 0
	ori	$a1, $zero, 1
	bnez	$a0, .LBB38_9
# %bb.7:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(ispunct)
	jirl	$ra, $ra, 0
	ori	$a1, $zero, 2
	bnez	$a0, .LBB38_9
# %bb.8:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(isspace)
	jirl	$ra, $ra, 0
	sltui	$a0, $a0, 1
	addi.d	$a1, $a0, 3
.LBB38_9:
	pcalau12i	$a2, %pc_hi20(_ZZ11sparseModelR5MixeriiE4mask)
	ld.w	$a0, $a2, %pc_lo12(_ZZ11sparseModelR5MixeriiE4mask)
	ld.w	$a3, $s4, 136
	slli.d	$a0, $a0, 3
	or	$a0, $a0, $a1
	st.w	$a0, $a2, %pc_lo12(_ZZ11sparseModelR5MixeriiE4mask)
	addi.d	$a1, $a3, 1
	st.w	$a1, $s4, 136
	mul.d	$a1, $a0, $s5
	add.d	$a1, $a1, $a3
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s8
	add.d	$a1, $a1, $a3
	slli.d	$a2, $a3, 2
	stx.w	$a1, $s7, $a2
	ld.w	$a1, $s2, %pc_lo12(pos)
	ld.w	$a2, $s1, 0
	addi.w	$a1, $a1, -1
	addi.w	$a2, $a2, -1
	and	$a1, $a2, $a1
	ldx.bu	$a1, $fp, $a1
	ld.w	$a2, $s4, 136
	slli.d	$a3, $a0, 8
	or	$a1, $a3, $a1
	addi.d	$a3, $a2, 1
	st.w	$a3, $s4, 136
	mul.d	$a1, $a1, $s5
	add.d	$a1, $a1, $a2
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s8
	add.d	$a1, $a1, $a2
	slli.d	$a2, $a2, 2
	stx.w	$a1, $s7, $a2
	ld.w	$a1, $s2, %pc_lo12(pos)
	ld.w	$a2, $s1, 0
	slli.d	$a3, $a0, 17
	addi.w	$a4, $a1, -2
	addi.w	$a2, $a2, -1
	and	$a4, $a2, $a4
	ldx.bu	$a4, $fp, $a4
	addi.w	$a1, $a1, -3
	and	$a1, $a2, $a1
	ldx.bu	$a1, $fp, $a1
	ld.w	$a2, $s4, 136
	slli.d	$a4, $a4, 8
	or	$a3, $a4, $a3
	or	$a1, $a3, $a1
	addi.d	$a3, $a2, 1
	st.w	$a3, $s4, 136
	mul.d	$a1, $a1, $s5
	add.d	$a1, $a1, $a2
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s8
	add.d	$a1, $a1, $a2
	slli.d	$a2, $a2, 2
	stx.w	$a1, $s7, $a2
	ld.wu	$a1, $s6, %pc_lo12(c4)
	lu12i.w	$a2, 1807
	ld.w	$a3, $s4, 136
	ori	$a2, $a2, 240
	and	$a1, $a1, $a2
	bstrins.d	$a0, $a1, 63, 9
	addi.d	$a1, $a3, 1
	st.w	$a1, $s4, 136
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a0, $a3
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s8
	add.d	$a0, $a0, $a3
	slli.d	$a1, $a3, 2
	stx.w	$a0, $s7, $a1
	ld.w	$a3, $s3, %pc_lo12(bpos)
	ld.d	$s4, $sp, 16                    # 8-byte Folded Reload
.LBB38_10:
	pcalau12i	$a0, %pc_hi20(c0)
	ld.w	$a1, $s2, %pc_lo12(pos)
	ld.w	$a4, $s1, 0
	ld.w	$a2, $a0, %pc_lo12(c0)
	ld.d	$a0, $s1, 16
	addi.w	$a1, $a1, -1
	addi.w	$a4, $a4, -1
	and	$a1, $a4, $a1
	ldx.bu	$a4, $a0, $a1
	pcalau12i	$a0, %pc_hi20(y)
	ld.w	$a5, $a0, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ11sparseModelR5MixeriiE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11sparseModelR5MixeriiE2cm)
	move	$a1, $s4
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	pcaddu18i	$t8, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jr	$t8
.LBB38_11:
	pcalau12i	$a0, %pc_hi20(_ZGVZ11sparseModelR5MixeriiE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ11sparseModelR5MixeriiE2cm)
	move	$fp, $a1
	move	$s0, $a2
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	move	$a2, $s0
	move	$a1, $fp
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB38_1
# %bb.12:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 32
	sll.w	$a1, $a1, $a0
.Ltmp65:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ11sparseModelR5MixeriiE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ11sparseModelR5MixeriiE2cm)
	ori	$a2, $zero, 48
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp66:                                # EH_LABEL
# %bb.13:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ11sparseModelR5MixeriiE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ11sparseModelR5MixeriiE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ11sparseModelR5MixeriiE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ11sparseModelR5MixeriiE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	move	$a1, $fp
	move	$a2, $s0
	b	.LBB38_1
.LBB38_14:
.Ltmp67:                                # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZ11sparseModelR5MixeriiE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ11sparseModelR5MixeriiE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end38:
	.size	_Z11sparseModelR5Mixerii, .Lfunc_end38-_Z11sparseModelR5Mixerii
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table38:
.Lexception6:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end6-.Lcst_begin6
.Lcst_begin6:
	.uleb128 .Lfunc_begin6-.Lfunc_begin6    # >> Call Site 1 <<
	.uleb128 .Ltmp65-.Lfunc_begin6          #   Call between .Lfunc_begin6 and .Ltmp65
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp65-.Lfunc_begin6          # >> Call Site 2 <<
	.uleb128 .Ltmp66-.Ltmp65                #   Call between .Ltmp65 and .Ltmp66
	.uleb128 .Ltmp67-.Lfunc_begin6          #     jumps to .Ltmp67
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp66-.Lfunc_begin6          # >> Call Site 3 <<
	.uleb128 .Lfunc_end38-.Ltmp66           #   Call between .Ltmp66 and .Lfunc_end38
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end6:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z13distanceModelR5Mixer        # -- Begin function _Z13distanceModelR5Mixer
	.p2align	5
	.type	_Z13distanceModelR5Mixer,@function
_Z13distanceModelR5Mixer:               # @_Z13distanceModelR5Mixer
.Lfunc_begin7:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception7
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	pcalau12i	$a1, %pc_hi20(_ZGVZ13distanceModelR5MixerE2cr)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ13distanceModelR5MixerE2cr)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB39_11
.LBB39_1:
	pcalau12i	$a1, %pc_hi20(bpos)
	ld.w	$a3, $a1, %pc_lo12(bpos)
	pcalau12i	$a0, %pc_hi20(pos)
	bnez	$a3, .LBB39_10
# %bb.2:
	pcalau12i	$a2, %pc_hi20(_ZZ13distanceModelR5MixerE2cr)
	addi.d	$a2, $a2, %pc_lo12(_ZZ13distanceModelR5MixerE2cr)
	pcalau12i	$a3, %pc_hi20(c4)
	ld.wu	$a5, $a3, %pc_lo12(c4)
	andi	$a7, $a5, 255
	ori	$t0, $zero, 32
	pcalau12i	$a6, %pc_hi20(_ZZ13distanceModelR5MixerE5pos00)
	pcalau12i	$a4, %pc_hi20(_ZZ13distanceModelR5MixerE5pos20)
	pcalau12i	$a3, %pc_hi20(_ZZ13distanceModelR5MixerE5posnl)
	bltu	$t0, $a7, .LBB39_5
# %bb.3:
	slli.d	$a7, $a7, 2
	pcalau12i	$t0, %pc_hi20(.LJTI39_0)
	addi.d	$t0, $t0, %pc_lo12(.LJTI39_0)
	ldx.w	$a7, $t0, $a7
	add.d	$a7, $t0, $a7
	jr	$a7
.LBB39_4:
	ld.w	$a7, $a0, %pc_lo12(pos)
	st.w	$a7, $a6, %pc_lo12(_ZZ13distanceModelR5MixerE5pos00)
	b	.LBB39_9
.LBB39_5:
	ori	$t0, $zero, 255
	bne	$a7, $t0, .LBB39_7
.LBB39_6:
	ld.w	$a7, $a0, %pc_lo12(pos)
	st.w	$a7, $a3, %pc_lo12(_ZZ13distanceModelR5MixerE5posnl)
	b	.LBB39_9
.LBB39_7:                               # %._crit_edge
	ld.w	$a7, $a0, %pc_lo12(pos)
	b	.LBB39_9
.LBB39_8:
	ld.w	$a7, $a0, %pc_lo12(pos)
	st.w	$a7, $a4, %pc_lo12(_ZZ13distanceModelR5MixerE5pos20)
.LBB39_9:
	ld.w	$a6, $a6, %pc_lo12(_ZZ13distanceModelR5MixerE5pos00)
	sub.w	$a6, $a7, $a6
	slti	$a7, $a6, 255
	maskeqz	$a6, $a6, $a7
	ori	$t0, $zero, 255
	masknez	$a7, $t0, $a7
	or	$a6, $a6, $a7
	slli.d	$a5, $a5, 8
	ld.w	$a7, $a2, 136
	bstrpick.d	$a5, $a5, 15, 8
	slli.d	$a5, $a5, 8
	or	$a6, $a6, $a5
	addi.d	$t1, $a7, 1
	st.w	$t1, $a2, 136
	lu12i.w	$t1, 241126
	ori	$t1, $t1, 2227
	mul.d	$a6, $a6, $t1
	add.d	$a6, $a6, $a7
	rotri.w	$a6, $a6, 16
	lu12i.w	$t2, 30140
	ori	$t2, $t2, 3351
	ld.d	$t3, $a2, 96
	mul.d	$a6, $a6, $t2
	add.d	$a6, $a6, $a7
	slli.d	$a7, $a7, 2
	stx.w	$a6, $t3, $a7
	ld.w	$a6, $a0, %pc_lo12(pos)
	ld.w	$a4, $a4, %pc_lo12(_ZZ13distanceModelR5MixerE5pos20)
	sub.w	$a4, $a6, $a4
	slti	$a6, $a4, 255
	maskeqz	$a4, $a4, $a6
	ld.w	$a7, $a2, 136
	masknez	$a6, $t0, $a6
	or	$a4, $a4, $a6
	or	$a4, $a4, $a5
	addi.d	$a6, $a7, 1
	st.w	$a6, $a2, 136
	mul.d	$a4, $a4, $t1
	add.d	$a4, $a4, $a7
	rotri.w	$a4, $a4, 16
	mul.d	$a4, $a4, $t2
	add.d	$a4, $a4, $a7
	slli.d	$a6, $a7, 2
	stx.w	$a4, $t3, $a6
	ld.w	$a4, $a0, %pc_lo12(pos)
	ld.w	$a3, $a3, %pc_lo12(_ZZ13distanceModelR5MixerE5posnl)
	sub.w	$a3, $a4, $a3
	slti	$a4, $a3, 255
	maskeqz	$a3, $a3, $a4
	masknez	$a4, $t0, $a4
	or	$a3, $a3, $a4
	lu12i.w	$a4, 57
	ld.w	$a6, $a2, 136
	ori	$a4, $a4, 1095
	add.d	$a4, $a5, $a4
	or	$a3, $a3, $a4
	addi.d	$a4, $a6, 1
	st.w	$a4, $a2, 136
	mul.d	$a2, $a3, $t1
	add.d	$a2, $a2, $a6
	rotri.w	$a2, $a2, 16
	mul.d	$a2, $a2, $t2
	add.d	$a2, $a2, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a2, $t3, $a3
	ld.w	$a3, $a1, %pc_lo12(bpos)
.LBB39_10:
	pcalau12i	$a1, %pc_hi20(c0)
	ld.w	$a0, $a0, %pc_lo12(pos)
	ld.w	$a2, $a1, %pc_lo12(c0)
	addi.w	$a0, $a0, -1
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a1, $a1, %pc_lo12(buf)
	ld.w	$a4, $a1, 0
	ld.d	$a1, $a1, 16
	addi.w	$a4, $a4, -1
	and	$a0, $a4, $a0
	ldx.bu	$a4, $a1, $a0
	pcalau12i	$a0, %pc_hi20(y)
	ld.w	$a5, $a0, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ13distanceModelR5MixerE2cr)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13distanceModelR5MixerE2cr)
	move	$a1, $fp
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	pcaddu18i	$t8, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jr	$t8
.LBB39_11:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13distanceModelR5MixerE2cr)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13distanceModelR5MixerE2cr)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB39_1
# %bb.12:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp68:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ13distanceModelR5MixerE2cr)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13distanceModelR5MixerE2cr)
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp69:                                # EH_LABEL
# %bb.13:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ13distanceModelR5MixerE2cr)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13distanceModelR5MixerE2cr)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13distanceModelR5MixerE2cr)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13distanceModelR5MixerE2cr)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB39_1
.LBB39_14:
.Ltmp70:                                # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13distanceModelR5MixerE2cr)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13distanceModelR5MixerE2cr)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end39:
	.size	_Z13distanceModelR5Mixer, .Lfunc_end39-_Z13distanceModelR5Mixer
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI39_0:
	.word	.LBB39_4-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_6-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_6-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_7-.LJTI39_0
	.word	.LBB39_8-.LJTI39_0
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table39:
.Lexception7:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end7-.Lcst_begin7
.Lcst_begin7:
	.uleb128 .Lfunc_begin7-.Lfunc_begin7    # >> Call Site 1 <<
	.uleb128 .Ltmp68-.Lfunc_begin7          #   Call between .Lfunc_begin7 and .Ltmp68
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp68-.Lfunc_begin7          # >> Call Site 2 <<
	.uleb128 .Ltmp69-.Ltmp68                #   Call between .Ltmp68 and .Ltmp69
	.uleb128 .Ltmp70-.Lfunc_begin7          #     jumps to .Ltmp70
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp69-.Lfunc_begin7          # >> Call Site 3 <<
	.uleb128 .Lfunc_end39-.Ltmp69           #   Call between .Ltmp69 and .Lfunc_end39
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end7:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z8bmpModelR5Mixer              # -- Begin function _Z8bmpModelR5Mixer
	.p2align	5
	.type	_Z8bmpModelR5Mixer,@function
_Z8bmpModelR5Mixer:                     # @_Z8bmpModelR5Mixer
.Lfunc_begin8:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception8
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a1, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm1)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm1)
	move	$s5, $a0
	dbar	20
	beqz	$a1, .LBB40_51
.LBB40_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm2)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm2)
	dbar	20
	beqz	$a0, .LBB40_54
.LBB40_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm3)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm3)
	dbar	20
	beqz	$a0, .LBB40_57
.LBB40_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm4)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm4)
	dbar	20
	beqz	$a0, .LBB40_60
.LBB40_4:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm5)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm5)
	dbar	20
	beqz	$a0, .LBB40_63
.LBB40_5:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm6)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm6)
	dbar	20
	beqz	$a0, .LBB40_66
.LBB40_6:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm7)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm7)
	dbar	20
	beqz	$a0, .LBB40_69
.LBB40_7:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm8)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm8)
	dbar	20
	beqz	$a0, .LBB40_72
.LBB40_8:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm9)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm9)
	dbar	20
	beqz	$a0, .LBB40_75
.LBB40_9:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE5scm10)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE5scm10)
	dbar	20
	beqz	$a0, .LBB40_78
.LBB40_10:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE2cm)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE2cm)
	dbar	20
	beqz	$a0, .LBB40_81
.LBB40_11:
	pcalau12i	$s3, %pc_hi20(bpos)
	ld.w	$a0, $s3, %pc_lo12(bpos)
	pcalau12i	$s1, %pc_hi20(pos)
	ld.w	$a5, $s1, %pc_lo12(pos)
	pcalau12i	$s2, %pc_hi20(_ZZ8bmpModelR5MixerE3eoi)
	bnez	$a0, .LBB40_26
# %bb.12:
	addi.w	$a2, $a5, -54
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$fp, $a0, %pc_lo12(buf)
	ld.w	$a1, $fp, 0
	ld.d	$a0, $fp, 16
	addi.w	$a1, $a1, -1
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	ori	$a3, $zero, 66
	bne	$a2, $a3, .LBB40_20
# %bb.13:
	addi.w	$a2, $a5, -53
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	ori	$a3, $zero, 77
	bne	$a2, $a3, .LBB40_20
# %bb.14:
	addi.w	$a2, $a5, -43
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	addi.w	$a3, $a5, -44
	and	$a3, $a1, $a3
	ldx.bu	$a3, $a0, $a3
	slli.w	$a2, $a2, 8
	addi.w	$a4, $a5, -42
	and	$a4, $a1, $a4
	ldx.bu	$a4, $a0, $a4
	addi.w	$a6, $a5, -41
	and	$a6, $a1, $a6
	ldx.b	$a6, $a0, $a6
	or	$a2, $a2, $a3
	slli.w	$a3, $a4, 16
	or	$a2, $a2, $a3
	slli.w	$a3, $a6, 24
	or	$a2, $a2, $a3
	ori	$a3, $zero, 54
	bne	$a2, $a3, .LBB40_20
# %bb.15:
	addi.w	$a2, $a5, -39
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	addi.w	$a3, $a5, -40
	and	$a3, $a1, $a3
	ldx.bu	$a3, $a0, $a3
	slli.w	$a2, $a2, 8
	addi.w	$a4, $a5, -38
	and	$a4, $a1, $a4
	ldx.bu	$a4, $a0, $a4
	addi.w	$a6, $a5, -37
	and	$a6, $a1, $a6
	ldx.b	$a6, $a0, $a6
	or	$a2, $a2, $a3
	slli.w	$a3, $a4, 16
	or	$a2, $a2, $a3
	slli.w	$a3, $a6, 24
	or	$a2, $a2, $a3
	ori	$a3, $zero, 40
	bne	$a2, $a3, .LBB40_20
# %bb.16:
	addi.w	$a2, $a5, -24
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	addi.w	$a3, $a5, -23
	and	$a3, $a1, $a3
	ldx.bu	$a3, $a0, $a3
	addi.w	$a4, $a5, -22
	and	$a4, $a1, $a4
	ldx.bu	$a4, $a0, $a4
	addi.w	$a6, $a5, -21
	and	$a1, $a1, $a6
	ldx.bu	$a0, $a0, $a1
	or	$a1, $a3, $a2
	or	$a1, $a1, $a4
	or	$a0, $a1, $a0
	bnez	$a0, .LBB40_20
# %bb.17:
	ori	$a0, $zero, 36
	pcaddu18i	$ra, %call36(_Z2i4i)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 3
	bstrins.d	$a0, $zero, 1, 0
	alsl.d	$a0, $a0, $a0, 1
	pcalau12i	$s0, %pc_hi20(_ZZ8bmpModelR5MixerE1w)
	st.w	$a0, $s0, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_Z2i4i)
	jirl	$ra, $ra, 0
	ld.w	$a5, $s1, %pc_lo12(pos)
	move	$a2, $a0
	lu12i.w	$a0, 15
	ori	$a0, $a0, 4095
	st.w	$a5, $s2, %pc_lo12(_ZZ8bmpModelR5MixerE3eoi)
	blt	$a0, $a2, .LBB40_20
# %bb.18:
	ld.w	$a0, $s0, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
	lu12i.w	$a1, 47
	ori	$a1, $a1, 4095
	blt	$a1, $a0, .LBB40_20
# %bb.19:
	mul.d	$a1, $a0, $a2
	add.d	$a1, $a1, $a5
	st.w	$a1, $s2, %pc_lo12(_ZZ8bmpModelR5MixerE3eoi)
	lu12i.w	$a1, 349525
	ori	$a1, $a1, 1366
	mul.d	$a0, $a0, $a1
	srli.d	$a1, $a0, 63
	srli.d	$a0, $a0, 32
	add.w	$a1, $a0, $a1
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a5, $s1, %pc_lo12(pos)
.LBB40_20:
	ld.w	$a0, $s3, %pc_lo12(bpos)
	bnez	$a0, .LBB40_26
# %bb.21:
	pcalau12i	$a0, %pc_hi20(c4)
	ld.w	$a1, $a0, %pc_lo12(c4)
	lu12i.w	$a0, 300178
	ori	$a0, $a0, 2560
	bne	$a1, $a0, .LBB40_23
# %bb.22:
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4tiff)
	st.w	$a5, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4tiff)
	move	$a0, $a5
	lu12i.w	$a3, 32768
	sub.w	$a2, $a5, $a0
	bne	$a1, $a3, .LBB40_24
	b	.LBB40_33
.LBB40_23:                              # %._crit_edge
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4tiff)
	ld.w	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4tiff)
	lu12i.w	$a3, 32768
	sub.w	$a2, $a5, $a0
	beq	$a1, $a3, .LBB40_33
.LBB40_24:
	ori	$a1, $zero, 4
	bne	$a2, $a1, .LBB40_33
.LBB40_25:                              # %.thread
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4tiff)
	st.w	$zero, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4tiff)
.LBB40_26:                              # %.thread
	ld.w	$a0, $s2, %pc_lo12(_ZZ8bmpModelR5MixerE3eoi)
	bge	$a0, $a5, .LBB40_28
# %bb.27:
	move	$a0, $zero
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE1w)
	st.w	$zero, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
	b	.LBB40_32
.LBB40_28:
	st.d	$s3, $sp, 136                   # 8-byte Folded Spill
	ld.w	$a1, $s3, %pc_lo12(bpos)
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm3)
	addi.d	$s6, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm3)
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm4)
	addi.d	$s7, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm4)
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a0, $a0, %pc_lo12(buf)
	pcalau12i	$a4, %pc_hi20(_ZZ8bmpModelR5MixerE1w)
	pcalau12i	$a2, %pc_hi20(_ZZ8bmpModelR5MixerE4scm1)
	addi.d	$t2, $a2, %pc_lo12(_ZZ8bmpModelR5MixerE4scm1)
	pcalau12i	$a2, %pc_hi20(_ZZ8bmpModelR5MixerE4scm2)
	addi.d	$ra, $a2, %pc_lo12(_ZZ8bmpModelR5MixerE4scm2)
	pcalau12i	$a2, %pc_hi20(_ZZ8bmpModelR5MixerE4scm5)
	addi.d	$s8, $a2, %pc_lo12(_ZZ8bmpModelR5MixerE4scm5)
	pcalau12i	$a2, %pc_hi20(_ZZ8bmpModelR5MixerE4scm6)
	addi.d	$t4, $a2, %pc_lo12(_ZZ8bmpModelR5MixerE4scm6)
	pcalau12i	$a2, %pc_hi20(_ZZ8bmpModelR5MixerE4scm7)
	addi.d	$a3, $a2, %pc_lo12(_ZZ8bmpModelR5MixerE4scm7)
	pcalau12i	$a2, %pc_hi20(_ZZ8bmpModelR5MixerE4scm8)
	addi.d	$t0, $a2, %pc_lo12(_ZZ8bmpModelR5MixerE4scm8)
	pcalau12i	$a2, %pc_hi20(_ZZ8bmpModelR5MixerE4scm9)
	addi.d	$t3, $a2, %pc_lo12(_ZZ8bmpModelR5MixerE4scm9)
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$a4, $sp, 128                   # 8-byte Folded Spill
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	st.d	$s1, $sp, 104                   # 8-byte Folded Spill
	st.d	$t3, $sp, 96                    # 8-byte Folded Spill
	st.d	$t0, $sp, 88                    # 8-byte Folded Spill
	beqz	$a1, .LBB40_30
# %bb.29:                               # %._crit_edge176
	ld.w	$s2, $s6, 24
	ld.w	$fp, $s7, 24
	move	$a4, $a3
	move	$t1, $t4
	b	.LBB40_31
.LBB40_30:
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE2cm)
	st.d	$a3, $sp, 56                    # 8-byte Folded Spill
	addi.d	$t7, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE2cm)
	lu12i.w	$a1, 349525
	ori	$a1, $a1, 1366
	mul.d	$a1, $a5, $a1
	srli.d	$a2, $a1, 63
	srli.d	$a1, $a1, 32
	add.d	$a1, $a1, $a2
	addi.w	$a2, $a1, 0
	alsl.d	$a1, $a2, $a1, 1
	sub.d	$t6, $a5, $a1
	st.d	$t6, $sp, 16                    # 8-byte Folded Spill
	ld.w	$a1, $a0, 0
	addi.w	$a3, $a5, -3
	ld.d	$a2, $a0, 16
	ld.w	$t5, $a4, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
	addi.w	$a1, $a1, -1
	and	$a3, $a1, $a3
	ldx.bu	$a3, $a2, $a3
	addi.d	$a6, $t5, -3
	st.d	$a6, $sp, 64                    # 8-byte Folded Spill
	sub.w	$a6, $a5, $a6
	and	$a6, $a6, $a1
	ldx.bu	$a6, $a2, $a6
	sub.w	$a7, $a5, $t5
	and	$a7, $a7, $a1
	ldx.bu	$a7, $a2, $a7
	addi.d	$t1, $t5, 3
	st.d	$t1, $sp, 48                    # 8-byte Folded Spill
	sub.w	$a5, $a5, $t1
	and	$a1, $a5, $a1
	ldx.bu	$a1, $a2, $a1
	st.d	$t4, $sp, 72                    # 8-byte Folded Spill
	addi.w	$s3, $t6, 0
	add.d	$a5, $a6, $a3
	add.d	$a5, $a5, $a7
	add.d	$t6, $a5, $a1
	mul.d	$a5, $a3, $a3
	mul.d	$a6, $a6, $a6
	add.d	$a5, $a6, $a5
	mul.d	$a6, $a7, $a7
	add.d	$a5, $a5, $a6
	mul.d	$a1, $a1, $a1
	add.d	$a1, $a5, $a1
	mul.d	$a5, $t6, $t6
	pcalau12i	$a6, %pc_hi20(ilog+16)
	ld.d	$a6, $a6, %pc_lo12(ilog+16)
	srli.d	$a5, $a5, 2
	sub.d	$a1, $a1, $a5
	bstrpick.d	$a1, $a1, 17, 2
	ldx.bu	$a1, $a6, $a1
	st.d	$a1, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a1, 7325
	ori	$s4, $a1, 2291
	mul.d	$a1, $a3, $s4
	lu12i.w	$a5, 12208
	ori	$s5, $a5, 271
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	mul.d	$ra, $s3, $s5
	add.w	$a1, $ra, $a1
	lu12i.w	$a5, 4881
	ori	$a5, $a5, 3097
	add.d	$a1, $a1, $a5
	bstrpick.d	$a5, $a1, 31, 9
	srli.d	$a3, $a3, 3
	bstrpick.d	$s2, $s3, 31, 4
	xor	$a3, $a3, $a5
	xor	$a3, $a3, $s2
	ld.w	$a5, $t7, 136
	xor	$a1, $a3, $a1
	lu12i.w	$t1, 16384
	xor	$a1, $a1, $t1
	addi.d	$a3, $a5, 1
	st.w	$a3, $t7, 136
	lu12i.w	$a3, 241126
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	ori	$s6, $a3, 2227
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a5
	rotri.w	$a1, $a1, 16
	lu12i.w	$a3, 30140
	st.d	$s7, $sp, 40                    # 8-byte Folded Spill
	ori	$s7, $a3, 3351
	st.d	$s8, $sp, 80                    # 8-byte Folded Spill
	ld.d	$s8, $t7, 96
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a5
	slli.d	$a3, $a5, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	addi.w	$a5, $a1, -3
	addi.w	$a3, $a3, -1
	and	$a5, $a3, $a5
	ldx.bu	$a6, $a2, $a5
	addi.w	$a1, $a1, -1
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	mul.d	$a3, $a6, $s4
	mul.d	$a7, $a1, $s5
	lu12i.w	$a5, 17091
	ori	$fp, $a5, 71
	mul.d	$a5, $s3, $fp
	add.d	$a3, $a5, $a3
	add.w	$a3, $a3, $a7
	lu12i.w	$a7, 70801
	ori	$a7, $a7, 2563
	add.d	$a3, $a3, $a7
	bstrpick.d	$a7, $a3, 31, 9
	srli.d	$a6, $a6, 3
	srli.d	$a1, $a1, 4
	bstrpick.d	$t4, $s3, 31, 5
	xor	$a1, $a6, $a1
	xor	$a1, $a1, $a7
	xor	$a1, $a1, $t4
	xor	$a1, $a1, $a3
	ld.w	$a3, $t7, 136
	lu12i.w	$a4, 16383
	ori	$a6, $a4, 4095
	xor	$a1, $a1, $a6
	addi.d	$a6, $a3, 1
	st.w	$a6, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a3
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a3
	slli.d	$a3, $a3, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	bstrpick.d	$a6, $s3, 31, 6
	addi.w	$a7, $a1, -3
	addi.w	$a3, $a3, -1
	addi.w	$s0, $a1, -1
	and	$s0, $a3, $s0
	ldx.bu	$s0, $a2, $s0
	addi.w	$a1, $a1, -2
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	and	$a3, $a3, $a7
	ldx.bu	$a3, $a2, $a3
	srli.d	$a7, $s0, 2
	srli.d	$a1, $a1, 6
	lu12i.w	$t8, 26856
	ori	$t8, $t8, 323
	mul.d	$s3, $s3, $t8
	mul.d	$t8, $a3, $s4
	mul.d	$a7, $a7, $s5
	mul.d	$a1, $a1, $fp
	add.d	$t8, $s3, $t8
	add.d	$a7, $t8, $a7
	add.w	$a1, $a7, $a1
	lu12i.w	$a7, 146486
	ori	$a7, $a7, 2281
	add.d	$a1, $a1, $a7
	bstrpick.d	$a7, $a1, 31, 9
	srli.d	$a3, $a3, 3
	srli.d	$t8, $s0, 6
	bstrpick.d	$s0, $a6, 57, 0
	xor	$a3, $a3, $t8
	ld.w	$a6, $t7, 136
	xor	$a3, $a3, $a7
	xor	$a3, $a3, $s0
	xor	$a1, $a3, $a1
	addi.d	$a3, $a6, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a6
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	sub.w	$a1, $a1, $t5
	addi.w	$a3, $a3, -1
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	mul.d	$a3, $a1, $s4
	add.w	$a3, $ra, $a3
	lu12i.w	$a6, 151368
	ori	$a6, $a6, 1282
	add.d	$a3, $a3, $a6
	bstrpick.d	$a6, $a3, 31, 9
	srli.d	$a1, $a1, 3
	xor	$a1, $a1, $a6
	xor	$a1, $a1, $s2
	ld.w	$a6, $t7, 136
	xor	$a1, $a1, $a3
	ori	$a3, $t1, 1
	xor	$a1, $a1, $a3
	addi.d	$a3, $a6, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a6
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	sub.w	$a6, $a1, $t5
	addi.w	$a3, $a3, -1
	and	$a6, $a3, $a6
	ldx.bu	$a6, $a2, $a6
	addi.w	$a1, $a1, -1
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	mul.d	$a3, $a6, $s4
	mul.d	$a7, $a1, $s5
	add.d	$a3, $a5, $a3
	add.w	$a3, $a3, $a7
	lu12i.w	$a7, 217288
	ori	$a7, $a7, 748
	add.d	$a3, $a3, $a7
	bstrpick.d	$a7, $a3, 31, 9
	srli.d	$a6, $a6, 3
	srli.d	$a1, $a1, 4
	xor	$a1, $a6, $a1
	xor	$a1, $a1, $a7
	xor	$a1, $a1, $t4
	ld.w	$a6, $t7, 136
	xor	$a1, $a1, $a3
	ori	$a3, $a4, 4094
	xor	$a1, $a1, $a3
	addi.d	$a3, $a6, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a6
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $a0, 0
	ld.w	$a3, $s1, %pc_lo12(pos)
	addi.w	$a1, $a1, -1
	addi.w	$a6, $a3, -1
	and	$a6, $a1, $a6
	ldx.bu	$a6, $a2, $a6
	sub.w	$a7, $a3, $t5
	and	$a7, $a1, $a7
	ldx.bu	$a7, $a2, $a7
	srli.d	$t8, $a6, 2
	addi.w	$a3, $a3, -2
	and	$a1, $a1, $a3
	ldx.bu	$a1, $a2, $a1
	mul.d	$a3, $a7, $s4
	mul.d	$t8, $t8, $s5
	add.d	$a3, $s3, $a3
	add.d	$a3, $a3, $t8
	srli.d	$a1, $a1, 6
	mul.d	$a1, $a1, $fp
	add.w	$a1, $a3, $a1
	lu12i.w	$a3, 292973
	ori	$a3, $a3, 466
	add.d	$a1, $a1, $a3
	bstrpick.d	$a3, $a1, 31, 9
	srli.d	$a7, $a7, 3
	srli.d	$a6, $a6, 6
	xor	$a6, $a7, $a6
	xor	$a3, $a6, $a3
	ld.w	$a6, $t7, 136
	xor	$a3, $a3, $s0
	xor	$a1, $a3, $a1
	xori	$a1, $a1, 1
	addi.d	$a3, $a6, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a6
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	addi.w	$a6, $a1, -3
	addi.w	$a3, $a3, -1
	and	$a6, $a3, $a6
	ldx.bu	$a6, $a2, $a6
	sub.w	$a7, $a1, $t5
	and	$a7, $a3, $a7
	ldx.bu	$a7, $a2, $a7
	addi.w	$t8, $a1, -1
	and	$t8, $a3, $t8
	addi.w	$a1, $a1, -2
	and	$a1, $a3, $a1
	ldx.bu	$a3, $a2, $t8
	ldx.bu	$a1, $a2, $a1
	add.d	$a6, $a7, $a6
	srli.d	$a7, $a6, 3
	srli.d	$a3, $a3, 5
	srli.d	$a1, $a1, 5
	mul.d	$a7, $a7, $s4
	mul.d	$a3, $a3, $s5
	mul.d	$a1, $a1, $fp
	add.d	$a7, $s3, $a7
	add.d	$a3, $a7, $a3
	add.w	$a1, $a3, $a1
	lu12i.w	$a3, 341801
	ori	$a3, $a3, 3957
	add.d	$a1, $a1, $a3
	bstrpick.d	$a3, $a1, 31, 9
	ld.d	$t1, $sp, 16                    # 8-byte Folded Reload
	xor	$a6, $a6, $t1
	bstrpick.d	$a6, $a6, 31, 6
	ld.w	$a7, $t7, 136
	xor	$a3, $a6, $a3
	xor	$a1, $a3, $a1
	xori	$a1, $a1, 1
	addi.d	$a3, $a7, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a7
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a7
	slli.d	$a3, $a7, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	addi.w	$a6, $a1, -1
	addi.w	$a3, $a3, -1
	and	$a6, $a3, $a6
	ldx.bu	$a6, $a2, $a6
	addi.w	$a1, $a1, -2
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	mul.d	$a3, $a6, $s4
	mul.d	$a7, $a1, $s5
	add.d	$a3, $a5, $a3
	add.w	$a3, $a3, $a7
	lu12i.w	$a7, 363774
	ori	$a7, $a7, 3029
	add.d	$a3, $a3, $a7
	bstrpick.d	$a7, $a3, 31, 9
	srli.d	$a6, $a6, 3
	srli.d	$a1, $a1, 4
	xor	$a1, $a6, $a1
	xor	$a1, $a1, $a7
	xor	$a1, $a1, $t4
	ld.w	$a6, $t7, 136
	xor	$a1, $a1, $a3
	ori	$fp, $a4, 4093
	xor	$a1, $a1, $fp
	addi.d	$a3, $a6, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a6
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	addi.w	$a6, $a1, -3
	addi.w	$a3, $a3, -1
	and	$a6, $a3, $a6
	addi.w	$a7, $a1, -1
	and	$a7, $a3, $a7
	ldx.bu	$a7, $a2, $a7
	addi.w	$a1, $a1, -4
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	ldx.bu	$a3, $a2, $a6
	sub.d	$a1, $a7, $a1
	mul.d	$a6, $a3, $s4
	mul.d	$a7, $a1, $s5
	add.d	$a6, $a5, $a6
	add.w	$a6, $a6, $a7
	lu12i.w	$a7, 412603
	ori	$a7, $a7, 2424
	add.d	$a6, $a6, $a7
	bstrpick.d	$a7, $a6, 31, 9
	srli.d	$a3, $a3, 3
	bstrpick.d	$a1, $a1, 31, 4
	xor	$a1, $a3, $a1
	xor	$a1, $a1, $a7
	ld.w	$a3, $t7, 136
	xor	$a1, $a1, $t4
	xor	$a1, $a1, $a6
	xor	$a1, $a1, $fp
	addi.d	$a6, $a3, 1
	st.w	$a6, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a3
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a3
	slli.d	$a3, $a3, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	addi.w	$a6, $a1, -3
	addi.w	$a3, $a3, -1
	and	$a6, $a3, $a6
	ldx.bu	$a6, $a2, $a6
	addi.w	$a7, $a1, -1
	and	$a7, $a3, $a7
	ldx.bu	$a7, $a2, $a7
	addi.w	$a1, $a1, -4
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	add.d	$a3, $a7, $a6
	sub.d	$a1, $a3, $a1
	mul.d	$a3, $a1, $s4
	add.w	$a3, $ra, $a3
	lu12i.w	$a6, 444341
	ori	$a6, $a6, 1748
	add.d	$a3, $a3, $a6
	bstrpick.d	$a6, $a3, 31, 9
	bstrpick.d	$a1, $a1, 31, 3
	xor	$a1, $a1, $a6
	xor	$a1, $a1, $s2
	ld.w	$a6, $t7, 136
	xor	$a1, $a1, $a3
	lu12i.w	$s0, 16384
	ori	$a3, $s0, 2
	xor	$a1, $a1, $a3
	addi.d	$a3, $a6, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a6
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	sub.w	$a6, $a1, $t5
	addi.w	$a3, $a3, -1
	and	$a6, $a3, $a6
	addi.w	$a7, $a1, -1
	and	$a7, $a3, $a7
	ldx.bu	$a7, $a2, $a7
	addi.d	$t8, $t5, 1
	sub.w	$a1, $a1, $t8
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	ldx.bu	$a3, $a2, $a6
	sub.d	$a1, $a7, $a1
	mul.d	$a6, $a3, $s4
	mul.d	$a7, $a1, $s5
	add.d	$a6, $a5, $a6
	add.w	$a6, $a6, $a7
	lu12i.w	$a7, 510261
	ori	$a7, $a7, 1214
	add.d	$a6, $a6, $a7
	srli.d	$a3, $a3, 3
	bstrpick.d	$a1, $a1, 31, 4
	xor	$a1, $a3, $a1
	bstrpick.d	$a3, $a6, 31, 9
	xor	$a1, $a1, $a3
	ld.w	$a3, $t7, 136
	xor	$a1, $a1, $t4
	xor	$a1, $a1, $a6
	xor	$a1, $a1, $fp
	addi.d	$a6, $a3, 1
	st.w	$a6, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a3
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a3
	slli.d	$a3, $a3, 2
	stx.w	$a1, $s8, $a3
	ld.w	$a1, $s1, %pc_lo12(pos)
	ld.w	$a3, $a0, 0
	sub.w	$a6, $a1, $t5
	addi.w	$a3, $a3, -1
	and	$a6, $a3, $a6
	sub.w	$a7, $a1, $t8
	addi.w	$a1, $a1, -1
	and	$a1, $a3, $a1
	and	$a3, $a3, $a7
	ldx.bu	$a6, $a2, $a6
	ldx.bu	$a1, $a2, $a1
	ldx.bu	$a3, $a2, $a3
	add.d	$a1, $a1, $a6
	sub.d	$a1, $a1, $a3
	mul.d	$a3, $a1, $s4
	add.w	$a3, $ra, $a3
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	lu12i.w	$a6, -506577
	ori	$a6, $a6, 538
	add.d	$a3, $a3, $a6
	bstrpick.d	$a6, $a3, 31, 9
	bstrpick.d	$a1, $a1, 31, 3
	xor	$a1, $a1, $a6
	xor	$a1, $a1, $s2
	ld.w	$a6, $t7, 136
	xor	$a1, $a1, $a3
	ori	$a3, $s0, 3
	xor	$a1, $a1, $a3
	addi.d	$a3, $a6, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	add.d	$a1, $a1, $a6
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a1, $a6
	slli.d	$a3, $a6, 2
	stx.w	$a1, $s8, $a3
	srli.d	$a1, $t6, 2
	mul.d	$a1, $a1, $s4
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	srli.d	$a3, $s3, 5
	mul.d	$a3, $a3, $s5
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	add.d	$a1, $a5, $a1
	add.w	$a1, $a1, $a3
	lu12i.w	$a3, -440657
	ori	$a3, $a3, 4
	add.d	$a1, $a1, $a3
	bstrpick.d	$a3, $a1, 31, 9
	xor	$a5, $t6, $t1
	bstrpick.d	$a5, $a5, 31, 5
	xor	$a3, $a5, $a3
	ld.w	$a5, $t7, 136
	xor	$a1, $a3, $a1
	ori	$a3, $a4, 4092
	xor	$a1, $a1, $a3
	addi.d	$a3, $a5, 1
	st.w	$a3, $t7, 136
	mul.d	$a1, $a1, $s6
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	add.d	$a1, $a5, $a1
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s7
	ld.d	$s7, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 56                    # 8-byte Folded Reload
	add.d	$a1, $a1, $a5
	slli.d	$a3, $a5, 2
	stx.w	$a1, $s8, $a3
	ld.d	$s8, $sp, 80                    # 8-byte Folded Reload
	ld.w	$t7, $s1, %pc_lo12(pos)
	ld.w	$a1, $a0, 0
	addi.w	$a3, $t7, -3
	addi.w	$a5, $a1, -1
	and	$a1, $a5, $a3
	ldx.bu	$a3, $a2, $a1
	sub.w	$t8, $t7, $t5
	and	$t4, $a5, $t8
	ldx.bu	$a6, $a2, $t4
	ld.d	$a7, $sp, 48                    # 8-byte Folded Reload
	sub.w	$a7, $t7, $a7
	and	$a7, $a5, $a7
	ldx.bu	$fp, $a2, $a7
	ld.w	$s0, $t2, 0
	add.d	$a3, $a6, $a3
	sub.d	$a3, $a3, $fp
	slli.d	$a3, $a3, 8
	addi.d	$a6, $s0, -256
	and	$a3, $a3, $a6
	st.w	$a3, $t2, 24
	ldx.bu	$a3, $a2, $a1
	ld.d	$a6, $sp, 64                    # 8-byte Folded Reload
	sub.w	$a6, $t7, $a6
	and	$s0, $a5, $a6
	ldx.bu	$a6, $a2, $s0
	ldx.bu	$fp, $a2, $t4
	ld.w	$s2, $ra, 0
	add.d	$a3, $a6, $a3
	sub.d	$a3, $a3, $fp
	slli.d	$a3, $a3, 8
	addi.d	$a6, $s2, -256
	and	$a3, $a3, $a6
	st.w	$a3, $ra, 24
	ldx.bu	$a1, $a2, $a1
	addi.w	$a3, $t7, -6
	and	$a3, $a5, $a3
	ldx.bu	$a3, $a2, $a3
	ld.w	$a6, $s6, 0
	slli.d	$a1, $a1, 9
	slli.d	$a3, $a3, 8
	sub.d	$a1, $a1, $a3
	addi.d	$a3, $a6, -256
	and	$s2, $a1, $a3
	st.w	$s2, $s6, 24
	ldx.bu	$a1, $a2, $t4
	slli.d	$a3, $t5, 1
	sub.w	$a6, $t7, $a3
	and	$a3, $a5, $a6
	ldx.bu	$a3, $a2, $a3
	ld.w	$t5, $s7, 0
	slli.d	$a1, $a1, 9
	slli.d	$a3, $a3, 8
	sub.d	$a1, $a1, $a3
	addi.d	$a3, $t5, -256
	and	$fp, $a1, $a3
	st.w	$fp, $s7, 24
	ldx.bu	$a1, $a2, $a7
	addi.w	$a3, $a6, -6
	and	$a3, $a5, $a3
	ldx.bu	$a3, $a2, $a3
	ld.w	$a7, $s8, 0
	slli.d	$a1, $a1, 9
	slli.d	$a3, $a3, 8
	sub.d	$a1, $a1, $a3
	addi.d	$a3, $a7, -256
	and	$a1, $a1, $a3
	st.w	$a1, $s8, 24
	ldx.bu	$a1, $a2, $s0
	addi.w	$a3, $a6, 6
	and	$a3, $a5, $a3
	ldx.bu	$a3, $a2, $a3
	ld.d	$t1, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a7, $t1, 0
	slli.d	$a1, $a1, 9
	slli.d	$a3, $a3, 8
	sub.d	$a1, $a1, $a3
	addi.d	$a3, $a7, -256
	and	$a1, $a1, $a3
	st.w	$a1, $t1, 24
	ldx.bu	$a1, $a2, $s0
	addi.w	$a3, $t7, -1
	and	$a3, $a5, $a3
	ldx.bu	$a3, $a2, $a3
	addi.w	$a7, $t8, 2
	and	$a7, $a5, $a7
	ldx.bu	$a7, $a2, $a7
	ld.w	$t5, $a4, 0
	add.d	$a1, $a3, $a1
	sub.d	$a1, $a1, $a7
	slli.d	$a1, $a1, 8
	addi.d	$a3, $t5, -256
	and	$a1, $a1, $a3
	st.w	$a1, $a4, 24
	addi.w	$a1, $a6, 3
	and	$a1, $a5, $a1
	ldx.bu	$a3, $a2, $t4
	ldx.bu	$a5, $a2, $s0
	ldx.bu	$a1, $a2, $a1
	ld.w	$a2, $t0, 0
	add.d	$a3, $a5, $a3
	sub.d	$a1, $a3, $a1
	slli.d	$a1, $a1, 8
	addi.d	$a2, $a2, -256
	and	$a1, $a1, $a2
	st.w	$a1, $t0, 24
	srli.d	$a1, $t6, 3
	slli.d	$a2, $s3, 1
	andi	$a2, $a2, 384
	ld.w	$a3, $t3, 0
	or	$a1, $a2, $a1
	lu12i.w	$a2, 524287
	ori	$a2, $a2, 3840
	add.d	$a2, $a3, $a2
	slli.d	$a1, $a1, 8
	and	$a1, $a2, $a1
	st.w	$a1, $t3, 24
.LBB40_31:
	ld.d	$a1, $t2, 32
	pcalau12i	$a2, %pc_hi20(y)
	ld.w	$a0, $a2, %pc_lo12(y)
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	ld.hu	$a3, $a1, 0
	slli.d	$a2, $a0, 16
	addi.d	$t4, $a2, 64
	sub.d	$a2, $t4, $a3
	srli.d	$a6, $a2, 7
	ld.w	$a7, $t2, 24
	pcalau12i	$a2, %pc_hi20(c0)
	ld.w	$a2, $a2, %pc_lo12(c0)
	add.d	$a3, $a3, $a6
	ld.d	$s3, $t2, 16
	st.h	$a3, $a1, 0
	st.d	$t2, $sp, 72                    # 8-byte Folded Spill
	add.w	$t3, $a2, $a7
	slli.d	$a1, $t3, 1
	ldx.hu	$a1, $s3, $a1
	pcalau12i	$a3, %pc_hi20(stretch+16)
	ld.d	$t5, $a3, %pc_lo12(stretch+16)
	srli.d	$a1, $a1, 3
	lu12i.w	$a3, 1
	ori	$t6, $a3, 4094
	and	$a1, $a1, $t6
	ldx.h	$a1, $t5, $a1
	ld.w	$a0, $s5, 96
	ld.d	$a3, $s5, 32
	ld.d	$a6, $ra, 32
	slli.d	$a7, $a0, 1
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	stx.h	$a1, $a3, $a7
	ld.hu	$a1, $a6, 0
	sub.d	$a7, $t4, $a1
	srli.d	$a7, $a7, 7
	ld.w	$t8, $ra, 24
	add.d	$a1, $a1, $a7
	ld.d	$t2, $ra, 16
	st.h	$a1, $a6, 0
	add.w	$s5, $t8, $a2
	slli.d	$a1, $s5, 1
	ldx.hu	$a1, $t2, $a1
	srli.d	$a1, $a1, 3
	and	$a1, $a1, $t6
	ldx.h	$a1, $t5, $a1
	ld.d	$a6, $s6, 32
	alsl.d	$t8, $a0, $a3, 1
	st.h	$a1, $t8, 2
	ld.hu	$a1, $a6, 0
	sub.d	$a3, $t4, $a1
	srli.d	$a3, $a3, 7
	add.d	$a1, $a1, $a3
	move	$a5, $s6
	ld.d	$s6, $s6, 16
	st.h	$a1, $a6, 0
	add.w	$s2, $s2, $a2
	slli.d	$a1, $s2, 1
	ldx.hu	$a1, $s6, $a1
	srli.d	$a1, $a1, 3
	and	$a1, $a1, $t6
	ldx.h	$a1, $t5, $a1
	ld.d	$a3, $s7, 32
	st.h	$a1, $t8, 4
	ld.hu	$a1, $a3, 0
	sub.d	$a6, $t4, $a1
	srli.d	$a6, $a6, 7
	add.d	$a1, $a1, $a6
	move	$s0, $s7
	ld.d	$s7, $s7, 16
	st.h	$a1, $a3, 0
	add.w	$fp, $fp, $a2
	slli.d	$a1, $fp, 1
	ldx.hu	$a1, $s7, $a1
	srli.d	$a1, $a1, 3
	and	$a1, $a1, $t6
	ldx.h	$a1, $t5, $a1
	ld.d	$a3, $s8, 32
	st.h	$a1, $t8, 6
	ld.hu	$a1, $a3, 0
	sub.d	$a6, $t4, $a1
	srli.d	$a6, $a6, 7
	ld.w	$a7, $s8, 24
	add.d	$a1, $a1, $a6
	move	$s1, $s8
	ld.d	$s8, $s8, 16
	st.h	$a1, $a3, 0
	move	$s4, $ra
	add.w	$ra, $a7, $a2
	slli.d	$a1, $ra, 1
	ldx.hu	$a1, $s8, $a1
	srli.d	$a1, $a1, 3
	and	$a1, $a1, $t6
	ldx.h	$a1, $t5, $a1
	ld.d	$a3, $t1, 32
	st.h	$a1, $t8, 8
	ld.hu	$a1, $a3, 0
	sub.d	$a6, $t4, $a1
	srli.d	$a6, $a6, 7
	ld.w	$a7, $t1, 24
	add.d	$a1, $a1, $a6
	ld.d	$a6, $t1, 16
	st.h	$a1, $a3, 0
	add.w	$a7, $a7, $a2
	slli.d	$a1, $a7, 1
	ldx.hu	$a1, $a6, $a1
	srli.d	$a1, $a1, 3
	and	$a1, $a1, $t6
	ldx.h	$a1, $t5, $a1
	ld.d	$a3, $a4, 32
	st.h	$a1, $t8, 10
	ld.hu	$a1, $a3, 0
	move	$t7, $a4
	sub.d	$a4, $t4, $a1
	srli.d	$a4, $a4, 7
	ld.w	$t0, $t7, 24
	add.d	$a4, $a1, $a4
	ld.d	$a1, $t7, 16
	st.h	$a4, $a3, 0
	add.w	$a3, $t0, $a2
	slli.d	$a4, $a3, 1
	ldx.hu	$a4, $a1, $a4
	srli.d	$a4, $a4, 3
	and	$a4, $a4, $t6
	ldx.h	$a4, $t5, $a4
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$t0, $a0, 32
	alsl.d	$s3, $t3, $s3, 1
	st.h	$a4, $t8, 12
	ld.hu	$a4, $t0, 0
	ld.d	$t3, $sp, 72                    # 8-byte Folded Reload
	st.d	$s3, $t3, 32
	alsl.d	$t2, $s5, $t2, 1
	st.d	$t2, $s4, 32
	sub.d	$t2, $t4, $a4
	srli.d	$t2, $t2, 7
	ld.w	$t3, $a0, 24
	add.d	$a4, $a4, $t2
	ld.d	$t2, $a0, 16
	st.h	$a4, $t0, 0
	add.w	$a4, $t3, $a2
	slli.d	$t0, $a4, 1
	ldx.hu	$t0, $t2, $t0
	alsl.d	$t3, $s2, $s6, 1
	st.d	$t3, $a5, 32
	alsl.d	$t3, $fp, $s7, 1
	srli.d	$t0, $t0, 3
	and	$t0, $t0, $t6
	ldx.h	$t0, $t5, $t0
	ld.d	$a5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$fp, $a5, 32
	st.d	$t3, $s0, 32
	alsl.d	$t3, $ra, $s8, 1
	st.h	$t0, $t8, 14
	ld.hu	$t0, $fp, 0
	st.d	$t3, $s1, 32
	alsl.d	$a6, $a7, $a6, 1
	st.d	$a6, $t1, 32
	sub.d	$a6, $t4, $t0
	srli.d	$a6, $a6, 7
	ld.w	$a7, $a5, 24
	add.d	$a6, $t0, $a6
	ld.d	$t0, $a5, 16
	st.h	$a6, $fp, 0
	add.w	$a6, $a7, $a2
	slli.d	$a7, $a6, 1
	ldx.hu	$a7, $t0, $a7
	alsl.d	$a1, $a3, $a1, 1
	st.d	$a1, $t7, 32
	alsl.d	$a1, $a4, $t2, 1
	srli.d	$a3, $a7, 3
	and	$a3, $a3, $t6
	ldx.h	$a3, $t5, $a3
	st.d	$a1, $a0, 32
	alsl.d	$a1, $a6, $t0, 1
	st.d	$a1, $a5, 32
	st.h	$a3, $t8, 16
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE5scm10)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE5scm10)
	ld.d	$a3, $a1, 32
	ld.hu	$a4, $a3, 0
	sub.d	$a6, $t4, $a4
	srli.d	$a6, $a6, 7
	ld.w	$a7, $a1, 24
	add.d	$a4, $a4, $a6
	ld.d	$a6, $a1, 16
	st.h	$a4, $a3, 0
	add.w	$a3, $a7, $a2
	slli.d	$a4, $a3, 1
	ldx.hu	$a4, $a6, $a4
	alsl.d	$a3, $a3, $a6, 1
	srli.d	$a4, $a4, 3
	and	$a4, $a4, $t6
	ldx.h	$a4, $t5, $a4
	st.d	$a3, $a1, 32
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	addi.d	$a0, $a0, 10
	ld.d	$a1, $sp, 144                   # 8-byte Folded Reload
	st.w	$a0, $a1, 96
	st.h	$a4, $t8, 18
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a5, $a0, %pc_lo12(pos)
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $a0, 0
	ld.d	$a3, $sp, 136                   # 8-byte Folded Reload
	ld.w	$a3, $a3, %pc_lo12(bpos)
	ld.d	$a0, $a0, 16
	addi.w	$a5, $a5, -1
	addi.w	$a4, $a4, -1
	and	$a4, $a4, $a5
	ldx.bu	$a4, $a0, $a4
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE2cm)
	ld.d	$a5, $sp, 120                   # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
.LBB40_32:
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB40_33:
	beqz	$a0, .LBB40_26
# %bb.34:
	ori	$a1, $zero, 200
	bne	$a2, $a1, .LBB40_26
# %bb.35:
	ld.w	$a1, $fp, 0
	move	$a3, $zero
	move	$a2, $zero
	move	$a4, $zero
	ld.d	$a6, $fp, 16
	addi.w	$t0, $a5, -196
	addi.w	$a7, $a1, -1
	and	$a1, $a7, $t0
	ldx.bu	$t2, $a6, $a1
	addi.w	$a1, $a5, -195
	and	$a1, $a7, $a1
	ldx.bu	$t3, $a6, $a1
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE1w)
	addi.w	$t0, $a0, 6
	addi.w	$t1, $a5, -12
	st.w	$zero, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
	bge	$t0, $t1, .LBB40_48
# %bb.36:                               # %.lr.ph
	move	$a3, $zero
	move	$t0, $zero
	move	$a2, $zero
	move	$a4, $zero
	slli.d	$t3, $t3, 8
	or	$t2, $t3, $t2
	addi.d	$t2, $t2, 1
	addi.w	$t3, $a0, 17
	ori	$t4, $zero, 1
	b	.LBB40_38
	.p2align	4, , 16
.LBB40_37:                              #   in Loop: Header=BB40_38 Depth=1
	addi.w	$t3, $t3, 12
	addi.w	$t5, $t3, -11
	bge	$t5, $t1, .LBB40_42
.LBB40_38:                              # =>This Inner Loop Header: Depth=1
	addi.w	$t2, $t2, -1
	bge	$t4, $t2, .LBB40_42
# %bb.39:                               #   in Loop: Header=BB40_38 Depth=1
	addi.w	$t5, $t3, -9
	and	$t5, $t5, $a7
	addi.w	$t6, $t3, -8
	and	$t6, $t6, $a7
	ldx.bu	$t6, $a6, $t6
	ldx.bu	$t5, $a6, $t5
	slli.d	$t6, $t6, 8
	or	$t5, $t6, $t5
	addi.d	$t5, $t5, -3
	bltu	$t4, $t5, .LBB40_37
# %bb.40:                               #   in Loop: Header=BB40_38 Depth=1
	addi.w	$t5, $t3, -6
	and	$t5, $t5, $a7
	ldx.bu	$t5, $a6, $t5
	addi.w	$t6, $t3, -7
	and	$t6, $t6, $a7
	ldx.bu	$t6, $a6, $t6
	slli.w	$t5, $t5, 8
	addi.w	$t7, $t3, -5
	and	$t7, $t7, $a7
	ldx.bu	$t7, $a6, $t7
	addi.w	$t8, $t3, -4
	and	$t8, $t8, $a7
	ldx.b	$t8, $a6, $t8
	or	$t5, $t5, $t6
	slli.w	$t6, $t7, 16
	or	$t5, $t5, $t6
	slli.w	$t6, $t8, 24
	or	$t5, $t5, $t6
	bne	$t5, $t4, .LBB40_37
# %bb.41:                               #   in Loop: Header=BB40_38 Depth=1
	addi.w	$t5, $t3, -3
	addi.w	$t6, $t3, -2
	and	$t6, $t6, $a7
	ldx.bu	$t6, $a6, $t6
	and	$t5, $t5, $a7
	ldx.bu	$t5, $a6, $t5
	addi.w	$t7, $t3, -1
	and	$t7, $t7, $a7
	ldx.bu	$t7, $a6, $t7
	addi.w	$t8, $t3, -11
	slli.d	$t6, $t6, 8
	or	$t5, $t6, $t5
	slli.d	$t6, $t7, 16
	or	$t5, $t5, $t6
	and	$t6, $t3, $a7
	ldx.b	$t6, $a6, $t6
	addi.w	$t7, $t3, -10
	and	$t7, $t7, $a7
	ldx.bu	$t7, $a6, $t7
	and	$t8, $t8, $a7
	ldx.bu	$t8, $a6, $t8
	slli.d	$t6, $t6, 24
	or	$t5, $t5, $t6
	slli.d	$t6, $t7, 8
	or	$t6, $t6, $t8
	addi.d	$t7, $t6, -256
	sltui	$t7, $t7, 1
	maskeqz	$t8, $t5, $t7
	masknez	$a2, $a2, $t7
	or	$a2, $t8, $a2
	addi.d	$t7, $t6, -257
	sltui	$t7, $t7, 1
	maskeqz	$t8, $t5, $t7
	masknez	$a4, $a4, $t7
	or	$a4, $t8, $a4
	addi.d	$t7, $t6, -259
	sltui	$t7, $t7, 1
	maskeqz	$t8, $t5, $t7
	masknez	$t0, $t0, $t7
	or	$t0, $t8, $t0
	addi.d	$t6, $t6, -277
	sltui	$t6, $t6, 1
	maskeqz	$t5, $t5, $t6
	masknez	$a3, $a3, $t6
	or	$a3, $t5, $a3
	b	.LBB40_37
.LBB40_42:                              # %.critedge
	addi.w	$a6, $a2, 0
	blez	$a6, .LBB40_48
# %bb.43:                               # %.critedge
	addi.w	$a6, $a4, 0
	blez	$a6, .LBB40_48
# %bb.44:
	mul.w	$a6, $a2, $a4
	ori	$a7, $zero, 51
	bltu	$a6, $a7, .LBB40_48
# %bb.45:
	addi.w	$t0, $t0, 0
	ori	$a7, $zero, 1
	bne	$t0, $a7, .LBB40_48
# %bb.46:
	move	$t0, $a3
	bstrins.d	$t0, $zero, 1, 1
	addi.w	$t0, $t0, 0
	bne	$t0, $a7, .LBB40_48
# %bb.47:
	mul.d	$a6, $a3, $a6
	add.d	$a0, $a6, $a0
	st.w	$a0, $s2, %pc_lo12(_ZZ8bmpModelR5MixerE3eoi)
	mul.d	$a0, $a3, $a2
	st.w	$a0, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
.LBB40_48:                              # %.critedge.thread
	ld.w	$a0, $s2, %pc_lo12(_ZZ8bmpModelR5MixerE3eoi)
	bge	$a5, $a0, .LBB40_50
# %bb.49:
	addi.w	$a1, $a2, 0
	addi.w	$a2, $a4, 0
	addi.w	$a3, $a3, 0
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$a0, $a0, %pc_lo12(.L.str.5)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a5, $s1, %pc_lo12(pos)
	b	.LBB40_26
.LBB40_50:
	st.w	$zero, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE1w)
	b	.LBB40_25
.LBB40_51:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm1)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm1)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_1
# %bb.52:
.Ltmp71:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm1)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp72:                                # EH_LABEL
# %bb.53:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm1)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm1)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm1)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_1
.LBB40_54:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm2)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm2)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_2
# %bb.55:
.Ltmp74:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm2)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp75:                                # EH_LABEL
# %bb.56:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm2)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm2)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm2)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm2)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_2
.LBB40_57:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm3)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm3)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_3
# %bb.58:
.Ltmp77:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm3)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm3)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp78:                                # EH_LABEL
# %bb.59:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm3)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm3)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm3)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm3)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_3
.LBB40_60:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm4)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm4)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_4
# %bb.61:
.Ltmp80:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm4)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm4)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp81:                                # EH_LABEL
# %bb.62:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm4)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm4)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm4)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm4)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_4
.LBB40_63:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm5)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm5)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_5
# %bb.64:
.Ltmp83:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm5)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm5)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp84:                                # EH_LABEL
# %bb.65:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm5)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm5)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm5)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm5)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_5
.LBB40_66:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm6)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm6)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_6
# %bb.67:
.Ltmp86:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm6)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm6)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp87:                                # EH_LABEL
# %bb.68:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm6)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm6)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm6)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm6)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_6
.LBB40_69:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm7)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm7)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_7
# %bb.70:
.Ltmp89:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm7)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm7)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp90:                                # EH_LABEL
# %bb.71:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm7)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm7)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm7)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm7)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_7
.LBB40_72:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm8)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm8)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_8
# %bb.73:
.Ltmp92:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm8)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm8)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp93:                                # EH_LABEL
# %bb.74:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm8)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm8)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm8)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm8)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_8
.LBB40_75:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm9)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm9)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_9
# %bb.76:
.Ltmp95:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE4scm9)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE4scm9)
	lu12i.w	$a1, 64
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp96:                                # EH_LABEL
# %bb.77:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE4scm9)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE4scm9)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE4scm9)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE4scm9)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_9
.LBB40_78:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE5scm10)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE5scm10)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_10
# %bb.79:
.Ltmp98:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE5scm10)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE5scm10)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp99:                                # EH_LABEL
# %bb.80:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE5scm10)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE5scm10)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE5scm10)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE5scm10)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_10
.LBB40_81:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE2cm)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE2cm)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB40_11
# %bb.82:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 64
	sll.w	$a1, $a1, $a0
.Ltmp101:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8bmpModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8bmpModelR5MixerE2cm)
	ori	$a2, $zero, 13
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp102:                               # EH_LABEL
# %bb.83:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8bmpModelR5MixerE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8bmpModelR5MixerE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8bmpModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8bmpModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB40_11
.LBB40_84:
.Ltmp103:                               # EH_LABEL
	b	.LBB40_95
.LBB40_85:
.Ltmp100:                               # EH_LABEL
	b	.LBB40_95
.LBB40_86:
.Ltmp97:                                # EH_LABEL
	b	.LBB40_95
.LBB40_87:
.Ltmp94:                                # EH_LABEL
	b	.LBB40_95
.LBB40_88:
.Ltmp91:                                # EH_LABEL
	b	.LBB40_95
.LBB40_89:
.Ltmp88:                                # EH_LABEL
	b	.LBB40_95
.LBB40_90:
.Ltmp85:                                # EH_LABEL
	b	.LBB40_95
.LBB40_91:
.Ltmp82:                                # EH_LABEL
	b	.LBB40_95
.LBB40_92:
.Ltmp79:                                # EH_LABEL
	b	.LBB40_95
.LBB40_93:
.Ltmp76:                                # EH_LABEL
	b	.LBB40_95
.LBB40_94:
.Ltmp73:                                # EH_LABEL
.LBB40_95:
	move	$fp, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end40:
	.size	_Z8bmpModelR5Mixer, .Lfunc_end40-_Z8bmpModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table40:
.Lexception8:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end8-.Lcst_begin8
.Lcst_begin8:
	.uleb128 .Lfunc_begin8-.Lfunc_begin8    # >> Call Site 1 <<
	.uleb128 .Ltmp71-.Lfunc_begin8          #   Call between .Lfunc_begin8 and .Ltmp71
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp71-.Lfunc_begin8          # >> Call Site 2 <<
	.uleb128 .Ltmp72-.Ltmp71                #   Call between .Ltmp71 and .Ltmp72
	.uleb128 .Ltmp73-.Lfunc_begin8          #     jumps to .Ltmp73
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp72-.Lfunc_begin8          # >> Call Site 3 <<
	.uleb128 .Ltmp74-.Ltmp72                #   Call between .Ltmp72 and .Ltmp74
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp74-.Lfunc_begin8          # >> Call Site 4 <<
	.uleb128 .Ltmp75-.Ltmp74                #   Call between .Ltmp74 and .Ltmp75
	.uleb128 .Ltmp76-.Lfunc_begin8          #     jumps to .Ltmp76
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp75-.Lfunc_begin8          # >> Call Site 5 <<
	.uleb128 .Ltmp77-.Ltmp75                #   Call between .Ltmp75 and .Ltmp77
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp77-.Lfunc_begin8          # >> Call Site 6 <<
	.uleb128 .Ltmp78-.Ltmp77                #   Call between .Ltmp77 and .Ltmp78
	.uleb128 .Ltmp79-.Lfunc_begin8          #     jumps to .Ltmp79
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp78-.Lfunc_begin8          # >> Call Site 7 <<
	.uleb128 .Ltmp80-.Ltmp78                #   Call between .Ltmp78 and .Ltmp80
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp80-.Lfunc_begin8          # >> Call Site 8 <<
	.uleb128 .Ltmp81-.Ltmp80                #   Call between .Ltmp80 and .Ltmp81
	.uleb128 .Ltmp82-.Lfunc_begin8          #     jumps to .Ltmp82
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp81-.Lfunc_begin8          # >> Call Site 9 <<
	.uleb128 .Ltmp83-.Ltmp81                #   Call between .Ltmp81 and .Ltmp83
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp83-.Lfunc_begin8          # >> Call Site 10 <<
	.uleb128 .Ltmp84-.Ltmp83                #   Call between .Ltmp83 and .Ltmp84
	.uleb128 .Ltmp85-.Lfunc_begin8          #     jumps to .Ltmp85
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp84-.Lfunc_begin8          # >> Call Site 11 <<
	.uleb128 .Ltmp86-.Ltmp84                #   Call between .Ltmp84 and .Ltmp86
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp86-.Lfunc_begin8          # >> Call Site 12 <<
	.uleb128 .Ltmp87-.Ltmp86                #   Call between .Ltmp86 and .Ltmp87
	.uleb128 .Ltmp88-.Lfunc_begin8          #     jumps to .Ltmp88
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp87-.Lfunc_begin8          # >> Call Site 13 <<
	.uleb128 .Ltmp89-.Ltmp87                #   Call between .Ltmp87 and .Ltmp89
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp89-.Lfunc_begin8          # >> Call Site 14 <<
	.uleb128 .Ltmp90-.Ltmp89                #   Call between .Ltmp89 and .Ltmp90
	.uleb128 .Ltmp91-.Lfunc_begin8          #     jumps to .Ltmp91
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp90-.Lfunc_begin8          # >> Call Site 15 <<
	.uleb128 .Ltmp92-.Ltmp90                #   Call between .Ltmp90 and .Ltmp92
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp92-.Lfunc_begin8          # >> Call Site 16 <<
	.uleb128 .Ltmp93-.Ltmp92                #   Call between .Ltmp92 and .Ltmp93
	.uleb128 .Ltmp94-.Lfunc_begin8          #     jumps to .Ltmp94
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp93-.Lfunc_begin8          # >> Call Site 17 <<
	.uleb128 .Ltmp95-.Ltmp93                #   Call between .Ltmp93 and .Ltmp95
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp95-.Lfunc_begin8          # >> Call Site 18 <<
	.uleb128 .Ltmp96-.Ltmp95                #   Call between .Ltmp95 and .Ltmp96
	.uleb128 .Ltmp97-.Lfunc_begin8          #     jumps to .Ltmp97
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp96-.Lfunc_begin8          # >> Call Site 19 <<
	.uleb128 .Ltmp98-.Ltmp96                #   Call between .Ltmp96 and .Ltmp98
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp98-.Lfunc_begin8          # >> Call Site 20 <<
	.uleb128 .Ltmp99-.Ltmp98                #   Call between .Ltmp98 and .Ltmp99
	.uleb128 .Ltmp100-.Lfunc_begin8         #     jumps to .Ltmp100
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp99-.Lfunc_begin8          # >> Call Site 21 <<
	.uleb128 .Ltmp101-.Ltmp99               #   Call between .Ltmp99 and .Ltmp101
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp101-.Lfunc_begin8         # >> Call Site 22 <<
	.uleb128 .Ltmp102-.Ltmp101              #   Call between .Ltmp101 and .Ltmp102
	.uleb128 .Ltmp103-.Lfunc_begin8         #     jumps to .Ltmp103
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp102-.Lfunc_begin8         # >> Call Site 23 <<
	.uleb128 .Lfunc_end40-.Ltmp102          #   Call between .Ltmp102 and .Lfunc_end40
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end8:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z2i4i,"axG",@progbits,_Z2i4i,comdat
	.weak	_Z2i4i                          # -- Begin function _Z2i4i
	.p2align	5
	.type	_Z2i4i,@function
_Z2i4i:                                 # @_Z2i4i
	.cfi_startproc
# %bb.0:
	pcalau12i	$a1, %pc_hi20(pos)
	ld.w	$a1, $a1, %pc_lo12(pos)
	sub.w	$a0, $a1, $a0
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a1, $a1, %pc_lo12(buf)
	ld.w	$a2, $a1, 0
	addi.w	$a2, $a2, -1
	ld.d	$a1, $a1, 16
	and	$a3, $a2, $a0
	addi.w	$a4, $a0, 1
	and	$a4, $a2, $a4
	ldx.bu	$a4, $a1, $a4
	addi.w	$a5, $a0, 2
	and	$a5, $a2, $a5
	addi.w	$a0, $a0, 3
	and	$a0, $a2, $a0
	ldx.bu	$a2, $a1, $a3
	ldx.bu	$a3, $a1, $a5
	slli.w	$a4, $a4, 8
	ldx.b	$a0, $a1, $a0
	or	$a1, $a4, $a2
	slli.w	$a2, $a3, 16
	or	$a1, $a1, $a2
	slli.w	$a0, $a0, 24
	or	$a0, $a1, $a0
	ret
.Lfunc_end41:
	.size	_Z2i4i, .Lfunc_end41-_Z2i4i
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z9model8bitR5Mixeri            # -- Begin function _Z9model8bitR5Mixeri
	.p2align	5
	.type	_Z9model8bitR5Mixeri,@function
_Z9model8bitR5Mixeri:                   # @_Z9model8bitR5Mixeri
.Lfunc_begin9:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception9
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a2, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm1)
	ld.b	$a2, $a2, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm1)
	move	$s0, $a1
	move	$s8, $a0
	dbar	20
	beqz	$a2, .LBB42_12
.LBB42_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm2)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm2)
	dbar	20
	beqz	$a0, .LBB42_15
.LBB42_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm3)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm3)
	dbar	20
	beqz	$a0, .LBB42_18
.LBB42_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm4)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm4)
	dbar	20
	beqz	$a0, .LBB42_21
.LBB42_4:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm5)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm5)
	dbar	20
	beqz	$a0, .LBB42_24
.LBB42_5:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm6)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm6)
	dbar	20
	beqz	$a0, .LBB42_27
.LBB42_6:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm7)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm7)
	dbar	20
	beqz	$a0, .LBB42_30
.LBB42_7:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE2cm)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE2cm)
	dbar	20
	beqz	$a0, .LBB42_33
.LBB42_8:
	pcalau12i	$a0, %pc_hi20(bpos)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.w	$a0, $a0, %pc_lo12(bpos)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm1)
	addi.d	$t2, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm1)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm2)
	addi.d	$t0, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm2)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm3)
	addi.d	$t1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm3)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm4)
	addi.d	$s5, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm4)
	pcalau12i	$a3, %pc_hi20(pos)
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a1, $a1, %pc_lo12(buf)
	pcalau12i	$a2, %pc_hi20(_ZZ9model8bitR5MixeriE4scm5)
	addi.d	$a6, $a2, %pc_lo12(_ZZ9model8bitR5MixeriE4scm5)
	pcalau12i	$a2, %pc_hi20(_ZZ9model8bitR5MixeriE4scm6)
	addi.d	$a7, $a2, %pc_lo12(_ZZ9model8bitR5MixeriE4scm6)
	beqz	$a0, .LBB42_10
# %bb.9:                                # %._crit_edge
	ld.w	$t6, $t2, 24
	ld.w	$s1, $t0, 24
	ld.w	$s0, $t1, 24
	ld.w	$t7, $s5, 24
	b	.LBB42_11
.LBB42_10:
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE2cm)
	addi.d	$t6, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE2cm)
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	ld.d	$a2, $a1, 16
	addi.w	$t3, $a0, -1
	addi.w	$a5, $a5, -1
	and	$t3, $a5, $t3
	ldx.bu	$t4, $a2, $t3
	addi.d	$t3, $s0, -1
	sub.w	$t5, $a0, $t3
	and	$t5, $a5, $t5
	ldx.bu	$t7, $a2, $t5
	sub.w	$t5, $a0, $s0
	and	$t5, $a5, $t5
	ldx.bu	$t8, $a2, $t5
	addi.d	$t5, $s0, 1
	sub.w	$a0, $a0, $t5
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a5, $t7, $t4
	add.d	$a5, $a5, $t8
	add.d	$a4, $a5, $a0
	st.d	$a4, $sp, 24                    # 8-byte Folded Spill
	mul.d	$a5, $t4, $t4
	mul.d	$t7, $t7, $t7
	add.d	$a5, $t7, $a5
	mul.d	$t7, $t8, $t8
	add.d	$a5, $a5, $t7
	mul.d	$a0, $a0, $a0
	add.d	$a0, $a5, $a0
	mul.d	$a5, $a4, $a4
	pcalau12i	$t7, %pc_hi20(ilog+16)
	ld.d	$t7, $t7, %pc_lo12(ilog+16)
	srli.d	$a5, $a5, 2
	sub.d	$a0, $a0, $a5
	bstrpick.d	$a0, $a0, 17, 2
	ldx.b	$a0, $t7, $a0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	srli.d	$a0, $t4, 2
	srli.d	$a5, $t8, 2
	lu12i.w	$t7, 7325
	ori	$t7, $t7, 2291
	mul.d	$a0, $a0, $t7
	lu12i.w	$s1, 12208
	ori	$s4, $s1, 271
	mul.d	$a5, $a5, $s4
	add.w	$a0, $a0, $a5
	lu12i.w	$a5, 4881
	ori	$a5, $a5, 3097
	add.d	$a0, $a0, $a5
	bstrpick.d	$a5, $a0, 31, 9
	srli.d	$t4, $t4, 5
	srli.d	$t8, $t8, 6
	xor	$t4, $t8, $t4
	lu12i.w	$fp, 16384
	ld.w	$t8, $t6, 136
	or	$t4, $t4, $fp
	xor	$a5, $t4, $a5
	xor	$a0, $a5, $a0
	addi.d	$a5, $t8, 1
	st.w	$a5, $t6, 136
	lu12i.w	$a5, 241126
	ori	$s1, $a5, 2227
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $t8
	rotri.w	$a0, $a0, 16
	lu12i.w	$a5, 30140
	ori	$s2, $a5, 3351
	ld.d	$s3, $t6, 96
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $t8
	slli.d	$a5, $t8, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	addi.w	$t4, $a0, -1
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	addi.w	$a0, $a0, -2
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	srli.d	$a5, $t4, 2
	srli.d	$t8, $a0, 2
	mul.d	$a5, $a5, $t7
	mul.d	$t8, $t8, $s4
	add.w	$a5, $a5, $t8
	lu12i.w	$t8, 53710
	ori	$t8, $t8, 2492
	add.d	$a5, $a5, $t8
	bstrpick.d	$t8, $a5, 31, 9
	srli.d	$t4, $t4, 5
	srli.d	$a0, $a0, 6
	xor	$a0, $a0, $t4
	ld.w	$t4, $t6, 136
	or	$a0, $a0, $fp
	xor	$a0, $t8, $a0
	xor	$a0, $a0, $a5
	addi.d	$a5, $t4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $t4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $t4
	slli.d	$a5, $t4, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	sub.w	$t4, $a0, $s0
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	slli.d	$t8, $s0, 1
	sub.w	$a0, $a0, $t8
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	srli.d	$a5, $t4, 2
	srli.d	$s7, $a0, 2
	mul.d	$a5, $a5, $t7
	mul.d	$s7, $s7, $s4
	add.w	$a5, $a5, $s7
	lu12i.w	$s7, 102539
	ori	$s7, $s7, 1887
	add.d	$a5, $a5, $s7
	bstrpick.d	$s7, $a5, 31, 9
	srli.d	$t4, $t4, 5
	srli.d	$a0, $a0, 6
	xor	$a0, $a0, $t4
	ld.w	$t4, $t6, 136
	or	$a0, $a0, $fp
	xor	$a0, $s7, $a0
	xor	$a0, $a0, $a5
	addi.d	$a5, $t4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $t4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $t4
	slli.d	$a5, $t4, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	addi.w	$t4, $a0, -1
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$a0, $a0, $t3
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	srli.d	$a5, $t4, 2
	srli.d	$s7, $a0, 2
	mul.d	$a5, $a5, $t7
	mul.d	$s7, $s7, $s4
	add.w	$a5, $a5, $s7
	lu12i.w	$s7, 151368
	ori	$s7, $s7, 1282
	add.d	$a5, $a5, $s7
	bstrpick.d	$s7, $a5, 31, 9
	srli.d	$t4, $t4, 5
	srli.d	$a0, $a0, 6
	xor	$a0, $t4, $a0
	xor	$a0, $a0, $s7
	ld.w	$t4, $t6, 136
	xor	$a5, $a0, $a5
	ori	$a0, $fp, 1
	xor	$a5, $a5, $a0
	addi.d	$s7, $t4, 1
	st.w	$s7, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $t4
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $t4
	slli.d	$t4, $t4, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	sub.w	$s7, $a5, $s0
	addi.w	$t4, $t4, -1
	and	$s7, $t4, $s7
	ldx.bu	$s7, $a2, $s7
	sub.w	$a5, $a5, $t5
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	srli.d	$t4, $s7, 2
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	srli.d	$s8, $a5, 2
	mul.d	$t4, $t4, $t7
	mul.d	$s8, $s8, $s4
	add.w	$t4, $t4, $s8
	lu12i.w	$s8, 200197
	ori	$s8, $s8, 677
	add.d	$t4, $t4, $s8
	bstrpick.d	$s8, $t4, 31, 9
	srli.d	$s7, $s7, 5
	srli.d	$a5, $a5, 6
	xor	$a5, $s7, $a5
	ld.w	$s7, $t6, 136
	xor	$a5, $a5, $s8
	xor	$a5, $a5, $t4
	xor	$a5, $a5, $a0
	addi.d	$t4, $s7, 1
	st.w	$t4, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $s7
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $s7
	slli.d	$t4, $s7, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	sub.w	$s7, $a5, $t5
	addi.w	$t4, $t4, -1
	and	$s7, $t4, $s7
	ldx.bu	$s7, $a2, $s7
	addi.d	$ra, $s0, 2
	sub.w	$a5, $a5, $ra
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	srli.d	$t4, $s7, 2
	srli.d	$s8, $a5, 2
	mul.d	$t4, $t4, $t7
	mul.d	$s8, $s8, $s4
	add.w	$t4, $t4, $s8
	lu12i.w	$s8, 249026
	ori	$s8, $s8, 72
	add.d	$t4, $t4, $s8
	bstrpick.d	$s8, $t4, 31, 9
	srli.d	$s7, $s7, 5
	srli.d	$a5, $a5, 6
	xor	$a5, $s7, $a5
	ld.w	$s7, $t6, 136
	xor	$a5, $a5, $s8
	xor	$a5, $a5, $t4
	xor	$a5, $a5, $a0
	addi.d	$t4, $s7, 1
	st.w	$t4, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $s7
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $s7
	slli.d	$t4, $s7, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	sub.w	$s7, $a5, $t5
	addi.w	$t4, $t4, -1
	and	$s7, $t4, $s7
	ldx.bu	$s8, $a2, $s7
	addi.d	$s7, $t8, 2
	sub.w	$a5, $a5, $s7
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	srli.d	$t4, $s8, 2
	srli.d	$s6, $a5, 2
	mul.d	$t4, $t4, $t7
	mul.d	$s6, $s6, $s4
	add.w	$t4, $t4, $s6
	lu12i.w	$s6, 297854
	ori	$s6, $s6, 3563
	add.d	$t4, $t4, $s6
	bstrpick.d	$s6, $t4, 31, 9
	srli.d	$s8, $s8, 5
	srli.d	$a5, $a5, 6
	xor	$a5, $s8, $a5
	ld.w	$s8, $t6, 136
	xor	$a5, $a5, $s6
	xor	$a5, $a5, $t4
	xor	$a0, $a5, $a0
	addi.d	$a5, $s8, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $s8
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $s8
	slli.d	$a5, $s8, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	sub.w	$t4, $a0, $t3
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	addi.d	$s8, $t8, -2
	sub.w	$a0, $a0, $s8
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	srli.d	$a5, $t4, 2
	srli.d	$s6, $a0, 2
	mul.d	$a5, $a5, $t7
	mul.d	$s6, $s6, $s4
	add.w	$a5, $a5, $s6
	lu12i.w	$s6, 346683
	ori	$s6, $s6, 2958
	add.d	$a5, $a5, $s6
	bstrpick.d	$s6, $a5, 31, 9
	srli.d	$t4, $t4, 5
	srli.d	$a0, $a0, 6
	xor	$a0, $t4, $a0
	xor	$a0, $a0, $s6
	ld.w	$t4, $t6, 136
	xor	$a0, $a0, $a5
	ori	$a5, $fp, 2
	xor	$a0, $a0, $a5
	addi.d	$a5, $t4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $t4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $t4
	slli.d	$a5, $t4, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	addi.w	$t4, $a0, -1
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$a0, $a0, $s0
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a0, $a0, $t4
	srli.d	$a5, $a0, 1
	mul.d	$a5, $a5, $t7
	lu12i.w	$t4, 383304
	ori	$t4, $t4, 2082
	add.d	$a5, $a5, $t4
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a0, $a0, 4
	xor	$a0, $a0, $t4
	xor	$t4, $a0, $a5
	ld.w	$s6, $t6, 136
	lu12i.w	$a4, 49151
	ori	$a0, $a4, 4093
	xor	$t4, $t4, $a0
	addi.d	$a5, $s6, 1
	st.w	$a5, $t6, 136
	mul.d	$a5, $t4, $s1
	add.d	$a5, $a5, $s6
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $s6
	slli.d	$t4, $s6, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	addi.w	$s6, $a5, -1
	addi.w	$t4, $t4, -1
	and	$s6, $t4, $s6
	ldx.bu	$s6, $a2, $s6
	addi.w	$a5, $a5, -2
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	add.d	$a5, $a5, $s6
	srli.d	$t4, $a5, 1
	mul.d	$t4, $t4, $t7
	lu12i.w	$s6, 432133
	ori	$s6, $s6, 1477
	add.d	$t4, $t4, $s6
	bstrpick.d	$s6, $t4, 31, 9
	srli.d	$a5, $a5, 4
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	ld.w	$s5, $t6, 136
	xor	$a5, $a5, $s6
	xor	$a5, $a5, $t4
	xor	$a5, $a5, $a0
	addi.d	$t4, $s5, 1
	st.w	$t4, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $s5
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $s5
	slli.d	$t4, $s5, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	sub.w	$s5, $a5, $s0
	addi.w	$t4, $t4, -1
	and	$s5, $t4, $s5
	ldx.bu	$s5, $a2, $s5
	sub.w	$a5, $a5, $t8
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	add.d	$a5, $a5, $s5
	srli.d	$t4, $a5, 1
	mul.d	$t4, $t4, $t7
	lu12i.w	$s5, 480962
	ori	$s5, $s5, 872
	add.d	$t4, $t4, $s5
	bstrpick.d	$s5, $t4, 31, 9
	srli.d	$a5, $a5, 4
	ld.w	$s6, $t6, 136
	xor	$a5, $a5, $s5
	xor	$a5, $a5, $t4
	xor	$a0, $a5, $a0
	addi.d	$a5, $s6, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $s6
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $s6
	slli.d	$a5, $s6, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	addi.w	$t4, $a0, -1
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$a0, $a0, $t3
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a0, $a0, $t4
	srli.d	$a5, $a0, 1
	mul.d	$a5, $a5, $t7
	lu12i.w	$t4, -518785
	ori	$t4, $t4, 267
	add.d	$a5, $a5, $t4
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a0, $a0, 4
	xor	$a0, $a0, $t4
	ld.w	$t4, $t6, 136
	xor	$a5, $a0, $a5
	ori	$a0, $a4, 4092
	xor	$a5, $a5, $a0
	addi.d	$s5, $t4, 1
	st.w	$s5, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $t4
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $t4
	slli.d	$t4, $t4, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	sub.w	$s5, $a5, $s0
	addi.w	$t4, $t4, -1
	and	$s5, $t4, $s5
	ldx.bu	$s5, $a2, $s5
	sub.w	$a5, $a5, $t5
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	add.d	$a5, $a5, $s5
	srli.d	$t4, $a5, 1
	mul.d	$t4, $t4, $t7
	lu12i.w	$s5, -469957
	ori	$s5, $s5, 3758
	add.d	$t4, $t4, $s5
	bstrpick.d	$s5, $t4, 31, 9
	srli.d	$a5, $a5, 4
	ld.w	$s6, $t6, 136
	xor	$a5, $a5, $s5
	xor	$a5, $a5, $t4
	xor	$a5, $a5, $a0
	addi.d	$t4, $s6, 1
	st.w	$t4, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $s6
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $s6
	slli.d	$t4, $s6, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	sub.w	$s5, $a5, $t5
	addi.w	$t4, $t4, -1
	and	$s5, $t4, $s5
	ldx.bu	$s5, $a2, $s5
	sub.w	$a5, $a5, $ra
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	add.d	$a5, $a5, $s5
	srli.d	$t4, $a5, 1
	mul.d	$t4, $t4, $t7
	lu12i.w	$s5, -421128
	ori	$s5, $s5, 3153
	add.d	$t4, $t4, $s5
	bstrpick.d	$s5, $t4, 31, 9
	srli.d	$a5, $a5, 4
	ld.w	$s6, $t6, 136
	xor	$a5, $a5, $s5
	xor	$a5, $a5, $t4
	xor	$a5, $a5, $a0
	addi.d	$t4, $s6, 1
	st.w	$t4, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $s6
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $s6
	slli.d	$t4, $s6, 2
	stx.w	$a5, $s3, $t4
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$t4, $a1, 0
	sub.w	$s5, $a5, $t5
	addi.w	$t4, $t4, -1
	and	$s5, $t4, $s5
	ldx.bu	$s5, $a2, $s5
	sub.w	$a5, $a5, $s7
	and	$a5, $t4, $a5
	ldx.bu	$a5, $a2, $a5
	add.d	$a5, $a5, $s5
	srli.d	$t4, $a5, 1
	mul.d	$t4, $t4, $t7
	lu12i.w	$s5, -372299
	ori	$s5, $s5, 2548
	add.d	$t4, $t4, $s5
	bstrpick.d	$s5, $t4, 31, 9
	srli.d	$a5, $a5, 4
	ld.w	$s6, $t6, 136
	xor	$a5, $a5, $s5
	xor	$a5, $a5, $t4
	xor	$a0, $a5, $a0
	addi.d	$a5, $s6, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $s6
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $s6
	slli.d	$a5, $s6, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	sub.w	$t4, $a0, $t3
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$a0, $a0, $s8
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a0, $a0, $t4
	srli.d	$a5, $a0, 1
	mul.d	$a5, $a5, $t7
	lu12i.w	$t4, -323470
	ori	$t4, $t4, 1943
	add.d	$a5, $a5, $t4
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a0, $a0, 4
	xor	$a0, $a0, $t4
	ld.w	$t4, $t6, 136
	xor	$a0, $a0, $a5
	ori	$a5, $a4, 4091
	xor	$a0, $a0, $a5
	addi.d	$a5, $t4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $t4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $t4
	slli.d	$a5, $t4, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	sub.w	$t4, $a0, $s0
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	addi.w	$s5, $a0, -1
	and	$s5, $a5, $s5
	ldx.bu	$s5, $a2, $s5
	sub.w	$a0, $a0, $t3
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	srli.d	$a5, $t4, 2
	srli.d	$s6, $s5, 2
	srli.d	$fp, $a0, 2
	mul.d	$a5, $a5, $t7
	mul.d	$s6, $s6, $s4
	lu12i.w	$ra, 17091
	ori	$ra, $ra, 71
	mul.d	$fp, $fp, $ra
	add.d	$a5, $a5, $s6
	add.w	$a5, $a5, $fp
	lu12i.w	$fp, -245342
	ori	$fp, $fp, 1680
	add.d	$a5, $a5, $fp
	bstrpick.d	$fp, $a5, 31, 9
	srli.d	$t4, $t4, 5
	srli.d	$s5, $s5, 6
	srli.d	$a0, $a0, 7
	xor	$t4, $t4, $s5
	xor	$a0, $t4, $a0
	xor	$a0, $a0, $fp
	xor	$a5, $a0, $a5
	ld.w	$fp, $t6, 136
	lu12i.w	$a0, 16383
	ori	$t4, $a0, 4091
	xor	$a5, $a5, $t4
	addi.d	$s5, $fp, 1
	st.w	$s5, $t6, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a5, $fp
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $fp
	slli.d	$fp, $fp, 2
	stx.w	$a5, $s3, $fp
	ld.w	$a5, $a3, %pc_lo12(pos)
	ld.w	$fp, $a1, 0
	sub.w	$s5, $a5, $t3
	addi.w	$fp, $fp, -1
	and	$s5, $fp, $s5
	ldx.bu	$s5, $a2, $s5
	sub.w	$s6, $a5, $s0
	and	$s6, $fp, $s6
	ldx.bu	$s6, $a2, $s6
	srli.d	$a4, $s5, 2
	sub.w	$a5, $a5, $t5
	and	$a5, $fp, $a5
	srli.d	$fp, $s6, 2
	ldx.bu	$a5, $a2, $a5
	mul.d	$a4, $a4, $t7
	mul.d	$fp, $fp, $s4
	add.d	$a4, $a4, $fp
	srli.d	$fp, $a5, 2
	mul.d	$fp, $fp, $ra
	add.w	$a4, $a4, $fp
	lu12i.w	$fp, -196513
	ori	$fp, $fp, 1075
	add.d	$a4, $a4, $fp
	bstrpick.d	$fp, $a4, 31, 9
	srli.d	$s5, $s5, 5
	srli.d	$s6, $s6, 6
	srli.d	$a5, $a5, 7
	xor	$s5, $s5, $s6
	xor	$a5, $s5, $a5
	ld.w	$s5, $t6, 136
	xor	$a5, $a5, $fp
	xor	$a4, $a5, $a4
	xor	$a4, $a4, $t4
	addi.d	$a5, $s5, 1
	st.w	$a5, $t6, 136
	mul.d	$a4, $a4, $s1
	add.d	$a4, $a4, $s5
	rotri.w	$a4, $a4, 16
	mul.d	$a4, $a4, $s2
	add.d	$a4, $a4, $s5
	slli.d	$a5, $s5, 2
	stx.w	$a4, $s3, $a5
	ld.w	$a4, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	addi.w	$fp, $a4, -1
	addi.w	$a5, $a5, -1
	and	$fp, $a5, $fp
	ldx.bu	$fp, $a2, $fp
	srli.d	$s5, $fp, 2
	sub.w	$s6, $a4, $t3
	and	$s6, $a5, $s6
	ldx.bu	$s6, $a2, $s6
	sub.d	$a4, $a4, $t8
	addi.w	$a4, $a4, 1
	and	$a4, $a5, $a4
	srli.d	$a5, $s6, 2
	ldx.bu	$a4, $a2, $a4
	mul.d	$s5, $s5, $t7
	mul.d	$a5, $a5, $s4
	add.d	$a5, $s5, $a5
	srli.d	$s5, $a4, 2
	mul.d	$s5, $s5, $ra
	add.w	$a5, $a5, $s5
	lu12i.w	$s5, -147684
	ori	$s5, $s5, 470
	add.d	$a5, $a5, $s5
	bstrpick.d	$s5, $a5, 31, 9
	srli.d	$fp, $fp, 5
	srli.d	$s6, $s6, 6
	srli.d	$a4, $a4, 7
	xor	$fp, $fp, $s6
	xor	$a4, $fp, $a4
	ld.w	$fp, $t6, 136
	xor	$a4, $a4, $s5
	xor	$a4, $a4, $a5
	xor	$a4, $a4, $t4
	addi.d	$a5, $fp, 1
	st.w	$a5, $t6, 136
	mul.d	$a4, $a4, $s1
	add.d	$a4, $a4, $fp
	rotri.w	$a4, $a4, 16
	mul.d	$a4, $a4, $s2
	add.d	$a4, $a4, $fp
	slli.d	$a5, $fp, 2
	stx.w	$a4, $s3, $a5
	ld.w	$a4, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	addi.w	$t4, $a4, -3
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$fp, $a4, $s0
	and	$fp, $a5, $fp
	ldx.bu	$fp, $a2, $fp
	addi.w	$s5, $a4, -1
	and	$s5, $a5, $s5
	ldx.bu	$s5, $a2, $s5
	addi.w	$a4, $a4, -2
	and	$a4, $a5, $a4
	ldx.bu	$a4, $a2, $a4
	add.d	$a5, $fp, $t4
	srli.d	$t4, $a5, 1
	srli.d	$fp, $s5, 2
	srli.d	$s5, $a4, 2
	mul.d	$t4, $t4, $t7
	mul.d	$s6, $fp, $s4
	mul.d	$s5, $s5, $ra
	add.d	$t4, $t4, $s6
	add.w	$t4, $t4, $s5
	lu12i.w	$s5, -98856
	ori	$s5, $s5, 3961
	add.d	$t4, $t4, $s5
	bstrpick.d	$s5, $t4, 31, 9
	srli.d	$a4, $a4, 7
	xor	$a5, $a5, $fp
	srli.d	$a5, $a5, 4
	ori	$a0, $a0, 4090
	or	$a4, $a4, $a0
	ld.w	$fp, $t6, 136
	xor	$a4, $a4, $a5
	xor	$a4, $a4, $s5
	xor	$a4, $a4, $t4
	addi.d	$a5, $fp, 1
	st.w	$a5, $t6, 136
	mul.d	$a4, $a4, $s1
	add.d	$a4, $a4, $fp
	rotri.w	$a4, $a4, 16
	mul.d	$a4, $a4, $s2
	add.d	$a4, $a4, $fp
	slli.d	$a5, $fp, 2
	stx.w	$a4, $s3, $a5
	ld.w	$a4, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	addi.w	$t4, $a4, -2
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	addi.w	$fp, $a4, -1
	and	$fp, $a5, $fp
	ldx.bu	$fp, $a2, $fp
	sub.w	$s5, $a4, $s0
	and	$s5, $a5, $s5
	ldx.bu	$s5, $a2, $s5
	sub.w	$s6, $a4, $t8
	and	$s6, $a5, $s6
	ldx.bu	$s6, $a2, $s6
	add.d	$t4, $fp, $t4
	add.d	$fp, $s6, $s5
	srli.d	$s5, $t4, 1
	sub.w	$a4, $a4, $t3
	and	$a4, $a5, $a4
	srli.d	$a5, $fp, 1
	ldx.bu	$a4, $a2, $a4
	mul.d	$s5, $s5, $t7
	mul.d	$a5, $a5, $s4
	add.d	$a5, $s5, $a5
	srli.d	$a4, $a4, 2
	mul.d	$s5, $a4, $ra
	add.w	$a5, $a5, $s5
	lu12i.w	$s5, -50027
	ori	$s5, $s5, 3356
	add.d	$a5, $a5, $s5
	bstrpick.d	$s5, $a5, 31, 9
	srli.d	$t4, $t4, 4
	xor	$a4, $fp, $a4
	srli.d	$a4, $a4, 5
	xor	$a4, $t4, $a4
	ld.w	$t4, $t6, 136
	xor	$a4, $a4, $s5
	xor	$a4, $a4, $a5
	xor	$a0, $a4, $a0
	addi.d	$a4, $t4, 1
	st.w	$a4, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $t4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $t4
	slli.d	$a4, $t4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$a5, $a0, -2
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	addi.w	$t4, $a0, -1
	and	$t4, $a4, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$fp, $a0, $t3
	and	$fp, $a4, $fp
	ldx.bu	$fp, $a2, $fp
	sub.w	$a0, $a0, $s0
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a4, $t4, $a5
	srli.d	$a5, $a4, 2
	add.d	$a0, $a0, $fp
	srli.d	$t4, $a0, 2
	mul.d	$a5, $a5, $t7
	mul.d	$t4, $t4, $s4
	add.w	$a5, $a5, $t4
	addu16i.d	$a5, $a5, -1143
	addi.d	$a5, $a5, -1416
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a4, $a4, 5
	srli.d	$a0, $a0, 6
	xor	$a0, $a4, $a0
	xor	$a0, $a0, $t4
	ld.w	$a4, $t6, 136
	xor	$a0, $a0, $a5
	lu12i.w	$s6, 16384
	ori	$a5, $s6, 5
	xor	$a0, $a0, $a5
	addi.d	$t4, $a4, 1
	st.w	$t4, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$t4, $a0, -2
	addi.w	$a4, $a4, -1
	and	$t4, $a4, $t4
	addi.w	$fp, $a0, -1
	and	$fp, $a4, $fp
	sub.w	$s5, $a0, $s0
	and	$s5, $a4, $s5
	sub.w	$a0, $a0, $t8
	and	$a0, $a4, $a0
	ldx.bu	$a4, $a2, $t4
	ldx.bu	$t4, $a2, $fp
	ldx.bu	$fp, $a2, $s5
	ldx.bu	$a0, $a2, $a0
	add.d	$a4, $t4, $a4
	srli.d	$t4, $a4, 1
	add.d	$a0, $a0, $fp
	srli.d	$fp, $a0, 1
	mul.d	$t4, $t4, $t7
	mul.d	$fp, $fp, $s4
	add.w	$t4, $t4, $fp
	lu12i.w	$fp, 30540
	ori	$fp, $fp, 2075
	add.d	$t4, $t4, $fp
	bstrpick.d	$fp, $t4, 31, 9
	srli.d	$a4, $a4, 4
	srli.d	$a0, $a0, 5
	xor	$a0, $a4, $a0
	ld.w	$a4, $t6, 136
	xor	$a0, $a0, $fp
	xor	$a0, $a0, $t4
	xor	$a0, $a0, $a5
	addi.d	$a5, $a4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$a5, $a0, -2
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	addi.w	$t4, $a0, -1
	and	$t4, $a4, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$fp, $a0, $t3
	and	$fp, $a4, $fp
	ldx.bu	$fp, $a2, $fp
	sub.w	$a0, $a0, $s8
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a4, $t4, $a5
	srli.d	$a5, $a4, 1
	add.d	$a0, $a0, $fp
	srli.d	$t4, $a0, 1
	mul.d	$a5, $a5, $t7
	mul.d	$t4, $t4, $s4
	add.w	$a5, $a5, $t4
	lu12i.w	$t4, 79369
	ori	$t4, $t4, 1470
	add.d	$a5, $a5, $t4
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a4, $a4, 4
	srli.d	$a0, $a0, 5
	xor	$a0, $a4, $a0
	xor	$a0, $a0, $t4
	ld.w	$a4, $t6, 136
	xor	$a0, $a0, $a5
	ori	$s8, $s6, 6
	xor	$a0, $a0, $s8
	addi.d	$a5, $a4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$a5, $a0, -2
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	addi.w	$t4, $a0, -1
	and	$t4, $a4, $t4
	sub.w	$fp, $a0, $t5
	and	$fp, $a4, $fp
	sub.w	$a0, $a0, $s7
	and	$a0, $a4, $a0
	ldx.bu	$a4, $a2, $a5
	ldx.bu	$a5, $a2, $t4
	ldx.bu	$t4, $a2, $fp
	ldx.bu	$a0, $a2, $a0
	add.d	$a4, $a5, $a4
	srli.d	$a5, $a4, 1
	add.d	$a0, $a0, $t4
	srli.d	$t4, $a0, 1
	mul.d	$a5, $a5, $t7
	mul.d	$t4, $t4, $s4
	add.w	$a5, $a5, $t4
	lu12i.w	$t4, 128198
	ori	$t4, $t4, 865
	add.d	$a5, $a5, $t4
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a4, $a4, 4
	srli.d	$a0, $a0, 5
	xor	$a0, $a4, $a0
	ld.w	$a4, $t6, 136
	xor	$a0, $a0, $t4
	xor	$a0, $a0, $a5
	xor	$a0, $a0, $s8
	addi.d	$a5, $a4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	sub.w	$a5, $a0, $s0
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	sub.w	$t4, $a0, $t8
	and	$t4, $a4, $t4
	sub.w	$fp, $a0, $s7
	sub.w	$a0, $a0, $t3
	and	$a0, $a4, $a0
	and	$a4, $a4, $fp
	ldx.bu	$a5, $a2, $a5
	ldx.bu	$t4, $a2, $t4
	ldx.bu	$a0, $a2, $a0
	ldx.bu	$a4, $a2, $a4
	add.d	$a5, $t4, $a5
	srli.d	$t4, $a5, 1
	add.d	$a0, $a4, $a0
	srli.d	$a4, $a0, 1
	mul.d	$t4, $t4, $t7
	mul.d	$a4, $a4, $s4
	add.w	$a4, $t4, $a4
	lu12i.w	$t4, 177027
	ori	$t4, $t4, 260
	add.d	$a4, $a4, $t4
	bstrpick.d	$t4, $a4, 31, 9
	srli.d	$a5, $a5, 4
	srli.d	$a0, $a0, 5
	xor	$a0, $a5, $a0
	ld.w	$a5, $t6, 136
	xor	$a0, $a0, $t4
	xor	$a0, $a0, $a4
	xor	$a0, $a0, $s8
	addi.d	$a4, $a5, 1
	st.w	$a4, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a5
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a5
	slli.d	$a4, $a5, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	sub.w	$a5, $a0, $t3
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	sub.w	$t4, $a0, $s0
	and	$t4, $a4, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$a0, $a0, $t5
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a4, $t4, $a5
	srli.d	$a5, $a4, 1
	add.d	$a0, $a0, $t4
	srli.d	$t4, $a0, 1
	mul.d	$a5, $a5, $t7
	mul.d	$t4, $t4, $s4
	add.w	$a5, $a5, $t4
	addu16i.d	$a5, $a5, 14116
	addi.d	$a5, $a5, -345
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a4, $a4, 4
	srli.d	$a0, $a0, 5
	xor	$a0, $a4, $a0
	ld.w	$a4, $t6, 136
	xor	$a0, $a0, $t4
	xor	$a0, $a0, $a5
	xor	$a0, $a0, $s8
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	addi.d	$a5, $a4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$a5, $a0, -1
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	sub.w	$t4, $a0, $t3
	and	$t4, $a4, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$fp, $a0, $s0
	and	$fp, $a4, $fp
	ldx.bu	$fp, $a2, $fp
	sub.w	$a0, $a0, $t8
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a2, $a0
	add.d	$a4, $t4, $a5
	srli.d	$a5, $a4, 1
	add.d	$a0, $a0, $fp
	srli.d	$t4, $a0, 1
	mul.d	$a5, $a5, $t7
	mul.d	$t4, $t4, $s4
	add.w	$a5, $a5, $t4
	lu12i.w	$t4, 274684
	ori	$t4, $t4, 3146
	add.d	$a5, $a5, $t4
	bstrpick.d	$t4, $a5, 31, 9
	srli.d	$a4, $a4, 4
	srli.d	$a0, $a0, 5
	xor	$a0, $a4, $a0
	xor	$a0, $a0, $t4
	ld.w	$a4, $t6, 136
	xor	$a0, $a0, $a5
	ori	$a5, $s6, 7
	xor	$a0, $a0, $a5
	addi.d	$t4, $a4, 1
	st.w	$t4, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$t4, $a0, -1
	addi.w	$a4, $a4, -1
	and	$t4, $a4, $t4
	sub.w	$fp, $a0, $t3
	and	$fp, $a4, $fp
	sub.w	$s5, $a0, $s0
	and	$s5, $a4, $s5
	sub.w	$a0, $a0, $t5
	and	$a0, $a4, $a0
	ldx.bu	$a4, $a2, $t4
	ldx.bu	$t4, $a2, $fp
	ldx.bu	$fp, $a2, $s5
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ldx.bu	$a0, $a2, $a0
	add.d	$a4, $t4, $a4
	add.d	$a0, $a0, $fp
	srli.d	$t4, $a0, 2
	mul.d	$t4, $t4, $s4
	srli.d	$fp, $a4, 2
	mul.d	$fp, $fp, $t7
	add.w	$t4, $fp, $t4
	lu12i.w	$fp, 323513
	ori	$fp, $fp, 2541
	add.d	$t4, $t4, $fp
	bstrpick.d	$fp, $t4, 31, 9
	srli.d	$a4, $a4, 5
	srli.d	$a0, $a0, 6
	xor	$a0, $a4, $a0
	ld.w	$a4, $t6, 136
	xor	$a0, $a0, $fp
	xor	$a0, $a0, $t4
	xor	$a0, $a0, $a5
	addi.d	$a5, $a4, 1
	st.w	$a5, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a4
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	slli.d	$a4, $a4, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$a5, $a0, -1
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	sub.w	$t4, $a0, $t3
	and	$t4, $a4, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$a0, $a0, $s0
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a2, $a0
	sub.d	$a4, $a5, $t4
	srli.d	$a4, $a4, 1
	add.w	$a0, $a4, $a0
	srai.d	$a0, $a0, 2
	mul.d	$a4, $a0, $t7
	lu12i.w	$a5, 360134
	ori	$a5, $a5, 1665
	add.d	$a4, $a4, $a5
	bstrpick.d	$a5, $a4, 31, 9
	bstrpick.d	$a0, $a0, 31, 3
	xor	$a0, $a0, $a5
	ld.w	$a5, $t6, 136
	xor	$a0, $a0, $a4
	lu12i.w	$s4, 49151
	ori	$a4, $s4, 4088
	xor	$a0, $a0, $a4
	addi.d	$t4, $a5, 1
	st.w	$t4, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a5
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a5
	slli.d	$a5, $a5, 2
	stx.w	$a0, $s3, $a5
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a5, $a1, 0
	sub.w	$t4, $a0, $t3
	addi.w	$a5, $a5, -1
	and	$t4, $a5, $t4
	ldx.bu	$t4, $a2, $t4
	sub.w	$fp, $a0, $s0
	and	$fp, $a5, $fp
	ldx.bu	$fp, $a2, $fp
	addi.w	$a0, $a0, -1
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a2, $a0
	sub.d	$a5, $t4, $fp
	srli.d	$a5, $a5, 1
	add.w	$a0, $a5, $a0
	srai.d	$a0, $a0, 2
	mul.d	$a5, $a0, $t7
	lu12i.w	$t4, 408963
	ori	$t4, $t4, 1060
	add.d	$a5, $a5, $t4
	bstrpick.d	$t4, $a5, 31, 9
	bstrpick.d	$a0, $a0, 31, 3
	ld.w	$fp, $t6, 136
	xor	$a0, $a0, $t4
	xor	$a0, $a0, $a5
	xor	$a0, $a0, $a4
	addi.d	$a4, $fp, 1
	st.w	$a4, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $fp
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $fp
	slli.d	$a4, $fp, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$a5, $a0, -1
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	sub.w	$t4, $a0, $t3
	and	$t4, $a4, $t4
	sub.w	$a0, $a0, $s0
	and	$a0, $a4, $a0
	ldx.bu	$a4, $a2, $a5
	ldx.bu	$a5, $a2, $t4
	ldx.bu	$a0, $a2, $a0
	sub.d	$a4, $a5, $a4
	add.d	$a0, $a4, $a0
	srai.d	$a0, $a0, 2
	mul.d	$a4, $a0, $t7
	addu16i.d	$a4, $a4, 28612
	addi.d	$a4, $a4, 455
	bstrpick.d	$a5, $a4, 31, 9
	bstrpick.d	$a0, $a0, 31, 3
	xor	$a0, $a0, $a5
	ld.w	$a5, $t6, 136
	xor	$a0, $a0, $a4
	ori	$a4, $s4, 4087
	xor	$a0, $a0, $a4
	addi.d	$a4, $a5, 1
	st.w	$a4, $t6, 136
	mul.d	$a0, $a0, $s1
	add.d	$a0, $a0, $a5
	rotri.w	$a0, $a0, 16
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a5
	slli.d	$a4, $a5, 2
	stx.w	$a0, $s3, $a4
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	addi.w	$a5, $a0, -1
	addi.w	$t4, $a4, -1
	and	$a5, $t4, $a5
	ldx.bu	$a4, $a2, $a5
	sub.w	$t6, $a0, $s0
	and	$s2, $t4, $t6
	ldx.bu	$t6, $a2, $s2
	ld.w	$t7, $t2, 0
	add.d	$a4, $t6, $a4
	slli.d	$a4, $a4, 7
	addu16i.d	$t6, $t7, 1
	addi.d	$t6, $t6, -256
	and	$a4, $t6, $a4
	bstrpick.d	$a4, $a4, 15, 8
	slli.d	$t6, $a4, 8
	st.w	$t6, $t2, 24
	ldx.bu	$a4, $a2, $a5
	ldx.bu	$t7, $a2, $s2
	sub.w	$t5, $a0, $t5
	and	$t5, $t4, $t5
	ldx.bu	$t5, $a2, $t5
	add.d	$a4, $t7, $a4
	sub.d	$a4, $a4, $t5
	ld.wu	$t5, $t0, 0
	slli.d	$a4, $a4, 7
	addi.w	$fp, $zero, -256
	lu32i.d	$fp, 0
	and	$t5, $t5, $fp
	addi.d	$t5, $t5, -256
	and	$s1, $t5, $a4
	st.w	$s1, $t0, 24
	ldx.bu	$a4, $a2, $a5
	addi.w	$t5, $a0, -2
	and	$t5, $t4, $t5
	ldx.bu	$t5, $a2, $t5
	ld.wu	$t7, $t1, 0
	slli.d	$a4, $a4, 8
	slli.d	$t5, $t5, 7
	sub.d	$a4, $a4, $t5
	and	$t5, $t7, $fp
	addi.d	$t5, $t5, -256
	and	$s0, $t5, $a4
	st.w	$s0, $t1, 24
	ldx.bu	$a4, $a2, $s2
	sub.w	$t5, $a0, $t8
	and	$t5, $t4, $t5
	ldx.bu	$t5, $a2, $t5
	ld.wu	$t7, $s5, 0
	slli.d	$a4, $a4, 8
	slli.d	$t5, $t5, 7
	sub.d	$a4, $a4, $t5
	and	$t5, $t7, $fp
	addi.d	$t5, $t5, -256
	and	$t7, $t5, $a4
	sub.w	$a0, $a0, $t3
	and	$a0, $t4, $a0
	st.w	$t7, $s5, 24
	ldx.bu	$a4, $a2, $a5
	ldx.bu	$a5, $a2, $s2
	ldx.bu	$a0, $a2, $a0
	ld.wu	$a2, $a6, 0
	add.d	$a4, $a5, $a4
	sub.d	$a0, $a4, $a0
	and	$a2, $a2, $fp
	slli.d	$a0, $a0, 7
	addi.d	$a2, $a2, -256
	and	$a0, $a2, $a0
	st.w	$a0, $a6, 24
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	srli.d	$a0, $a0, 3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	slli.d	$a2, $a2, 1
	andi	$a2, $a2, 384
	ld.w	$a4, $a7, 0
	or	$a0, $a2, $a0
	lu12i.w	$a2, 524287
	ori	$a2, $a2, 3840
	add.d	$a2, $a4, $a2
	slli.d	$a0, $a0, 8
	and	$a0, $a2, $a0
	st.w	$a0, $a7, 24
.LBB42_11:
	ld.d	$a4, $t2, 32
	pcalau12i	$a0, %pc_hi20(y)
	ld.w	$a5, $a0, %pc_lo12(y)
	ld.hu	$t3, $a4, 0
	slli.d	$a0, $a5, 16
	addi.d	$a0, $a0, 64
	sub.d	$a2, $a0, $t3
	srli.d	$t4, $a2, 7
	pcalau12i	$a2, %pc_hi20(c0)
	ld.w	$a2, $a2, %pc_lo12(c0)
	add.d	$t3, $t3, $t4
	ld.d	$t4, $t2, 16
	st.h	$t3, $a4, 0
	add.w	$s2, $a2, $t6
	slli.d	$a4, $s2, 1
	ldx.hu	$a4, $t4, $a4
	pcalau12i	$t3, %pc_hi20(stretch+16)
	ld.d	$t3, $t3, %pc_lo12(stretch+16)
	srli.d	$a4, $a4, 3
	lu12i.w	$t5, 1
	ori	$t5, $t5, 4094
	and	$a4, $a4, $t5
	ldx.h	$a4, $t3, $a4
	ld.w	$t6, $s8, 96
	ld.d	$t8, $s8, 32
	ld.d	$fp, $t0, 32
	slli.d	$s3, $t6, 1
	stx.h	$a4, $t8, $s3
	ld.hu	$a4, $fp, 0
	sub.d	$s3, $a0, $a4
	srli.d	$s3, $s3, 7
	add.d	$a4, $a4, $s3
	ld.d	$s3, $t0, 16
	st.h	$a4, $fp, 0
	add.w	$s1, $s1, $a2
	slli.d	$a4, $s1, 1
	ldx.hu	$a4, $s3, $a4
	srli.d	$a4, $a4, 3
	and	$a4, $a4, $t5
	ldx.h	$a4, $t3, $a4
	ld.d	$fp, $t1, 32
	alsl.d	$t8, $t6, $t8, 1
	st.h	$a4, $t8, 2
	ld.hu	$a4, $fp, 0
	sub.d	$s4, $a0, $a4
	srli.d	$s4, $s4, 7
	add.d	$a4, $a4, $s4
	ld.d	$s4, $t1, 16
	st.h	$a4, $fp, 0
	add.w	$a4, $s0, $a2
	slli.d	$fp, $a4, 1
	ldx.hu	$fp, $s4, $fp
	srli.d	$fp, $fp, 3
	and	$fp, $fp, $t5
	ldx.h	$fp, $t3, $fp
	ld.d	$s0, $s5, 32
	st.h	$fp, $t8, 4
	ld.hu	$fp, $s0, 0
	move	$ra, $s5
	sub.d	$s5, $a0, $fp
	srli.d	$s5, $s5, 7
	add.d	$fp, $fp, $s5
	ld.d	$s5, $ra, 16
	st.h	$fp, $s0, 0
	add.w	$t7, $t7, $a2
	slli.d	$fp, $t7, 1
	ldx.hu	$fp, $s5, $fp
	srli.d	$fp, $fp, 3
	and	$fp, $fp, $t5
	ldx.h	$fp, $t3, $fp
	ld.d	$s0, $a6, 32
	st.h	$fp, $t8, 6
	ld.hu	$fp, $s0, 0
	sub.d	$s6, $a0, $fp
	srli.d	$s6, $s6, 7
	ld.w	$s7, $a6, 24
	add.d	$fp, $fp, $s6
	ld.d	$s6, $a6, 16
	st.h	$fp, $s0, 0
	add.w	$fp, $s7, $a2
	slli.d	$s0, $fp, 1
	ldx.hu	$s0, $s6, $s0
	alsl.d	$t4, $s2, $t4, 1
	srli.d	$s0, $s0, 3
	and	$s0, $s0, $t5
	ldx.h	$s0, $t3, $s0
	ld.d	$s2, $a7, 32
	st.d	$t4, $t2, 32
	alsl.d	$t2, $s1, $s3, 1
	st.h	$s0, $t8, 8
	ld.hu	$t4, $s2, 0
	st.d	$t2, $t0, 32
	alsl.d	$a4, $a4, $s4, 1
	st.d	$a4, $t1, 32
	sub.d	$a4, $a0, $t4
	srli.d	$a4, $a4, 7
	ld.w	$t0, $a7, 24
	add.d	$a4, $t4, $a4
	ld.d	$t1, $a7, 16
	st.h	$a4, $s2, 0
	add.w	$a4, $t0, $a2
	slli.d	$t0, $a4, 1
	ldx.hu	$t0, $t1, $t0
	alsl.d	$t2, $t7, $s5, 1
	st.d	$t2, $ra, 32
	alsl.d	$t2, $fp, $s6, 1
	srli.d	$t0, $t0, 3
	and	$t0, $t0, $t5
	ldx.h	$t0, $t3, $t0
	st.d	$t2, $a6, 32
	alsl.d	$a4, $a4, $t1, 1
	st.d	$a4, $a7, 32
	st.h	$t0, $t8, 10
	pcalau12i	$a4, %pc_hi20(_ZZ9model8bitR5MixeriE4scm7)
	addi.d	$a4, $a4, %pc_lo12(_ZZ9model8bitR5MixeriE4scm7)
	ld.d	$a6, $a4, 32
	ld.hu	$a7, $a6, 0
	sub.d	$a0, $a0, $a7
	srli.d	$a0, $a0, 7
	ld.w	$t0, $a4, 24
	add.d	$a0, $a7, $a0
	ld.d	$a7, $a4, 16
	st.h	$a0, $a6, 0
	add.w	$a0, $t0, $a2
	slli.d	$a6, $a0, 1
	ldx.hu	$a6, $a7, $a6
	alsl.d	$a0, $a0, $a7, 1
	srli.d	$a6, $a6, 3
	and	$a6, $a6, $t5
	ldx.h	$a6, $t3, $a6
	st.d	$a0, $a4, 32
	addi.d	$a0, $t6, 7
	st.w	$a0, $s8, 96
	st.h	$a6, $t8, 12
	ld.w	$a0, $a3, %pc_lo12(pos)
	ld.w	$a4, $a1, 0
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a3, $a3, %pc_lo12(bpos)
	ld.d	$a1, $a1, 16
	addi.w	$a0, $a0, -1
	addi.w	$a4, $a4, -1
	and	$a0, $a4, $a0
	ldx.bu	$a4, $a1, $a0
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE2cm)
	move	$a1, $s8
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	pcaddu18i	$t8, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jr	$t8
.LBB42_12:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm1)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm1)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_1
# %bb.13:
.Ltmp104:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE4scm1)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp105:                               # EH_LABEL
# %bb.14:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm1)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm1)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm1)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_1
.LBB42_15:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm2)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm2)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_2
# %bb.16:
.Ltmp107:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE4scm2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE4scm2)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp108:                               # EH_LABEL
# %bb.17:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm2)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm2)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm2)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm2)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_2
.LBB42_18:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm3)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm3)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_3
# %bb.19:
.Ltmp110:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE4scm3)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE4scm3)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp111:                               # EH_LABEL
# %bb.20:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm3)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm3)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm3)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm3)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_3
.LBB42_21:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm4)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm4)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_4
# %bb.22:
.Ltmp113:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE4scm4)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE4scm4)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp114:                               # EH_LABEL
# %bb.23:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm4)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm4)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm4)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm4)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_4
.LBB42_24:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm5)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm5)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_5
# %bb.25:
.Ltmp116:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE4scm5)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE4scm5)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp117:                               # EH_LABEL
# %bb.26:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm5)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm5)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm5)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm5)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_5
.LBB42_27:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm6)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm6)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_6
# %bb.28:
.Ltmp119:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE4scm6)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE4scm6)
	lu12i.w	$a1, 64
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp120:                               # EH_LABEL
# %bb.29:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm6)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm6)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm6)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm6)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_6
.LBB42_30:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm7)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm7)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_7
# %bb.31:
.Ltmp122:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE4scm7)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE4scm7)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp123:                               # EH_LABEL
# %bb.32:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE4scm7)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE4scm7)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE4scm7)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE4scm7)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_7
.LBB42_33:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE2cm)
	addi.d	$s1, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE2cm)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_8
# %bb.34:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 64
	sll.w	$a1, $a1, $a0
.Ltmp125:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9model8bitR5MixeriE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9model8bitR5MixeriE2cm)
	ori	$a2, $zero, 32
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp126:                               # EH_LABEL
# %bb.35:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9model8bitR5MixeriE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9model8bitR5MixeriE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9model8bitR5MixeriE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9model8bitR5MixeriE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_8
.LBB42_36:
.Ltmp127:                               # EH_LABEL
	b	.LBB42_44
.LBB42_37:
.Ltmp124:                               # EH_LABEL
	b	.LBB42_44
.LBB42_38:
.Ltmp121:                               # EH_LABEL
	b	.LBB42_44
.LBB42_39:
.Ltmp118:                               # EH_LABEL
	b	.LBB42_44
.LBB42_40:
.Ltmp115:                               # EH_LABEL
	b	.LBB42_44
.LBB42_41:
.Ltmp112:                               # EH_LABEL
	b	.LBB42_44
.LBB42_42:
.Ltmp109:                               # EH_LABEL
	b	.LBB42_44
.LBB42_43:
.Ltmp106:                               # EH_LABEL
.LBB42_44:
	move	$fp, $a0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end42:
	.size	_Z9model8bitR5Mixeri, .Lfunc_end42-_Z9model8bitR5Mixeri
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table42:
.Lexception9:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end9-.Lcst_begin9
.Lcst_begin9:
	.uleb128 .Lfunc_begin9-.Lfunc_begin9    # >> Call Site 1 <<
	.uleb128 .Ltmp104-.Lfunc_begin9         #   Call between .Lfunc_begin9 and .Ltmp104
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp104-.Lfunc_begin9         # >> Call Site 2 <<
	.uleb128 .Ltmp105-.Ltmp104              #   Call between .Ltmp104 and .Ltmp105
	.uleb128 .Ltmp106-.Lfunc_begin9         #     jumps to .Ltmp106
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp105-.Lfunc_begin9         # >> Call Site 3 <<
	.uleb128 .Ltmp107-.Ltmp105              #   Call between .Ltmp105 and .Ltmp107
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp107-.Lfunc_begin9         # >> Call Site 4 <<
	.uleb128 .Ltmp108-.Ltmp107              #   Call between .Ltmp107 and .Ltmp108
	.uleb128 .Ltmp109-.Lfunc_begin9         #     jumps to .Ltmp109
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp108-.Lfunc_begin9         # >> Call Site 5 <<
	.uleb128 .Ltmp110-.Ltmp108              #   Call between .Ltmp108 and .Ltmp110
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp110-.Lfunc_begin9         # >> Call Site 6 <<
	.uleb128 .Ltmp111-.Ltmp110              #   Call between .Ltmp110 and .Ltmp111
	.uleb128 .Ltmp112-.Lfunc_begin9         #     jumps to .Ltmp112
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp111-.Lfunc_begin9         # >> Call Site 7 <<
	.uleb128 .Ltmp113-.Ltmp111              #   Call between .Ltmp111 and .Ltmp113
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp113-.Lfunc_begin9         # >> Call Site 8 <<
	.uleb128 .Ltmp114-.Ltmp113              #   Call between .Ltmp113 and .Ltmp114
	.uleb128 .Ltmp115-.Lfunc_begin9         #     jumps to .Ltmp115
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp114-.Lfunc_begin9         # >> Call Site 9 <<
	.uleb128 .Ltmp116-.Ltmp114              #   Call between .Ltmp114 and .Ltmp116
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp116-.Lfunc_begin9         # >> Call Site 10 <<
	.uleb128 .Ltmp117-.Ltmp116              #   Call between .Ltmp116 and .Ltmp117
	.uleb128 .Ltmp118-.Lfunc_begin9         #     jumps to .Ltmp118
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp117-.Lfunc_begin9         # >> Call Site 11 <<
	.uleb128 .Ltmp119-.Ltmp117              #   Call between .Ltmp117 and .Ltmp119
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp119-.Lfunc_begin9         # >> Call Site 12 <<
	.uleb128 .Ltmp120-.Ltmp119              #   Call between .Ltmp119 and .Ltmp120
	.uleb128 .Ltmp121-.Lfunc_begin9         #     jumps to .Ltmp121
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp120-.Lfunc_begin9         # >> Call Site 13 <<
	.uleb128 .Ltmp122-.Ltmp120              #   Call between .Ltmp120 and .Ltmp122
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp122-.Lfunc_begin9         # >> Call Site 14 <<
	.uleb128 .Ltmp123-.Ltmp122              #   Call between .Ltmp122 and .Ltmp123
	.uleb128 .Ltmp124-.Lfunc_begin9         #     jumps to .Ltmp124
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp123-.Lfunc_begin9         # >> Call Site 15 <<
	.uleb128 .Ltmp125-.Ltmp123              #   Call between .Ltmp123 and .Ltmp125
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp125-.Lfunc_begin9         # >> Call Site 16 <<
	.uleb128 .Ltmp126-.Ltmp125              #   Call between .Ltmp125 and .Ltmp126
	.uleb128 .Ltmp127-.Lfunc_begin9         #     jumps to .Ltmp127
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp126-.Lfunc_begin9         # >> Call Site 17 <<
	.uleb128 .Lfunc_end42-.Ltmp126          #   Call between .Ltmp126 and .Lfunc_end42
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end9:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z8pgmModelR5Mixer              # -- Begin function _Z8pgmModelR5Mixer
	.p2align	5
	.type	_Z8pgmModelR5Mixer,@function
_Z8pgmModelR5Mixer:                     # @_Z8pgmModelR5Mixer
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a1, %pc_hi20(bpos)
	ld.w	$a1, $a1, %pc_lo12(bpos)
	pcalau12i	$s0, %pc_hi20(pos)
	ld.w	$a3, $s0, %pc_lo12(pos)
	beqz	$a1, .LBB43_6
.LBB43_1:                               # %.critedge3.thread
	pcalau12i	$a1, %pc_hi20(_ZZ8pgmModelR5MixerE3eoi)
	ld.w	$a1, $a1, %pc_lo12(_ZZ8pgmModelR5MixerE3eoi)
	bge	$a1, $a3, .LBB43_4
# %bb.2:
	move	$a0, $zero
.LBB43_3:
	pcalau12i	$a1, %pc_hi20(_ZZ8pgmModelR5MixerE1w)
	st.w	$zero, $a1, %pc_lo12(_ZZ8pgmModelR5MixerE1w)
	b	.LBB43_5
.LBB43_4:
	pcalau12i	$s1, %pc_hi20(_ZZ8pgmModelR5MixerE1w)
	ld.w	$a1, $s1, %pc_lo12(_ZZ8pgmModelR5MixerE1w)
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_Z9model8bitR5Mixeri)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZZ8pgmModelR5MixerE3col)
	ld.w	$a1, $a0, %pc_lo12(_ZZ8pgmModelR5MixerE3col)
	addi.d	$a2, $a1, 1
	ori	$a3, $zero, 6
	slt	$a1, $a3, $a1
	ld.w	$a3, $fp, 88
	masknez	$a2, $a2, $a1
	st.w	$a2, $a0, %pc_lo12(_ZZ8pgmModelR5MixerE3col)
	ld.w	$a0, $fp, 92
	addi.d	$a4, $a3, 1
	ld.d	$a1, $fp, 80
	st.w	$a4, $fp, 88
	addi.d	$a0, $a0, 2
	slli.d	$a3, $a3, 2
	stx.w	$a0, $a1, $a3
	ld.w	$a0, $fp, 92
	ld.w	$a3, $fp, 88
	addi.d	$a0, $a0, 8
	st.w	$a0, $fp, 92
	add.d	$a0, $a0, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $fp, 88
	slli.d	$a2, $a3, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a2, $fp, 92
	ld.w	$a0, $s1, %pc_lo12(_ZZ8pgmModelR5MixerE1w)
	ld.w	$a3, $s0, %pc_lo12(pos)
	addi.d	$a2, $a2, 8
	st.w	$a2, $fp, 92
	sub.w	$a4, $a3, $a0
	pcalau12i	$a5, %pc_hi20(buf)
	addi.d	$a5, $a5, %pc_lo12(buf)
	ld.w	$a6, $a5, 0
	ld.d	$a5, $a5, 16
	addi.w	$a6, $a6, -1
	and	$a4, $a6, $a4
	ldx.bu	$a4, $a5, $a4
	addi.w	$a3, $a3, -1
	and	$a3, $a6, $a3
	ldx.bu	$a3, $a5, $a3
	ld.w	$a5, $fp, 88
	add.d	$a3, $a3, $a4
	srli.d	$a3, $a3, 4
	add.d	$a2, $a3, $a2
	addi.d	$a3, $a5, 1
	st.w	$a3, $fp, 88
	slli.d	$a3, $a5, 2
	stx.w	$a2, $a1, $a3
	ld.w	$a2, $fp, 92
	pcalau12i	$a3, %pc_hi20(c0)
	ld.w	$a3, $a3, %pc_lo12(c0)
	ld.w	$a4, $fp, 88
	addi.d	$a2, $a2, 32
	st.w	$a2, $fp, 92
	add.d	$a2, $a3, $a2
	addi.d	$a3, $a4, 1
	st.w	$a3, $fp, 88
	slli.d	$a3, $a4, 2
	stx.w	$a2, $a1, $a3
	ld.w	$a1, $fp, 92
	addi.d	$a1, $a1, 256
	st.w	$a1, $fp, 92
.LBB43_5:
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB43_6:
	addi.w	$a5, $a3, -3
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$fp, $a1, %pc_lo12(buf)
	ld.w	$a2, $fp, 0
	ld.d	$a4, $fp, 16
	addi.w	$a1, $a2, -1
	and	$a5, $a1, $a5
	ldx.bu	$a5, $a4, $a5
	ori	$a6, $zero, 80
	bne	$a5, $a6, .LBB43_11
# %bb.7:
	addi.w	$a5, $a3, -2
	and	$a5, $a1, $a5
	ldx.bu	$a5, $a4, $a5
	ori	$a6, $zero, 53
	bne	$a5, $a6, .LBB43_11
# %bb.8:
	addi.w	$a5, $a3, -1
	and	$a1, $a1, $a5
	ldx.bu	$a1, $a4, $a1
	ori	$a5, $zero, 32
	bltu	$a5, $a1, .LBB43_11
# %bb.9:
	ori	$a5, $zero, 1
	sll.d	$a1, $a5, $a1
	lu12i.w	$a5, 2
	ori	$a5, $a5, 1536
	lu32i.d	$a5, 1
	and	$a1, $a1, $a5
	beqz	$a1, .LBB43_11
# %bb.10:
	move	$a0, $zero
	pcalau12i	$a1, %pc_hi20(_ZZ8pgmModelR5MixerE3pgm)
	st.w	$a3, $a1, %pc_lo12(_ZZ8pgmModelR5MixerE3pgm)
	pcalau12i	$a1, %pc_hi20(_ZZ8pgmModelR5MixerE7pgm_ptr)
	st.w	$zero, $a1, %pc_lo12(_ZZ8pgmModelR5MixerE7pgm_ptr)
	b	.LBB43_3
.LBB43_11:
	pcalau12i	$s1, %pc_hi20(_ZZ8pgmModelR5MixerE3pgm)
	ld.w	$s2, $s1, %pc_lo12(_ZZ8pgmModelR5MixerE3pgm)
	beqz	$s2, .LBB43_1
# %bb.12:
	pcalau12i	$s4, %pc_hi20(_ZZ8pgmModelR5MixerE7pgm_ptr)
	ld.w	$a5, $s4, %pc_lo12(_ZZ8pgmModelR5MixerE7pgm_ptr)
	ori	$a1, $zero, 3
	beq	$a5, $a1, .LBB43_1
# %bb.13:                               # %.preheader64
	addi.w	$a1, $a3, -1
	bge	$s2, $a1, .LBB43_1
# %bb.14:                               # %.preheader64
	ori	$a6, $zero, 2
	blt	$a6, $a5, .LBB43_1
# %bb.15:                               # %.preheader63.preheader
	ori	$s5, $zero, 35
	addi.d	$t2, $sp, 8
	ori	$t3, $zero, 32
	ori	$t4, $zero, 31
	ori	$s8, $zero, 1
	lu12i.w	$a6, 2
	ori	$s6, $a6, 1536
	lu32i.d	$s6, 1
	ori	$t5, $zero, 10
	pcalau12i	$a6, %pc_hi20(_ZZ8pgmModelR5MixerE7pgm_hdr)
	addi.d	$s3, $a6, %pc_lo12(_ZZ8pgmModelR5MixerE7pgm_hdr)
	ori	$t6, $zero, 3
	ori	$t7, $zero, 13
.LBB43_16:                              # %.preheader63
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_17 Depth 2
                                        #     Child Loop BB43_21 Depth 2
                                        #     Child Loop BB43_25 Depth 2
	addi.w	$a6, $a2, -1
	slt	$a7, $a1, $s2
	masknez	$t0, $a1, $a7
	maskeqz	$a7, $s2, $a7
	or	$a7, $a7, $t0
	and	$t0, $a6, $s2
	ldx.bu	$t0, $a4, $t0
	bltu	$s5, $t0, .LBB43_24
	.p2align	4, , 16
.LBB43_17:                              #   Parent Loop BB43_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	sll.d	$t1, $s8, $t0
	and	$t1, $t1, $s6
	beqz	$t1, .LBB43_20
# %bb.18:                               # %.critedge
                                        #   in Loop: Header=BB43_17 Depth=2
	beq	$a7, $s2, .LBB43_32
# %bb.19:                               #   in Loop: Header=BB43_17 Depth=2
	addi.w	$s2, $s2, 1
	and	$t0, $a6, $s2
	ldx.bu	$t0, $a4, $t0
	bgeu	$s5, $t0, .LBB43_17
	b	.LBB43_24
.LBB43_20:                              #   in Loop: Header=BB43_16 Depth=1
	bne	$t0, $s5, .LBB43_24
	.p2align	4, , 16
.LBB43_21:                              # %.preheader61
                                        #   Parent Loop BB43_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.w	$s2, $s2, 1
	and	$a7, $s2, $a6
	ldx.bu	$a7, $a4, $a7
	beq	$a7, $t5, .LBB43_30
# %bb.22:                               # %.preheader61
                                        #   in Loop: Header=BB43_21 Depth=2
	beq	$a7, $t7, .LBB43_30
# %bb.23:                               #   in Loop: Header=BB43_21 Depth=2
	blt	$s2, $a1, .LBB43_21
	b	.LBB43_30
.LBB43_24:                              # %.preheader.preheader
                                        #   in Loop: Header=BB43_16 Depth=1
	move	$t0, $zero
.LBB43_25:                              # %.preheader
                                        #   Parent Loop BB43_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	and	$a7, $s2, $a6
	ldx.b	$t1, $a4, $a7
	move	$a7, $t0
	stx.b	$t1, $t0, $t2
	addi.w	$s2, $s2, 1
	and	$t0, $s2, $a6
	ldx.bu	$t0, $a4, $t0
	bltu	$t3, $t0, .LBB43_27
# %bb.26:                               # %.preheader
                                        #   in Loop: Header=BB43_25 Depth=2
	sll.d	$t0, $s8, $t0
	and	$t0, $t0, $s6
	bnez	$t0, .LBB43_29
.LBB43_27:                              #   in Loop: Header=BB43_25 Depth=2
	bge	$s2, $a1, .LBB43_30
# %bb.28:                               #   in Loop: Header=BB43_25 Depth=2
	addi.d	$t0, $a7, 1
	bltu	$a7, $t4, .LBB43_25
	b	.LBB43_30
.LBB43_29:                              # %.critedge57
                                        #   in Loop: Header=BB43_16 Depth=1
	move	$s7, $a0
	addi.d	$a0, $sp, 8
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 13
	ori	$t6, $zero, 3
	ori	$t5, $zero, 10
	ori	$t4, $zero, 31
	ld.w	$a6, $s4, %pc_lo12(_ZZ8pgmModelR5MixerE7pgm_ptr)
	move	$a1, $a0
	move	$a0, $s7
	addi.w	$a5, $a6, 1
	st.w	$a5, $s4, %pc_lo12(_ZZ8pgmModelR5MixerE7pgm_ptr)
	ld.w	$a2, $fp, 0
	ld.d	$a4, $fp, 16
	ld.w	$a3, $s0, %pc_lo12(pos)
	slli.d	$a6, $a6, 2
	stx.w	$a1, $s3, $a6
	st.w	$s2, $s1, %pc_lo12(_ZZ8pgmModelR5MixerE3pgm)
.LBB43_30:                              # %.critedge5
                                        #   in Loop: Header=BB43_16 Depth=1
	addi.w	$s2, $s2, 1
	addi.w	$a1, $a3, -1
	bge	$s2, $a1, .LBB43_32
# %bb.31:                               # %.critedge5
                                        #   in Loop: Header=BB43_16 Depth=1
	addi.d	$t2, $sp, 8
	ori	$t3, $zero, 32
	blt	$a5, $t6, .LBB43_16
.LBB43_32:                              # %.critedge3
	ori	$a1, $zero, 3
	bne	$a5, $a1, .LBB43_1
# %bb.33:
	ld.w	$a1, $s3, 8
	ori	$a2, $zero, 255
	bne	$a1, $a2, .LBB43_1
# %bb.34:
	ld.w	$a1, $s3, 0
	blez	$a1, .LBB43_1
# %bb.35:
	ld.w	$a2, $s3, 4
	blez	$a2, .LBB43_1
# %bb.36:
	pcalau12i	$a4, %pc_hi20(_ZZ8pgmModelR5MixerE1w)
	st.w	$a1, $a4, %pc_lo12(_ZZ8pgmModelR5MixerE1w)
	mul.d	$a4, $a2, $a1
	add.d	$a3, $a4, $a3
	pcalau12i	$a4, %pc_hi20(_ZZ8pgmModelR5MixerE3eoi)
	st.w	$a3, $a4, %pc_lo12(_ZZ8pgmModelR5MixerE3eoi)
	pcalau12i	$a3, %pc_hi20(.L.str.6)
	addi.d	$a3, $a3, %pc_lo12(.L.str.6)
	move	$fp, $a0
	move	$a0, $a3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	ld.w	$a3, $s0, %pc_lo12(pos)
	b	.LBB43_1
.Lfunc_end43:
	.size	_Z8pgmModelR5Mixer, .Lfunc_end43-_Z8pgmModelR5Mixer
	.cfi_endproc
                                        # -- End function
	.globl	_Z9bmpModel8R5Mixer             # -- Begin function _Z9bmpModel8R5Mixer
	.p2align	5
	.type	_Z9bmpModel8R5Mixer,@function
_Z9bmpModel8R5Mixer:                    # @_Z9bmpModel8R5Mixer
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	pcalau12i	$a1, %pc_hi20(bpos)
	ld.w	$a1, $a1, %pc_lo12(bpos)
	pcalau12i	$s0, %pc_hi20(pos)
	ld.w	$a3, $s0, %pc_lo12(pos)
	move	$fp, $a0
	pcalau12i	$s1, %pc_hi20(_ZZ9bmpModel8R5MixerE3eoi)
	bnez	$a1, .LBB44_8
# %bb.1:
	addi.w	$a2, $a3, -44
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a0, $a0, %pc_lo12(buf)
	ld.w	$a1, $a0, 0
	ld.d	$a0, $a0, 16
	addi.w	$a1, $a1, -1
	addi.w	$a4, $a3, -43
	and	$a4, $a1, $a4
	ldx.bu	$a4, $a0, $a4
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	slli.w	$a4, $a4, 8
	addi.w	$a5, $a3, -42
	and	$a5, $a1, $a5
	ldx.bu	$a5, $a0, $a5
	addi.w	$a6, $a3, -41
	and	$a6, $a1, $a6
	ldx.b	$a6, $a0, $a6
	or	$a2, $a4, $a2
	slli.w	$a4, $a5, 16
	or	$a2, $a2, $a4
	slli.w	$a4, $a6, 24
	or	$a2, $a2, $a4
	ori	$a4, $zero, 1078
	pcalau12i	$s2, %pc_hi20(_ZZ9bmpModel8R5MixerE4ibmp)
	bltu	$a4, $a2, .LBB44_6
# %bb.2:
	addi.w	$a2, $a3, -39
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	addi.w	$a4, $a3, -40
	and	$a4, $a1, $a4
	ldx.bu	$a4, $a0, $a4
	slli.w	$a2, $a2, 8
	addi.w	$a5, $a3, -38
	and	$a5, $a1, $a5
	ldx.bu	$a5, $a0, $a5
	addi.w	$a6, $a3, -37
	and	$a6, $a1, $a6
	ldx.b	$a6, $a0, $a6
	or	$a2, $a2, $a4
	slli.w	$a4, $a5, 16
	or	$a2, $a2, $a4
	slli.w	$a4, $a6, 24
	or	$a2, $a2, $a4
	ori	$a4, $zero, 40
	bne	$a2, $a4, .LBB44_6
# %bb.3:
	addi.w	$a2, $a3, -24
	and	$a2, $a1, $a2
	ldx.bu	$a2, $a0, $a2
	addi.w	$a4, $a3, -23
	and	$a4, $a1, $a4
	ldx.bu	$a4, $a0, $a4
	addi.w	$a5, $a3, -22
	and	$a5, $a1, $a5
	ldx.bu	$a5, $a0, $a5
	addi.w	$a6, $a3, -21
	and	$a6, $a1, $a6
	ldx.bu	$a6, $a0, $a6
	or	$a2, $a4, $a2
	or	$a2, $a2, $a5
	or	$a2, $a2, $a6
	bnez	$a2, .LBB44_6
# %bb.4:
	addi.w	$a2, $a3, -26
	and	$a1, $a1, $a2
	ldx.bu	$a0, $a0, $a1
	ori	$a1, $zero, 8
	bne	$a0, $a1, .LBB44_6
# %bb.5:
	ori	$a0, $zero, 36
	pcaddu18i	$ra, %call36(_Z2i4i)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(_ZZ9bmpModel8R5MixerE2w1)
	st.w	$a0, $a1, %pc_lo12(_ZZ9bmpModel8R5MixerE2w1)
	ori	$a0, $zero, 32
	pcaddu18i	$ra, %call36(_Z2i4i)
	jirl	$ra, $ra, 0
	ld.w	$s3, $s0, %pc_lo12(pos)
	pcalau12i	$a1, %pc_hi20(_ZZ9bmpModel8R5MixerE1h)
	st.w	$a0, $a1, %pc_lo12(_ZZ9bmpModel8R5MixerE1h)
	ori	$a0, $zero, 44
	pcaddu18i	$ra, %call36(_Z2i4i)
	jirl	$ra, $ra, 0
	ld.w	$a3, $s0, %pc_lo12(pos)
	add.d	$a0, $s3, $a0
	addi.d	$a0, $a0, -54
	st.w	$a0, $s2, %pc_lo12(_ZZ9bmpModel8R5MixerE4ibmp)
.LBB44_6:
	ld.w	$a0, $s2, %pc_lo12(_ZZ9bmpModel8R5MixerE4ibmp)
	bne	$a0, $a3, .LBB44_8
# %bb.7:
	pcalau12i	$a0, %pc_hi20(_ZZ9bmpModel8R5MixerE2w1)
	ld.w	$a1, $a0, %pc_lo12(_ZZ9bmpModel8R5MixerE2w1)
	pcalau12i	$a0, %pc_hi20(_ZZ9bmpModel8R5MixerE1h)
	ld.w	$a2, $a0, %pc_lo12(_ZZ9bmpModel8R5MixerE1h)
	pcalau12i	$a0, %pc_hi20(_ZZ9bmpModel8R5MixerE1w)
	st.w	$a1, $a0, %pc_lo12(_ZZ9bmpModel8R5MixerE1w)
	mul.d	$a0, $a2, $a1
	add.d	$a0, $a0, $a3
	st.w	$a0, $s1, %pc_lo12(_ZZ9bmpModel8R5MixerE3eoi)
	pcalau12i	$a0, %pc_hi20(.L.str.7)
	addi.d	$a0, $a0, %pc_lo12(.L.str.7)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a3, $s0, %pc_lo12(pos)
	st.w	$zero, $s2, %pc_lo12(_ZZ9bmpModel8R5MixerE4ibmp)
.LBB44_8:
	ld.w	$a0, $s1, %pc_lo12(_ZZ9bmpModel8R5MixerE3eoi)
	bge	$a0, $a3, .LBB44_10
# %bb.9:
	move	$a0, $zero
	pcalau12i	$a1, %pc_hi20(_ZZ9bmpModel8R5MixerE1w)
	st.w	$zero, $a1, %pc_lo12(_ZZ9bmpModel8R5MixerE1w)
	b	.LBB44_11
.LBB44_10:
	pcalau12i	$s1, %pc_hi20(_ZZ9bmpModel8R5MixerE1w)
	ld.w	$a1, $s1, %pc_lo12(_ZZ9bmpModel8R5MixerE1w)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z9model8bitR5Mixeri)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZZ9bmpModel8R5MixerE3col)
	ld.w	$a1, $a0, %pc_lo12(_ZZ9bmpModel8R5MixerE3col)
	addi.d	$a2, $a1, 1
	ori	$a3, $zero, 6
	slt	$a1, $a3, $a1
	ld.w	$a3, $fp, 88
	masknez	$a2, $a2, $a1
	st.w	$a2, $a0, %pc_lo12(_ZZ9bmpModel8R5MixerE3col)
	ld.w	$a0, $fp, 92
	addi.d	$a4, $a3, 1
	ld.d	$a1, $fp, 80
	st.w	$a4, $fp, 88
	addi.d	$a0, $a0, 2
	slli.d	$a3, $a3, 2
	stx.w	$a0, $a1, $a3
	ld.w	$a0, $fp, 92
	ld.w	$a3, $fp, 88
	addi.d	$a0, $a0, 8
	st.w	$a0, $fp, 92
	add.d	$a0, $a0, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $fp, 88
	slli.d	$a2, $a3, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a2, $fp, 92
	ld.w	$a0, $s1, %pc_lo12(_ZZ9bmpModel8R5MixerE1w)
	ld.w	$a3, $s0, %pc_lo12(pos)
	addi.d	$a2, $a2, 8
	st.w	$a2, $fp, 92
	sub.w	$a4, $a3, $a0
	pcalau12i	$a5, %pc_hi20(buf)
	addi.d	$a5, $a5, %pc_lo12(buf)
	ld.w	$a6, $a5, 0
	ld.d	$a5, $a5, 16
	addi.w	$a6, $a6, -1
	and	$a4, $a6, $a4
	ldx.bu	$a4, $a5, $a4
	addi.w	$a3, $a3, -1
	and	$a3, $a6, $a3
	ldx.bu	$a3, $a5, $a3
	ld.w	$a5, $fp, 88
	add.d	$a3, $a3, $a4
	srli.d	$a3, $a3, 4
	add.d	$a2, $a3, $a2
	addi.d	$a3, $a5, 1
	st.w	$a3, $fp, 88
	slli.d	$a3, $a5, 2
	stx.w	$a2, $a1, $a3
	ld.w	$a2, $fp, 92
	pcalau12i	$a3, %pc_hi20(c0)
	ld.w	$a3, $a3, %pc_lo12(c0)
	ld.w	$a4, $fp, 88
	addi.d	$a2, $a2, 32
	st.w	$a2, $fp, 92
	add.d	$a2, $a3, $a2
	addi.d	$a3, $a4, 1
	st.w	$a3, $fp, 88
	slli.d	$a3, $a4, 2
	stx.w	$a2, $a1, $a3
	ld.w	$a1, $fp, 92
	addi.d	$a1, $a1, 256
	st.w	$a1, $fp, 92
.LBB44_11:
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end44:
	.size	_Z9bmpModel8R5Mixer, .Lfunc_end44-_Z9bmpModel8R5Mixer
	.cfi_endproc
                                        # -- End function
	.globl	_Z9rgbModel8R5Mixer             # -- Begin function _Z9rgbModel8R5Mixer
	.p2align	5
	.type	_Z9rgbModel8R5Mixer,@function
_Z9rgbModel8R5Mixer:                    # @_Z9rgbModel8R5Mixer
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	pcalau12i	$a1, %pc_hi20(bpos)
	ld.w	$a1, $a1, %pc_lo12(bpos)
	pcalau12i	$s0, %pc_hi20(pos)
	ld.w	$a3, $s0, %pc_lo12(pos)
	pcalau12i	$fp, %pc_hi20(_ZZ9rgbModel8R5MixerE3eoi)
	bnez	$a1, .LBB45_6
# %bb.1:
	addi.w	$a1, $a3, -507
	pcalau12i	$a2, %pc_hi20(buf)
	addi.d	$a2, $a2, %pc_lo12(buf)
	ld.w	$a4, $a2, 0
	ld.d	$a2, $a2, 16
	addi.w	$a4, $a4, -1
	and	$a1, $a4, $a1
	ldx.bu	$a1, $a2, $a1
	ori	$a5, $zero, 1
	bne	$a1, $a5, .LBB45_6
# %bb.2:
	addi.w	$a1, $a3, -506
	and	$a1, $a4, $a1
	ldx.bu	$a1, $a2, $a1
	ori	$a5, $zero, 218
	bne	$a1, $a5, .LBB45_6
# %bb.3:
	addi.w	$a1, $a3, -505
	and	$a1, $a4, $a1
	ldx.bu	$a1, $a2, $a1
	bnez	$a1, .LBB45_6
# %bb.4:
	addi.w	$a1, $a3, -496
	and	$a1, $a4, $a1
	addi.w	$a5, $a3, -495
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	ldx.bu	$a1, $a2, $a1
	slli.d	$a5, $a5, 8
	or	$a1, $a5, $a1
	ori	$a5, $zero, 1
	bne	$a1, $a5, .LBB45_6
# %bb.5:
	addi.w	$a1, $a3, -501
	and	$a1, $a4, $a1
	ldx.bu	$a1, $a2, $a1
	addi.w	$a5, $a3, -500
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	slli.d	$a1, $a1, 8
	or	$a1, $a1, $a5
	pcalau12i	$a5, %pc_hi20(_ZZ9rgbModel8R5MixerE1w)
	st.w	$a1, $a5, %pc_lo12(_ZZ9rgbModel8R5MixerE1w)
	addi.w	$a5, $a3, -499
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a2, $a5
	addi.w	$a6, $a3, -498
	and	$a4, $a4, $a6
	ldx.bu	$a2, $a2, $a4
	slli.d	$a4, $a5, 8
	or	$a2, $a4, $a2
	mul.d	$a4, $a2, $a1
	add.d	$a3, $a4, $a3
	st.w	$a3, $fp, %pc_lo12(_ZZ9rgbModel8R5MixerE3eoi)
	pcalau12i	$a3, %pc_hi20(.L.str.8)
	addi.d	$a3, $a3, %pc_lo12(.L.str.8)
	move	$s1, $a0
	move	$a0, $a3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	ld.w	$a3, $s0, %pc_lo12(pos)
.LBB45_6:
	ld.w	$a1, $fp, %pc_lo12(_ZZ9rgbModel8R5MixerE3eoi)
	bge	$a1, $a3, .LBB45_8
# %bb.7:
	move	$a0, $zero
	pcalau12i	$a1, %pc_hi20(_ZZ9rgbModel8R5MixerE1w)
	st.w	$zero, $a1, %pc_lo12(_ZZ9rgbModel8R5MixerE1w)
	b	.LBB45_9
.LBB45_8:
	pcalau12i	$s1, %pc_hi20(_ZZ9rgbModel8R5MixerE1w)
	ld.w	$a1, $s1, %pc_lo12(_ZZ9rgbModel8R5MixerE1w)
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_Z9model8bitR5Mixeri)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZZ9rgbModel8R5MixerE3col)
	ld.w	$a1, $a0, %pc_lo12(_ZZ9rgbModel8R5MixerE3col)
	addi.d	$a2, $a1, 1
	ori	$a3, $zero, 6
	slt	$a1, $a3, $a1
	ld.w	$a3, $fp, 88
	masknez	$a2, $a2, $a1
	st.w	$a2, $a0, %pc_lo12(_ZZ9rgbModel8R5MixerE3col)
	ld.w	$a0, $fp, 92
	addi.d	$a4, $a3, 1
	ld.d	$a1, $fp, 80
	st.w	$a4, $fp, 88
	addi.d	$a0, $a0, 2
	slli.d	$a3, $a3, 2
	stx.w	$a0, $a1, $a3
	ld.w	$a0, $fp, 92
	ld.w	$a3, $fp, 88
	addi.d	$a0, $a0, 8
	st.w	$a0, $fp, 92
	add.d	$a0, $a0, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $fp, 88
	slli.d	$a2, $a3, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a2, $fp, 92
	ld.w	$a0, $s1, %pc_lo12(_ZZ9rgbModel8R5MixerE1w)
	ld.w	$a3, $s0, %pc_lo12(pos)
	addi.d	$a2, $a2, 8
	st.w	$a2, $fp, 92
	sub.w	$a4, $a3, $a0
	pcalau12i	$a5, %pc_hi20(buf)
	addi.d	$a5, $a5, %pc_lo12(buf)
	ld.w	$a6, $a5, 0
	ld.d	$a5, $a5, 16
	addi.w	$a6, $a6, -1
	and	$a4, $a6, $a4
	ldx.bu	$a4, $a5, $a4
	addi.w	$a3, $a3, -1
	and	$a3, $a6, $a3
	ldx.bu	$a3, $a5, $a3
	ld.w	$a5, $fp, 88
	add.d	$a3, $a3, $a4
	srli.d	$a3, $a3, 4
	add.d	$a2, $a3, $a2
	addi.d	$a3, $a5, 1
	st.w	$a3, $fp, 88
	slli.d	$a3, $a5, 2
	stx.w	$a2, $a1, $a3
	ld.w	$a2, $fp, 92
	pcalau12i	$a3, %pc_hi20(c0)
	ld.w	$a3, $a3, %pc_lo12(c0)
	ld.w	$a4, $fp, 88
	addi.d	$a2, $a2, 32
	st.w	$a2, $fp, 92
	add.d	$a2, $a3, $a2
	addi.d	$a3, $a4, 1
	st.w	$a3, $fp, 88
	slli.d	$a3, $a4, 2
	stx.w	$a2, $a1, $a3
	ld.w	$a1, $fp, 92
	addi.d	$a1, $a1, 256
	st.w	$a1, $fp, 92
.LBB45_9:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end45:
	.size	_Z9rgbModel8R5Mixer, .Lfunc_end45-_Z9rgbModel8R5Mixer
	.cfi_endproc
                                        # -- End function
	.globl	_Z4dumpPKci                     # -- Begin function _Z4dumpPKci
	.p2align	5
	.type	_Z4dumpPKci,@function
_Z4dumpPKci:                            # @_Z4dumpPKci
# %bb.0:
	addi.d	$sp, $sp, -48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	move	$fp, $a1
	move	$a1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.9)
	addi.d	$a0, $a0, %pc_lo12(.L.str.9)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $fp, 2
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$s1, $a1, %pc_lo12(buf)
	ld.w	$a1, $s1, 0
	ld.d	$a2, $s1, 16
	addi.w	$a1, $a1, -1
	and	$a0, $a1, $a0
	ldx.bu	$a0, $a2, $a0
	addi.w	$a3, $fp, 3
	and	$a1, $a1, $a3
	ldx.bu	$a1, $a2, $a1
	slli.d	$a0, $a0, 8
	or	$a0, $a0, $a1
	addi.d	$s2, $a0, 2
	pcalau12i	$a0, %pc_hi20(.L.str.10)
	addi.d	$s0, $a0, %pc_lo12(.L.str.10)
	.p2align	4, , 16
.LBB46_1:                               # =>This Inner Loop Header: Depth=1
	ld.w	$a0, $s1, 0
	ld.d	$a1, $s1, 16
	addi.w	$a0, $a0, -1
	and	$a0, $a0, $fp
	ldx.bu	$a1, $a1, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$s2, $s2, -1
	addi.w	$fp, $fp, 1
	bnez	$s2, .LBB46_1
# %bb.2:
	ori	$a0, $zero, 10
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	pcaddu18i	$t8, %call36(putchar)
	jr	$t8
.Lfunc_end46:
	.size	_Z4dumpPKci, .Lfunc_end46-_Z4dumpPKci
                                        # -- End function
	.globl	_Z8update_kiiRiS_               # -- Begin function _Z8update_kiiRiS_
	.p2align	5
	.type	_Z8update_kiiRiS_,@function
_Z8update_kiiRiS_:                      # @_Z8update_kiiRiS_
# %bb.0:
	ld.w	$a6, $a2, 0
	mul.d	$a4, $a6, $a0
	ori	$t0, $zero, 8
	sub.w	$a5, $t0, $a6
	mul.d	$a5, $a5, $a1
	add.d	$a4, $a5, $a4
	addi.w	$a5, $a4, 0
	srai.d	$a5, $a5, 31
	xor	$a4, $a4, $a5
	sub.d	$a4, $a4, $a5
	bstrpick.d	$a5, $a4, 31, 3
	addi.w	$a4, $a6, 1
	mul.d	$a4, $a4, $a0
	ori	$a7, $zero, 7
	sub.w	$a7, $a7, $a6
	mul.d	$a7, $a7, $a1
	add.d	$a4, $a4, $a7
	addi.w	$a7, $a4, 0
	srai.d	$a7, $a7, 31
	xor	$a4, $a4, $a7
	sub.d	$a4, $a4, $a7
	bstrpick.d	$a7, $a4, 31, 3
	addi.w	$a4, $a5, 0
	beqz	$a6, .LBB47_7
# %bb.1:
	addi.w	$t1, $a6, -1
	mul.d	$a0, $t1, $a0
	ori	$t1, $zero, 9
	sub.w	$t1, $t1, $a6
	mul.d	$a1, $t1, $a1
	add.d	$a0, $a0, $a1
	addi.w	$a1, $a0, 0
	srai.d	$a1, $a1, 31
	xor	$a0, $a0, $a1
	sub.d	$a0, $a0, $a1
	bstrpick.d	$a0, $a0, 31, 3
	beq	$a6, $t0, .LBB47_3
# %bb.2:                                # %.fold.split
	move	$a5, $a7
.LBB47_3:
	addi.w	$a1, $a0, 0
	bgeu	$a1, $a4, .LBB47_6
# %bb.4:
	addi.w	$a6, $a5, 0
	bgeu	$a1, $a6, .LBB47_6
# %bb.5:
	ld.w	$a1, $a3, 0
	addi.d	$a1, $a1, -1
	st.w	$a1, $a3, 0
.LBB47_6:                               # %.thread
	move	$a7, $a5
	ld.w	$a1, $a3, 0
	addi.w	$a5, $a0, 0
	addi.w	$a0, $a7, 0
	bltu	$a0, $a5, .LBB47_8
	b	.LBB47_10
.LBB47_7:
	move	$a0, $a5
	ld.w	$a1, $a3, 0
	addi.w	$a5, $a0, 0
	addi.w	$a0, $a7, 0
	bgeu	$a0, $a5, .LBB47_10
.LBB47_8:                               # %.thread
	bgeu	$a0, $a4, .LBB47_10
# %bb.9:
	addi.w	$a1, $a1, 1
	st.w	$a1, $a3, 0
.LBB47_10:                              # %thread-pre-split
	addi.w	$a0, $zero, -2
	bge	$a1, $a0, .LBB47_12
# %bb.11:
	addi.d	$a0, $zero, -1
	b	.LBB47_13
.LBB47_12:
	ori	$a4, $zero, 3
	ori	$a0, $zero, 1
	blt	$a1, $a4, .LBB47_14
.LBB47_13:                              # %.sink.split
	ld.w	$a1, $a2, 0
	add.d	$a0, $a1, $a0
	st.w	$a0, $a2, 0
	st.w	$zero, $a3, 0
.LBB47_14:
	ret
.Lfunc_end47:
	.size	_Z8update_kiiRiS_, .Lfunc_end47-_Z8update_kiiRiS_
                                        # -- End function
	.globl	_Z9jpegModelR5Mixer             # -- Begin function _Z9jpegModelR5Mixer
	.p2align	5
	.type	_Z9jpegModelR5Mixer,@function
_Z9jpegModelR5Mixer:                    # @_Z9jpegModelR5Mixer
.Lfunc_begin10:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception10
# %bb.0:
	addi.d	$sp, $sp, -272
	.cfi_def_cfa_offset 272
	st.d	$ra, $sp, 264                   # 8-byte Folded Spill
	st.d	$fp, $sp, 256                   # 8-byte Folded Spill
	st.d	$s0, $sp, 248                   # 8-byte Folded Spill
	st.d	$s1, $sp, 240                   # 8-byte Folded Spill
	st.d	$s2, $sp, 232                   # 8-byte Folded Spill
	st.d	$s3, $sp, 224                   # 8-byte Folded Spill
	st.d	$s4, $sp, 216                   # 8-byte Folded Spill
	st.d	$s5, $sp, 208                   # 8-byte Folded Spill
	st.d	$s6, $sp, 200                   # 8-byte Folded Spill
	st.d	$s7, $sp, 192                   # 8-byte Folded Spill
	st.d	$s8, $sp, 184                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a1, %pc_hi20(_ZGVZ9jpegModelR5MixerE2ht)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ9jpegModelR5MixerE2ht)
	st.d	$a0, $sp, 168                   # 8-byte Folded Spill
	dbar	20
	beqz	$a1, .LBB48_238
.LBB48_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3huf)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3huf)
	dbar	20
	beqz	$a0, .LBB48_241
.LBB48_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4hbuf)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4hbuf)
	dbar	20
	beqz	$a0, .LBB48_244
.LBB48_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE5color)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE5color)
	dbar	20
	beqz	$a0, .LBB48_247
.LBB48_4:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4pred)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4pred)
	dbar	20
	beqz	$a0, .LBB48_250
.LBB48_5:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4cbuf)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4cbuf)
	dbar	20
	beqz	$a0, .LBB48_253
.LBB48_6:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE5cbuf2)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE5cbuf2)
	dbar	20
	beqz	$a0, .LBB48_256
.LBB48_7:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE8adv_pred)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE8adv_pred)
	dbar	20
	beqz	$a0, .LBB48_259
.LBB48_8:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4sumu)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4sumu)
	dbar	20
	beqz	$a0, .LBB48_262
.LBB48_9:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4sumv)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4sumv)
	dbar	20
	beqz	$a0, .LBB48_265
.LBB48_10:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2ls)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2ls)
	dbar	20
	beqz	$a0, .LBB48_268
.LBB48_11:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3lcp)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3lcp)
	dbar	20
	beqz	$a0, .LBB48_271
.LBB48_12:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4zpos)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4zpos)
	dbar	20
	beqz	$a0, .LBB48_274
.LBB48_13:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4qtab)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4qtab)
	dbar	20
	beqz	$a0, .LBB48_277
.LBB48_14:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4qmap)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4qmap)
	dbar	20
	beqz	$a0, .LBB48_280
.LBB48_15:
	pcalau12i	$t7, %pc_hi20(bpos)
	ld.w	$a0, $t7, %pc_lo12(bpos)
	pcalau12i	$s1, %pc_hi20(_ZZ9jpegModelR5MixerE4jpeg)
	ld.w	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
	beqz	$a0, .LBB48_20
# %bb.16:
	beqz	$a1, .LBB48_18
# %bb.17:                               # %.thread696
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3app)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3app)
	blez	$a0, .LBB48_27
.LBB48_18:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE9next_jpeg)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE9next_jpeg)
.LBB48_19:                              # %.thread731
	ld.d	$s8, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 232                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 240                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 248                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 256                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 264                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 272
	ret
.LBB48_20:
	pcalau12i	$s2, %pc_hi20(_ZZ9jpegModelR5MixerE3app)
	ld.w	$a4, $s2, %pc_lo12(_ZZ9jpegModelR5MixerE3app)
	ori	$a2, $zero, 1
	slt	$a0, $a2, $a1
	pcalau12i	$a3, %pc_hi20(_ZZ9jpegModelR5MixerE9next_jpeg)
	st.w	$a0, $a3, %pc_lo12(_ZZ9jpegModelR5MixerE9next_jpeg)
	blez	$a4, .LBB48_23
# %bb.21:
	addi.d	$a3, $a4, -1
	st.w	$a3, $s2, %pc_lo12(_ZZ9jpegModelR5MixerE3app)
	bne	$a4, $a2, .LBB48_19
# %bb.22:
	move	$a4, $zero
.LBB48_23:                              # %.critedge788
	beqz	$a1, .LBB48_28
.LBB48_24:
	pcalau12i	$a5, %pc_hi20(_ZZ9jpegModelR5MixerE4data)
	ld.w	$s0, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE4data)
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a3, $a1, %pc_lo12(buf)
	ld.w	$a6, $a3, 0
	pcalau12i	$a1, %pc_hi20(pos)
	beqz	$s0, .LBB48_33
# %bb.25:
	ld.w	$a2, $a1, %pc_lo12(pos)
	ld.d	$a4, $a3, 16
	addi.w	$a7, $a2, -2
	addi.w	$a6, $a6, -1
	and	$a7, $a6, $a7
	ldx.bu	$a7, $a4, $a7
	ori	$t0, $zero, 255
	beq	$a7, $t0, .LBB48_35
.LBB48_26:                              # %.thread1061
	ld.w	$a2, $a1, %pc_lo12(pos)
	ld.w	$a6, $a3, 0
	ld.d	$a1, $a3, 16
	addi.w	$a4, $a6, -1
	b	.LBB48_41
.LBB48_27:                              # %.thread696..thread697_crit_edge
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4data)
	ld.w	$s0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4data)
	b	.LBB48_69
.LBB48_28:
	pcalau12i	$a1, %pc_hi20(pos)
	ld.w	$a1, $a1, %pc_lo12(pos)
	addi.w	$a4, $a1, -4
	pcalau12i	$a2, %pc_hi20(buf)
	addi.d	$a2, $a2, %pc_lo12(buf)
	ld.w	$a3, $a2, 0
	ld.d	$a2, $a2, 16
	addi.w	$a3, $a3, -1
	and	$a4, $a3, $a4
	ldx.bu	$a4, $a2, $a4
	ori	$a5, $zero, 255
	bne	$a4, $a5, .LBB48_19
# %bb.29:
	addi.w	$a4, $a1, -3
	and	$a4, $a3, $a4
	ldx.bu	$a4, $a2, $a4
	ori	$a5, $zero, 216
	bne	$a4, $a5, .LBB48_19
# %bb.30:
	addi.w	$a4, $a1, -2
	and	$a4, $a3, $a4
	ldx.bu	$a4, $a2, $a4
	ori	$a5, $zero, 255
	bne	$a4, $a5, .LBB48_19
# %bb.31:
	addi.w	$a1, $a1, -1
	and	$a1, $a3, $a1
	ldx.bu	$a1, $a2, $a1
	andi	$a1, $a1, 240
	ori	$a2, $zero, 224
	bne	$a1, $a2, .LBB48_19
# %bb.32:
	ori	$a1, $zero, 1
	st.w	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE7mcusize)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE7mcusize)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4data)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4data)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE6htsize)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE6htsize)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE3sof)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE3sof)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE3sos)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE3sos)
	st.w	$zero, $s2, %pc_lo12(_ZZ9jpegModelR5MixerE3app)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4cpos)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE6mcupos)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffsize)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffsize)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffbits)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffbits)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffcode)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffcode)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2rs)
	addi.w	$a2, $zero, -1
	lu32i.d	$a2, 0
	st.w	$a2, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2rs)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE3huf)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE3huf)
	ld.w	$a2, $a1, 0
	ld.d	$a1, $a1, 16
	slli.d	$a3, $a2, 3
	alsl.d	$a2, $a2, $a3, 2
	move	$fp, $a0
	move	$a0, $a1
	move	$a1, $zero
	move	$s0, $t7
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4pred)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4pred)
	ld.w	$a1, $a0, 0
	ld.d	$a0, $a0, 16
	slli.d	$a2, $a1, 2
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$t7, $s0
	move	$a0, $fp
	move	$a4, $zero
	b	.LBB48_24
.LBB48_33:
	ld.w	$a2, $a1, %pc_lo12(pos)
	ld.d	$a1, $a3, 16
	beqz	$a4, .LBB48_37
# %bb.34:                               # %._crit_edge986
	addi.w	$a4, $a6, -1
	b	.LBB48_41
.LBB48_35:
	addi.w	$a2, $a2, -1
	and	$a2, $a6, $a2
	ldx.bu	$a2, $a4, $a2
	beqz	$a2, .LBB48_26
# %bb.36:
	andi	$a2, $a2, 248
	ori	$a4, $zero, 208
	bne	$a2, $a4, .LBB48_61
	b	.LBB48_26
.LBB48_37:
	addi.w	$a7, $a2, -4
	addi.w	$a4, $a6, -1
	and	$a6, $a4, $a7
	ldx.bu	$a6, $a1, $a6
	ori	$a7, $zero, 255
	bne	$a6, $a7, .LBB48_41
# %bb.38:
	addi.w	$a6, $a2, -3
	and	$a6, $a4, $a6
	ldx.bu	$a6, $a1, $a6
	ori	$a7, $zero, 254
	beq	$a6, $a7, .LBB48_40
# %bb.39:
	andi	$a6, $a6, 240
	ori	$a7, $zero, 224
	bne	$a6, $a7, .LBB48_41
.LBB48_40:
	addi.w	$a6, $a2, -2
	and	$a6, $a4, $a6
	ldx.bu	$a6, $a1, $a6
	addi.w	$a7, $a2, -1
	and	$a7, $a4, $a7
	ldx.bu	$a7, $a1, $a7
	slli.d	$a6, $a6, 8
	or	$a6, $a6, $a7
	addi.d	$a6, $a6, 2
	st.w	$a6, $s2, %pc_lo12(_ZZ9jpegModelR5MixerE3app)
.LBB48_41:
	addi.w	$t1, $a2, -5
	and	$a6, $a4, $t1
	ldx.bu	$t2, $a1, $a6
	addi.w	$a6, $a2, -4
	ori	$t0, $zero, 255
	and	$a7, $a4, $a6
	bne	$t2, $t0, .LBB48_46
# %bb.42:
	ldx.bu	$t2, $a1, $a7
	ori	$t3, $zero, 218
	bne	$t2, $t3, .LBB48_46
# %bb.43:
	addi.w	$t2, $a2, -1
	and	$t2, $a4, $t2
	ldx.bu	$t3, $a1, $t2
	addi.d	$t2, $t3, -1
	ori	$t4, $zero, 3
	bltu	$t4, $t2, .LBB48_46
# %bb.44:
	addi.w	$t2, $a2, -3
	and	$t4, $a4, $t2
	ldx.bu	$t4, $a1, $t4
	addi.w	$t5, $a2, -2
	and	$t5, $a4, $t5
	ldx.bu	$t5, $a1, $t5
	slli.d	$t4, $t4, 8
	or	$t4, $t4, $t5
	slli.d	$t3, $t3, 1
	addi.d	$t3, $t3, 6
	bne	$t4, $t3, .LBB48_46
# %bb.45:
	pcalau12i	$t3, %pc_hi20(_ZZ9jpegModelR5MixerE3sos)
	st.w	$t1, $t3, %pc_lo12(_ZZ9jpegModelR5MixerE3sos)
	add.w	$s0, $t2, $t4
	st.w	$s0, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE4data)
	ori	$a5, $zero, 2
	st.w	$a5, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
.LBB48_46:                              # %._crit_edge985
	ldx.bu	$a5, $a1, $a7
	bne	$a5, $t0, .LBB48_50
# %bb.47:
	addi.w	$a5, $a2, -3
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a1, $a5
	ori	$t0, $zero, 196
	bne	$a5, $t0, .LBB48_50
# %bb.48:
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE6htsize)
	ld.w	$a5, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE6htsize)
	ori	$t1, $zero, 7
	blt	$t1, $a5, .LBB48_50
# %bb.49:
	pcalau12i	$a2, %pc_hi20(_ZZ9jpegModelR5MixerE2ht+16)
	ld.d	$a2, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE2ht+16)
	addi.d	$a4, $a5, 1
	st.w	$a4, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE6htsize)
	slli.d	$a4, $a5, 2
	stx.w	$a6, $a2, $a4
	pcalau12i	$a2, %pc_hi20(pos)
	ld.w	$a2, $a2, %pc_lo12(pos)
	ld.w	$a4, $a3, 0
	addi.w	$a6, $a2, -4
	addi.w	$a4, $a4, -1
	and	$a7, $a4, $a6
.LBB48_50:
	ldx.bu	$a7, $a1, $a7
	ori	$t0, $zero, 255
	pcalau12i	$a5, %pc_hi20(_ZZ9jpegModelR5MixerE9dqt_state)
	beq	$a7, $t0, .LBB48_57
.LBB48_51:
	ld.w	$a6, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE9dqt_state)
	bltz	$a6, .LBB48_66
# %bb.52:
	pcalau12i	$a7, %pc_hi20(_ZZ9jpegModelR5MixerE7dqt_end)
	ld.w	$a7, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE7dqt_end)
	bge	$a2, $a7, .LBB48_60
# %bb.53:
	bstrpick.d	$a7, $a6, 31, 0
	lu12i.w	$t0, -16132
	ori	$t0, $t0, 253
	lu32i.d	$t0, 0
	mul.d	$a7, $a7, $t0
	srli.d	$a7, $a7, 38
	slli.d	$t1, $a7, 6
	addi.w	$t0, $a2, -1
	and	$t0, $a4, $t0
	ldx.bu	$t0, $a1, $t0
	add.d	$a7, $t1, $a7
	sub.w	$a7, $a6, $a7
	beqz	$a7, .LBB48_63
# %bb.54:
	beqz	$t0, .LBB48_61
# %bb.55:
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4qnum)
	ld.w	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4qnum)
	ori	$a2, $zero, 4
	bgeu	$a1, $a2, .LBB48_61
# %bb.56:
	addi.d	$a0, $t0, -1
	pcalau12i	$a2, %pc_hi20(_ZZ9jpegModelR5MixerE4qtab+16)
	ld.d	$a2, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE4qtab+16)
	slli.d	$a1, $a1, 6
	add.d	$a1, $a7, $a1
	addi.w	$a1, $a1, -1
	stx.b	$a0, $a2, $a1
	pcalau12i	$a0, %pc_hi20(pos)
	ld.w	$a2, $a0, %pc_lo12(pos)
	ld.w	$a0, $a3, 0
	ld.d	$a1, $a3, 16
	addi.w	$a4, $a0, -1
	b	.LBB48_64
.LBB48_57:
	addi.w	$a7, $a2, -3
	and	$a7, $a4, $a7
	ldx.bu	$a7, $a1, $a7
	ori	$t0, $zero, 219
	beq	$a7, $t0, .LBB48_62
# %bb.58:
	ori	$t0, $zero, 192
	bne	$a7, $t0, .LBB48_51
# %bb.59:                               # %.thread1071
	pcalau12i	$a7, %pc_hi20(_ZZ9jpegModelR5MixerE3sof)
	st.w	$a6, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE3sof)
	b	.LBB48_51
.LBB48_60:
	addi.d	$a0, $zero, -1
	b	.LBB48_65
.LBB48_61:
	st.w	$zero, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
	b	.LBB48_19
.LBB48_62:
	addi.w	$a0, $a2, -2
	and	$a0, $a4, $a0
	ldx.bu	$a3, $a1, $a0
	addi.w	$a6, $a2, -1
	and	$a0, $a4, $a6
	ldx.bu	$a7, $a1, $a0
	move	$a0, $zero
	slli.d	$a3, $a3, 8
	add.d	$a3, $a6, $a3
	add.d	$a3, $a3, $a7
	pcalau12i	$a6, %pc_hi20(_ZZ9jpegModelR5MixerE7dqt_end)
	st.w	$a3, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE7dqt_end)
	b	.LBB48_65
.LBB48_63:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4qnum)
	st.w	$t0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4qnum)
.LBB48_64:
	addi.d	$a0, $a6, 1
.LBB48_65:                              # %.sink.split
	st.w	$a0, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE9dqt_state)
.LBB48_66:
	addi.w	$a0, $a2, -2
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a1, $a0
	ori	$a3, $zero, 255
	bne	$a0, $a3, .LBB48_69
# %bb.67:
	addi.w	$a0, $a2, -1
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a1, $a0
	andi	$a0, $a0, 248
	ori	$a1, $zero, 208
	bne	$a0, $a1, .LBB48_69
# %bb.68:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE6mcupos)
	st.w	$zero, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE8huffsize)
	st.w	$zero, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8huffsize)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE8huffbits)
	st.w	$zero, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8huffbits)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE8huffcode)
	st.w	$zero, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8huffcode)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2rs)
	addi.w	$a1, $zero, -1
	lu32i.d	$a1, 0
	st.w	$a1, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2rs)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4pred)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4pred)
	ld.w	$a1, $a0, 0
	ld.d	$a0, $a0, 16
	slli.d	$a2, $a1, 2
	move	$a1, $zero
	move	$fp, $t7
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$t7, $fp
.LBB48_69:                              # %.thread697
	pcalau12i	$a0, %pc_hi20(pos)
	st.d	$a0, $sp, 176                   # 8-byte Folded Spill
	ld.w	$a0, $a0, %pc_lo12(pos)
	bne	$a0, $s0, .LBB48_107
# %bb.70:                               # %.thread697
	ld.w	$a0, $t7, %pc_lo12(bpos)
	ori	$a1, $zero, 1
	bne	$a0, $a1, .LBB48_107
# %bb.71:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE6htsize)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE6htsize)
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	blez	$a0, .LBB48_123
# %bb.72:                               # %.preheader813.preheader
	st.d	$t7, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2ht+16)
	st.d	$a0, $sp, 152                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a0, $a0, %pc_lo12(buf)
	move	$a3, $zero
	ori	$a4, $zero, 9
	pcalau12i	$a7, %pc_hi20(_ZZ9jpegModelR5MixerE3huf+16)
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE4hbuf+16)
	ori	$t1, $zero, 256
.LBB48_73:                              # %.preheader813
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_74 Depth 2
                                        #       Child Loop BB48_81 Depth 3
	ld.d	$a1, $sp, 152                   # 8-byte Folded Reload
	ld.d	$a2, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2ht+16)
	slli.d	$t3, $a3, 2
	ldx.w	$a2, $a2, $t3
	ld.w	$t4, $a0, 0
	move	$t3, $zero
	ld.d	$t5, $a0, 16
	addi.w	$t6, $a2, 2
	addi.w	$t4, $t4, -1
	and	$t7, $t4, $t6
	ldx.bu	$t7, $t5, $t7
	addi.w	$t8, $a2, 3
	and	$t4, $t4, $t8
	ldx.bu	$t4, $t5, $t4
	addi.w	$t5, $a2, 4
	slli.d	$a2, $t7, 8
	add.d	$a2, $t6, $a2
	add.w	$t4, $a2, $t4
	.p2align	4, , 16
.LBB48_74:                              #   Parent Loop BB48_73 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_81 Depth 3
	bge	$t5, $t4, .LBB48_83
# %bb.75:                               #   in Loop: Header=BB48_74 Depth=2
	ld.d	$a1, $sp, 176                   # 8-byte Folded Reload
	ld.w	$a2, $a1, %pc_lo12(pos)
	bge	$t4, $a2, .LBB48_83
# %bb.76:                               #   in Loop: Header=BB48_74 Depth=2
	addi.d	$a2, $t5, 2047
	addi.w	$a2, $a2, 53
	bge	$t4, $a2, .LBB48_83
# %bb.77:                               #   in Loop: Header=BB48_74 Depth=2
	beq	$t3, $a4, .LBB48_83
# %bb.78:                               #   in Loop: Header=BB48_74 Depth=2
	ld.w	$a2, $a0, 0
	ld.d	$t6, $a0, 16
	addi.w	$a2, $a2, -1
	and	$a2, $a2, $t5
	ldx.bu	$a2, $t6, $a2
	ori	$a1, $zero, 31
	bltu	$a1, $a2, .LBB48_83
# %bb.79:                               #   in Loop: Header=BB48_74 Depth=2
	andi	$t6, $a2, 15
	ori	$a1, $zero, 3
	bltu	$a1, $t6, .LBB48_83
# %bb.80:                               #   in Loop: Header=BB48_74 Depth=2
	move	$t8, $zero
	addi.w	$t3, $t3, 1
	srli.d	$fp, $a2, 4
	ld.d	$t7, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE3huf+16)
	addi.w	$s0, $t5, 17
	slli.d	$a2, $fp, 10
	slli.d	$s1, $t6, 8
	or	$a2, $a2, $s1
	move	$s1, $s0
	.p2align	4, , 16
.LBB48_81:                              #   Parent Loop BB48_73 Depth=1
                                        #     Parent Loop BB48_74 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.w	$a1, $a0, 0
	ld.d	$a5, $a0, 16
	addi.w	$a1, $a1, -1
	and	$a1, $a1, $s1
	ld.d	$a6, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE4hbuf+16)
	ldx.b	$a1, $a5, $a1
	add.d	$a5, $a6, $a2
	stx.b	$a1, $a5, $t8
	addi.d	$t8, $t8, 1
	addi.w	$s1, $s1, 1
	bne	$t8, $t1, .LBB48_81
# %bb.82:                               # %.preheader812
                                        #   in Loop: Header=BB48_74 Depth=2
	slli.d	$t8, $fp, 6
	slli.d	$t6, $t6, 4
	or	$t6, $t8, $t6
	ld.w	$t8, $a0, 0
	ori	$a1, $zero, 12
	mul.d	$fp, $t6, $a1
	addi.w	$s1, $t5, 1
	ld.d	$t6, $a0, 16
	addi.w	$t8, $t8, -1
	stx.w	$zero, $t7, $fp
	and	$s1, $t8, $s1
	ldx.bu	$s3, $t6, $s1
	add.d	$t7, $t7, $fp
	st.w	$s3, $t7, 4
	st.w	$a2, $t7, 8
	ldx.bu	$s5, $t6, $s1
	slli.d	$fp, $s3, 1
	st.w	$fp, $t7, 12
	addi.w	$fp, $t5, 2
	and	$fp, $t8, $fp
	ldx.bu	$s1, $t6, $fp
	or	$a2, $a2, $s5
	alsl.d	$s1, $s3, $s1, 1
	st.w	$s1, $t7, 16
	st.w	$a2, $t7, 20
	ldx.bu	$s4, $t6, $fp
	slli.d	$fp, $s1, 1
	st.w	$fp, $t7, 24
	addi.w	$fp, $t5, 3
	and	$fp, $t8, $fp
	ldx.bu	$s3, $t6, $fp
	add.d	$a2, $a2, $s4
	alsl.d	$s1, $s1, $s3, 1
	st.w	$s1, $t7, 28
	st.w	$a2, $t7, 32
	ldx.bu	$s7, $t6, $fp
	slli.d	$fp, $s1, 1
	st.w	$fp, $t7, 36
	addi.w	$fp, $t5, 4
	and	$fp, $t8, $fp
	ldx.bu	$s3, $t6, $fp
	add.d	$a2, $a2, $s7
	alsl.w	$s8, $s1, $s3, 1
	alsl.d	$s1, $s1, $s3, 1
	st.w	$s1, $t7, 40
	st.w	$a2, $t7, 44
	ldx.bu	$s6, $t6, $fp
	slli.d	$fp, $s8, 1
	st.w	$fp, $t7, 48
	addi.w	$fp, $t5, 5
	and	$fp, $t8, $fp
	ldx.bu	$s1, $t6, $fp
	add.d	$a2, $a2, $s6
	alsl.w	$s3, $s8, $s1, 1
	alsl.d	$s1, $s8, $s1, 1
	st.w	$s1, $t7, 52
	st.w	$a2, $t7, 56
	ldx.bu	$ra, $t6, $fp
	slli.d	$fp, $s3, 1
	st.w	$fp, $t7, 60
	addi.w	$fp, $t5, 6
	and	$fp, $t8, $fp
	ldx.bu	$s1, $t6, $fp
	add.d	$a2, $a2, $ra
	alsl.w	$s2, $s3, $s1, 1
	alsl.d	$s1, $s3, $s1, 1
	st.w	$s1, $t7, 64
	st.w	$a2, $t7, 68
	ldx.bu	$s8, $t6, $fp
	slli.d	$fp, $s2, 1
	st.w	$fp, $t7, 72
	addi.w	$fp, $t5, 7
	and	$fp, $t8, $fp
	ldx.bu	$s1, $t6, $fp
	add.d	$a2, $a2, $s8
	alsl.w	$a1, $s2, $s1, 1
	alsl.d	$s1, $s2, $s1, 1
	st.w	$s1, $t7, 76
	st.w	$a2, $t7, 80
	ldx.bu	$s3, $t6, $fp
	slli.d	$fp, $a1, 1
	st.w	$fp, $t7, 84
	addi.w	$fp, $t5, 8
	and	$fp, $t8, $fp
	ldx.bu	$s1, $t6, $fp
	add.d	$a2, $a2, $s3
	alsl.w	$s2, $a1, $s1, 1
	alsl.d	$a1, $a1, $s1, 1
	st.w	$a1, $t7, 88
	st.w	$a2, $t7, 92
	ldx.bu	$fp, $t6, $fp
	slli.d	$a1, $s2, 1
	st.w	$a1, $t7, 96
	addi.w	$a1, $t5, 9
	and	$a1, $t8, $a1
	ldx.bu	$s1, $t6, $a1
	add.d	$a2, $a2, $fp
	alsl.w	$t2, $s2, $s1, 1
	alsl.d	$s1, $s2, $s1, 1
	st.w	$s1, $t7, 100
	st.w	$a2, $t7, 104
	ldx.bu	$s1, $t6, $a1
	slli.d	$a1, $t2, 1
	st.w	$a1, $t7, 108
	addi.w	$a1, $t5, 10
	and	$a1, $t8, $a1
	ldx.bu	$s2, $t6, $a1
	add.d	$a6, $a2, $s1
	alsl.w	$a5, $t2, $s2, 1
	alsl.d	$a2, $t2, $s2, 1
	st.w	$a2, $t7, 112
	st.w	$a6, $t7, 116
	ldx.bu	$a2, $t6, $a1
	slli.d	$a1, $a5, 1
	st.w	$a1, $t7, 120
	addi.w	$a1, $t5, 11
	and	$a1, $t8, $a1
	ldx.bu	$t2, $t6, $a1
	add.d	$s2, $s0, $s5
	add.d	$a6, $a6, $a2
	alsl.w	$s5, $a5, $t2, 1
	alsl.d	$a5, $a5, $t2, 1
	st.w	$a5, $t7, 124
	st.w	$a6, $t7, 128
	ldx.bu	$s0, $t6, $a1
	slli.d	$a1, $s5, 1
	st.w	$a1, $t7, 132
	addi.w	$a1, $t5, 12
	and	$a1, $t8, $a1
	ldx.bu	$a5, $t6, $a1
	add.d	$t2, $s2, $s4
	add.d	$t2, $t2, $s7
	add.d	$a6, $a6, $s0
	alsl.w	$s2, $s5, $a5, 1
	alsl.d	$a5, $s5, $a5, 1
	st.w	$a5, $t7, 136
	st.w	$a6, $t7, 140
	ldx.bu	$a1, $t6, $a1
	slli.d	$a5, $s2, 1
	st.w	$a5, $t7, 144
	addi.w	$a5, $t5, 13
	and	$a5, $t8, $a5
	ldx.bu	$s4, $t6, $a5
	add.d	$t2, $t2, $s6
	add.d	$t2, $t2, $ra
	add.d	$a6, $a6, $a1
	alsl.w	$s5, $s2, $s4, 1
	alsl.d	$s2, $s2, $s4, 1
	st.w	$s2, $t7, 148
	st.w	$a6, $t7, 152
	ldx.bu	$a5, $t6, $a5
	slli.d	$s2, $s5, 1
	st.w	$s2, $t7, 156
	addi.w	$s2, $t5, 14
	and	$s2, $t8, $s2
	ldx.bu	$s4, $t6, $s2
	add.d	$t2, $t2, $s8
	add.d	$t2, $t2, $s3
	add.w	$a6, $a6, $a5
	alsl.w	$s3, $s5, $s4, 1
	alsl.d	$s4, $s5, $s4, 1
	st.w	$s4, $t7, 160
	st.w	$a6, $t7, 164
	ldx.bu	$s2, $t6, $s2
	slli.d	$s4, $s3, 1
	st.w	$s4, $t7, 168
	addi.w	$s4, $t5, 15
	and	$s4, $t8, $s4
	ldx.bu	$s5, $t6, $s4
	add.d	$t2, $t2, $fp
	add.d	$t2, $t2, $s1
	add.d	$a2, $t2, $a2
	alsl.w	$t2, $s3, $s5, 1
	alsl.d	$fp, $s3, $s5, 1
	add.d	$a6, $a6, $s2
	st.w	$fp, $t7, 172
	st.w	$a6, $t7, 176
	ldx.bu	$fp, $t6, $s4
	slli.d	$s1, $t2, 1
	st.w	$s1, $t7, 180
	addi.w	$t5, $t5, 16
	and	$t5, $t8, $t5
	ldx.bu	$t8, $t6, $t5
	add.d	$a2, $a2, $s0
	add.d	$a1, $a2, $a1
	add.d	$a2, $a6, $fp
	alsl.d	$a6, $t2, $t8, 1
	st.w	$a6, $t7, 184
	st.w	$a2, $t7, 188
	ldx.bu	$a6, $t6, $t5
	add.d	$a1, $a1, $a5
	add.d	$a1, $a1, $s2
	add.d	$a1, $a1, $fp
	add.d	$a2, $a2, $a6
	bstrpick.d	$a2, $a2, 31, 11
	add.w	$t5, $a1, $a6
	beqz	$a2, .LBB48_74
	b	.LBB48_287
	.p2align	4, , 16
.LBB48_83:                              # %.critedge
                                        #   in Loop: Header=BB48_73 Depth=1
	bne	$t5, $t4, .LBB48_287
# %bb.84:                               #   in Loop: Header=BB48_73 Depth=1
	addi.d	$a3, $a3, 1
	ld.d	$a1, $sp, 144                   # 8-byte Folded Reload
	bne	$a3, $a1, .LBB48_73
# %bb.85:
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffsize)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffsize)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffbits)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffbits)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffcode)
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffcode)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2rs)
	pcalau12i	$a2, %pc_hi20(_ZZ9jpegModelR5MixerE3sof)
	ld.w	$a2, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE3sof)
	pcalau12i	$a3, %pc_hi20(_ZZ9jpegModelR5MixerE3sos)
	ld.w	$a4, $a3, %pc_lo12(_ZZ9jpegModelR5MixerE3sos)
	addi.w	$a3, $zero, -1
	lu32i.d	$a3, 0
	st.w	$a3, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2rs)
	bnez	$a2, .LBB48_87
# %bb.86:
	bnez	$a4, .LBB48_18
.LBB48_87:
	ld.w	$a1, $a0, 0
	ld.d	$a3, $a0, 16
	addi.w	$a5, $a4, 4
	addi.w	$a1, $a1, -1
	and	$a5, $a1, $a5
	ldx.bu	$a5, $a3, $a5
	ori	$a6, $zero, 4
	bltu	$a6, $a5, .LBB48_287
# %bb.88:
	addi.w	$a6, $a2, 9
	and	$a1, $a1, $a6
	ldx.bu	$a6, $a3, $a1
	ori	$a1, $zero, 5
	bgeu	$a6, $a1, .LBB48_287
# %bb.89:
	pcalau12i	$s0, %pc_hi20(_ZZ9jpegModelR5MixerE7mcusize)
	st.w	$zero, $s0, %pc_lo12(_ZZ9jpegModelR5MixerE7mcusize)
	beqz	$a5, .LBB48_287
# %bb.90:
	beqz	$a6, .LBB48_287
# %bb.91:                               # %.preheader811.us.preheader
	ori	$t0, $zero, 11
	pcalau12i	$a7, %pc_hi20(_ZZ9jpegModelR5MixerE5color+16)
	pcalau12i	$t1, %pc_hi20(_ZZ9jpegModelR5MixerE4qmap+16)
	ori	$t2, $zero, 10
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE6hufsel)
	addi.d	$t3, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE6hufsel)
	move	$t4, $zero
	move	$s4, $zero
	move	$a1, $zero
	ori	$t5, $zero, 63
	ori	$t6, $zero, 3
.LBB48_92:                              # %.preheader811.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_94 Depth 2
                                        #       Child Loop BB48_98 Depth 3
	move	$t7, $zero
	alsl.d	$fp, $t4, $a4, 1
	addi.w	$t8, $fp, 5
	addi.w	$s5, $fp, 6
	b	.LBB48_94
.LBB48_93:                              # %.loopexit810.us
                                        #   in Loop: Header=BB48_94 Depth=2
	addi.w	$t7, $t7, 1
	beq	$t7, $a6, .LBB48_103
.LBB48_94:                              #   Parent Loop BB48_92 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_98 Depth 3
	ld.w	$fp, $a0, 0
	addi.w	$fp, $fp, -1
	and	$s1, $fp, $t8
	ldx.bu	$s2, $a3, $s1
	alsl.d	$s1, $t7, $t7, 1
	add.d	$s1, $s1, $a2
	addi.w	$s3, $s1, 10
	and	$s3, $fp, $s3
	ldx.bu	$s3, $a3, $s3
	bne	$s2, $s3, .LBB48_93
# %bb.95:                               #   in Loop: Header=BB48_94 Depth=2
	addi.w	$s2, $s1, 11
	and	$fp, $fp, $s2
	ldx.bu	$fp, $a3, $fp
	srli.d	$s3, $fp, 4
	andi	$fp, $fp, 15
	mul.d	$fp, $fp, $s3
	beqz	$fp, .LBB48_287
# %bb.96:                               #   in Loop: Header=BB48_94 Depth=2
	add.w	$s2, $a1, $fp
	bge	$s2, $t0, .LBB48_287
# %bb.97:                               # %.preheader809.us
                                        #   in Loop: Header=BB48_94 Depth=2
	addi.w	$s2, $s4, 0
	slt	$s4, $s2, $s3
	maskeqz	$s3, $s3, $s4
	masknez	$s2, $s2, $s4
	or	$s4, $s3, $s2
	ld.d	$s2, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE5color+16)
	addi.w	$s1, $s1, 12
	ld.d	$s7, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE4qmap+16)
	slt	$s3, $t2, $a1
	masknez	$s6, $t2, $s3
	maskeqz	$s3, $a1, $s3
	or	$s8, $s3, $s6
	alsl.d	$s3, $a1, $t3, 2
	alsl.d	$s6, $a1, $s2, 2
	alsl.d	$s7, $a1, $s7, 2
	sub.d	$s8, $s8, $a1
.LBB48_98:                              #   Parent Loop BB48_92 Depth=1
                                        #     Parent Loop BB48_94 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	beqz	$s8, .LBB48_287
# %bb.99:                               #   in Loop: Header=BB48_98 Depth=3
	ld.w	$s2, $a0, 0
	addi.w	$s2, $s2, -1
	and	$s2, $s2, $s5
	ldx.bu	$s2, $a3, $s2
	srli.d	$ra, $s2, 4
	st.w	$ra, $s3, 0
	andi	$ra, $s2, 15
	st.w	$ra, $s3, 40
	bltu	$t5, $s2, .LBB48_287
# %bb.100:                              #   in Loop: Header=BB48_98 Depth=3
	bltu	$t6, $ra, .LBB48_287
# %bb.101:                              #   in Loop: Header=BB48_98 Depth=3
	st.w	$t4, $s6, 0
	ld.w	$s2, $a0, 0
	addi.w	$s2, $s2, -1
	and	$s2, $s2, $s1
	ldx.bu	$ra, $a3, $s2
	bltu	$t6, $ra, .LBB48_287
# %bb.102:                              #   in Loop: Header=BB48_98 Depth=3
	st.w	$ra, $s7, 0
	addi.w	$fp, $fp, -1
	addi.w	$a1, $a1, 1
	st.w	$a1, $s0, %pc_lo12(_ZZ9jpegModelR5MixerE7mcusize)
	addi.d	$s3, $s3, 4
	addi.d	$s6, $s6, 4
	addi.d	$s7, $s7, 4
	addi.d	$s8, $s8, -1
	bnez	$fp, .LBB48_98
	b	.LBB48_93
.LBB48_103:                             # %..thread722_crit_edge.us
                                        #   in Loop: Header=BB48_92 Depth=1
	addi.w	$t4, $t4, 1
	bne	$t4, $a5, .LBB48_92
# %bb.104:                              # %._crit_edge
	addi.w	$a4, $s4, -1
	ori	$a5, $zero, 9
	bltu	$a5, $a4, .LBB48_287
# %bb.105:                              # %.preheader808
	blez	$a1, .LBB48_283
# %bb.106:                              # %.lr.ph858
	pcalau12i	$a4, %pc_hi20(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$a4, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$a5, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE5color+16)
	move	$a6, $zero
	move	$a7, $zero
	ori	$t0, $zero, 1
	b	.LBB48_233
.LBB48_107:                             # %thread-pre-split735
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE7mcusize)
	ld.w	$s5, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE7mcusize)
	pcalau12i	$s4, %pc_hi20(y)
	beqz	$s5, .LBB48_207
.LBB48_108:
	ld.w	$a0, $t7, %pc_lo12(bpos)
	ld.d	$a1, $sp, 176                   # 8-byte Folded Reload
	ld.w	$a1, $a1, %pc_lo12(pos)
	sltui	$a0, $a0, 1
	pcalau12i	$a2, %pc_hi20(buf)
	addi.d	$a2, $a2, %pc_lo12(buf)
	ld.w	$a3, $a2, 0
	ld.d	$a2, $a2, 16
	addi.w	$a3, $a3, -1
	sub.w	$a0, $a0, $a1
	andn	$a0, $a3, $a0
	ldx.bu	$a0, $a2, $a0
	ori	$a1, $zero, 255
	beq	$a0, $a1, .LBB48_207
# %bb.109:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE8huffbits)
	ld.w	$a3, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8huffbits)
	ori	$a1, $zero, 33
	bge	$a3, $a1, .LBB48_287
# %bb.110:
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffcode)
	ld.w	$a4, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffcode)
	ld.w	$a5, $s4, %pc_lo12(y)
	alsl.w	$a6, $a4, $a5, 1
	pcalau12i	$a2, %pc_hi20(_ZZ9jpegModelR5MixerE2rs)
	ld.w	$a7, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE2rs)
	alsl.d	$a4, $a4, $a5, 1
	st.w	$a4, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffcode)
	addi.w	$a4, $a3, 1
	st.w	$a4, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8huffbits)
	bltz	$a7, .LBB48_124
.LBB48_111:                             # %.thread744
	pcalau12i	$a3, %pc_hi20(_ZZ9jpegModelR5MixerE8huffsize)
	ld.w	$a5, $a3, %pc_lo12(_ZZ9jpegModelR5MixerE8huffsize)
	andi	$t0, $a7, 15
	add.w	$a5, $a5, $t0
	bne	$a5, $a4, .LBB48_207
# %bb.112:
	pcalau12i	$a4, %pc_hi20(_ZZ9jpegModelR5MixerE6mcupos)
	ld.wu	$t1, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	pcalau12i	$a5, %pc_hi20(_ZZ9jpegModelR5MixerE3rs1)
	st.w	$a7, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE3rs1)
	andi	$a5, $t1, 63
	pcalau12i	$t2, %pc_hi20(_ZZ9jpegModelR5MixerE5cbuf2)
	addi.d	$s0, $t2, %pc_lo12(_ZZ9jpegModelR5MixerE5cbuf2)
	beqz	$a5, .LBB48_133
# %bb.113:
	beqz	$a7, .LBB48_140
# %bb.114:
	ori	$a5, $zero, 11
	bgeu	$t0, $a5, .LBB48_287
# %bb.115:
	bstrpick.d	$t5, $a7, 31, 4
	add.d	$a5, $t1, $t5
	xor	$a5, $a5, $t1
	addi.w	$a5, $a5, 0
	ori	$t2, $zero, 64
	bgeu	$a5, $t2, .LBB48_287
# %bb.116:
	add.d	$a5, $t5, $t1
	addi.w	$a5, $a5, 1
	st.w	$a5, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	addi.d	$t1, $zero, -1
	sll.w	$t2, $t1, $t0
	andn	$t1, $a6, $t2
	beqz	$t0, .LBB48_118
# %bb.117:
	nor	$t2, $t2, $zero
	addi.d	$t3, $t0, -1
	srl.w	$t3, $t1, $t3
	sltui	$t3, $t3, 1
	maskeqz	$t2, $t2, $t3
	sub.d	$t1, $t1, $t2
.LBB48_118:
	pcalau12i	$t2, %pc_hi20(_ZZ9jpegModelR5MixerE4cpos)
	ld.w	$t4, $t2, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	ori	$t6, $zero, 16
	pcalau12i	$t3, %pc_hi20(_ZZ9jpegModelR5MixerE4cbuf)
	addi.d	$t3, $t3, %pc_lo12(_ZZ9jpegModelR5MixerE4cbuf)
	bltu	$a7, $t6, .LBB48_122
# %bb.119:                              # %.lr.ph862.preheader
	move	$fp, $t7
	addi.d	$a7, $t5, 1
	slli.d	$t5, $t5, 4
	or	$t5, $t5, $t0
	ori	$t6, $zero, 1
.LBB48_120:                             # %.lr.ph862
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$t7, $s0, 0
	ld.d	$t8, $s0, 16
	addi.w	$t7, $t7, -1
	and	$t7, $t7, $t4
	slli.d	$t7, $t7, 2
	stx.w	$zero, $t8, $t7
	ld.w	$t7, $t3, 0
	ld.d	$t8, $t3, 16
	addi.w	$t7, $t7, -1
	and	$t7, $t7, $t4
	addi.w	$t4, $t4, 1
	stx.b	$t5, $t8, $t7
	addi.w	$a7, $a7, -1
	addi.d	$t5, $t5, -16
	bltu	$t6, $a7, .LBB48_120
# %bb.121:                              # %._crit_edge863
	st.w	$t4, $t2, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	move	$t7, $fp
.LBB48_122:
	ld.w	$a7, $s0, 0
	ld.d	$t5, $s0, 16
	addi.w	$a7, $a7, -1
	and	$a7, $a7, $t4
	slli.d	$a7, $a7, 2
	stx.w	$t1, $t5, $a7
	slli.d	$a7, $t0, 4
	slli.d	$a6, $a6, 2
	srl.w	$a6, $a6, $t0
	bstrins.d	$a7, $a6, 1, 0
	ori	$a6, $a7, 12
	ld.w	$a7, $t3, 0
	addi.d	$t6, $t4, 1
	ld.d	$t1, $t3, 16
	st.w	$t6, $t2, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	addi.w	$a7, $a7, -1
	and	$a7, $a7, $t4
	stx.b	$a6, $t1, $a7
	pcalau12i	$a6, %pc_hi20(_ZZ9jpegModelR5MixerE4ssum)
	ld.w	$a7, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE4ssum)
	add.d	$a7, $a7, $t0
	st.w	$a7, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE4ssum)
	b	.LBB48_147
.LBB48_123:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE9next_jpeg)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE9next_jpeg)
	st.w	$zero, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
	b	.LBB48_19
.LBB48_124:
	ori	$a5, $zero, 16
	bgeu	$a3, $a5, .LBB48_287
# %bb.125:
	pcalau12i	$a5, %pc_hi20(_ZZ9jpegModelR5MixerE6mcupos)
	ld.w	$a7, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	ori	$a5, $zero, 640
	bgeu	$a7, $a5, .LBB48_287
# %bb.126:
	andi	$a5, $a7, 63
	sltu	$a5, $zero, $a5
	bstrpick.d	$a7, $a7, 31, 6
	slli.d	$t0, $a5, 3
	slli.d	$t1, $a5, 5
	or	$t0, $t1, $t0
	pcalau12i	$t1, %pc_hi20(_ZZ9jpegModelR5MixerE6hufsel)
	addi.d	$t1, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE6hufsel)
	add.d	$t0, $t1, $t0
	slli.d	$a7, $a7, 2
	bstrpick.d	$a7, $a7, 59, 2
	slli.d	$a7, $a7, 2
	ldx.w	$a7, $t0, $a7
	ori	$t0, $zero, 4
	bgeu	$a7, $t0, .LBB48_287
# %bb.127:
	slli.w	$a5, $a5, 6
	slli.w	$a7, $a7, 4
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE3huf+16)
	ld.d	$t0, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE3huf+16)
	or	$a5, $a7, $a5
	ori	$a7, $zero, 12
	mul.d	$a5, $a5, $a7
	add.d	$t0, $t0, $a5
	mul.d	$a3, $a3, $a7
	add.d	$a5, $t0, $a3
	ldx.w	$a3, $t0, $a3
	ld.w	$a7, $a5, 4
	bltu	$a7, $a3, .LBB48_287
# %bb.128:
	ld.w	$a5, $a5, 8
	ori	$t0, $zero, 2048
	bge	$a5, $t0, .LBB48_287
# %bb.129:
	bgeu	$a6, $a7, .LBB48_207
# %bb.130:
	bltu	$a6, $a3, .LBB48_287
# %bb.131:
	sub.d	$a3, $a6, $a3
	add.w	$a3, $a3, $a5
	bstrpick.d	$a5, $a3, 31, 11
	bnez	$a5, .LBB48_287
# %bb.132:                              # %.thread762
	pcalau12i	$a5, %pc_hi20(_ZZ9jpegModelR5MixerE4hbuf+16)
	ld.d	$a5, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE4hbuf+16)
	ldx.bu	$a7, $a5, $a3
	st.w	$a7, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE2rs)
	pcalau12i	$a3, %pc_hi20(_ZZ9jpegModelR5MixerE8huffsize)
	st.w	$a4, $a3, %pc_lo12(_ZZ9jpegModelR5MixerE8huffsize)
	b	.LBB48_111
.LBB48_133:
	ori	$a5, $zero, 12
	bgeu	$a7, $a5, .LBB48_287
# %bb.134:
	ori	$a5, $t1, 1
	st.w	$a5, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	addi.d	$t0, $zero, -1
	sll.w	$t0, $t0, $a7
	andn	$a6, $a6, $t0
	beqz	$a7, .LBB48_136
# %bb.135:
	nor	$t0, $t0, $zero
	addi.d	$t2, $a7, -1
	srl.w	$t2, $a6, $t2
	sltui	$t2, $t2, 1
	maskeqz	$t0, $t0, $t2
	sub.d	$a6, $a6, $t0
.LBB48_136:
	ori	$t0, $zero, 640
	bgeu	$t1, $t0, .LBB48_287
# %bb.137:
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE5color+16)
	ld.d	$t0, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE5color+16)
	srli.d	$t1, $t1, 4
	lu12i.w	$t2, 65535
	ori	$t2, $t2, 4092
	and	$t1, $t1, $t2
	ldx.w	$t0, $t0, $t1
	ori	$t1, $zero, 4
	bgeu	$t0, $t1, .LBB48_287
# %bb.138:
	pcalau12i	$t1, %pc_hi20(_ZZ9jpegModelR5MixerE4pred+16)
	ld.d	$t2, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE4pred+16)
	slli.d	$t0, $t0, 2
	ldx.w	$t1, $t2, $t0
	add.d	$t1, $t1, $a6
	stx.w	$t1, $t2, $t0
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE4cpos)
	ld.w	$a6, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	andi	$t2, $a6, 63
	bnez	$t2, .LBB48_287
# %bb.139:
	ld.w	$t2, $s0, 0
	ld.d	$t3, $s0, 16
	addi.w	$t2, $t2, -1
	and	$t2, $t2, $a6
	slli.d	$t2, $t2, 2
	stx.w	$t1, $t3, $t2
	addi.d	$t1, $t1, 1023
	srli.d	$t1, $t1, 3
	ori	$t6, $a6, 1
	st.w	$t6, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE4cbuf)
	addi.d	$t0, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE4cbuf)
	ld.w	$t2, $t0, 0
	ld.d	$t0, $t0, 16
	addi.w	$t2, $t2, -1
	and	$a6, $t2, $a6
	stx.b	$t1, $t0, $a6
	pcalau12i	$a6, %pc_hi20(_ZZ9jpegModelR5MixerE5ssum2)
	ld.w	$t0, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE5ssum2)
	pcalau12i	$t1, %pc_hi20(_ZZ9jpegModelR5MixerE5ssum1)
	ld.w	$t2, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE5ssum1)
	pcalau12i	$t3, %pc_hi20(_ZZ9jpegModelR5MixerE4ssum)
	ld.w	$t4, $t3, %pc_lo12(_ZZ9jpegModelR5MixerE4ssum)
	pcalau12i	$t5, %pc_hi20(_ZZ9jpegModelR5MixerE5ssum3)
	st.w	$t0, $t5, %pc_lo12(_ZZ9jpegModelR5MixerE5ssum3)
	st.w	$t2, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE5ssum2)
	st.w	$t4, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE5ssum1)
	st.w	$a7, $t3, %pc_lo12(_ZZ9jpegModelR5MixerE4ssum)
	b	.LBB48_147
.LBB48_140:
	addi.w	$a6, $t1, 0
	addi.w	$a5, $t1, 63
	bstrins.d	$a5, $zero, 5, 0
	addi.w	$a7, $zero, -63
	st.w	$a5, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	blt	$a6, $a7, .LBB48_287
# %bb.141:
	blt	$s5, $a5, .LBB48_287
# %bb.142:
	ori	$a6, $zero, 640
	blt	$a6, $a5, .LBB48_287
# %bb.143:                              # %.preheader805
	pcalau12i	$a6, %pc_hi20(_ZZ9jpegModelR5MixerE4cpos)
	ld.w	$t6, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	andi	$a7, $t6, 63
	beqz	$a7, .LBB48_147
# %bb.144:
	pcalau12i	$a7, %pc_hi20(_ZZ9jpegModelR5MixerE4cbuf)
	addi.d	$a7, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE4cbuf)
.LBB48_145:                             # %.lr.ph867
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$t0, $s0, 0
	ld.d	$t2, $s0, 16
	addi.w	$t0, $t0, -1
	and	$t0, $t0, $t6
	slli.d	$t0, $t0, 2
	stx.w	$zero, $t2, $t0
	ld.w	$t0, $a7, 0
	addi.w	$t0, $t0, -1
	ld.d	$t2, $a7, 16
	and	$t0, $t0, $t6
	addi.w	$t6, $t6, 1
	andi	$t1, $t6, 63
	stx.b	$zero, $t2, $t0
	bnez	$t1, .LBB48_145
# %bb.146:                              # %..loopexit806_crit_edge
	st.w	$t6, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
.LBB48_147:                             # %.loopexit806
	addi.w	$a6, $a5, 0
	bltz	$a6, .LBB48_287
# %bb.148:                              # %.loopexit806
	blt	$s5, $a6, .LBB48_287
# %bb.149:
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	pcalau12i	$t1, %pc_hi20(_ZZ9jpegModelR5MixerE6column)
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE3row)
	bltu	$a6, $s5, .LBB48_152
# %bb.150:
	ld.w	$a6, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	pcalau12i	$a5, %pc_hi20(_ZZ9jpegModelR5MixerE5width)
	ld.w	$a7, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE5width)
	move	$a5, $zero
	st.w	$zero, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	addi.w	$a4, $a6, 1
	st.w	$a4, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	bne	$a4, $a7, .LBB48_152
# %bb.151:
	ld.w	$a4, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE3row)
	move	$a5, $zero
	st.w	$zero, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	addi.d	$a4, $a4, 1
	st.w	$a4, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE3row)
.LBB48_152:
	st.d	$t1, $sp, 48                    # 8-byte Folded Spill
	st.d	$t0, $sp, 56                    # 8-byte Folded Spill
	st.d	$t7, $sp, 136                   # 8-byte Folded Spill
	st.w	$zero, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8huffbits)
	st.w	$zero, $a3, %pc_lo12(_ZZ9jpegModelR5MixerE8huffsize)
	addi.w	$a0, $zero, -1
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffcode)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu32i.d	$a0, 0
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4qmap+16)
	ld.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4qmap+16)
	st.w	$a0, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE2rs)
	bstrpick.d	$a0, $a5, 31, 6
	slli.d	$a0, $a0, 2
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ldx.w	$a0, $a1, $a0
	slli.w	$s8, $a0, 6
	andi	$ra, $a5, 63
	sub.d	$a0, $t6, $ra
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE5sumv2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE5sumv2)
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE5sumv3)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE5sumv3)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE5sumu2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE5sumu2)
	st.d	$a0, $sp, 152                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE5sumu3)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE5sumu3)
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	pcalau12i	$a2, %pc_hi20(_ZZ9jpegModelR5MixerE4qtab+16)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3zzu)
	addi.d	$s6, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3zzu)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3zzv)
	addi.d	$s0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3zzv)
	lu12i.w	$t2, 768
	lu12i.w	$t3, 98316
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2kx)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2kx)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2we)
	addi.d	$a6, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2we)
	st.d	$ra, $sp, 144                   # 8-byte Folded Spill
	st.d	$t6, $sp, 96                    # 8-byte Folded Spill
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	beqz	$ra, .LBB48_154
# %bb.153:
	addi.d	$a1, $ra, -1
	ldx.bu	$a0, $s0, $a1
	ld.d	$a2, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE4qtab+16)
	slli.d	$a0, $a0, 2
	or	$a3, $s8, $ra
	add.d	$a2, $a2, $a3
	ld.d	$a5, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a3, $a5, 0
	ld.bu	$a2, $a2, -1
	addi.w	$a4, $t6, -1
	ld.d	$a5, $a5, 16
	addi.w	$a3, $a3, -1
	and	$a3, $a3, $a4
	slli.d	$a3, $a3, 2
	ldx.w	$a3, $a5, $a3
	ldx.bu	$a4, $s6, $a1
	ldx.w	$a5, $a6, $a0
	nor	$a2, $a2, $zero
	mul.d	$a2, $a3, $a2
	slli.d	$a3, $a4, 2
	ld.d	$t0, $sp, 152                   # 8-byte Folded Reload
	ldx.w	$a4, $t0, $a3
	mul.d	$a5, $a2, $a5
	ldx.w	$a6, $a6, $a3
	ld.d	$t1, $sp, 120                   # 8-byte Folded Reload
	ldx.w	$a7, $t1, $a0
	add.d	$a4, $a4, $a5
	stx.w	$a4, $t0, $a3
	mul.d	$a4, $a2, $a6
	add.d	$a4, $a4, $a7
	stx.w	$a4, $t1, $a0
	ori	$a4, $zero, 1
	sll.d	$a1, $a4, $a1
	ori	$a4, $t3, 99
	and	$a4, $a1, $a4
	sltui	$a4, $a4, 1
	ori	$a5, $zero, 181
	masknez	$a6, $a5, $a4
	ori	$a7, $zero, 256
	ld.d	$t1, $sp, 128                   # 8-byte Folded Reload
	ldx.w	$t0, $t1, $a3
	maskeqz	$a4, $a7, $a4
	or	$a4, $a4, $a6
	mul.d	$a4, $a2, $a4
	add.d	$a4, $t0, $a4
	stx.w	$a4, $t1, $a3
	ori	$a3, $t2, 1549
	lu32i.d	$a3, 8
	and	$a1, $a1, $a3
	sltui	$a1, $a1, 1
	masknez	$a3, $a5, $a1
	ld.d	$a5, $sp, 112                   # 8-byte Folded Reload
	ldx.w	$a4, $a5, $a0
	maskeqz	$a1, $a7, $a1
	or	$a1, $a1, $a3
	mul.d	$a1, $a2, $a1
	add.d	$a1, $a4, $a1
	stx.w	$a1, $a5, $a0
	b	.LBB48_156
.LBB48_154:                             # %.preheader804.preheader
	ld.d	$s1, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a0, $s1, 0
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $fp, 0
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a3, $s3, 64
	move	$a2, $s3
	st.d	$a6, $sp, 80                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 152                   # 8-byte Folded Reload
	ld.w	$a0, $s7, 0
	ld.d	$s2, $sp, 128                   # 8-byte Folded Reload
	ld.w	$a1, $s2, 0
	addi.d	$a2, $s3, 32
	addi.d	$a3, $s3, 96
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 4
	ld.w	$a1, $fp, 4
	addi.d	$a2, $s3, 4
	addi.d	$a3, $s3, 68
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s7, 4
	ld.w	$a1, $s2, 4
	addi.d	$a2, $s3, 36
	addi.d	$a3, $s3, 100
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 8
	ld.w	$a1, $fp, 8
	addi.d	$a2, $s3, 8
	addi.d	$a3, $s3, 72
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s7, 8
	ld.w	$a1, $s2, 8
	addi.d	$a2, $s3, 40
	addi.d	$a3, $s3, 104
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 12
	ld.w	$a1, $fp, 12
	addi.d	$a2, $s3, 12
	addi.d	$a3, $s3, 76
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s7, 12
	ld.w	$a1, $s2, 12
	addi.d	$a2, $s3, 44
	addi.d	$a3, $s3, 108
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	vst	$vr0, $fp, 0
	ld.w	$a0, $s1, 16
	ld.w	$a1, $fp, 16
	vst	$vr0, $s2, 0
	vst	$vr0, $s1, 0
	vst	$vr0, $s7, 0
	addi.d	$a2, $s3, 16
	addi.d	$a3, $s3, 80
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s7, 16
	ld.w	$a1, $s2, 16
	addi.d	$a2, $s3, 48
	addi.d	$a3, $s3, 112
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 20
	ld.w	$a1, $fp, 20
	addi.d	$a2, $s3, 20
	addi.d	$a3, $s3, 84
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s7, 20
	ld.w	$a1, $s2, 20
	addi.d	$a2, $s3, 52
	addi.d	$a3, $s3, 116
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 24
	ld.w	$a1, $fp, 24
	addi.d	$a2, $s3, 24
	addi.d	$a3, $s3, 88
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s7, 24
	ld.w	$a1, $s2, 24
	addi.d	$a2, $s3, 56
	addi.d	$a3, $s3, 120
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 28
	ld.w	$a1, $fp, 28
	addi.d	$a2, $s3, 28
	addi.d	$a3, $s3, 92
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s7, 28
	ld.w	$a1, $s2, 28
	addi.d	$a2, $s3, 60
	addi.d	$a3, $s3, 124
	pcaddu18i	$ra, %call36(_Z8update_kiiRiS_)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 144                   # 8-byte Folded Reload
	move	$a0, $zero
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	vst	$vr0, $fp, 16
	vst	$vr0, $s2, 16
	vst	$vr0, $s1, 16
	vst	$vr0, $s7, 16
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2ls+16)
	pcalau12i	$a2, %pc_hi20(_ZZ9jpegModelR5MixerE5width)
	ld.w	$a2, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE5width)
	ld.d	$a7, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a3, $a7, 0
	ld.d	$a4, $sp, 88                    # 8-byte Folded Reload
	ldx.w	$a4, $a1, $a4
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a5, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4qtab+16)
	mul.d	$a6, $a2, $s5
	addi.w	$a1, $a3, -1
	ld.d	$a2, $a7, 16
	add.d	$a3, $a5, $s8
	ld.d	$a5, $sp, 96                    # 8-byte Folded Reload
	sub.w	$a4, $a5, $a4
	sub.w	$a5, $a5, $a6
	lu12i.w	$a7, 371373
	ori	$a7, $a7, 1387
	lu32i.d	$a7, 305829
	lu52i.d	$a7, $a7, 661
	lu12i.w	$t0, -349355
	ori	$t0, $t0, 1709
	lu32i.d	$t0, 348842
	lu52i.d	$t0, $t0, 1193
	lu12i.w	$a6, 98316
	ori	$t1, $a6, 99
	ori	$t2, $zero, 256
	addi.d	$t3, $zero, -256
	ori	$t4, $zero, 181
	lu12i.w	$a6, 768
	ori	$t5, $a6, 1549
	lu32i.d	$t5, 8
.LBB48_155:                             # =>This Inner Loop Header: Depth=1
	ldx.bu	$t7, $s0, $a0
	slli.d	$t7, $t7, 2
	ld.d	$t6, $sp, 80                    # 8-byte Folded Reload
	ldx.w	$fp, $t6, $t7
	ori	$a6, $zero, 1
	sll.d	$t8, $a6, $a0
	and	$s1, $t8, $a7
	sltui	$s1, $s1, 1
	sub.d	$s2, $zero, $fp
	masknez	$fp, $fp, $s1
	maskeqz	$s2, $s2, $s1
	or	$fp, $s2, $fp
	ldx.bu	$s2, $a3, $a0
	ldx.bu	$s3, $s6, $a0
	and	$s5, $a1, $a5
	slli.d	$s5, $s5, 2
	ldx.w	$s5, $a2, $s5
	slli.d	$s3, $s3, 2
	ld.d	$a6, $sp, 152                   # 8-byte Folded Reload
	ldx.w	$s7, $a6, $s3
	addi.d	$s2, $s2, 1
	mul.d	$s5, $s5, $s2
	mul.d	$fp, $s5, $fp
	add.d	$fp, $s7, $fp
	stx.w	$fp, $a6, $s3
	ldx.w	$fp, $t6, $s3
	masknez	$s7, $t2, $s1
	maskeqz	$s1, $t3, $s1
	or	$s1, $s1, $s7
	and	$s7, $t8, $t1
	sltui	$s7, $s7, 1
	maskeqz	$s1, $s1, $s7
	masknez	$s7, $t4, $s7
	or	$s1, $s1, $s7
	ld.d	$a6, $sp, 128                   # 8-byte Folded Reload
	ldx.w	$s7, $a6, $s3
	mul.d	$s1, $s5, $s1
	and	$s5, $t8, $t0
	sltui	$s5, $s5, 1
	add.d	$s1, $s7, $s1
	and	$s7, $a1, $a4
	slli.d	$s7, $s7, 2
	ldx.w	$s7, $a2, $s7
	stx.w	$s1, $a6, $s3
	sub.d	$s1, $zero, $fp
	masknez	$fp, $fp, $s5
	maskeqz	$s1, $s1, $s5
	ld.d	$a6, $sp, 120                   # 8-byte Folded Reload
	ldx.w	$s3, $a6, $t7
	or	$fp, $s1, $fp
	mul.d	$s1, $s7, $s2
	mul.d	$fp, $s1, $fp
	add.d	$fp, $fp, $s3
	stx.w	$fp, $a6, $t7
	and	$t8, $t8, $t5
	sltui	$t8, $t8, 1
	masknez	$fp, $t2, $s5
	maskeqz	$s2, $t3, $s5
	or	$fp, $s2, $fp
	maskeqz	$fp, $fp, $t8
	ld.d	$a6, $sp, 112                   # 8-byte Folded Reload
	ldx.w	$s2, $a6, $t7
	masknez	$t8, $t4, $t8
	or	$t8, $fp, $t8
	mul.d	$t8, $s1, $t8
	add.d	$t8, $s2, $t8
	stx.w	$t8, $a6, $t7
	addi.d	$a0, $a0, 1
	addi.w	$a4, $a4, 1
	addi.w	$a5, $a5, 1
	ori	$a6, $zero, 64
	bne	$a0, $a6, .LBB48_155
.LBB48_156:                             # %.loopexit803
	ld.d	$t4, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a3, $t4, 0
	ld.d	$t2, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a1, $t2, 0
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4sumv+16)
	ld.d	$a2, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4sumv+16)
	ld.d	$t3, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a4, $t3, 0
	mul.d	$a5, $a1, $a3
	ori	$a1, $zero, 8
	sub.d	$a3, $a1, $a3
	mul.d	$a3, $a4, $a3
	add.w	$a3, $a3, $a5
	bstrpick.d	$a4, $a3, 62, 60
	add.w	$a3, $a3, $a4
	srli.d	$a3, $a3, 3
	st.w	$a3, $a2, 0
	ld.w	$a5, $t4, 32
	ld.d	$t0, $sp, 152                   # 8-byte Folded Reload
	ld.w	$a6, $t0, 0
	pcalau12i	$a3, %pc_hi20(_ZZ9jpegModelR5MixerE4sumu+16)
	ld.d	$t1, $sp, 128                   # 8-byte Folded Reload
	ld.w	$a7, $t1, 0
	ld.d	$a4, $a3, %pc_lo12(_ZZ9jpegModelR5MixerE4sumu+16)
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a4, 0
	ld.w	$a5, $t4, 4
	ld.w	$a6, $t2, 4
	ld.w	$a7, $t3, 4
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a2, 4
	ld.w	$a5, $t4, 36
	ld.w	$a6, $t0, 4
	ld.w	$a7, $t1, 4
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a4, 4
	ld.w	$a5, $t4, 8
	ld.w	$a6, $t2, 8
	ld.w	$a7, $t3, 8
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a2, 8
	ld.w	$a5, $t4, 40
	ld.w	$a6, $t0, 8
	ld.w	$a7, $t1, 8
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a4, 8
	ld.w	$a5, $t4, 12
	ld.w	$a6, $t2, 12
	ld.w	$a7, $t3, 12
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a2, 12
	ld.w	$a5, $t4, 44
	ld.w	$a6, $t0, 12
	ld.w	$a7, $t1, 12
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a4, 12
	ld.w	$a5, $t4, 16
	ld.w	$a6, $t2, 16
	ld.w	$a7, $t3, 16
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a2, 16
	ld.w	$a5, $t4, 48
	ld.w	$a6, $t0, 16
	ld.w	$a7, $t1, 16
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a4, 16
	ld.w	$a5, $t4, 20
	ld.w	$a6, $t2, 20
	ld.w	$a7, $t3, 20
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a2, 20
	ld.w	$a5, $t4, 52
	ld.w	$a6, $t0, 20
	ld.w	$a7, $t1, 20
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a4, 20
	ld.w	$a5, $t4, 24
	ld.w	$a6, $t2, 24
	ld.w	$a7, $t3, 24
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a2, 24
	ld.w	$a5, $t4, 56
	ld.w	$a6, $t0, 24
	ld.w	$a7, $t1, 24
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a4, 24
	ld.w	$a5, $t4, 28
	ld.w	$a6, $t2, 28
	ld.w	$a7, $t3, 28
	mul.d	$a6, $a6, $a5
	sub.d	$a5, $a1, $a5
	mul.d	$a5, $a7, $a5
	add.w	$a5, $a5, $a6
	bstrpick.d	$a6, $a5, 62, 60
	add.w	$a5, $a5, $a6
	srli.d	$a5, $a5, 3
	st.w	$a5, $a2, 28
	ld.w	$a2, $t4, 60
	ld.w	$a5, $t0, 28
	ld.w	$a6, $t1, 28
	mul.d	$a5, $a5, $a2
	sub.d	$a1, $a1, $a2
	mul.d	$a1, $a6, $a1
	add.w	$a1, $a1, $a5
	bstrpick.d	$a2, $a1, 62, 60
	add.w	$a1, $a1, $a2
	srli.d	$a1, $a1, 3
	st.w	$a1, $a4, 28
	ld.d	$a6, $a3, %pc_lo12(_ZZ9jpegModelR5MixerE4sumu+16)
	ld.d	$a5, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4sumv+16)
	ldx.bu	$a1, $s6, $ra
	ldx.bu	$a2, $s0, $ra
	move	$t1, $zero
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4qtab+16)
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	alsl.d	$t2, $a1, $a6, 2
	st.d	$a2, $sp, 120                   # 8-byte Folded Spill
	alsl.d	$t3, $a2, $a5, 2
	or	$a1, $ra, $s8
	st.d	$a1, $sp, 152                   # 8-byte Folded Spill
	addi.w	$t8, $ra, 1
	ori	$t6, $zero, 181
	lu12i.w	$a1, 6
	ori	$a4, $a1, 1639
	ori	$t7, $zero, 63
	b	.LBB48_158
.LBB48_157:                             # %.critedge687
                                        #   in Loop: Header=BB48_158 Depth=1
	addi.d	$t1, $t1, 1
	ld.d	$ra, $sp, 144                   # 8-byte Folded Reload
	ori	$a1, $zero, 3
	beq	$t1, $a1, .LBB48_165
.LBB48_158:                             # %.preheader801
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_161 Depth 2
	ld.w	$a1, $t2, 0
	ld.w	$a2, $t3, 0
	mul.d	$a1, $a1, $t1
	ori	$a3, $zero, 2
	sub.d	$a3, $a3, $t1
	mul.d	$a2, $a2, $a3
	add.d	$a1, $a2, $a1
	ld.d	$a2, $sp, 152                   # 8-byte Folded Reload
	ldx.bu	$a2, $a0, $a2
	bstrpick.d	$a7, $a1, 31, 31
	add.w	$a1, $a1, $a7
	srai.d	$a1, $a1, 1
	mul.d	$a2, $a2, $t6
	addi.d	$a2, $a2, 181
	div.w	$t4, $a1, $a2
	ori	$a1, $zero, 10
	bnez	$ra, .LBB48_160
# %bb.159:                              #   in Loop: Header=BB48_158 Depth=1
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ldx.w	$a1, $a1, $a2
	ld.d	$a7, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a2, $a7, 0
	ld.d	$a7, $a7, 16
	ld.d	$t0, $sp, 96                    # 8-byte Folded Reload
	sub.w	$a1, $t0, $a1
	addi.w	$a2, $a2, -1
	and	$a1, $a2, $a1
	slli.d	$a1, $a1, 2
	ldx.w	$a1, $a7, $a1
	sub.w	$t4, $t4, $a1
	ori	$a1, $zero, 14
.LBB48_160:                             # %.peel.next
                                        #   in Loop: Header=BB48_158 Depth=1
	pcalau12i	$t0, %pc_hi20(ilog+16)
	ld.d	$a2, $t0, %pc_lo12(ilog+16)
	pcalau12i	$a7, %pc_hi20(_ZZ9jpegModelR5MixerE8adv_pred+16)
	ld.d	$t5, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE8adv_pred+16)
	srai.d	$fp, $t4, 31
	xor	$s1, $t4, $fp
	sub.d	$fp, $s1, $fp
	mul.d	$a1, $fp, $a1
	bstrpick.d	$a1, $a1, 15, 1
	alsl.d	$a1, $a1, $a2, 1
	ld.bu	$a1, $a1, 1
	alsl.d	$ra, $t1, $t5, 2
	addi.w	$s3, $a3, 0
	sub.d	$a3, $zero, $a1
	slti	$t4, $t4, 0
	masknez	$a1, $a1, $t4
	maskeqz	$a3, $a3, $t4
	or	$a1, $a3, $a1
	mul.d	$a1, $a1, $a4
	srai.d	$t4, $a1, 16
	srli.d	$a3, $t4, 2
	srli.d	$a1, $a1, 63
	add.d	$a3, $a3, $a1
	ext.w.h	$a3, $a3
	st.w	$a3, $ra, 0
	srli.d	$t4, $t4, 4
	add.d	$a1, $t4, $a1
	ext.w.h	$a1, $a1
	st.w	$a1, $ra, 16
	srai.d	$a1, $a3, 31
	xor	$t4, $a3, $a1
	sub.d	$a1, $t4, $a1
	addi.w	$s1, $a1, 1
	addi.d	$fp, $zero, -128
	move	$t4, $t8
	.p2align	4, , 16
.LBB48_161:                             #   Parent Loop BB48_158 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	slti	$a1, $t4, 63
	masknez	$t5, $t7, $a1
	maskeqz	$a1, $t4, $a1
	or	$a1, $a1, $t5
	ldx.bu	$t5, $s0, $a1
	ldx.bu	$s2, $s6, $a1
	slli.d	$t5, $t5, 2
	ldx.w	$t5, $a5, $t5
	slli.d	$s2, $s2, 2
	ldx.w	$s2, $a6, $s2
	mul.d	$t5, $t5, $s3
	mul.d	$s2, $s2, $t1
	add.d	$t5, $t5, $s2
	or	$a1, $a1, $s8
	ldx.bu	$a1, $a0, $a1
	bstrpick.d	$s2, $t5, 31, 31
	add.w	$t5, $t5, $s2
	srai.d	$t5, $t5, 1
	mul.d	$a1, $a1, $t6
	addi.d	$a1, $a1, 181
	div.w	$a1, $t5, $a1
	srai.d	$t5, $a1, 31
	xor	$s2, $a1, $t5
	sub.d	$t5, $s2, $t5
	slli.d	$s2, $t5, 3
	alsl.d	$t5, $t5, $s2, 1
	bstrpick.d	$t5, $t5, 15, 1
	alsl.d	$t5, $t5, $a2, 1
	ld.bu	$t5, $t5, 1
	sub.d	$s2, $zero, $t5
	slti	$a1, $a1, 0
	masknez	$t5, $t5, $a1
	maskeqz	$a1, $s2, $a1
	or	$a1, $a1, $t5
	mul.d	$s7, $a1, $a4
	srli.d	$t5, $s7, 63
	srai.d	$s2, $s7, 18
	add.d	$s2, $s2, $t5
	srai.d	$s5, $s2, 63
	xor	$s2, $s2, $s5
	sub.d	$s2, $s2, $s5
	bltu	$s1, $s2, .LBB48_163
# %bb.162:                              #   in Loop: Header=BB48_161 Depth=2
	addi.w	$fp, $fp, -128
	addi.w	$a1, $zero, -1024
	addi.w	$t4, $t4, 1
	bne	$fp, $a1, .LBB48_161
	b	.LBB48_157
.LBB48_163:                             # %.loopexit934
                                        #   in Loop: Header=BB48_158 Depth=1
	srai.d	$a2, $s7, 20
	add.d	$t4, $a2, $t5
	ld.w	$a2, $ra, 16
	srai.d	$t5, $t4, 63
	xor	$t4, $t4, $t5
	sub.d	$t4, $t4, $t5
	srai.d	$t5, $a2, 31
	xor	$s1, $a2, $t5
	sub.d	$t5, $s1, $t5
	ori	$s1, $zero, 9
	slt	$a1, $s1, $a1
	slli.d	$a1, $a1, 6
	add.d	$a3, $a1, $a3
	sub.d	$a3, $a3, $fp
	addi.w	$t5, $t5, 1
	st.w	$a3, $ra, 0
	bgeu	$t5, $t4, .LBB48_157
# %bb.164:                              #   in Loop: Header=BB48_158 Depth=1
	add.d	$a1, $a1, $a2
	sub.d	$a1, $a1, $fp
	st.w	$a1, $ra, 16
	b	.LBB48_157
.LBB48_165:
	ld.w	$a1, $t2, 0
	ld.w	$a2, $t3, 0
	add.d	$a2, $a2, $a1
	ori	$a1, $zero, 1
	sll.d	$a1, $a1, $ra
	lu12i.w	$a3, 768
	ori	$t4, $a3, 1549
	lu32i.d	$t4, 8
	and	$a3, $a1, $t4
	slli.w	$t5, $a2, 1
	beqz	$a3, .LBB48_167
# %bb.166:
	ld.w	$a2, $a6, 4
	sub.w	$t5, $t5, $a2
.LBB48_167:
	ld.d	$t7, $sp, 136                   # 8-byte Folded Reload
	ld.d	$t8, $sp, 104                   # 8-byte Folded Reload
	lu12i.w	$a2, 98316
	ori	$t3, $a2, 99
	and	$a1, $a1, $t3
	ld.d	$fp, $sp, 40                    # 8-byte Folded Reload
	beqz	$a1, .LBB48_169
# %bb.168:
	ld.w	$a1, $a5, 4
	sub.w	$t5, $t5, $a1
.LBB48_169:
	ori	$a1, $zero, 1
	sll.d	$a1, $a1, $ra
	lu12i.w	$a2, 1920
	ori	$t2, $a2, 3871
	lu32i.d	$t2, 28
	and	$a2, $a1, $t2
	beqz	$a2, .LBB48_171
# %bb.170:
	ld.w	$a2, $a6, 8
	sub.w	$t5, $t5, $a2
.LBB48_171:
	lu12i.w	$a2, 245790
	ori	$t1, $a2, 247
	lu32i.d	$t1, 1024
	and	$a1, $a1, $t1
	beqz	$a1, .LBB48_173
# %bb.172:
	ld.w	$a1, $a5, 8
	sub.w	$t5, $t5, $a1
.LBB48_173:
	ori	$a1, $zero, 1
	sll.d	$a1, $a1, $ra
	lu12i.w	$a2, 4033
	ori	$a2, $a2, 4031
	lu32i.d	$a2, 65598
	and	$a2, $a1, $a2
	beqz	$a2, .LBB48_175
# %bb.174:
	ld.w	$a2, $a6, 12
	sub.w	$t5, $t5, $a2
.LBB48_175:
	lu12i.w	$a2, 516159
	ori	$a2, $a2, 511
	lu32i.d	$a2, 3584
	and	$a1, $a1, $a2
	beqz	$a1, .LBB48_177
# %bb.176:
	ld.w	$a1, $a5, 12
	sub.w	$t5, $t5, $a1
.LBB48_177:
	ori	$a1, $zero, 1
	sll.d	$a1, $a1, $ra
	lu12i.w	$a2, 8163
	ori	$a2, $a2, 4095
	lu32i.d	$a2, 229503
	and	$a2, $a1, $a2
	beqz	$a2, .LBB48_179
# %bb.178:
	ld.w	$a2, $a6, 16
	sub.w	$t5, $t5, $a2
.LBB48_179:
	lu12i.w	$a2, -3969
	ori	$a2, $a2, 3071
	lu32i.d	$a2, 7936
	lu52i.d	$a2, $a2, 2
	and	$a1, $a1, $a2
	beqz	$a1, .LBB48_181
# %bb.180:
	ld.w	$a1, $a5, 16
	sub.w	$t5, $t5, $a1
.LBB48_181:
	ori	$a1, $zero, 1
	sll.d	$a1, $a1, $ra
	lu12i.w	$a2, -507913
	ori	$a2, $a2, 4095
	lu32i.d	$a2, 508159
	lu52i.d	$a2, $a2, 32
	and	$a2, $a1, $a2
	beqz	$a2, .LBB48_183
# %bb.182:
	ld.w	$a2, $a6, 20
	sub.w	$t5, $t5, $a2
.LBB48_183:
	lu12i.w	$a2, -1793
	ori	$a2, $a2, 4095
	lu32i.d	$a2, 16257
	lu52i.d	$a2, $a2, 7
	and	$a1, $a1, $a2
	beqz	$a1, .LBB48_185
# %bb.184:
	ld.w	$a1, $a5, 20
	sub.w	$t5, $t5, $a1
.LBB48_185:
	ori	$a1, $zero, 1
	sll.d	$a1, $a1, $ra
	lu12i.w	$a2, -229377
	ori	$a2, $a2, 4095
	lu32i.d	$a2, -7681
	lu52i.d	$a2, $a2, 112
	and	$a2, $a1, $a2
	beqz	$a2, .LBB48_187
# %bb.186:
	ld.w	$a2, $a6, 24
	sub.w	$t5, $t5, $a2
.LBB48_187:
	lu12i.w	$a2, -513
	ori	$a2, $a2, 4095
	lu32i.d	$a2, -491581
	lu52i.d	$a2, $a2, 271
	and	$a1, $a1, $a2
	beqz	$a1, .LBB48_189
# %bb.188:
	ld.w	$a1, $a5, 24
	sub.w	$t5, $t5, $a1
.LBB48_189:
	ori	$a1, $zero, 1
	sll.d	$a1, $a1, $ra
	lu12i.w	$a2, -65537
	ori	$a2, $a2, 4095
	lu32i.d	$a2, -3073
	lu52i.d	$a2, $a2, 1273
	and	$a2, $a1, $a2
	beqz	$a2, .LBB48_191
# %bb.190:
	ld.w	$a2, $a6, 28
	sub.w	$t5, $t5, $a2
.LBB48_191:
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	lu32i.d	$a2, -196633
	lu52i.d	$a2, $a2, 927
	and	$a1, $a1, $a2
	beqz	$a1, .LBB48_193
# %bb.192:
	ld.w	$a1, $a5, 28
	sub.w	$t5, $t5, $a1
.LBB48_193:
	ld.d	$a1, $sp, 152                   # 8-byte Folded Reload
	ldx.bu	$a1, $a0, $a1
	ori	$a2, $zero, 181
	mul.d	$a1, $a1, $a2
	addi.d	$a1, $a1, 181
	div.w	$a2, $t5, $a1
	bnez	$ra, .LBB48_195
# %bb.194:
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	ldx.w	$a1, $a1, $a3
	ld.w	$a3, $t8, 0
	ld.d	$a5, $sp, 96                    # 8-byte Folded Reload
	sub.w	$a1, $a5, $a1
	ld.d	$a5, $t8, 16
	addi.w	$a3, $a3, -1
	and	$a1, $a3, $a1
	slli.d	$a1, $a1, 2
	ldx.w	$a1, $a5, $a1
	sub.w	$a2, $a2, $a1
.LBB48_195:
	srai.d	$a1, $a2, 31
	xor	$a3, $a2, $a1
	sub.d	$a1, $a3, $a1
	ld.d	$a5, $t0, %pc_lo12(ilog+16)
	slli.d	$a3, $a1, 3
	alsl.d	$a1, $a1, $a3, 1
	bstrpick.d	$a1, $a1, 15, 1
	alsl.d	$a1, $a1, $a5, 1
	ld.bu	$a1, $a1, 1
	sub.d	$a3, $zero, $a1
	slti	$a2, $a2, 0
	masknez	$a1, $a1, $a2
	maskeqz	$a2, $a3, $a2
	or	$a1, $a2, $a1
	mul.d	$a1, $a1, $a4
	srli.d	$a2, $a1, 63
	ld.d	$a4, $a7, %pc_lo12(_ZZ9jpegModelR5MixerE8adv_pred+16)
	srli.d	$a1, $a1, 18
	add.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	st.w	$a1, $a4, 12
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE3lcp+16)
	ld.d	$a6, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE3lcp+16)
	ld.d	$a1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$a2, $sp, 120                   # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a1, 3
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4zpos+16)
	ld.d	$a7, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4zpos+16)
	ld.d	$a2, $t8, 16
	ori	$a1, $zero, 1
	sll.d	$t5, $a1, $ra
	and	$t4, $t5, $t4
	ori	$t0, $zero, 255
	ori	$a1, $zero, 255
	bnez	$t4, .LBB48_197
# %bb.196:
	alsl.d	$a1, $a3, $a7, 2
	ld.w	$a1, $a1, -4
	ld.w	$t4, $t8, 0
	add.w	$t6, $a1, $s8
	ldx.bu	$t6, $a0, $t6
	add.w	$a1, $a1, $fp
	addi.w	$t4, $t4, -1
	and	$a1, $t4, $a1
	slli.d	$a1, $a1, 2
	ldx.w	$a1, $a2, $a1
	ld.d	$t4, $sp, 152                   # 8-byte Folded Reload
	ldx.bu	$t4, $a0, $t4
	addi.d	$t6, $t6, 1
	mul.w	$a1, $a1, $t6
	addi.d	$t4, $t4, 1
	div.w	$a1, $a1, $t4
	srai.d	$t4, $a1, 31
	xor	$t6, $a1, $t4
	sub.d	$t4, $t6, $t4
	slli.d	$t4, $t4, 3
	bstrpick.d	$t4, $t4, 15, 3
	alsl.d	$t4, $t4, $a5, 3
	ld.bu	$t4, $t4, 1
	sub.d	$t6, $zero, $t4
	slti	$a1, $a1, 0
	masknez	$t4, $t4, $a1
	maskeqz	$a1, $t6, $a1
	or	$a1, $a1, $t4
	bstrpick.d	$t4, $a1, 15, 13
	add.d	$a1, $a1, $t4
	srai.d	$a1, $a1, 3
.LBB48_197:
	and	$t3, $t5, $t3
	st.w	$a1, $a6, 0
	bnez	$t3, .LBB48_199
# %bb.198:
	alsl.d	$a1, $a3, $a7, 2
	ld.w	$a1, $a1, -32
	ld.w	$t0, $t8, 0
	add.w	$t3, $a1, $s8
	ldx.bu	$t3, $a0, $t3
	add.w	$a1, $a1, $fp
	addi.w	$t0, $t0, -1
	and	$a1, $t0, $a1
	slli.d	$a1, $a1, 2
	ldx.w	$a1, $a2, $a1
	ld.d	$t0, $sp, 152                   # 8-byte Folded Reload
	ldx.bu	$t0, $a0, $t0
	addi.d	$t3, $t3, 1
	mul.w	$a1, $a1, $t3
	addi.d	$t0, $t0, 1
	div.w	$a1, $a1, $t0
	srai.d	$t0, $a1, 31
	xor	$t3, $a1, $t0
	sub.d	$t0, $t3, $t0
	slli.d	$t0, $t0, 3
	bstrpick.d	$t0, $t0, 15, 3
	alsl.d	$t0, $t0, $a5, 3
	ld.bu	$t0, $t0, 1
	sub.d	$t3, $zero, $t0
	slti	$a1, $a1, 0
	masknez	$t0, $t0, $a1
	maskeqz	$a1, $t3, $a1
	or	$a1, $a1, $t0
	bstrpick.d	$t0, $a1, 15, 13
	add.d	$a1, $a1, $t0
	srai.d	$t0, $a1, 3
.LBB48_199:
	st.w	$t0, $a6, 4
	ori	$a1, $zero, 1
	sll.d	$t3, $a1, $ra
	and	$t2, $t3, $t2
	ori	$t0, $zero, 255
	ori	$a1, $zero, 255
	beqz	$t2, .LBB48_203
# %bb.200:
	and	$t1, $t3, $t1
	st.w	$a1, $a6, 8
	beqz	$t1, .LBB48_204
.LBB48_201:
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	st.w	$t0, $a6, 12
	beqz	$a0, .LBB48_205
.LBB48_202:
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3row)
	bnez	$a0, .LBB48_207
	b	.LBB48_206
.LBB48_203:
	alsl.d	$a1, $a3, $a7, 2
	ld.w	$a1, $a1, -8
	ld.w	$t2, $t8, 0
	add.w	$t4, $a1, $s8
	ldx.bu	$t4, $a0, $t4
	add.w	$a1, $a1, $fp
	addi.w	$t2, $t2, -1
	and	$a1, $t2, $a1
	slli.d	$a1, $a1, 2
	ldx.w	$a1, $a2, $a1
	ld.d	$t2, $sp, 152                   # 8-byte Folded Reload
	ldx.bu	$t2, $a0, $t2
	addi.d	$t4, $t4, 1
	mul.w	$a1, $a1, $t4
	addi.d	$t2, $t2, 1
	div.w	$a1, $a1, $t2
	srai.d	$t2, $a1, 31
	xor	$t4, $a1, $t2
	sub.d	$t2, $t4, $t2
	slli.d	$t2, $t2, 3
	bstrpick.d	$t2, $t2, 15, 3
	alsl.d	$t2, $t2, $a5, 3
	ld.bu	$t2, $t2, 1
	sub.d	$t4, $zero, $t2
	slti	$a1, $a1, 0
	masknez	$t2, $t2, $a1
	maskeqz	$a1, $t4, $a1
	or	$a1, $a1, $t2
	bstrpick.d	$t2, $a1, 15, 13
	add.d	$a1, $a1, $t2
	srai.d	$a1, $a1, 3
	and	$t1, $t3, $t1
	st.w	$a1, $a6, 8
	bnez	$t1, .LBB48_201
.LBB48_204:
	alsl.d	$a1, $a3, $a7, 2
	ld.w	$a1, $a1, -64
	ld.w	$a3, $t8, 0
	add.w	$a7, $a1, $s8
	ldx.bu	$a7, $a0, $a7
	add.w	$a1, $a1, $fp
	addi.w	$a3, $a3, -1
	and	$a1, $a3, $a1
	slli.d	$a1, $a1, 2
	ldx.w	$a1, $a2, $a1
	ld.d	$a2, $sp, 152                   # 8-byte Folded Reload
	ldx.bu	$a0, $a0, $a2
	addi.d	$a2, $a7, 1
	mul.w	$a1, $a1, $a2
	addi.d	$a0, $a0, 1
	div.w	$a0, $a1, $a0
	srai.d	$a1, $a0, 31
	xor	$a2, $a0, $a1
	sub.d	$a1, $a2, $a1
	slli.d	$a1, $a1, 3
	bstrpick.d	$a1, $a1, 15, 3
	alsl.d	$a1, $a1, $a5, 3
	ld.bu	$a1, $a1, 1
	sub.d	$a2, $zero, $a1
	slti	$a0, $a0, 0
	masknez	$a1, $a1, $a0
	maskeqz	$a0, $a2, $a0
	or	$a0, $a0, $a1
	bstrpick.d	$a1, $a0, 15, 13
	add.d	$a0, $a0, $a1
	srai.d	$t0, $a0, 3
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	st.w	$t0, $a6, 12
	bnez	$a0, .LBB48_202
.LBB48_205:
	ld.w	$a0, $a4, 8
	st.w	$a0, $a4, 4
	ori	$a0, $zero, 1
	st.w	$a0, $a4, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3row)
	bnez	$a0, .LBB48_207
.LBB48_206:
	ld.w	$a0, $a4, 0
	st.w	$a0, $a4, 4
	ori	$a0, $zero, 1
	st.w	$a0, $a4, 8
.LBB48_207:
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.w	$a0, $fp, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
	beqz	$a0, .LBB48_18
# %bb.208:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4data)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4data)
	beqz	$a0, .LBB48_18
# %bb.209:
	ld.w	$a0, $t7, %pc_lo12(bpos)
	ld.d	$a1, $sp, 176                   # 8-byte Folded Reload
	ld.w	$a1, $a1, %pc_lo12(pos)
	sltui	$a0, $a0, 1
	pcalau12i	$a2, %pc_hi20(buf)
	addi.d	$a2, $a2, %pc_lo12(buf)
	ld.w	$a3, $a2, 0
	ld.d	$a2, $a2, 16
	addi.w	$a3, $a3, -1
	sub.w	$a0, $a0, $a1
	andn	$a0, $a3, $a0
	ldx.bu	$a0, $a2, $a0
	ori	$a1, $zero, 255
	beq	$a0, $a1, .LBB48_225
# %bb.210:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE1t)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE1t)
	dbar	20
	beqz	$a0, .LBB48_288
.LBB48_211:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3cxt)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3cxt)
	dbar	20
	beqz	$a0, .LBB48_291
.LBB48_212:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2cp)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2cp)
	dbar	20
	beqz	$a0, .LBB48_294
.LBB48_213:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2sm)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2sm)
	dbar	20
	beqz	$a0, .LBB48_297
.LBB48_214:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2m1)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2m1)
	dbar	20
	beqz	$a0, .LBB48_327
.LBB48_215:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2a1)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2a1)
	dbar	20
	beqz	$a0, .LBB48_330
.LBB48_216:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2a2)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2a2)
	dbar	20
	beqz	$a0, .LBB48_333
.LBB48_217:
	pcalau12i	$s1, %pc_hi20(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a0, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a0, 216
	beqz	$a1, .LBB48_219
# %bb.218:                              # %.preheader796.preheader
	ld.d	$a1, $a0, 0
	ld.bu	$a2, $a1, 0
	pcalau12i	$a0, %pc_hi20(_ZL11State_table)
	addi.d	$a0, $a0, %pc_lo12(_ZL11State_table)
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 8
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 16
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 24
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 32
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 40
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 48
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 56
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 64
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 72
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 80
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 88
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 96
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 104
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 112
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 120
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 128
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 136
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 144
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 152
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 160
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 168
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 176
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 184
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 192
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 200
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 208
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a2, $a2, $a0, 2
	ldx.b	$a2, $a2, $a3
	st.b	$a2, $a1, 0
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a1, $a1, 216
	ld.bu	$a2, $a1, 0
	ld.w	$a3, $s4, %pc_lo12(y)
	alsl.d	$a0, $a2, $a0, 2
	ldx.b	$a0, $a0, $a3
	st.b	$a0, $a1, 0
.LBB48_219:                             # %.loopexit797
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2m1)
	addi.d	$s0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2m1)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN5Mixer6updateEv)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE6mcupos)
	ld.wu	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE6mcupos)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE5color+16)
	ld.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE5color+16)
	addi.w	$a7, $a0, 0
	srai.d	$a2, $a7, 6
	slli.d	$a6, $a2, 2
	ldx.w	$s7, $a1, $a6
	slli.w	$a5, $s7, 6
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffcode)
	ld.w	$a3, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffcode)
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE7hbcount)
	ld.w	$a4, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE7hbcount)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8huffbits)
	ld.w	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8huffbits)
	ori	$a2, $zero, 1
	addi.w	$t1, $a4, 1
	slt	$a4, $a2, $a4
	sltui	$t2, $a1, 1
	masknez	$t1, $t1, $t2
	masknez	$a4, $t1, $a4
	st.w	$a4, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE7hbcount)
	bltz	$a5, .LBB48_226
# %bb.220:                              # %.loopexit797
	move	$a5, $a0
	bstrins.d	$a5, $s7, 63, 6
	addi.w	$s3, $a5, 0
	ori	$a5, $zero, 256
	bge	$s3, $a5, .LBB48_226
# %bb.221:
	slli.d	$a5, $a3, 1
	sltui	$t0, $s7, 1
	or	$a5, $a5, $t0
	addi.d	$a1, $a1, 1
	sll.w	$a1, $a2, $a1
	or	$t3, $a1, $a5
	pcalau12i	$s2, %pc_hi20(stretch+16)
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$t3, $sp, 160                   # 8-byte Folded Spill
	beqz	$a4, .LBB48_227
# %bb.222:
	ld.w	$a1, $s0, 96
	addi.d	$a0, $a1, 1
	st.w	$a0, $s0, 96
	ld.d	$a0, $s0, 32
	slli.d	$a6, $a1, 1
	ld.d	$a1, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	ld.d	$a2, $s2, %pc_lo12(stretch+16)
	ori	$a7, $zero, 128
	ori	$a5, $zero, 1
	stx.h	$a7, $a0, $a6
	andi	$a3, $a3, 1
	bne	$a4, $a5, .LBB48_229
# %bb.223:
	masknez	$a4, $a5, $a3
	ori	$a5, $zero, 4
	maskeqz	$a3, $a5, $a3
	or	$a3, $a3, $a4
	pcalau12i	$a4, %pc_hi20(_ZZ9jpegModelR5MixerE2sm+24)
	addi.d	$a4, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE2sm+24)
	pcalau12i	$a5, %pc_hi20(_ZL2dt)
	addi.d	$a5, $a5, %pc_lo12(_ZL2dt)
	move	$a6, $zero
	lu12i.w	$a7, 1
	ori	$a7, $a7, 4094
	ori	$t0, $zero, 224
.LBB48_224:                             # =>This Inner Loop Header: Depth=1
	ld.w	$t1, $a4, -20
	ld.d	$t2, $a4, 0
	ldx.d	$t3, $a1, $a6
	slli.d	$t1, $t1, 2
	ldx.wu	$t4, $t2, $t1
	add.d	$t5, $t3, $a3
	stx.d	$t5, $a1, $a6
	ldx.bu	$t3, $t3, $a3
	andi	$t5, $t4, 1023
	addi.d	$t6, $t5, -1023
	sltui	$t6, $t6, 1
	addi.d	$t7, $t4, 1
	ori	$t8, $t4, 1023
	masknez	$t7, $t7, $t6
	maskeqz	$t6, $t8, $t6
	or	$t6, $t6, $t7
	ld.w	$t7, $s4, %pc_lo12(y)
	srli.d	$t4, $t4, 10
	slli.d	$t5, $t5, 2
	ldx.w	$t5, $a5, $t5
	slli.d	$t7, $t7, 22
	sub.w	$t4, $t7, $t4
	srli.d	$t4, $t4, 3
	mul.d	$t4, $t4, $t5
	bstrpick.d	$t4, $t4, 31, 10
	slli.d	$t4, $t4, 10
	add.d	$t4, $t4, $t6
	stx.w	$t4, $t2, $t1
	st.w	$t3, $a4, -20
	slli.d	$t1, $t3, 2
	ldx.wu	$t1, $t2, $t1
	ld.w	$t2, $s0, 96
	srli.d	$t1, $t1, 19
	and	$t1, $t1, $a7
	ldx.h	$t1, $a2, $t1
	addi.d	$t3, $t2, 1
	st.w	$t3, $s0, 96
	slli.d	$t2, $t2, 1
	stx.h	$t1, $a0, $t2
	addi.d	$a6, $a6, 8
	addi.d	$a4, $a4, 32
	bne	$a6, $t0, .LBB48_224
	b	.LBB48_231
.LBB48_225:
	ld.d	$a3, $sp, 168                   # 8-byte Folded Reload
	ld.w	$a0, $a3, 96
	addi.d	$a1, $a0, 1
	ld.d	$a2, $a3, 32
	st.w	$a1, $a3, 96
	slli.d	$a0, $a0, 1
	ori	$a1, $zero, 128
	stx.h	$a1, $a2, $a0
	ori	$a0, $zero, 1
	b	.LBB48_19
.LBB48_226:
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE9next_jpeg)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE9next_jpeg)
	st.w	$zero, $fp, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
	b	.LBB48_19
.LBB48_227:                             # %.thread1081
	andi	$t0, $a0, 63
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3zzv)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3zzv)
	ldx.bu	$a0, $a0, $t0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3zzu)
	addi.d	$a1, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3zzu)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE8adv_pred+16)
	ld.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8adv_pred+16)
	ldx.bu	$t6, $a1, $t0
	ld.wu	$a4, $a0, 8
	lu12i.w	$a1, 7325
	ori	$a1, $a1, 2291
	mul.d	$a1, $t3, $a1
	lu12i.w	$a2, 12208
	ori	$a2, $a2, 271
	mul.d	$a5, $s3, $a2
	lu12i.w	$a3, 17091
	ori	$a3, $a3, 71
	mul.d	$t1, $a4, $a3
	add.d	$t4, $a1, $a5
	add.d	$a5, $t4, $t1
	lu12i.w	$t1, 21972
	ori	$t1, $t1, 3168
	add.d	$t1, $a5, $t1
	bstrpick.d	$t2, $t1, 31, 9
	bstrpick.d	$a5, $t3, 31, 3
	bstrpick.d	$t3, $s3, 31, 4
	st.d	$t3, $sp, 96                    # 8-byte Folded Spill
	srli.d	$a4, $a4, 5
	xor	$t5, $a5, $t3
	xor	$a4, $a4, $t2
	xor	$a4, $a4, $t5
	xor	$t1, $a4, $t1
	pcalau12i	$s6, %pc_hi20(_ZZ9jpegModelR5MixerE3cxt+16)
	ld.d	$a4, $s6, %pc_lo12(_ZZ9jpegModelR5MixerE3cxt+16)
	lu12i.w	$fp, 16383
	ori	$t3, $fp, 4095
	xor	$t1, $t1, $t3
	st.w	$t1, $a4, 0
	ld.wu	$t1, $a0, 0
	mul.d	$t2, $t1, $a3
	add.d	$t2, $t4, $t2
	lu12i.w	$t7, 70801
	ori	$t7, $t7, 2563
	add.d	$t2, $t2, $t7
	bstrpick.d	$t7, $t2, 31, 9
	srli.d	$t1, $t1, 5
	xor	$t1, $t1, $t7
	xor	$t1, $t1, $t5
	xor	$t1, $t1, $t2
	xor	$t1, $t1, $t3
	st.w	$t1, $a4, 4
	ld.wu	$t1, $a0, 4
	mul.d	$t2, $t1, $a3
	add.d	$t2, $t4, $t2
	lu12i.w	$t7, 119630
	ori	$t7, $t7, 1958
	add.d	$t2, $t2, $t7
	bstrpick.d	$t7, $t2, 31, 9
	srli.d	$t1, $t1, 5
	xor	$t1, $t1, $t7
	xor	$t1, $t1, $t5
	xor	$t1, $t1, $t2
	xor	$t1, $t1, $t3
	st.w	$t1, $a4, 8
	pcalau12i	$t1, %pc_hi20(_ZZ9jpegModelR5MixerE3rs1)
	ld.wu	$t1, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE3rs1)
	ld.wu	$t2, $a0, 8
	mul.d	$t5, $t1, $a2
	mul.d	$t7, $t2, $a3
	add.d	$t8, $t5, $a1
	add.d	$t5, $t8, $t7
	lu12i.w	$t7, 168459
	ori	$t7, $t7, 1353
	add.d	$t5, $t5, $t7
	bstrpick.d	$t7, $t5, 31, 9
	srli.d	$s5, $t1, 4
	st.d	$s5, $sp, 152                   # 8-byte Folded Spill
	srli.d	$t1, $t2, 5
	xor	$t2, $a5, $s5
	xori	$t2, $t2, 1
	xor	$t1, $t1, $t7
	xor	$t1, $t1, $t2
	xor	$t1, $t1, $t5
	xor	$t1, $t1, $t3
	st.w	$t1, $a4, 12
	ld.wu	$t1, $a0, 0
	mul.d	$t5, $t1, $a3
	add.d	$t5, $t8, $t5
	lu12i.w	$t7, 217288
	ori	$t7, $t7, 748
	add.d	$t5, $t5, $t7
	bstrpick.d	$t7, $t5, 31, 9
	srli.d	$t1, $t1, 5
	xor	$t1, $t1, $t7
	xor	$t1, $t1, $t2
	xor	$t1, $t1, $t5
	xor	$t1, $t1, $t3
	st.w	$t1, $a4, 16
	ld.wu	$t1, $a0, 4
	mul.d	$t5, $t1, $a3
	add.d	$t5, $t8, $t5
	lu12i.w	$t7, 266117
	ori	$t7, $t7, 143
	add.d	$t5, $t5, $t7
	bstrpick.d	$t7, $t5, 31, 9
	srli.d	$t1, $t1, 5
	xor	$t1, $t1, $t7
	xor	$t1, $t1, $t2
	xor	$t1, $t1, $t5
	xor	$t1, $t1, $t3
	st.w	$t1, $a4, 20
	ld.wu	$t1, $a0, 8
	ld.wu	$t2, $a0, 0
	mul.d	$t5, $t1, $a2
	mul.d	$t7, $t2, $a3
	add.d	$t5, $a1, $t5
	add.d	$t5, $t5, $t7
	lu12i.w	$t7, 314945
	ori	$t7, $t7, 3634
	add.d	$t5, $t5, $t7
	bstrpick.d	$t7, $t5, 31, 9
	srli.d	$t1, $t1, 4
	srli.d	$t2, $t2, 5
	xor	$t1, $t1, $t2
	xor	$t1, $t1, $t7
	xor	$t1, $t1, $a5
	xor	$t1, $t1, $t5
	move	$s5, $fp
	ori	$t2, $fp, 4094
	xor	$t1, $t1, $t2
	pcalau12i	$t2, %pc_hi20(_ZZ9jpegModelR5MixerE4cpos)
	pcalau12i	$t5, %pc_hi20(_ZZ9jpegModelR5MixerE5width)
	ld.w	$t5, $t5, %pc_lo12(_ZZ9jpegModelR5MixerE5width)
	pcalau12i	$t7, %pc_hi20(_ZZ9jpegModelR5MixerE7mcusize)
	ld.w	$t7, $t7, %pc_lo12(_ZZ9jpegModelR5MixerE7mcusize)
	ld.w	$s8, $t2, %pc_lo12(_ZZ9jpegModelR5MixerE4cpos)
	bstrpick.d	$fp, $s3, 31, 5
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.w	$t1, $a4, 24
	mul.d	$t1, $t7, $t5
	sub.w	$t1, $s8, $t1
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	pcalau12i	$t2, %pc_hi20(_ZZ9jpegModelR5MixerE4cbuf)
	addi.d	$t2, $t2, %pc_lo12(_ZZ9jpegModelR5MixerE4cbuf)
	ld.w	$t7, $t2, 0
	ld.d	$t2, $t2, 16
	addi.w	$ra, $t7, -1
	and	$t1, $ra, $t1
	st.d	$t1, $sp, 144                   # 8-byte Folded Spill
	st.d	$ra, $sp, 128                   # 8-byte Folded Spill
	ldx.bu	$t1, $t2, $t1
	move	$t7, $t2
	ld.wu	$t2, $a0, 12
	mul.d	$fp, $t1, $a2
	move	$t5, $s3
	mul.d	$s3, $t2, $a3
	add.d	$fp, $a1, $fp
	add.d	$fp, $fp, $s3
	lu12i.w	$s3, 363774
	ori	$s3, $s3, 3029
	add.d	$fp, $fp, $s3
	bstrpick.d	$s3, $fp, 31, 9
	srli.d	$t1, $t1, 4
	srli.d	$t2, $t2, 5
	xor	$t1, $t2, $t1
	xor	$t1, $t1, $s3
	xor	$t1, $t1, $a5
	xor	$t1, $t1, $fp
	pcalau12i	$t2, %pc_hi20(_ZZ9jpegModelR5MixerE2ls+16)
	ld.d	$fp, $t2, %pc_lo12(_ZZ9jpegModelR5MixerE2ls+16)
	st.d	$fp, $sp, 120                   # 8-byte Folded Spill
	ori	$t2, $s5, 4093
	xor	$t1, $t1, $t2
	st.w	$t1, $a4, 28
	ldx.w	$t1, $fp, $a6
	sub.w	$t1, $s8, $t1
	and	$t1, $t1, $ra
	ldx.bu	$t1, $t7, $t1
	ld.wu	$fp, $a0, 12
	mul.d	$s3, $t1, $a2
	add.d	$s3, $a1, $s3
	mul.d	$s5, $fp, $a3
	add.d	$s3, $s3, $s5
	lu12i.w	$s5, 412603
	ori	$s5, $s5, 2424
	add.d	$s3, $s3, $s5
	srli.d	$t1, $t1, 4
	srli.d	$fp, $fp, 5
	xor	$t1, $fp, $t1
	bstrpick.d	$fp, $s3, 31, 9
	xor	$t1, $t1, $fp
	xor	$fp, $t1, $a5
	pcalau12i	$t1, %pc_hi20(_ZZ9jpegModelR5MixerE3lcp+16)
	ld.d	$t1, $t1, %pc_lo12(_ZZ9jpegModelR5MixerE3lcp+16)
	xor	$fp, $fp, $s3
	xor	$t2, $fp, $t2
	st.w	$t2, $a4, 32
	ld.wu	$fp, $t1, 0
	ld.wu	$s3, $t1, 4
	mul.d	$t2, $fp, $a2
	add.d	$t2, $a1, $t2
	ld.wu	$s5, $a0, 4
	mul.d	$s8, $s3, $a3
	add.d	$s8, $t2, $s8
	lu12i.w	$t2, 26856
	ori	$t2, $t2, 323
	mul.d	$ra, $s5, $t2
	add.d	$s8, $s8, $ra
	lu12i.w	$ra, 488288
	ori	$ra, $ra, 2142
	add.d	$s8, $s8, $ra
	srli.d	$fp, $fp, 4
	srli.d	$s3, $s3, 5
	xor	$fp, $fp, $s3
	srli.d	$s3, $s5, 6
	xor	$fp, $fp, $s3
	bstrpick.d	$s3, $s8, 31, 9
	xor	$fp, $fp, $s3
	xori	$s3, $a5, 2
	xor	$fp, $fp, $s3
	xor	$fp, $fp, $s8
	st.w	$fp, $a4, 36
	ld.wu	$fp, $t1, 0
	ld.wu	$s5, $t1, 4
	mul.d	$s8, $t5, $t2
	add.d	$s8, $s8, $a1
	mul.d	$ra, $fp, $a2
	add.d	$s8, $s8, $ra
	mul.d	$ra, $s5, $a3
	add.d	$s8, $s8, $ra
	lu12i.w	$ra, -511459
	ori	$ra, $ra, 1537
	add.d	$s8, $s8, $ra
	srli.d	$fp, $fp, 4
	bstrpick.d	$s7, $s7, 25, 0
	xor	$fp, $s7, $fp
	srli.d	$s5, $s5, 5
	xor	$fp, $fp, $s5
	bstrpick.d	$s5, $s8, 31, 9
	xor	$fp, $fp, $s5
	xor	$fp, $fp, $s3
	xor	$fp, $fp, $s8
	st.w	$fp, $a4, 40
	ld.w	$fp, $t1, 8
	lu12i.w	$s3, 349525
	ori	$s7, $s3, 1366
	mul.d	$fp, $fp, $s7
	srli.d	$s3, $fp, 63
	srli.d	$fp, $fp, 32
	ld.wu	$s5, $t1, 0
	add.d	$fp, $fp, $s3
	mul.d	$s3, $t6, $a2
	add.d	$s8, $s3, $a1
	st.d	$s8, $sp, 112                   # 8-byte Folded Spill
	mul.d	$s3, $s5, $a3
	add.d	$s3, $s8, $s3
	mul.d	$s8, $fp, $t2
	add.d	$s3, $s3, $s8
	lu12i.w	$s8, -462630
	ori	$s8, $s8, 932
	add.d	$s3, $s3, $s8
	srli.d	$s5, $s5, 5
	bstrpick.d	$fp, $fp, 31, 6
	xor	$fp, $s5, $fp
	bstrpick.d	$s5, $s3, 31, 9
	xor	$fp, $fp, $s5
	srli.d	$s8, $t6, 4
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	xori	$s5, $a5, 3
	xor	$t6, $fp, $s5
	xor	$t6, $t6, $s8
	xor	$t6, $t6, $s3
	st.w	$t6, $a4, 44
	ld.w	$t6, $t1, 12
	mul.d	$t6, $t6, $s7
	srli.d	$fp, $t6, 63
	srli.d	$t6, $t6, 32
	ld.wu	$s3, $t1, 4
	add.d	$fp, $t6, $fp
	st.d	$a6, $sp, 72                    # 8-byte Folded Spill
	ld.d	$a6, $sp, 88                    # 8-byte Folded Reload
	mul.d	$t6, $a6, $a2
	add.d	$t6, $t6, $a1
	mul.d	$s8, $s3, $a3
	add.d	$s8, $t6, $s8
	mul.d	$ra, $fp, $t2
	add.d	$s8, $s8, $ra
	lu12i.w	$ra, -413801
	ori	$ra, $ra, 327
	add.d	$ra, $s8, $ra
	srli.d	$s3, $s3, 5
	bstrpick.d	$fp, $fp, 31, 6
	xor	$fp, $s3, $fp
	bstrpick.d	$s3, $ra, 31, 9
	xor	$fp, $fp, $s3
	xor	$fp, $fp, $s5
	srli.d	$s8, $a6, 4
	xor	$fp, $fp, $s8
	xor	$fp, $fp, $ra
	st.w	$fp, $a4, 48
	sltui	$fp, $t0, 3
	ori	$s3, $zero, 3
	masknez	$s3, $s3, $fp
	maskeqz	$t0, $t0, $fp
	or	$t0, $t0, $s3
	mul.d	$t0, $t0, $a3
	srai.d	$fp, $a7, 2
	mul.d	$s3, $fp, $a2
	add.d	$t0, $s3, $t0
	add.d	$t0, $t0, $a1
	lu12i.w	$s3, -391829
	ori	$s3, $s3, 3495
	add.d	$t0, $t0, $s3
	bstrpick.d	$fp, $fp, 31, 4
	bstrpick.d	$s3, $t0, 31, 9
	xor	$fp, $fp, $s3
	xor	$fp, $fp, $a5
	xor	$t0, $fp, $t0
	pcalau12i	$fp, %pc_hi20(_ZZ9jpegModelR5MixerE6column)
	ld.w	$fp, $fp, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	lu12i.w	$ra, 16383
	ori	$s3, $ra, 4092
	xor	$t0, $t0, $s3
	st.w	$t0, $a4, 52
	srai.d	$t0, $fp, 1
	mul.d	$s5, $t0, $a3
	add.d	$t4, $t4, $s5
	lu12i.w	$s5, -343000
	ori	$s5, $s5, 2890
	add.d	$t4, $t4, $s5
	bstrpick.d	$t0, $t0, 31, 5
	bstrpick.d	$s5, $t4, 31, 9
	xor	$t0, $t0, $s5
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	xor	$t0, $t0, $s5
	xor	$t0, $t0, $a5
	xor	$t0, $t0, $t4
	xor	$t0, $t0, $s3
	st.w	$t0, $a4, 56
	ld.w	$t0, $t1, 8
	mul.d	$t0, $t0, $s7
	srli.d	$t4, $t0, 63
	srli.d	$t0, $t0, 32
	ld.w	$s3, $t1, 0
	ld.w	$s5, $t1, 12
	add.d	$t0, $t0, $t4
	slli.d	$t0, $t0, 8
	add.w	$t0, $t0, $s3
	mul.d	$t4, $s5, $s7
	ld.w	$s3, $t1, 4
	srli.d	$s5, $t4, 63
	srli.d	$t4, $t4, 32
	add.w	$t4, $t4, $s5
	slli.d	$t4, $t4, 8
	add.d	$t4, $t4, $s3
	srai.d	$fp, $fp, 2
	mul.d	$s3, $fp, $a2
	add.d	$s3, $a1, $s3
	mul.d	$s5, $t0, $a3
	add.d	$s3, $s3, $s5
	mul.d	$s5, $t4, $t2
	add.d	$s3, $s3, $s5
	lu12i.w	$s5, -267315
	ori	$s5, $s5, 2608
	add.d	$s3, $s3, $s5
	bstrpick.d	$fp, $fp, 31, 4
	bstrpick.d	$t0, $t0, 31, 5
	xor	$t0, $fp, $t0
	bstrpick.d	$t4, $t4, 31, 6
	xor	$t0, $t0, $t4
	bstrpick.d	$t4, $s3, 31, 9
	xor	$t4, $t0, $t4
	pcalau12i	$t0, %pc_hi20(_ZZ9jpegModelR5MixerE4ssum)
	ld.w	$fp, $t0, %pc_lo12(_ZZ9jpegModelR5MixerE4ssum)
	xori	$t0, $a5, 4
	xor	$t4, $t4, $t0
	xor	$t4, $t4, $s3
	st.w	$t4, $a4, 60
	srai.d	$t4, $fp, 4
	mul.d	$fp, $t4, $a2
	mul.d	$s3, $t5, $a3
	add.d	$s5, $a1, $s3
	add.d	$fp, $s5, $fp
	lu12i.w	$s5, -245342
	ori	$s5, $s5, 1680
	add.d	$fp, $fp, $s5
	bstrpick.d	$t4, $t4, 31, 4
	bstrpick.d	$s5, $fp, 31, 9
	xor	$t4, $t4, $s5
	ld.d	$a6, $sp, 80                    # 8-byte Folded Reload
	bstrpick.d	$s5, $a6, 58, 0
	xor	$t4, $t4, $t0
	xor	$t4, $t4, $s5
	xor	$t4, $t4, $fp
	xor	$t4, $t4, $t3
	st.w	$t4, $a4, 64
	add.d	$t4, $t8, $s3
	lu12i.w	$t8, -196513
	ori	$t8, $t8, 1075
	add.d	$t4, $t4, $t8
	bstrpick.d	$t8, $t4, 31, 9
	xor	$t8, $t0, $t8
	xor	$t8, $t8, $s5
	ld.d	$t5, $sp, 152                   # 8-byte Folded Reload
	xor	$t8, $t8, $t5
	xor	$t4, $t8, $t4
	pcalau12i	$t8, %pc_hi20(_ZZ9jpegModelR5MixerE5ssum3)
	ld.w	$t8, $t8, %pc_lo12(_ZZ9jpegModelR5MixerE5ssum3)
	xor	$t3, $t4, $t3
	st.w	$t3, $a4, 68
	srai.d	$a7, $a7, 3
	srai.d	$t3, $t8, 3
	ld.wu	$t4, $a0, 12
	mul.d	$t8, $a7, $a2
	mul.d	$fp, $t3, $a3
	add.d	$t8, $t8, $a1
	add.d	$t8, $t8, $fp
	mul.d	$fp, $t4, $t2
	add.d	$t8, $t8, $fp
	lu12i.w	$fp, -120828
	ori	$fp, $fp, 793
	add.d	$t8, $t8, $fp
	bstrpick.d	$a7, $a7, 31, 4
	bstrpick.d	$t3, $t3, 31, 5
	xor	$a7, $a7, $t3
	srli.d	$t3, $t4, 6
	xor	$a7, $a7, $t3
	bstrpick.d	$t3, $t8, 31, 9
	xor	$a7, $a7, $t3
	xor	$a7, $a7, $t0
	xor	$a7, $a7, $t8
	st.w	$a7, $a4, 72
	ld.w	$a7, $t1, 0
	mul.d	$a7, $a7, $s7
	ld.w	$t0, $t1, 4
	srli.d	$t3, $a7, 63
	srli.d	$a7, $a7, 32
	add.d	$a7, $a7, $t3
	mul.d	$t0, $t0, $s7
	srli.d	$t3, $t0, 63
	srli.d	$t0, $t0, 32
	add.w	$t0, $t0, $t3
	ld.wu	$t3, $a0, 20
	mul.d	$t4, $a7, $a2
	add.w	$t4, $a1, $t4
	mul.d	$t8, $t0, $a3
	add.d	$t4, $t4, $t8
	mul.d	$t8, $t3, $t2
	add.d	$t4, $t4, $t8
	lu12i.w	$t8, -71999
	ori	$t8, $t8, 188
	add.d	$t4, $t4, $t8
	bstrpick.d	$a7, $a7, 31, 4
	bstrpick.d	$t0, $t0, 31, 5
	xor	$a7, $a7, $t0
	srli.d	$t0, $t3, 6
	xor	$a7, $a7, $t0
	bstrpick.d	$t0, $t4, 31, 9
	xor	$a7, $a7, $t0
	xor	$a7, $a5, $a7
	xor	$a7, $a7, $t4
	xori	$a7, $a7, 5
	st.w	$a7, $a4, 76
	ld.d	$a7, $sp, 144                   # 8-byte Folded Reload
	ldx.bu	$a7, $t7, $a7
	ld.wu	$t0, $a0, 24
	mul.d	$t3, $a7, $a2
	mul.d	$t4, $t0, $a3
	add.d	$t3, $a1, $t3
	add.d	$t3, $t3, $t4
	lu12i.w	$t4, -50027
	ori	$t4, $t4, 3356
	add.d	$t3, $t3, $t4
	srli.d	$a7, $a7, 4
	srli.d	$t0, $t0, 5
	xor	$a7, $t0, $a7
	bstrpick.d	$t0, $t3, 31, 9
	xor	$a7, $a7, $t0
	xor	$a7, $a7, $a5
	xor	$a7, $a7, $t3
	ori	$t0, $ra, 4090
	xor	$a7, $a7, $t0
	st.w	$a7, $a4, 80
	ld.d	$a7, $sp, 120                   # 8-byte Folded Reload
	ld.d	$a6, $sp, 72                    # 8-byte Folded Reload
	ldx.w	$a6, $a7, $a6
	ld.d	$a7, $sp, 136                   # 8-byte Folded Reload
	sub.w	$a6, $a7, $a6
	ld.d	$a7, $sp, 128                   # 8-byte Folded Reload
	and	$a6, $a6, $a7
	ldx.bu	$a6, $t7, $a6
	ld.wu	$a7, $a0, 16
	mul.d	$t3, $a6, $a2
	mul.d	$t4, $a7, $a3
	add.d	$t3, $a1, $t3
	add.d	$t3, $t3, $t4
	lu12i.w	$t4, -1198
	ori	$t4, $t4, 2751
	add.d	$t3, $t3, $t4
	bstrpick.d	$t4, $t3, 31, 9
	srli.d	$a6, $a6, 4
	srli.d	$a7, $a7, 5
	xor	$a6, $a7, $a6
	xor	$a6, $a6, $t4
	xor	$a6, $a6, $a5
	xor	$a6, $a6, $t3
	xor	$a6, $a6, $t0
	st.w	$a6, $a4, 84
	ld.wu	$a6, $a0, 8
	mul.d	$a7, $a6, $a2
	lu12i.w	$t0, 30540
	ori	$t0, $t0, 2075
	add.d	$t0, $a1, $t0
	add.d	$a7, $t0, $a7
	bstrpick.d	$t3, $a7, 31, 9
	srli.d	$a6, $a6, 4
	xor	$a6, $a6, $t3
	xor	$a6, $a6, $a5
	xor	$a6, $a6, $a7
	lu12i.w	$a7, 16384
	ori	$a7, $a7, 5
	xor	$a6, $a6, $a7
	st.w	$a6, $a4, 88
	ld.wu	$a6, $a0, 0
	mul.d	$t3, $a6, $a2
	add.d	$t3, $t0, $t3
	bstrpick.d	$t4, $t3, 31, 9
	srli.d	$a6, $a6, 4
	xor	$a6, $a6, $t4
	xor	$a6, $a6, $a5
	xor	$a6, $a6, $t3
	xor	$a6, $a6, $a7
	st.w	$a6, $a4, 92
	ld.wu	$a6, $a0, 4
	mul.d	$t3, $a6, $a2
	add.d	$t0, $t0, $t3
	bstrpick.d	$t3, $t0, 31, 9
	srli.d	$a6, $a6, 4
	xor	$a6, $a6, $t3
	xor	$a6, $a6, $a5
	xor	$a6, $a6, $t0
	xor	$a6, $a6, $a7
	st.w	$a6, $a4, 96
	ld.wu	$a6, $t1, 4
	ld.wu	$a7, $a0, 24
	mul.d	$t0, $a6, $a3
	add.d	$t0, $t6, $t0
	mul.d	$t3, $a7, $t2
	add.d	$t0, $t0, $t3
	lu12i.w	$t3, 123316
	ori	$t3, $t3, 1864
	add.d	$t0, $t0, $t3
	srli.d	$a6, $a6, 5
	srli.d	$a7, $a7, 6
	xor	$a6, $a6, $a7
	bstrpick.d	$a7, $t0, 31, 9
	xor	$a6, $a6, $a7
	xori	$a5, $a5, 6
	xor	$a6, $a6, $a5
	xor	$a6, $a6, $s8
	xor	$a6, $a6, $t0
	st.w	$a6, $a4, 100
	ld.wu	$a6, $t1, 0
	ld.wu	$a7, $a0, 16
	mul.d	$t0, $a6, $a3
	ld.d	$t3, $sp, 112                   # 8-byte Folded Reload
	add.d	$t0, $t3, $t0
	mul.d	$t3, $a7, $t2
	add.d	$t0, $t0, $t3
	lu12i.w	$t3, 172145
	ori	$t3, $t3, 1259
	add.d	$t0, $t0, $t3
	bstrpick.d	$t3, $t0, 31, 9
	srli.d	$a6, $a6, 5
	srli.d	$a7, $a7, 6
	xor	$a6, $a6, $a7
	xor	$a6, $a6, $t3
	xor	$a6, $a6, $a5
	ld.d	$a7, $sp, 104                   # 8-byte Folded Reload
	xor	$a6, $a6, $a7
	xor	$a6, $a6, $t0
	ld.w	$a7, $s0, 96
	st.w	$a6, $a4, 104
	ld.d	$a6, $s0, 32
	ld.wu	$t0, $t1, 0
	slli.d	$t3, $a7, 1
	ori	$t4, $zero, 128
	stx.h	$t4, $a6, $t3
	ld.wu	$a6, $t1, 4
	ld.wu	$a0, $a0, 12
	mul.d	$a2, $t0, $a2
	add.d	$a1, $a1, $a2
	mul.d	$a2, $a6, $a3
	add.d	$a1, $a1, $a2
	mul.d	$a2, $a0, $t2
	add.d	$a1, $a1, $a2
	lu12i.w	$a2, 220974
	ori	$a2, $a2, 654
	add.d	$a1, $a1, $a2
	srli.d	$a2, $t0, 4
	srli.d	$a3, $a6, 5
	xor	$a2, $a2, $a3
	srli.d	$a0, $a0, 6
	xor	$a0, $a2, $a0
	bstrpick.d	$a2, $a1, 31, 9
	xor	$a0, $a0, $a2
	xor	$a0, $a0, $a5
	xor	$a0, $a0, $a1
	st.w	$a0, $a4, 108
	addi.d	$a0, $a7, 1
	st.w	$a0, $s0, 96
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2sm+24)
	addi.d	$fp, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2sm+24)
	move	$s7, $zero
	move	$s8, $zero
	lu12i.w	$a0, 1
	ori	$s5, $a0, 4094
	ori	$s3, $zero, 112
.LBB48_228:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s6, %pc_lo12(_ZZ9jpegModelR5MixerE3cxt+16)
	ldx.w	$a1, $a0, $s7
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE1t)
	pcaddu18i	$ra, %call36(_ZN2BHILi9EEixEj)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, -20
	ld.d	$a2, $fp, 0
	ld.d	$a3, $s1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp+16)
	slli.d	$a1, $a1, 2
	ldx.wu	$a4, $a2, $a1
	addi.d	$a5, $a0, 1
	stx.d	$a5, $a3, $s8
	andi	$a3, $a4, 1023
	addi.d	$a5, $a3, -1023
	sltui	$a5, $a5, 1
	addi.d	$a6, $a4, 1
	ori	$a7, $a4, 1023
	masknez	$a6, $a6, $a5
	maskeqz	$a5, $a7, $a5
	ld.w	$a7, $s4, %pc_lo12(y)
	ld.bu	$a0, $a0, 1
	or	$a5, $a5, $a6
	srli.d	$a4, $a4, 10
	slli.d	$a6, $a7, 22
	sub.w	$a4, $a6, $a4
	srli.d	$a4, $a4, 3
	slli.d	$a3, $a3, 2
	pcalau12i	$a6, %pc_hi20(_ZL2dt)
	addi.d	$a6, $a6, %pc_lo12(_ZL2dt)
	ldx.w	$a3, $a6, $a3
	mul.d	$a3, $a4, $a3
	bstrpick.d	$a3, $a3, 31, 10
	slli.d	$a3, $a3, 10
	add.d	$a3, $a3, $a5
	stx.w	$a3, $a2, $a1
	st.w	$a0, $fp, -20
	slli.d	$a0, $a0, 2
	ldx.wu	$a0, $a2, $a0
	ld.d	$a1, $s2, %pc_lo12(stretch+16)
	srli.d	$a0, $a0, 19
	ld.w	$a2, $s0, 96
	and	$a0, $a0, $s5
	ldx.h	$a0, $a1, $a0
	ld.d	$a1, $s0, 32
	addi.d	$a3, $a2, 1
	st.w	$a3, $s0, 96
	slli.d	$a2, $a2, 1
	stx.h	$a0, $a1, $a2
	addi.d	$fp, $fp, 32
	addi.d	$s7, $s7, 4
	addi.d	$s8, $s8, 8
	bne	$s7, $s3, .LBB48_228
	b	.LBB48_231
.LBB48_229:
	pcalau12i	$a4, %pc_hi20(_ZZ9jpegModelR5MixerE2sm+24)
	addi.d	$a4, $a4, %pc_lo12(_ZZ9jpegModelR5MixerE2sm+24)
	pcalau12i	$a5, %pc_hi20(_ZL2dt)
	addi.d	$a5, $a5, %pc_lo12(_ZL2dt)
	move	$a6, $zero
	lu12i.w	$a7, 1
	ori	$a7, $a7, 4094
	ori	$t0, $zero, 224
.LBB48_230:                             # =>This Inner Loop Header: Depth=1
	ldx.d	$t1, $a1, $a6
	ld.w	$t2, $a4, -20
	ld.d	$t3, $a4, 0
	add.d	$t1, $t1, $a3
	slli.d	$t2, $t2, 2
	ldx.wu	$t4, $t3, $t2
	addi.d	$t5, $t1, 1
	stx.d	$t5, $a1, $a6
	ld.bu	$t1, $t1, 1
	andi	$t5, $t4, 1023
	addi.d	$t6, $t5, -1023
	sltui	$t6, $t6, 1
	addi.d	$t7, $t4, 1
	ori	$t8, $t4, 1023
	masknez	$t7, $t7, $t6
	maskeqz	$t6, $t8, $t6
	or	$t6, $t6, $t7
	ld.w	$t7, $s4, %pc_lo12(y)
	srli.d	$t4, $t4, 10
	slli.d	$t5, $t5, 2
	ldx.w	$t5, $a5, $t5
	slli.d	$t7, $t7, 22
	sub.w	$t4, $t7, $t4
	srli.d	$t4, $t4, 3
	mul.d	$t4, $t4, $t5
	bstrpick.d	$t4, $t4, 31, 10
	slli.d	$t4, $t4, 10
	add.d	$t4, $t4, $t6
	stx.w	$t4, $t3, $t2
	st.w	$t1, $a4, -20
	slli.d	$t1, $t1, 2
	ldx.wu	$t1, $t3, $t1
	ld.w	$t2, $s0, 96
	srli.d	$t1, $t1, 19
	and	$t1, $t1, $a7
	ldx.h	$t1, $a2, $t1
	addi.d	$t3, $t2, 1
	st.w	$t3, $s0, 96
	slli.d	$t2, $t2, 1
	stx.h	$t1, $a0, $t2
	addi.d	$a6, $a6, 8
	addi.d	$a4, $a4, 32
	bne	$a6, $t0, .LBB48_230
.LBB48_231:                             # %.loopexit
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE6column)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	ld.w	$a1, $s0, 92
	ld.w	$a2, $s0, 88
	sltui	$a0, $a0, 1
	add.d	$a0, $a1, $a0
	ld.d	$a1, $s0, 80
	addi.d	$a3, $a2, 1
	st.w	$a3, $s0, 88
	slli.d	$a2, $a2, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a0, $s0, 92
	ld.w	$a2, $s0, 88
	addi.d	$a0, $a0, 2
	st.w	$a0, $s0, 92
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a2, 1
	st.w	$a3, $s0, 88
	slli.d	$a2, $a2, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a0, $s0, 92
	addi.d	$a0, $a0, 256
	ld.w	$a2, $s0, 88
	st.w	$a0, $s0, 92
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	andi	$a3, $s3, 511
	add.d	$a0, $a0, $a3
	addi.d	$a3, $a2, 1
	st.w	$a3, $s0, 88
	slli.d	$a2, $a2, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a0, $s0, 92
	addi.d	$a0, $a0, 512
	st.w	$a0, $s0, 92
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN5Mixer1pEv)
	jirl	$ra, $ra, 0
	ld.d	$a2, $s2, %pc_lo12(stretch+16)
	move	$a1, $a0
	slli.d	$a0, $a0, 1
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.w	$a3, $s0, 96
	ldx.h	$a0, $a2, $a0
	pcalau12i	$a2, %pc_hi20(_ZZ9jpegModelR5MixerE8adv_pred+16)
	ld.d	$a2, $a2, %pc_lo12(_ZZ9jpegModelR5MixerE8adv_pred+16)
	addi.d	$a4, $a3, 1
	st.w	$a4, $s0, 96
	ld.d	$a4, $s0, 32
	ld.wu	$a2, $a2, 4
	slli.d	$a3, $a3, 1
	stx.h	$a0, $a4, $a3
	andi	$a0, $a2, 63
	move	$a2, $s3
	bstrins.d	$a2, $a0, 63, 9
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2a1)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2a1)
	ori	$a3, $zero, 1023
	pcaddu18i	$ra, %call36(_ZN3APM1pEiii)
	jirl	$ra, $ra, 0
	move	$a1, $a0
	andi	$fp, $s3, 255
	bstrins.d	$s3, $s1, 63, 8
	addi.w	$a2, $s3, 0
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2a2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2a2)
	ori	$a3, $zero, 255
	pcaddu18i	$ra, %call36(_ZN3APM1pEiii)
	jirl	$ra, $ra, 0
	ld.d	$a1, $s2, %pc_lo12(stretch+16)
	ld.w	$a2, $s0, 96
	slli.d	$a0, $a0, 1
	ldx.h	$a0, $a1, $a0
	ld.d	$a1, $s0, 32
	addi.d	$a3, $a2, 1
	st.w	$a3, $s0, 96
	slli.d	$a2, $a2, 1
	stx.h	$a0, $a1, $a2
	addi.w	$a0, $fp, 2
	b	.LBB48_19
.LBB48_232:                             # %._crit_edge856
                                        #   in Loop: Header=BB48_233 Depth=1
	sub.d	$t2, $a1, $t2
	slli.d	$t2, $t2, 6
	st.w	$t2, $t1, 0
	addi.d	$a7, $a7, 1
	addi.d	$a6, $a6, 1
	beq	$a7, $a1, .LBB48_283
.LBB48_233:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_236 Depth 2
	move	$t2, $zero
	alsl.d	$t1, $a7, $a4, 2
	slli.d	$t3, $a7, 2
	stx.w	$zero, $a4, $t3
	beq	$a1, $t0, .LBB48_232
# %bb.234:                              # %.lr.ph
                                        #   in Loop: Header=BB48_233 Depth=1
	move	$t2, $zero
	alsl.d	$t3, $a7, $a5, 2
	ori	$t4, $zero, 1
	b	.LBB48_236
.LBB48_235:                             #   in Loop: Header=BB48_236 Depth=2
	addi.w	$t4, $t4, 1
	beq	$a1, $t4, .LBB48_232
.LBB48_236:                             #   Parent Loop BB48_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.w	$t5, $a6, $t4
	mod.wu	$t5, $t5, $a1
	slli.d	$t5, $t5, 2
	ldx.w	$t5, $a5, $t5
	ld.w	$t6, $t3, 0
	bne	$t5, $t6, .LBB48_235
# %bb.237:                              #   in Loop: Header=BB48_236 Depth=2
	st.w	$t4, $t1, 0
	move	$t2, $t4
	b	.LBB48_235
.LBB48_238:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2ht)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2ht)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_1
# %bb.239:
.Ltmp128:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2ht)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2ht)
	ori	$a1, $zero, 8
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp129:                               # EH_LABEL
# %bb.240:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2ht)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2ht)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2ht)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2ht)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_1
.LBB48_241:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3huf)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3huf)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_2
# %bb.242:
.Ltmp131:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3huf)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3huf)
	ori	$a1, $zero, 128
	pcaddu18i	$ra, %call36(_ZN5ArrayI3HUFLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp132:                               # EH_LABEL
# %bb.243:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayI3HUFLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayI3HUFLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE3huf)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE3huf)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3huf)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3huf)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_2
.LBB48_244:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4hbuf)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4hbuf)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_3
# %bb.245:
.Ltmp134:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4hbuf)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4hbuf)
	ori	$a1, $zero, 2048
	pcaddu18i	$ra, %call36(_ZN5ArrayIhLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp135:                               # EH_LABEL
# %bb.246:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIhLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIhLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4hbuf)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4hbuf)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4hbuf)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4hbuf)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_3
.LBB48_247:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE5color)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE5color)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_4
# %bb.248:
.Ltmp137:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE5color)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE5color)
	ori	$a1, $zero, 10
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp138:                               # EH_LABEL
# %bb.249:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE5color)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE5color)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE5color)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE5color)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_4
.LBB48_250:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4pred)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4pred)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_5
# %bb.251:
.Ltmp140:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4pred)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4pred)
	ori	$a1, $zero, 4
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp141:                               # EH_LABEL
# %bb.252:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4pred)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4pred)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4pred)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4pred)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_5
.LBB48_253:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4cbuf)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4cbuf)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_6
# %bb.254:
.Ltmp143:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4cbuf)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4cbuf)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN3BufC2Ei)
	jirl	$ra, $ra, 0
.Ltmp144:                               # EH_LABEL
# %bb.255:
	pcalau12i	$a0, %pc_hi20(_ZN3BufD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN3BufD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4cbuf)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4cbuf)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4cbuf)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4cbuf)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_6
.LBB48_256:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE5cbuf2)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE5cbuf2)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_7
# %bb.257:
.Ltmp146:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE5cbuf2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE5cbuf2)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN6IntBufC2Ei)
	jirl	$ra, $ra, 0
.Ltmp147:                               # EH_LABEL
# %bb.258:
	pcalau12i	$a0, %pc_hi20(_ZN6IntBufD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN6IntBufD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE5cbuf2)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE5cbuf2)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE5cbuf2)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE5cbuf2)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_7
.LBB48_259:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE8adv_pred)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE8adv_pred)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_8
# %bb.260:
.Ltmp149:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE8adv_pred)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE8adv_pred)
	ori	$a1, $zero, 7
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp150:                               # EH_LABEL
# %bb.261:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE8adv_pred)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE8adv_pred)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE8adv_pred)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE8adv_pred)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_8
.LBB48_262:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4sumu)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4sumu)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_9
# %bb.263:
.Ltmp152:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4sumu)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4sumu)
	ori	$a1, $zero, 8
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp153:                               # EH_LABEL
# %bb.264:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4sumu)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4sumu)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4sumu)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4sumu)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_9
.LBB48_265:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4sumv)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4sumv)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_10
# %bb.266:
.Ltmp155:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4sumv)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4sumv)
	ori	$a1, $zero, 8
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp156:                               # EH_LABEL
# %bb.267:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4sumv)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4sumv)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4sumv)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4sumv)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_10
.LBB48_268:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2ls)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2ls)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_11
# %bb.269:
.Ltmp158:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2ls)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2ls)
	ori	$a1, $zero, 10
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp159:                               # EH_LABEL
# %bb.270:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2ls)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2ls)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2ls)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2ls)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_11
.LBB48_271:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3lcp)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3lcp)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_12
# %bb.272:
.Ltmp161:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3lcp)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3lcp)
	ori	$a1, $zero, 4
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp162:                               # EH_LABEL
# %bb.273:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE3lcp)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE3lcp)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3lcp)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3lcp)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_12
.LBB48_274:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4zpos)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4zpos)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_13
# %bb.275:
.Ltmp164:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4zpos)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4zpos)
	ori	$a1, $zero, 64
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp165:                               # EH_LABEL
# %bb.276:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4zpos)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4zpos)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4zpos)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4zpos)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_13
.LBB48_277:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4qtab)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4qtab)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_14
# %bb.278:
.Ltmp167:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4qtab)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4qtab)
	ori	$a1, $zero, 256
	pcaddu18i	$ra, %call36(_ZN5ArrayIhLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp168:                               # EH_LABEL
# %bb.279:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIhLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIhLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4qtab)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4qtab)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4qtab)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4qtab)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_14
.LBB48_280:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4qmap)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4qmap)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_15
# %bb.281:
.Ltmp170:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE4qmap)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE4qmap)
	ori	$a1, $zero, 10
	pcaddu18i	$ra, %call36(_ZN5ArrayIiLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp171:                               # EH_LABEL
# %bb.282:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIiLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIiLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4qmap)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4qmap)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE4qmap)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE4qmap)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_15
.LBB48_283:                             # %.preheader807
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE4zpos+16)
	ld.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4zpos+16)
	ori	$a4, $zero, 1
	pcalau12i	$a5, %pc_hi20(_ZZ9jpegModelR5MixerE3zzu)
	addi.d	$a5, $a5, %pc_lo12(_ZZ9jpegModelR5MixerE3zzu)
	pcalau12i	$a6, %pc_hi20(_ZZ9jpegModelR5MixerE3zzv)
	addi.d	$a6, $a6, %pc_lo12(_ZZ9jpegModelR5MixerE3zzv)
	move	$a7, $zero
	ori	$t0, $zero, 64
.LBB48_284:                             # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	addi.d	$t1, $a4, -1
	add.d	$t2, $a5, $a7
	add.d	$t3, $a6, $a7
	ldx.bu	$t4, $a6, $a7
	ld.bu	$t3, $t3, 1
	ldx.bu	$t5, $a5, $a7
	ld.bu	$t2, $t2, 1
	slli.d	$t4, $t4, 5
	slli.d	$t3, $t3, 5
	add.d	$t4, $a1, $t4
	add.d	$t3, $a1, $t3
	slli.d	$t5, $t5, 2
	slli.d	$t2, $t2, 2
	stx.w	$t1, $t4, $t5
	stx.w	$a4, $t3, $t2
	addi.d	$a7, $a7, 2
	addi.d	$a4, $a4, 2
	bne	$a7, $t0, .LBB48_284
# %bb.285:                              # %middle.block
	ld.w	$a0, $a0, 0
	addi.w	$a1, $a2, 7
	addi.w	$a0, $a0, -1
	and	$a1, $a0, $a1
	ldx.bu	$a1, $a3, $a1
	addi.w	$a4, $a2, 8
	and	$a4, $a0, $a4
	ldx.bu	$a4, $a3, $a4
	slli.d	$a1, $a1, 8
	or	$a1, $a1, $a4
	pcalau12i	$fp, %pc_hi20(_ZZ9jpegModelR5MixerE5width)
	st.w	$a1, $fp, %pc_lo12(_ZZ9jpegModelR5MixerE5width)
	addi.w	$a4, $a2, 5
	and	$a4, $a0, $a4
	ldx.bu	$a4, $a3, $a4
	addi.w	$a2, $a2, 6
	and	$a0, $a0, $a2
	ldx.bu	$a0, $a3, $a0
	slli.d	$a2, $a4, 8
	or	$a2, $a2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.12)
	addi.d	$a0, $a0, %pc_lo12(.L.str.12)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, %pc_lo12(_ZZ9jpegModelR5MixerE5width)
	addi.w	$a0, $a0, -1
	slli.w	$a1, $s4, 3
	div.w	$a0, $a0, $a1
	addi.d	$a1, $a0, 1
	st.w	$a1, $fp, %pc_lo12(_ZZ9jpegModelR5MixerE5width)
	bltz	$a0, .LBB48_287
# %bb.286:
	ld.w	$a0, $s0, %pc_lo12(_ZZ9jpegModelR5MixerE7mcusize)
	slli.w	$s5, $a0, 6
	st.w	$s5, $s0, %pc_lo12(_ZZ9jpegModelR5MixerE7mcusize)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE6column)
	st.w	$zero, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE6column)
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3row)
	st.w	$zero, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3row)
	ld.d	$t7, $sp, 136                   # 8-byte Folded Reload
	pcalau12i	$s4, %pc_hi20(y)
	bnez	$s5, .LBB48_108
	b	.LBB48_207
.LBB48_287:                             # %.thread702
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE9next_jpeg)
	ld.w	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE9next_jpeg)
	ld.d	$a1, $sp, 160                   # 8-byte Folded Reload
	st.w	$zero, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE4jpeg)
	b	.LBB48_19
.LBB48_288:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE1t)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE1t)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_211
# %bb.289:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp173:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE1t)
	pcaddu18i	$ra, %call36(_ZN2BHILi9EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp174:                               # EH_LABEL
# %bb.290:
	pcalau12i	$a0, %pc_hi20(_ZN2BHILi9EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN2BHILi9EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE1t)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE1t)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE1t)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_211
.LBB48_291:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3cxt)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3cxt)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_212
# %bb.292:
.Ltmp176:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE3cxt)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE3cxt)
	ori	$a1, $zero, 28
	pcaddu18i	$ra, %call36(_ZN5ArrayIjLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp177:                               # EH_LABEL
# %bb.293:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIjLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIjLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE3cxt)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE3cxt)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE3cxt)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE3cxt)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_212
.LBB48_294:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2cp)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2cp)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_213
# %bb.295:
.Ltmp179:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2cp)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2cp)
	ori	$a1, $zero, 28
	pcaddu18i	$ra, %call36(_ZN5ArrayIPhLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp180:                               # EH_LABEL
# %bb.296:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIPhLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIPhLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2cp)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2cp)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2cp)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2cp)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_213
.LBB48_297:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2sm)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2sm)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_214
# %bb.298:                              # %.preheader800.preheader
.Ltmp182:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2sm)
	addi.d	$s1, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2sm)
	ori	$a1, $zero, 256
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp183:                               # EH_LABEL
# %bb.299:                              # %.preheader800.1
	addi.d	$s2, $s1, 32
.Ltmp185:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp186:                               # EH_LABEL
# %bb.300:                              # %.preheader800.2
	addi.d	$s2, $s1, 64
.Ltmp187:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp188:                               # EH_LABEL
# %bb.301:                              # %.preheader800.3
	addi.d	$s2, $s1, 96
.Ltmp189:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp190:                               # EH_LABEL
# %bb.302:                              # %.preheader800.4
	addi.d	$s2, $s1, 128
.Ltmp191:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp192:                               # EH_LABEL
# %bb.303:                              # %.preheader800.5
	addi.d	$s2, $s1, 160
.Ltmp193:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp194:                               # EH_LABEL
# %bb.304:                              # %.preheader800.6
	addi.d	$s2, $s1, 192
.Ltmp195:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp196:                               # EH_LABEL
# %bb.305:                              # %.preheader800.7
	addi.d	$s2, $s1, 224
.Ltmp197:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp198:                               # EH_LABEL
# %bb.306:                              # %.preheader800.8
	addi.d	$s2, $s1, 256
.Ltmp199:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp200:                               # EH_LABEL
# %bb.307:                              # %.preheader800.9
	addi.d	$s2, $s1, 288
.Ltmp201:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp202:                               # EH_LABEL
# %bb.308:                              # %.preheader800.10
	addi.d	$s2, $s1, 320
.Ltmp203:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp204:                               # EH_LABEL
# %bb.309:                              # %.preheader800.11
	addi.d	$s2, $s1, 352
.Ltmp205:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp206:                               # EH_LABEL
# %bb.310:                              # %.preheader800.12
	addi.d	$s2, $s1, 384
.Ltmp207:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp208:                               # EH_LABEL
# %bb.311:                              # %.preheader800.13
	addi.d	$s2, $s1, 416
.Ltmp209:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp210:                               # EH_LABEL
# %bb.312:                              # %.preheader800.14
	addi.d	$s2, $s1, 448
.Ltmp211:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp212:                               # EH_LABEL
# %bb.313:                              # %.preheader800.15
	addi.d	$s2, $s1, 480
.Ltmp213:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp214:                               # EH_LABEL
# %bb.314:                              # %.preheader800.16
	addi.d	$s2, $s1, 512
.Ltmp215:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp216:                               # EH_LABEL
# %bb.315:                              # %.preheader800.17
	addi.d	$s2, $s1, 544
.Ltmp217:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp218:                               # EH_LABEL
# %bb.316:                              # %.preheader800.18
	addi.d	$s2, $s1, 576
.Ltmp219:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp220:                               # EH_LABEL
# %bb.317:                              # %.preheader800.19
	addi.d	$s2, $s1, 608
.Ltmp221:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp222:                               # EH_LABEL
# %bb.318:                              # %.preheader800.20
	addi.d	$s2, $s1, 640
.Ltmp223:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp224:                               # EH_LABEL
# %bb.319:                              # %.preheader800.21
	addi.d	$s2, $s1, 672
.Ltmp225:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp226:                               # EH_LABEL
# %bb.320:                              # %.preheader800.22
	addi.d	$s2, $s1, 704
.Ltmp227:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp228:                               # EH_LABEL
# %bb.321:                              # %.preheader800.23
	addi.d	$s2, $s1, 736
.Ltmp229:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp230:                               # EH_LABEL
# %bb.322:                              # %.preheader800.24
	addi.d	$s2, $s1, 768
.Ltmp231:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp232:                               # EH_LABEL
# %bb.323:                              # %.preheader800.25
	addi.d	$s2, $s1, 800
.Ltmp233:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp234:                               # EH_LABEL
# %bb.324:                              # %.preheader800.26
	addi.d	$s2, $s1, 832
.Ltmp235:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp236:                               # EH_LABEL
# %bb.325:                              # %.preheader800.27
	addi.d	$s2, $s1, 864
.Ltmp237:                               # EH_LABEL
	ori	$a1, $zero, 256
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp238:                               # EH_LABEL
# %bb.326:
	pcalau12i	$a0, %pc_hi20(__cxx_global_array_dtor.13)
	addi.d	$a0, $a0, %pc_lo12(__cxx_global_array_dtor.13)
	pcalau12i	$a1, %pc_hi20(__dso_handle)
	addi.d	$a2, $a1, %pc_lo12(__dso_handle)
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2sm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2sm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_214
.LBB48_327:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2m1)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2m1)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_215
# %bb.328:
.Ltmp240:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2m1)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2m1)
	ori	$a1, $zero, 32
	ori	$a2, $zero, 770
	ori	$a3, $zero, 3
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_ZN5MixerC2Eiiii)
	jirl	$ra, $ra, 0
.Ltmp241:                               # EH_LABEL
# %bb.329:
	pcalau12i	$a0, %pc_hi20(_ZN5MixerD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5MixerD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2m1)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2m1)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2m1)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2m1)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_215
.LBB48_330:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2a1)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2a1)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_216
# %bb.331:
.Ltmp243:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2a1)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2a1)
	lu12i.w	$a1, 8
	pcaddu18i	$ra, %call36(_ZN3APMC2Ei)
	jirl	$ra, $ra, 0
.Ltmp244:                               # EH_LABEL
# %bb.332:
	pcalau12i	$a0, %pc_hi20(_ZN8StateMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN8StateMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2a1)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2a1)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2a1)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2a1)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_216
.LBB48_333:
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2a2)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2a2)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB48_217
# %bb.334:
.Ltmp246:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2a2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2a2)
	lu12i.w	$a1, 16
	pcaddu18i	$ra, %call36(_ZN3APMC2Ei)
	jirl	$ra, $ra, 0
.Ltmp247:                               # EH_LABEL
# %bb.335:
	pcalau12i	$a0, %pc_hi20(_ZN8StateMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN8StateMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ9jpegModelR5MixerE2a2)
	addi.d	$a1, $a1, %pc_lo12(_ZZ9jpegModelR5MixerE2a2)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ9jpegModelR5MixerE2a2)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ9jpegModelR5MixerE2a2)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB48_217
.LBB48_336:
.Ltmp248:                               # EH_LABEL
	b	.LBB48_360
.LBB48_337:
.Ltmp245:                               # EH_LABEL
	b	.LBB48_360
.LBB48_338:
.Ltmp242:                               # EH_LABEL
	b	.LBB48_360
.LBB48_339:
.Ltmp184:                               # EH_LABEL
	b	.LBB48_360
.LBB48_340:
.Ltmp181:                               # EH_LABEL
	b	.LBB48_360
.LBB48_341:
.Ltmp178:                               # EH_LABEL
	b	.LBB48_360
.LBB48_342:
.Ltmp175:                               # EH_LABEL
	b	.LBB48_360
.LBB48_343:                             # %.preheader798.preheader
.Ltmp239:                               # EH_LABEL
	move	$fp, $a0
.LBB48_344:                             # %.preheader798
                                        # =>This Inner Loop Header: Depth=1
	addi.d	$s2, $s2, -32
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN8StateMapD2Ev)
	jirl	$ra, $ra, 0
	bne	$s2, $s1, .LBB48_344
	b	.LBB48_361
.LBB48_345:
.Ltmp172:                               # EH_LABEL
	b	.LBB48_360
.LBB48_346:
.Ltmp169:                               # EH_LABEL
	b	.LBB48_360
.LBB48_347:
.Ltmp166:                               # EH_LABEL
	b	.LBB48_360
.LBB48_348:
.Ltmp163:                               # EH_LABEL
	b	.LBB48_360
.LBB48_349:
.Ltmp160:                               # EH_LABEL
	b	.LBB48_360
.LBB48_350:
.Ltmp157:                               # EH_LABEL
	b	.LBB48_360
.LBB48_351:
.Ltmp154:                               # EH_LABEL
	b	.LBB48_360
.LBB48_352:
.Ltmp151:                               # EH_LABEL
	b	.LBB48_360
.LBB48_353:
.Ltmp148:                               # EH_LABEL
	b	.LBB48_360
.LBB48_354:
.Ltmp145:                               # EH_LABEL
	b	.LBB48_360
.LBB48_355:
.Ltmp142:                               # EH_LABEL
	b	.LBB48_360
.LBB48_356:
.Ltmp139:                               # EH_LABEL
	b	.LBB48_360
.LBB48_357:
.Ltmp136:                               # EH_LABEL
	b	.LBB48_360
.LBB48_358:
.Ltmp133:                               # EH_LABEL
	b	.LBB48_360
.LBB48_359:
.Ltmp130:                               # EH_LABEL
.LBB48_360:                             # %.loopexit799
	move	$fp, $a0
.LBB48_361:                             # %.loopexit799
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end48:
	.size	_Z9jpegModelR5Mixer, .Lfunc_end48-_Z9jpegModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table48:
.Lexception10:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end10-.Lcst_begin10
.Lcst_begin10:
	.uleb128 .Lfunc_begin10-.Lfunc_begin10  # >> Call Site 1 <<
	.uleb128 .Ltmp128-.Lfunc_begin10        #   Call between .Lfunc_begin10 and .Ltmp128
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp128-.Lfunc_begin10        # >> Call Site 2 <<
	.uleb128 .Ltmp129-.Ltmp128              #   Call between .Ltmp128 and .Ltmp129
	.uleb128 .Ltmp130-.Lfunc_begin10        #     jumps to .Ltmp130
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp129-.Lfunc_begin10        # >> Call Site 3 <<
	.uleb128 .Ltmp131-.Ltmp129              #   Call between .Ltmp129 and .Ltmp131
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp131-.Lfunc_begin10        # >> Call Site 4 <<
	.uleb128 .Ltmp132-.Ltmp131              #   Call between .Ltmp131 and .Ltmp132
	.uleb128 .Ltmp133-.Lfunc_begin10        #     jumps to .Ltmp133
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp132-.Lfunc_begin10        # >> Call Site 5 <<
	.uleb128 .Ltmp134-.Ltmp132              #   Call between .Ltmp132 and .Ltmp134
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp134-.Lfunc_begin10        # >> Call Site 6 <<
	.uleb128 .Ltmp135-.Ltmp134              #   Call between .Ltmp134 and .Ltmp135
	.uleb128 .Ltmp136-.Lfunc_begin10        #     jumps to .Ltmp136
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp135-.Lfunc_begin10        # >> Call Site 7 <<
	.uleb128 .Ltmp137-.Ltmp135              #   Call between .Ltmp135 and .Ltmp137
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp137-.Lfunc_begin10        # >> Call Site 8 <<
	.uleb128 .Ltmp138-.Ltmp137              #   Call between .Ltmp137 and .Ltmp138
	.uleb128 .Ltmp139-.Lfunc_begin10        #     jumps to .Ltmp139
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp138-.Lfunc_begin10        # >> Call Site 9 <<
	.uleb128 .Ltmp140-.Ltmp138              #   Call between .Ltmp138 and .Ltmp140
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp140-.Lfunc_begin10        # >> Call Site 10 <<
	.uleb128 .Ltmp141-.Ltmp140              #   Call between .Ltmp140 and .Ltmp141
	.uleb128 .Ltmp142-.Lfunc_begin10        #     jumps to .Ltmp142
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp141-.Lfunc_begin10        # >> Call Site 11 <<
	.uleb128 .Ltmp143-.Ltmp141              #   Call between .Ltmp141 and .Ltmp143
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp143-.Lfunc_begin10        # >> Call Site 12 <<
	.uleb128 .Ltmp144-.Ltmp143              #   Call between .Ltmp143 and .Ltmp144
	.uleb128 .Ltmp145-.Lfunc_begin10        #     jumps to .Ltmp145
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp144-.Lfunc_begin10        # >> Call Site 13 <<
	.uleb128 .Ltmp146-.Ltmp144              #   Call between .Ltmp144 and .Ltmp146
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp146-.Lfunc_begin10        # >> Call Site 14 <<
	.uleb128 .Ltmp147-.Ltmp146              #   Call between .Ltmp146 and .Ltmp147
	.uleb128 .Ltmp148-.Lfunc_begin10        #     jumps to .Ltmp148
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp147-.Lfunc_begin10        # >> Call Site 15 <<
	.uleb128 .Ltmp149-.Ltmp147              #   Call between .Ltmp147 and .Ltmp149
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp149-.Lfunc_begin10        # >> Call Site 16 <<
	.uleb128 .Ltmp150-.Ltmp149              #   Call between .Ltmp149 and .Ltmp150
	.uleb128 .Ltmp151-.Lfunc_begin10        #     jumps to .Ltmp151
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp150-.Lfunc_begin10        # >> Call Site 17 <<
	.uleb128 .Ltmp152-.Ltmp150              #   Call between .Ltmp150 and .Ltmp152
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp152-.Lfunc_begin10        # >> Call Site 18 <<
	.uleb128 .Ltmp153-.Ltmp152              #   Call between .Ltmp152 and .Ltmp153
	.uleb128 .Ltmp154-.Lfunc_begin10        #     jumps to .Ltmp154
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp153-.Lfunc_begin10        # >> Call Site 19 <<
	.uleb128 .Ltmp155-.Ltmp153              #   Call between .Ltmp153 and .Ltmp155
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp155-.Lfunc_begin10        # >> Call Site 20 <<
	.uleb128 .Ltmp156-.Ltmp155              #   Call between .Ltmp155 and .Ltmp156
	.uleb128 .Ltmp157-.Lfunc_begin10        #     jumps to .Ltmp157
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp156-.Lfunc_begin10        # >> Call Site 21 <<
	.uleb128 .Ltmp158-.Ltmp156              #   Call between .Ltmp156 and .Ltmp158
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp158-.Lfunc_begin10        # >> Call Site 22 <<
	.uleb128 .Ltmp159-.Ltmp158              #   Call between .Ltmp158 and .Ltmp159
	.uleb128 .Ltmp160-.Lfunc_begin10        #     jumps to .Ltmp160
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp159-.Lfunc_begin10        # >> Call Site 23 <<
	.uleb128 .Ltmp161-.Ltmp159              #   Call between .Ltmp159 and .Ltmp161
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp161-.Lfunc_begin10        # >> Call Site 24 <<
	.uleb128 .Ltmp162-.Ltmp161              #   Call between .Ltmp161 and .Ltmp162
	.uleb128 .Ltmp163-.Lfunc_begin10        #     jumps to .Ltmp163
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp162-.Lfunc_begin10        # >> Call Site 25 <<
	.uleb128 .Ltmp164-.Ltmp162              #   Call between .Ltmp162 and .Ltmp164
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp164-.Lfunc_begin10        # >> Call Site 26 <<
	.uleb128 .Ltmp165-.Ltmp164              #   Call between .Ltmp164 and .Ltmp165
	.uleb128 .Ltmp166-.Lfunc_begin10        #     jumps to .Ltmp166
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp165-.Lfunc_begin10        # >> Call Site 27 <<
	.uleb128 .Ltmp167-.Ltmp165              #   Call between .Ltmp165 and .Ltmp167
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp167-.Lfunc_begin10        # >> Call Site 28 <<
	.uleb128 .Ltmp168-.Ltmp167              #   Call between .Ltmp167 and .Ltmp168
	.uleb128 .Ltmp169-.Lfunc_begin10        #     jumps to .Ltmp169
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp168-.Lfunc_begin10        # >> Call Site 29 <<
	.uleb128 .Ltmp170-.Ltmp168              #   Call between .Ltmp168 and .Ltmp170
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp170-.Lfunc_begin10        # >> Call Site 30 <<
	.uleb128 .Ltmp171-.Ltmp170              #   Call between .Ltmp170 and .Ltmp171
	.uleb128 .Ltmp172-.Lfunc_begin10        #     jumps to .Ltmp172
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp171-.Lfunc_begin10        # >> Call Site 31 <<
	.uleb128 .Ltmp173-.Ltmp171              #   Call between .Ltmp171 and .Ltmp173
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp173-.Lfunc_begin10        # >> Call Site 32 <<
	.uleb128 .Ltmp174-.Ltmp173              #   Call between .Ltmp173 and .Ltmp174
	.uleb128 .Ltmp175-.Lfunc_begin10        #     jumps to .Ltmp175
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp174-.Lfunc_begin10        # >> Call Site 33 <<
	.uleb128 .Ltmp176-.Ltmp174              #   Call between .Ltmp174 and .Ltmp176
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp176-.Lfunc_begin10        # >> Call Site 34 <<
	.uleb128 .Ltmp177-.Ltmp176              #   Call between .Ltmp176 and .Ltmp177
	.uleb128 .Ltmp178-.Lfunc_begin10        #     jumps to .Ltmp178
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp177-.Lfunc_begin10        # >> Call Site 35 <<
	.uleb128 .Ltmp179-.Ltmp177              #   Call between .Ltmp177 and .Ltmp179
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp179-.Lfunc_begin10        # >> Call Site 36 <<
	.uleb128 .Ltmp180-.Ltmp179              #   Call between .Ltmp179 and .Ltmp180
	.uleb128 .Ltmp181-.Lfunc_begin10        #     jumps to .Ltmp181
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp180-.Lfunc_begin10        # >> Call Site 37 <<
	.uleb128 .Ltmp182-.Ltmp180              #   Call between .Ltmp180 and .Ltmp182
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp182-.Lfunc_begin10        # >> Call Site 38 <<
	.uleb128 .Ltmp183-.Ltmp182              #   Call between .Ltmp182 and .Ltmp183
	.uleb128 .Ltmp184-.Lfunc_begin10        #     jumps to .Ltmp184
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp185-.Lfunc_begin10        # >> Call Site 39 <<
	.uleb128 .Ltmp238-.Ltmp185              #   Call between .Ltmp185 and .Ltmp238
	.uleb128 .Ltmp239-.Lfunc_begin10        #     jumps to .Ltmp239
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp238-.Lfunc_begin10        # >> Call Site 40 <<
	.uleb128 .Ltmp240-.Ltmp238              #   Call between .Ltmp238 and .Ltmp240
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp240-.Lfunc_begin10        # >> Call Site 41 <<
	.uleb128 .Ltmp241-.Ltmp240              #   Call between .Ltmp240 and .Ltmp241
	.uleb128 .Ltmp242-.Lfunc_begin10        #     jumps to .Ltmp242
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp241-.Lfunc_begin10        # >> Call Site 42 <<
	.uleb128 .Ltmp243-.Ltmp241              #   Call between .Ltmp241 and .Ltmp243
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp243-.Lfunc_begin10        # >> Call Site 43 <<
	.uleb128 .Ltmp244-.Ltmp243              #   Call between .Ltmp243 and .Ltmp244
	.uleb128 .Ltmp245-.Lfunc_begin10        #     jumps to .Ltmp245
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp244-.Lfunc_begin10        # >> Call Site 44 <<
	.uleb128 .Ltmp246-.Ltmp244              #   Call between .Ltmp244 and .Ltmp246
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp246-.Lfunc_begin10        # >> Call Site 45 <<
	.uleb128 .Ltmp247-.Ltmp246              #   Call between .Ltmp246 and .Ltmp247
	.uleb128 .Ltmp248-.Lfunc_begin10        #     jumps to .Ltmp248
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp247-.Lfunc_begin10        # >> Call Site 46 <<
	.uleb128 .Lfunc_end48-.Ltmp247          #   Call between .Ltmp247 and .Lfunc_end48
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end10:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN5ArrayI3HUFLi0EEC2Ei,"axG",@progbits,_ZN5ArrayI3HUFLi0EEC2Ei,comdat
	.weak	_ZN5ArrayI3HUFLi0EEC2Ei         # -- Begin function _ZN5ArrayI3HUFLi0EEC2Ei
	.p2align	5
	.type	_ZN5ArrayI3HUFLi0EEC2Ei,@function
_ZN5ArrayI3HUFLi0EEC2Ei:                # @_ZN5ArrayI3HUFLi0EEC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB49_5
# %bb.1:
	slli.d	$a2, $a1, 3
	alsl.w	$a0, $a1, $a2, 2
	alsl.d	$a2, $a1, $a2, 2
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	add.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB49_3
# %bb.2:
	st.w	$a2, $a1, 4
.LBB49_3:                               # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB49_6
# %bb.4:                                # %_ZN5ArrayI3HUFLi0EE6createEi.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB49_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB49_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end49:
	.size	_ZN5ArrayI3HUFLi0EEC2Ei, .Lfunc_end49-_ZN5ArrayI3HUFLi0EEC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayI3HUFLi0EED2Ev,"axG",@progbits,_ZN5ArrayI3HUFLi0EED2Ev,comdat
	.weak	_ZN5ArrayI3HUFLi0EED2Ev         # -- Begin function _ZN5ArrayI3HUFLi0EED2Ev
	.p2align	5
	.type	_ZN5ArrayI3HUFLi0EED2Ev,@function
_ZN5ArrayI3HUFLi0EED2Ev:                # @_ZN5ArrayI3HUFLi0EED2Ev
# %bb.0:
	ld.w	$a1, $a0, 0
	addi.d	$a2, $zero, -12
	mul.d	$a2, $a1, $a2
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	add.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB50_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB50_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end50:
	.size	_ZN5ArrayI3HUFLi0EED2Ev, .Lfunc_end50-_ZN5ArrayI3HUFLi0EED2Ev
                                        # -- End function
	.section	.text._ZN6IntBufC2Ei,"axG",@progbits,_ZN6IntBufC2Ei,comdat
	.weak	_ZN6IntBufC2Ei                  # -- Begin function _ZN6IntBufC2Ei
	.p2align	5
	.type	_ZN6IntBufC2Ei,@function
_ZN6IntBufC2Ei:                         # @_ZN6IntBufC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB51_5
# %bb.1:
	slli.w	$a0, $a1, 2
	pcalau12i	$a2, %pc_hi20(programChecker)
	addi.d	$a2, $a2, %pc_lo12(programChecker)
	ld.w	$a4, $a2, 0
	ld.w	$a5, $a2, 4
	alsl.w	$a3, $a1, $a4, 2
	alsl.d	$a1, $a1, $a4, 2
	st.w	$a1, $a2, 0
	bge	$a5, $a3, .LBB51_3
# %bb.2:
	st.w	$a3, $a2, 4
.LBB51_3:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB51_6
# %bb.4:                                # %_ZN5ArrayIiLi0EEC2Ei.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB51_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB51_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end51:
	.size	_ZN6IntBufC2Ei, .Lfunc_end51-_ZN6IntBufC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN6IntBufD2Ev,"axG",@progbits,_ZN6IntBufD2Ev,comdat
	.weak	_ZN6IntBufD2Ev                  # -- Begin function _ZN6IntBufD2Ev
	.p2align	5
	.type	_ZN6IntBufD2Ev,@function
_ZN6IntBufD2Ev:                         # @_ZN6IntBufD2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 2
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB52_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB52_2:                               # %_ZN5ArrayIiLi0EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end52:
	.size	_ZN6IntBufD2Ev, .Lfunc_end52-_ZN6IntBufD2Ev
                                        # -- End function
	.section	.text._ZN2BHILi9EEC2Ei,"axG",@progbits,_ZN2BHILi9EEC2Ei,comdat
	.weak	_ZN2BHILi9EEC2Ei                # -- Begin function _ZN2BHILi9EEC2Ei
	.p2align	5
	.type	_ZN2BHILi9EEC2Ei,@function
_ZN2BHILi9EEC2Ei:                       # @_ZN2BHILi9EEC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$s0, $a1
	move	$fp, $a0
	alsl.d	$a0, $a1, $a1, 3
	st.w	$a0, $fp, 4
	st.w	$a0, $fp, 0
	blez	$a1, .LBB53_5
# %bb.1:
	alsl.w	$a0, $s0, $s0, 3
	addi.w	$a0, $a0, 64
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a2, $a1, 0
	ld.w	$a3, $a1, 4
	add.w	$a2, $a2, $a0
	st.w	$a2, $a1, 0
	bge	$a3, $a2, .LBB53_3
# %bb.2:
	st.w	$a2, $a1, 4
.LBB53_3:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB53_7
# %bb.4:
	bstrins.d	$a0, $zero, 5, 0
	addi.d	$a0, $a0, 64
	st.d	$a0, $fp, 16
	b	.LBB53_6
.LBB53_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
.LBB53_6:                               # %_ZN5ArrayIhLi64EEC2Ei.exit
	addi.d	$a0, $s0, -1
	st.w	$a0, $fp, 24
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB53_7:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end53:
	.size	_ZN2BHILi9EEC2Ei, .Lfunc_end53-_ZN2BHILi9EEC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN2BHILi9EED2Ev,"axG",@progbits,_ZN2BHILi9EED2Ev,comdat
	.weak	_ZN2BHILi9EED2Ev                # -- Begin function _ZN2BHILi9EED2Ev
	.p2align	5
	.type	_ZN2BHILi9EED2Ev,@function
_ZN2BHILi9EED2Ev:                       # @_ZN2BHILi9EED2Ev
	.cfi_startproc
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.d	$a2, $a3, $a2
	addi.w	$a2, $a2, -64
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB54_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB54_2:                               # %_ZN5ArrayIhLi64EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end54:
	.size	_ZN2BHILi9EED2Ev, .Lfunc_end54-_ZN2BHILi9EED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	5                               # -- Begin function __cxx_global_array_dtor.13
	.type	__cxx_global_array_dtor.13,@function
__cxx_global_array_dtor.13:             # @__cxx_global_array_dtor.13
# %bb.0:
	addi.d	$sp, $sp, -48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ9jpegModelR5MixerE2sm)
	addi.d	$fp, $a0, %pc_lo12(_ZZ9jpegModelR5MixerE2sm)
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$s0, $a0, %pc_lo12(programChecker)
	move	$s1, $zero
	addi.w	$s2, $zero, -896
	b	.LBB55_2
	.p2align	4, , 16
.LBB55_1:                               # %_ZN8StateMapD2Ev.exit
                                        #   in Loop: Header=BB55_2 Depth=1
	ld.d	$a0, $a0, 880
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, -32
	beq	$s1, $s2, .LBB55_4
.LBB55_2:                               # =>This Inner Loop Header: Depth=1
	add.d	$a0, $fp, $s1
	ld.w	$a1, $a0, 872
	ld.w	$a2, $s0, 0
	ld.w	$a3, $s0, 4
	slli.d	$a1, $a1, 2
	sub.w	$a1, $a2, $a1
	st.w	$a1, $s0, 0
	bge	$a3, $a1, .LBB55_1
# %bb.3:                                #   in Loop: Header=BB55_2 Depth=1
	st.w	$a1, $s0, 4
	b	.LBB55_1
.LBB55_4:
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end55:
	.size	__cxx_global_array_dtor.13, .Lfunc_end55-__cxx_global_array_dtor.13
                                        # -- End function
	.section	.text._ZN8StateMapD2Ev,"axG",@progbits,_ZN8StateMapD2Ev,comdat
	.weak	_ZN8StateMapD2Ev                # -- Begin function _ZN8StateMapD2Ev
	.p2align	5
	.type	_ZN8StateMapD2Ev,@function
_ZN8StateMapD2Ev:                       # @_ZN8StateMapD2Ev
# %bb.0:
	ld.w	$a2, $a0, 8
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 2
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB56_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB56_2:                               # %_ZN5ArrayIjLi0EED2Ev.exit
	ld.d	$a0, $a0, 16
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end56:
	.size	_ZN8StateMapD2Ev, .Lfunc_end56-_ZN8StateMapD2Ev
                                        # -- End function
	.section	.text._ZN5Mixer6updateEv,"axG",@progbits,_ZN5Mixer6updateEv,comdat
	.weak	_ZN5Mixer6updateEv              # -- Begin function _ZN5Mixer6updateEv
	.p2align	5
	.type	_ZN5Mixer6updateEv,@function
_ZN5Mixer6updateEv:                     # @_ZN5Mixer6updateEv
	.cfi_startproc
# %bb.0:
	ld.w	$a1, $a0, 88
	blez	$a1, .LBB57_15
# %bb.1:                                # %.lr.ph
	ld.w	$t0, $a0, 96
	blez	$t0, .LBB57_15
# %bb.2:                                # %.lr.ph.split.us.preheader
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$fp, $sp, 56                    # 8-byte Folded Spill
	st.d	$s0, $sp, 48                    # 8-byte Folded Spill
	st.d	$s1, $sp, 40                    # 8-byte Folded Spill
	st.d	$s2, $sp, 32                    # 8-byte Folded Spill
	st.d	$s3, $sp, 24                    # 8-byte Folded Spill
	st.d	$s4, $sp, 16                    # 8-byte Folded Spill
	st.d	$s5, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 22, -8
	.cfi_offset 23, -16
	.cfi_offset 24, -24
	.cfi_offset 25, -32
	.cfi_offset 26, -40
	.cfi_offset 27, -48
	.cfi_offset 28, -56
	pcalau12i	$a2, %pc_hi20(y)
	ld.w	$a3, $a2, %pc_lo12(y)
	move	$a2, $zero
	slli.w	$a3, $a3, 12
	ld.d	$a4, $a0, 120
	ld.d	$a5, $a0, 32
	ld.d	$a6, $a0, 80
	ld.w	$a7, $a0, 0
	addi.w	$t0, $t0, 7
	ld.d	$t1, $a0, 56
	move	$t2, $t0
	bstrins.d	$t2, $zero, 2, 0
	ori	$t3, $zero, 1
	slt	$t4, $t3, $t2
	masknez	$t3, $t3, $t4
	maskeqz	$t2, $t2, $t4
	or	$t2, $t2, $t3
	alsl.d	$t3, $t2, $t1, 1
	alsl.d	$t4, $t2, $a5, 1
	bstrpick.d	$t5, $t2, 30, 3
	slli.d	$t5, $t5, 3
	sub.d	$t6, $zero, $t2
	ori	$t7, $zero, 8
	lu12i.w	$t8, -8
	lu12i.w	$fp, 7
	ori	$fp, $fp, 4095
	vreplgr2vr.w	$vr0, $t8
	b	.LBB57_4
	.p2align	4, , 16
.LBB57_3:                               # %_Z5trainPsS_ii.exit.us
                                        #   in Loop: Header=BB57_4 Depth=1
	addi.d	$a2, $a2, 1
	beq	$a2, $a1, .LBB57_14
.LBB57_4:                               # %.lr.ph.split.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_12 Depth 2
                                        #     Child Loop BB57_10 Depth 2
	slli.d	$s1, $a2, 2
	ldx.w	$s0, $a4, $s1
	beq	$a3, $s0, .LBB57_3
# %bb.5:                                # %.lr.ph.preheader.i.us
                                        #   in Loop: Header=BB57_4 Depth=1
	ldx.w	$s1, $a6, $s1
	sub.d	$s0, $a3, $s0
	slli.d	$s2, $s0, 3
	sub.d	$s0, $s2, $s0
	mul.w	$s1, $a7, $s1
	blt	$t0, $t7, .LBB57_8
# %bb.6:                                # %vector.memcheck
                                        #   in Loop: Header=BB57_4 Depth=1
	alsl.d	$s2, $s1, $t1, 1
	bgeu	$s2, $t4, .LBB57_11
# %bb.7:                                # %vector.memcheck
                                        #   in Loop: Header=BB57_4 Depth=1
	alsl.d	$s3, $s1, $t3, 1
	bgeu	$a5, $s3, .LBB57_11
.LBB57_8:                               #   in Loop: Header=BB57_4 Depth=1
	move	$s3, $zero
.LBB57_9:                               # %.lr.ph.i.us.preheader
                                        #   in Loop: Header=BB57_4 Depth=1
	add.d	$s2, $t6, $s3
	slli.d	$s4, $s3, 1
	alsl.d	$s3, $s3, $a5, 1
	alsl.d	$s1, $s1, $s4, 1
	add.d	$s1, $t1, $s1
	.p2align	4, , 16
.LBB57_10:                              # %.lr.ph.i.us
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$s4, $s3, 0
	ld.h	$s5, $s1, 0
	mul.w	$s4, $s0, $s4
	srli.d	$s4, $s4, 15
	addi.w	$s4, $s4, 1
	srai.d	$s4, $s4, 1
	add.d	$s4, $s4, $s5
	slt	$s5, $t8, $s4
	maskeqz	$s4, $s4, $s5
	masknez	$s5, $t8, $s5
	or	$s4, $s4, $s5
	slt	$s5, $s4, $fp
	maskeqz	$s4, $s4, $s5
	masknez	$s5, $fp, $s5
	or	$s4, $s4, $s5
	st.h	$s4, $s1, 0
	addi.d	$s2, $s2, 1
	addi.d	$s3, $s3, 2
	addi.d	$s1, $s1, 2
	bnez	$s2, .LBB57_10
	b	.LBB57_3
.LBB57_11:                              # %vector.ph
                                        #   in Loop: Header=BB57_4 Depth=1
	vreplgr2vr.w	$vr1, $s0
	move	$s3, $a5
	move	$s4, $t5
	.p2align	4, , 16
.LBB57_12:                              # %vector.body
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $s2, 0
	vilvh.h	$vr3, $vr2, $vr2
	vslli.w	$vr3, $vr3, 16
	vsrai.w	$vr3, $vr3, 16
	vld	$vr4, $s3, 0
	vilvl.h	$vr2, $vr2, $vr2
	vslli.w	$vr2, $vr2, 16
	vsrai.w	$vr2, $vr2, 16
	vilvl.h	$vr5, $vr4, $vr4
	vslli.w	$vr5, $vr5, 16
	vsrai.w	$vr5, $vr5, 16
	vilvh.h	$vr4, $vr4, $vr4
	vslli.w	$vr4, $vr4, 16
	vsrai.w	$vr4, $vr4, 16
	vmul.w	$vr4, $vr1, $vr4
	vmul.w	$vr5, $vr1, $vr5
	vsrai.w	$vr5, $vr5, 15
	vsrai.w	$vr4, $vr4, 15
	vaddi.wu	$vr4, $vr4, 1
	vsrai.w	$vr4, $vr4, 1
	vaddi.wu	$vr5, $vr5, 1
	vsrai.w	$vr5, $vr5, 1
	vadd.w	$vr2, $vr5, $vr2
	vadd.w	$vr3, $vr4, $vr3
	vmax.w	$vr3, $vr3, $vr0
	vmax.w	$vr2, $vr2, $vr0
	vreplgr2vr.w	$vr4, $fp
	vmin.w	$vr2, $vr2, $vr4
	vmin.w	$vr3, $vr3, $vr4
	vpickev.h	$vr2, $vr3, $vr2
	vst	$vr2, $s2, 0
	addi.d	$s4, $s4, -8
	addi.d	$s3, $s3, 16
	addi.d	$s2, $s2, 16
	bnez	$s4, .LBB57_12
# %bb.13:                               # %middle.block
                                        #   in Loop: Header=BB57_4 Depth=1
	move	$s3, $t5
	beq	$t5, $t2, .LBB57_3
	b	.LBB57_9
.LBB57_14:
	ld.d	$s5, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s4, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 48                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
.LBB57_15:                              # %._crit_edge
	st.d	$zero, $a0, 88
	st.w	$zero, $a0, 96
	ret
.Lfunc_end57:
	.size	_ZN5Mixer6updateEv, .Lfunc_end57-_ZN5Mixer6updateEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN2BHILi9EEixEj,"axG",@progbits,_ZN2BHILi9EEixEj,comdat
	.weak	_ZN2BHILi9EEixEj                # -- Begin function _ZN2BHILi9EEixEj
	.p2align	5
	.type	_ZN2BHILi9EEixEj,@function
_ZN2BHILi9EEixEj:                       # @_ZN2BHILi9EEixEj
# %bb.0:
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	ld.w	$a4, $a0, 24
	move	$a2, $a1
	ld.d	$a3, $a0, 16
	slli.d	$a1, $a1, 3
	and	$a5, $a4, $a1
	alsl.w	$fp, $a5, $a5, 3
	add.d	$a1, $a3, $fp
	ld.bu	$a6, $a1, 2
	bstrpick.d	$a4, $a2, 31, 16
	bstrpick.d	$a2, $a2, 15, 0
	xor	$a4, $a4, $a2
	beqz	$a6, .LBB58_17
# %bb.1:
	ld.hu	$a2, $a1, 0
	addi.w	$a6, $a4, 0
	beq	$a6, $a2, .LBB58_28
# %bb.2:
	alsl.d	$a7, $a5, $a5, 3
	addi.w	$a2, $a7, 9
	add.d	$a5, $a3, $a2
	ld.bu	$a2, $a5, 2
	pcalau12i	$t0, %pc_hi20(_ZZN2BHILi9EEixEjE3tmp)
	addi.d	$s0, $t0, %pc_lo12(_ZZN2BHILi9EEixEjE3tmp)
	beqz	$a2, .LBB58_18
# %bb.3:
	ld.hu	$t0, $a5, 0
	ori	$a2, $zero, 9
	beq	$a6, $t0, .LBB58_26
# %bb.4:
	addi.w	$a2, $a7, 18
	add.d	$a5, $a3, $a2
	ld.bu	$a2, $a5, 2
	beqz	$a2, .LBB58_19
# %bb.5:
	ld.hu	$t0, $a5, 0
	ori	$a2, $zero, 18
	beq	$a6, $t0, .LBB58_26
# %bb.6:
	addi.w	$a2, $a7, 27
	add.d	$a5, $a3, $a2
	ld.bu	$a2, $a5, 2
	beqz	$a2, .LBB58_20
# %bb.7:
	ld.hu	$t0, $a5, 0
	ori	$a2, $zero, 27
	beq	$a6, $t0, .LBB58_26
# %bb.8:
	addi.w	$a2, $a7, 36
	add.d	$a5, $a3, $a2
	ld.bu	$a2, $a5, 2
	beqz	$a2, .LBB58_21
# %bb.9:
	ld.hu	$t0, $a5, 0
	ori	$a2, $zero, 36
	beq	$a6, $t0, .LBB58_26
# %bb.10:
	addi.w	$a2, $a7, 45
	add.d	$a5, $a3, $a2
	ld.bu	$a2, $a5, 2
	beqz	$a2, .LBB58_22
# %bb.11:
	ld.hu	$t0, $a5, 0
	ori	$a2, $zero, 45
	beq	$a6, $t0, .LBB58_26
# %bb.12:
	addi.w	$a2, $a7, 54
	add.d	$a5, $a3, $a2
	ld.bu	$a2, $a5, 2
	beqz	$a2, .LBB58_23
# %bb.13:
	ld.hu	$t0, $a5, 0
	ori	$a2, $zero, 54
	beq	$a6, $t0, .LBB58_26
# %bb.14:
	addi.w	$a2, $a7, 63
	add.d	$a5, $a3, $a2
	ld.bu	$a2, $a5, 2
	beqz	$a2, .LBB58_24
# %bb.15:
	ld.hu	$a7, $a5, 0
	ori	$a2, $zero, 63
	beq	$a6, $a7, .LBB58_26
# %bb.16:
	move	$s1, $a0
	st.w	$zero, $s0, 5
	st.w	$zero, $s0, 2
	st.h	$a4, $s0, 0
	addi.w	$a0, $fp, 65
	ldx.bu	$a0, $a3, $a0
	addi.w	$a2, $fp, 56
	ldx.bu	$a2, $a3, $a2
	sltu	$a0, $a2, $a0
	ori	$a2, $zero, 63
	masknez	$a2, $a2, $a0
	ori	$a4, $zero, 54
	maskeqz	$a0, $a4, $a0
	or	$a2, $a0, $a2
	b	.LBB58_27
.LBB58_17:                              # %.loopexit
	st.h	$a4, $a1, 0
	b	.LBB58_28
.LBB58_18:
	ori	$a2, $zero, 9
	b	.LBB58_25
.LBB58_19:
	ori	$a2, $zero, 18
	b	.LBB58_25
.LBB58_20:
	ori	$a2, $zero, 27
	b	.LBB58_25
.LBB58_21:
	ori	$a2, $zero, 36
	b	.LBB58_25
.LBB58_22:
	ori	$a2, $zero, 45
	b	.LBB58_25
.LBB58_23:
	ori	$a2, $zero, 54
	b	.LBB58_25
.LBB58_24:
	ori	$a2, $zero, 63
.LBB58_25:                              # %.loopexit.thread
	st.h	$a4, $a5, 0
.LBB58_26:                              # %.loopexit.thread
	move	$s1, $a0
	ld.b	$a0, $a5, 8
	st.b	$a0, $s0, 8
	ld.d	$a0, $a5, 0
	st.d	$a0, $s0, 0
.LBB58_27:
	addi.w	$a0, $fp, 9
	add.d	$a0, $a3, $a0
	pcaddu18i	$ra, %call36(memmove)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s1, 16
	ld.d	$a1, $s0, 0
	stx.d	$a1, $a0, $fp
	ld.b	$a1, $s0, 8
	add.d	$a0, $a0, $fp
	st.b	$a1, $a0, 8
	ld.d	$a0, $s1, 16
	add.d	$a1, $a0, $fp
.LBB58_28:                              # %.loopexit.thread42
	addi.d	$a0, $a1, 1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end58:
	.size	_ZN2BHILi9EEixEj, .Lfunc_end58-_ZN2BHILi9EEixEj
                                        # -- End function
	.section	.text._ZN5Mixer1pEv,"axG",@progbits,_ZN5Mixer1pEv,comdat
	.weak	_ZN5Mixer1pEv                   # -- Begin function _ZN5Mixer1pEv
	.p2align	5
	.type	_ZN5Mixer1pEv,@function
_ZN5Mixer1pEv:                          # @_ZN5Mixer1pEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(stretch+16)
	ld.d	$s0, $a0, %pc_lo12(stretch+16)
	pcalau12i	$a0, %pc_hi20(y)
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	ori	$s2, $zero, 1
	lu12i.w	$s4, -8
	lu12i.w	$a0, 7
	ori	$s5, $a0, 4095
	vreplgr2vr.w	$vr5, $s4
	ori	$s6, $zero, 2
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	b	.LBB59_3
	.p2align	4, , 16
.LBB59_1:                               # %._crit_edge32.loopexit
                                        #   in Loop: Header=BB59_3 Depth=1
	ld.w	$a1, $a0, 92
	ld.w	$a2, $a0, 88
.LBB59_2:                               # %._crit_edge32
                                        #   in Loop: Header=BB59_3 Depth=1
	ld.d	$a3, $a0, 80
	addi.d	$a4, $a2, 1
	st.w	$a4, $a0, 88
	slli.d	$a2, $a2, 2
	stx.w	$a1, $a3, $a2
	ld.w	$a1, $a0, 92
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 92
	move	$fp, $a0
.LBB59_3:                               # %tailrecurse
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_5 Depth 2
                                        #     Child Loop BB59_13 Depth 2
                                        #       Child Loop BB59_21 Depth 3
                                        #       Child Loop BB59_19 Depth 3
                                        #     Child Loop BB59_28 Depth 2
                                        #       Child Loop BB59_32 Depth 3
                                        #       Child Loop BB59_35 Depth 3
	ld.w	$s1, $fp, 96
	andi	$a0, $s1, 7
	beqz	$a0, .LBB59_7
# %bb.4:                                # %.lr.ph
                                        #   in Loop: Header=BB59_3 Depth=1
	ld.d	$a0, $fp, 32
	alsl.d	$a0, $s1, $a0, 1
	nor	$a1, $s1, $zero
	slli.d	$a1, $a1, 1
	andi	$a1, $a1, 14
	addi.d	$a2, $a1, 2
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ori	$a0, $s1, 7
	addi.w	$a2, $a0, 1
	.p2align	4, , 16
.LBB59_5:                               #   Parent Loop BB59_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$s1, $s1, 1
	andi	$a0, $s1, 7
	bnez	$a0, .LBB59_5
# %bb.6:                                # %._crit_edge
                                        #   in Loop: Header=BB59_3 Depth=1
	st.w	$a2, $fp, 96
	vld	$vr5, $sp, 16                   # 16-byte Folded Reload
	b	.LBB59_8
	.p2align	4, , 16
.LBB59_7:                               #   in Loop: Header=BB59_3 Depth=1
	move	$a2, $s1
.LBB59_8:                               #   in Loop: Header=BB59_3 Depth=1
	ld.d	$a0, $fp, 128
	pcalau12i	$a1, %pc_hi20(_ZZ6squashiE1t)
	addi.d	$a1, $a1, %pc_lo12(_ZZ6squashiE1t)
	st.d	$a1, $sp, 64                    # 8-byte Folded Spill
	beqz	$a0, .LBB59_40
# %bb.9:                                #   in Loop: Header=BB59_3 Depth=1
	ld.w	$a2, $a0, 88
	blez	$a2, .LBB59_23
# %bb.10:                               # %.lr.ph.i
                                        #   in Loop: Header=BB59_3 Depth=1
	ld.w	$a6, $a0, 96
	blez	$a6, .LBB59_23
# %bb.11:                               # %.lr.ph.split.us.preheader.i
                                        #   in Loop: Header=BB59_3 Depth=1
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	ld.w	$a4, $a1, %pc_lo12(y)
	ori	$a1, $zero, 8
	move	$a3, $zero
	slli.w	$a4, $a4, 12
	ld.d	$a5, $a0, 120
	ld.d	$s3, $a0, 32
	ld.d	$a7, $a0, 80
	ld.w	$t0, $a0, 0
	addi.w	$t1, $a6, 7
	ld.d	$t2, $a0, 56
	move	$a6, $t1
	bstrins.d	$a6, $zero, 2, 0
	slt	$t3, $s2, $a6
	masknez	$t4, $s2, $t3
	maskeqz	$a6, $a6, $t3
	or	$t3, $a6, $t4
	alsl.d	$t4, $t3, $t2, 1
	alsl.d	$t5, $t3, $s3, 1
	bstrpick.d	$a6, $t3, 30, 3
	slli.d	$s8, $a6, 3
	sub.d	$t7, $zero, $t3
	b	.LBB59_13
	.p2align	4, , 16
.LBB59_12:                              # %_Z5trainPsS_ii.exit.us.i
                                        #   in Loop: Header=BB59_13 Depth=2
	addi.d	$a3, $a3, 1
	beq	$a3, $a2, .LBB59_23
.LBB59_13:                              # %.lr.ph.split.us.i
                                        #   Parent Loop BB59_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_21 Depth 3
                                        #       Child Loop BB59_19 Depth 3
	slli.d	$t6, $a3, 2
	ldx.w	$a6, $a5, $t6
	beq	$a4, $a6, .LBB59_12
# %bb.14:                               # %.lr.ph.preheader.i.us.i
                                        #   in Loop: Header=BB59_13 Depth=2
	ldx.w	$t6, $a7, $t6
	sub.d	$a6, $a4, $a6
	slli.d	$t8, $a6, 3
	sub.d	$t8, $t8, $a6
	mul.w	$ra, $t6, $t0
	blt	$t1, $a1, .LBB59_17
# %bb.15:                               # %vector.memcheck
                                        #   in Loop: Header=BB59_13 Depth=2
	alsl.d	$s1, $ra, $t2, 1
	bgeu	$s1, $t5, .LBB59_20
# %bb.16:                               # %vector.memcheck
                                        #   in Loop: Header=BB59_13 Depth=2
	alsl.d	$a6, $ra, $t4, 1
	bgeu	$s3, $a6, .LBB59_20
.LBB59_17:                              #   in Loop: Header=BB59_13 Depth=2
	move	$t6, $zero
.LBB59_18:                              # %.lr.ph.i.us.i.preheader
                                        #   in Loop: Header=BB59_13 Depth=2
	add.d	$a6, $t7, $t6
	slli.d	$s1, $t6, 1
	alsl.d	$t6, $t6, $s3, 1
	alsl.d	$s1, $ra, $s1, 1
	add.d	$s1, $t2, $s1
	.p2align	4, , 16
.LBB59_19:                              # %.lr.ph.i.us.i
                                        #   Parent Loop BB59_3 Depth=1
                                        #     Parent Loop BB59_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.h	$ra, $t6, 0
	ld.h	$s7, $s1, 0
	mul.w	$ra, $t8, $ra
	srli.d	$ra, $ra, 15
	addi.w	$ra, $ra, 1
	srai.d	$ra, $ra, 1
	add.d	$s7, $ra, $s7
	slt	$ra, $s4, $s7
	maskeqz	$s7, $s7, $ra
	masknez	$ra, $s4, $ra
	or	$s7, $s7, $ra
	slt	$ra, $s7, $s5
	maskeqz	$s7, $s7, $ra
	masknez	$ra, $s5, $ra
	or	$s7, $s7, $ra
	st.h	$s7, $s1, 0
	addi.d	$a6, $a6, 1
	addi.d	$t6, $t6, 2
	addi.d	$s1, $s1, 2
	bnez	$a6, .LBB59_19
	b	.LBB59_12
.LBB59_20:                              # %vector.ph54
                                        #   in Loop: Header=BB59_13 Depth=2
	vreplgr2vr.w	$vr0, $t8
	move	$a6, $s3
	move	$t6, $s8
	.p2align	4, , 16
.LBB59_21:                              # %vector.body57
                                        #   Parent Loop BB59_3 Depth=1
                                        #     Parent Loop BB59_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vld	$vr1, $s1, 0
	vilvh.h	$vr2, $vr1, $vr1
	vslli.w	$vr2, $vr2, 16
	vsrai.w	$vr2, $vr2, 16
	vld	$vr3, $a6, 0
	vilvl.h	$vr1, $vr1, $vr1
	vslli.w	$vr1, $vr1, 16
	vsrai.w	$vr1, $vr1, 16
	vilvl.h	$vr4, $vr3, $vr3
	vslli.w	$vr4, $vr4, 16
	vsrai.w	$vr4, $vr4, 16
	vilvh.h	$vr3, $vr3, $vr3
	vslli.w	$vr3, $vr3, 16
	vsrai.w	$vr3, $vr3, 16
	vmul.w	$vr3, $vr0, $vr3
	vmul.w	$vr4, $vr0, $vr4
	vsrai.w	$vr4, $vr4, 15
	vsrai.w	$vr3, $vr3, 15
	vaddi.wu	$vr3, $vr3, 1
	vsrai.w	$vr3, $vr3, 1
	vaddi.wu	$vr4, $vr4, 1
	vsrai.w	$vr4, $vr4, 1
	vadd.w	$vr1, $vr4, $vr1
	vadd.w	$vr2, $vr3, $vr2
	vmax.w	$vr2, $vr2, $vr5
	vmax.w	$vr1, $vr1, $vr5
	vreplgr2vr.w	$vr3, $s5
	vmin.w	$vr1, $vr1, $vr3
	vmin.w	$vr2, $vr2, $vr3
	vpickev.h	$vr1, $vr2, $vr1
	vst	$vr1, $s1, 0
	addi.d	$t6, $t6, -8
	addi.d	$a6, $a6, 16
	addi.d	$s1, $s1, 16
	bnez	$t6, .LBB59_21
# %bb.22:                               # %middle.block61
                                        #   in Loop: Header=BB59_13 Depth=2
	move	$t6, $s8
	beq	$s8, $t3, .LBB59_12
	b	.LBB59_18
	.p2align	4, , 16
.LBB59_23:                              # %_ZN5Mixer6updateEv.exit
                                        #   in Loop: Header=BB59_3 Depth=1
	st.d	$zero, $a0, 88
	ld.w	$a2, $fp, 88
	st.w	$zero, $a0, 96
	blez	$a2, .LBB59_39
# %bb.24:                               # %.lr.ph31
                                        #   in Loop: Header=BB59_3 Depth=1
	move	$a2, $zero
	ld.d	$t1, $fp, 32
	ld.d	$t0, $fp, 56
	ld.d	$a3, $fp, 80
	ld.d	$a4, $fp, 120
	ld.d	$a5, $a0, 32
	addi.d	$a1, $t0, 4
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a1, $t1, 4
	st.d	$a1, $sp, 32                    # 8-byte Folded Spill
	addi.d	$a1, $t0, 2
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	addi.d	$a1, $t1, 2
	st.d	$a1, $sp, 48                    # 8-byte Folded Spill
	b	.LBB59_28
	.p2align	4, , 16
.LBB59_25:                              #   in Loop: Header=BB59_28 Depth=2
	move	$t3, $zero
.LBB59_26:                              # %.thread
                                        #   in Loop: Header=BB59_28 Depth=2
	srai.d	$a1, $t3, 7
	ld.d	$a6, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a1, $a6, 2
	ld.w	$a6, $a1, 64
	ld.w	$a1, $a1, 68
	andi	$a7, $t3, 127
	ori	$t0, $zero, 128
	sub.d	$t0, $t0, $a7
	mul.d	$a6, $t0, $a6
	mul.d	$a1, $a1, $a7
	add.d	$a1, $a6, $a1
	addi.w	$a1, $a1, 64
	srai.d	$t4, $a1, 7
.LBB59_27:                              # %_Z6squashi.exit
                                        #   in Loop: Header=BB59_28 Depth=2
	stx.w	$t4, $a4, $t2
	ld.w	$a1, $a0, 96
	slli.d	$a6, $t4, 1
	ldx.h	$a6, $s0, $a6
	addi.d	$a7, $a1, 1
	ld.w	$t0, $fp, 88
	st.w	$a7, $a0, 96
	slli.d	$a1, $a1, 1
	addi.d	$a2, $a2, 1
	stx.h	$a6, $a5, $a1
	bge	$a2, $t0, .LBB59_1
.LBB59_28:                              #   Parent Loop BB59_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_32 Depth 3
                                        #       Child Loop BB59_35 Depth 3
	ld.w	$t3, $fp, 96
	slli.d	$t2, $a2, 2
	blez	$t3, .LBB59_25
# %bb.29:                               # %.lr.ph.preheader.i
                                        #   in Loop: Header=BB59_28 Depth=2
	ldx.w	$t5, $a3, $t2
	ld.w	$t6, $fp, 0
	addi.d	$t3, $t3, 7
	bstrpick.d	$t3, $t3, 30, 3
	slli.d	$t3, $t3, 3
	sltu	$t4, $s6, $t3
	masknez	$t7, $s6, $t4
	maskeqz	$t4, $t3, $t4
	or	$t4, $t4, $t7
	addi.d	$t4, $t4, -1
	mul.w	$t5, $t6, $t5
	bne	$t4, $s2, .LBB59_31
# %bb.30:                               #   in Loop: Header=BB59_28 Depth=2
	move	$t4, $zero
	move	$t7, $zero
	b	.LBB59_34
	.p2align	4, , 16
.LBB59_31:                              # %vector.ph
                                        #   in Loop: Header=BB59_28 Depth=2
	move	$t1, $s0
	move	$t7, $zero
	move	$s1, $zero
	srli.d	$t4, $t4, 1
	addi.d	$t6, $t4, 1
	bstrpick.d	$t4, $t6, 62, 1
	slli.d	$t8, $t4, 1
	slli.d	$t4, $t4, 2
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	alsl.d	$s3, $t5, $a1, 1
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	move	$ra, $t8
	.p2align	4, , 16
.LBB59_32:                              # %vector.body
                                        #   Parent Loop BB59_3 Depth=1
                                        #     Parent Loop BB59_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.h	$s7, $s8, -4
	ld.h	$s2, $s8, 0
	ld.h	$a1, $s3, -4
	ld.h	$s6, $s3, 0
	ld.h	$a6, $s8, -2
	ld.h	$a7, $s8, 2
	ld.h	$s0, $s3, -2
	ld.h	$t0, $s3, 2
	mul.d	$a1, $a1, $s7
	mul.d	$s2, $s6, $s2
	mul.d	$a6, $s0, $a6
	mul.d	$a7, $t0, $a7
	add.w	$a1, $a6, $a1
	add.w	$a6, $a7, $s2
	srli.d	$a1, $a1, 8
	srli.d	$a6, $a6, 8
	add.d	$t7, $a1, $t7
	add.d	$s1, $a6, $s1
	addi.d	$ra, $ra, -2
	addi.d	$s3, $s3, 8
	addi.d	$s8, $s8, 8
	bnez	$ra, .LBB59_32
# %bb.33:                               # %middle.block
                                        #   in Loop: Header=BB59_28 Depth=2
	add.w	$t7, $s1, $t7
	move	$s0, $t1
	ori	$s2, $zero, 1
	ori	$s6, $zero, 2
	beq	$t6, $t8, .LBB59_36
.LBB59_34:                              # %.lr.ph.i9.preheader
                                        #   in Loop: Header=BB59_28 Depth=2
	slli.d	$a1, $t4, 1
	alsl.d	$a1, $t5, $a1, 1
	ld.d	$a6, $sp, 56                    # 8-byte Folded Reload
	add.d	$t5, $a6, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$t6, $t4, $a1, 1
	.p2align	4, , 16
.LBB59_35:                              # %.lr.ph.i9
                                        #   Parent Loop BB59_3 Depth=1
                                        #     Parent Loop BB59_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.h	$a1, $t6, -2
	ld.h	$a6, $t5, -2
	ld.h	$a7, $t6, 0
	ld.h	$t0, $t5, 0
	mul.d	$a1, $a6, $a1
	mul.d	$a6, $t0, $a7
	add.w	$a1, $a6, $a1
	srli.d	$a1, $a1, 8
	add.w	$t7, $a1, $t7
	addi.d	$t4, $t4, 2
	addi.d	$t5, $t5, 4
	addi.d	$t6, $t6, 4
	bltu	$t4, $t3, .LBB59_35
.LBB59_36:                              # %_Z11dot_productPsS_i.exit
                                        #   in Loop: Header=BB59_28 Depth=2
	srai.d	$t3, $t7, 5
	ori	$t4, $zero, 4095
	ori	$a1, $zero, 2047
	blt	$a1, $t3, .LBB59_27
# %bb.37:                               #   in Loop: Header=BB59_28 Depth=2
	addi.w	$a1, $zero, -2047
	bge	$t3, $a1, .LBB59_26
# %bb.38:                               #   in Loop: Header=BB59_28 Depth=2
	move	$t4, $zero
	b	.LBB59_27
	.p2align	4, , 16
.LBB59_39:                              #   in Loop: Header=BB59_3 Depth=1
	move	$a2, $zero
	move	$a1, $zero
	b	.LBB59_2
.LBB59_40:
	blez	$a2, .LBB59_43
# %bb.41:                               # %.lr.ph.preheader.i13
	ld.d	$a3, $fp, 32
	ld.d	$a4, $fp, 56
	ori	$a0, $zero, 3
	bgeu	$a2, $a0, .LBB59_44
# %bb.42:
	move	$a0, $zero
	move	$a7, $zero
	b	.LBB59_47
.LBB59_43:
	move	$a2, $zero
	b	.LBB59_52
.LBB59_44:                              # %vector.ph66
	addi.d	$a0, $a2, -1
	srli.d	$a0, $a0, 1
	addi.d	$a5, $a0, 1
	move	$a7, $zero
	move	$t0, $zero
	move	$a6, $a5
	bstrins.d	$a6, $zero, 0, 0
	slli.d	$a0, $a6, 1
	addi.d	$t1, $a4, 4
	addi.d	$t2, $a3, 4
	move	$t3, $a6
	.p2align	4, , 16
.LBB59_45:                              # %vector.body69
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$a1, $t2, -4
	ld.h	$t4, $t2, 0
	ld.h	$t5, $t1, -4
	ld.h	$t6, $t1, 0
	ld.h	$t7, $t2, -2
	ld.h	$t8, $t2, 2
	ld.h	$s0, $t1, -2
	ld.h	$s1, $t1, 2
	mul.d	$a1, $t5, $a1
	mul.d	$t4, $t6, $t4
	mul.d	$t5, $s0, $t7
	mul.d	$t6, $s1, $t8
	add.w	$a1, $t5, $a1
	add.w	$t4, $t6, $t4
	srli.d	$a1, $a1, 8
	srli.d	$t4, $t4, 8
	add.d	$a7, $a1, $a7
	add.d	$t0, $t4, $t0
	addi.d	$t3, $t3, -2
	addi.d	$t1, $t1, 8
	addi.d	$t2, $t2, 8
	bnez	$t3, .LBB59_45
# %bb.46:                               # %middle.block75
	add.w	$a7, $t0, $a7
	beq	$a5, $a6, .LBB59_49
.LBB59_47:                              # %.lr.ph.i14.preheader
	slli.d	$a1, $a0, 1
	addi.d	$a1, $a1, 2
	add.d	$a4, $a4, $a1
	add.d	$a3, $a3, $a1
	.p2align	4, , 16
.LBB59_48:                              # %.lr.ph.i14
                                        # =>This Inner Loop Header: Depth=1
	ld.h	$a1, $a3, -2
	ld.h	$a5, $a4, -2
	ld.h	$a6, $a3, 0
	ld.h	$t0, $a4, 0
	mul.d	$a1, $a5, $a1
	mul.d	$a5, $t0, $a6
	add.w	$a1, $a5, $a1
	srli.d	$a1, $a1, 8
	add.w	$a7, $a1, $a7
	addi.d	$a0, $a0, 2
	addi.d	$a4, $a4, 4
	addi.d	$a3, $a3, 4
	bltu	$a0, $a2, .LBB59_48
.LBB59_49:                              # %_Z11dot_productPsS_i.exit18
	srai.d	$a2, $a7, 8
	ori	$a1, $zero, 2047
	ori	$a0, $zero, 4095
	blt	$a1, $a2, .LBB59_53
# %bb.50:
	addi.w	$a0, $zero, -2047
	bge	$a2, $a0, .LBB59_52
# %bb.51:
	move	$a0, $zero
	b	.LBB59_53
.LBB59_52:                              # %.thread23
	andi	$a0, $a2, 127
	srai.d	$a1, $a2, 7
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a1, $a2, 2
	ld.w	$a2, $a1, 64
	ld.w	$a1, $a1, 68
	ori	$a3, $zero, 128
	sub.d	$a3, $a3, $a0
	mul.d	$a2, $a3, $a2
	mul.d	$a0, $a1, $a0
	add.d	$a0, $a2, $a0
	addi.w	$a0, $a0, 64
	srai.d	$a0, $a0, 7
.LBB59_53:                              # %_Z6squashi.exit20
	ld.d	$a1, $fp, 120
	st.w	$a0, $a1, 0
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.Lfunc_end59:
	.size	_ZN5Mixer1pEv, .Lfunc_end59-_ZN5Mixer1pEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN3APM1pEiii,"axG",@progbits,_ZN3APM1pEiii,comdat
	.weak	_ZN3APM1pEiii                   # -- Begin function _ZN3APM1pEiii
	.p2align	5
	.type	_ZN3APM1pEiii,@function
_ZN3APM1pEiii:                          # @_ZN3APM1pEiii
	.cfi_startproc
# %bb.0:
	ld.w	$a5, $a0, 4
	ld.d	$a4, $a0, 24
	slli.d	$a5, $a5, 2
	ldx.wu	$a6, $a4, $a5
	andi	$a7, $a6, 1023
	slt	$t0, $a7, $a3
	addi.d	$t1, $a6, 1
	bstrpick.d	$t2, $a6, 31, 10
	slli.d	$t2, $t2, 10
	or	$a3, $t2, $a3
	maskeqz	$t1, $t1, $t0
	pcalau12i	$t2, %pc_hi20(y)
	ld.w	$t2, $t2, %pc_lo12(y)
	masknez	$a3, $a3, $t0
	or	$a3, $t1, $a3
	srli.d	$a6, $a6, 10
	slli.d	$t0, $t2, 22
	sub.w	$a6, $t0, $a6
	srli.d	$a6, $a6, 3
	slli.d	$a7, $a7, 2
	pcalau12i	$t0, %pc_hi20(_ZL2dt)
	addi.d	$t0, $t0, %pc_lo12(_ZL2dt)
	ldx.w	$a7, $t0, $a7
	mul.d	$a6, $a6, $a7
	pcalau12i	$a7, %pc_hi20(stretch+16)
	ld.d	$a7, $a7, %pc_lo12(stretch+16)
	bstrpick.d	$a6, $a6, 31, 10
	slli.d	$a6, $a6, 10
	slli.d	$a1, $a1, 1
	ldx.h	$a1, $a7, $a1
	add.d	$a3, $a6, $a3
	stx.w	$a3, $a4, $a5
	ori	$a3, $zero, 23
	mul.d	$a1, $a1, $a3
	lu12i.w	$a3, 11
	ori	$a3, $a3, 2048
	add.d	$a1, $a1, $a3
	slli.d	$a3, $a2, 4
	alsl.d	$a2, $a2, $a3, 3
	srli.d	$a3, $a1, 12
	add.w	$a2, $a3, $a2
	bstrpick.d	$a3, $a1, 11, 11
	add.d	$a3, $a2, $a3
	st.w	$a3, $a0, 4
	slli.d	$a0, $a2, 2
	ldx.wu	$a0, $a4, $a0
	andi	$a1, $a1, 4095
	alsl.d	$a2, $a2, $a4, 2
	srli.d	$a0, $a0, 13
	ld.wu	$a2, $a2, 4
	lu12i.w	$a3, 1
	sub.d	$a3, $a3, $a1
	mul.d	$a0, $a3, $a0
	srli.d	$a2, $a2, 13
	mul.d	$a1, $a2, $a1
	add.d	$a0, $a0, $a1
	bstrpick.d	$a0, $a0, 31, 19
	ret
.Lfunc_end60:
	.size	_ZN3APM1pEiii, .Lfunc_end60-_ZN3APM1pEiii
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z8wavModelR5Mixer
.LCPI61_0:
	.dword	0x3fefdf3b645a1cac              # double 0.99599999999999999
	.text
	.globl	_Z8wavModelR5Mixer
	.p2align	5
	.type	_Z8wavModelR5Mixer,@function
_Z8wavModelR5Mixer:                     # @_Z8wavModelR5Mixer
.Lfunc_begin11:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception11
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	lu12i.w	$a1, 13
	ori	$a1, $a1, 2672
	sub.d	$sp, $sp, $a1
	.cfi_def_cfa_offset 57952
	pcalau12i	$a1, %pc_hi20(_ZGVZ8wavModelR5MixerE1K)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ8wavModelR5MixerE1K)
	move	$s7, $a0
	dbar	20
	beqz	$a1, .LBB61_135
.LBB61_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm1)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm1)
	dbar	20
	beqz	$a0, .LBB61_137
.LBB61_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm2)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm2)
	dbar	20
	beqz	$a0, .LBB61_140
.LBB61_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm3)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm3)
	dbar	20
	beqz	$a0, .LBB61_143
.LBB61_4:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm4)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm4)
	dbar	20
	beqz	$a0, .LBB61_146
.LBB61_5:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm5)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm5)
	dbar	20
	beqz	$a0, .LBB61_149
.LBB61_6:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm6)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm6)
	dbar	20
	beqz	$a0, .LBB61_152
.LBB61_7:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm7)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm7)
	dbar	20
	beqz	$a0, .LBB61_155
.LBB61_8:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm8)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm8)
	dbar	20
	beqz	$a0, .LBB61_158
.LBB61_9:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE2cm)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE2cm)
	dbar	20
	beqz	$a0, .LBB61_161
.LBB61_10:
	pcalau12i	$s0, %pc_hi20(bpos)
	ld.w	$a0, $s0, %pc_lo12(bpos)
	pcalau12i	$a5, %pc_hi20(pos)
	ld.w	$a2, $a5, %pc_lo12(pos)
	pcalau12i	$s6, %pc_hi20(_ZZ8wavModelR5MixerE8channels)
	pcalau12i	$fp, %pc_hi20(_ZZ8wavModelR5MixerE3eof)
	bnez	$a0, .LBB61_45
# %bb.11:
	addi.w	$a3, $a2, -8
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$s4, $a0, %pc_lo12(buf)
	ld.w	$a1, $s4, 0
	ld.d	$a0, $s4, 16
	addi.w	$a1, $a1, -1
	and	$a3, $a1, $a3
	ldx.bu	$a3, $a0, $a3
	ori	$a4, $zero, 100
	bne	$a3, $a4, .LBB61_45
# %bb.12:
	addi.w	$a3, $a2, -7
	and	$a3, $a1, $a3
	ldx.bu	$a3, $a0, $a3
	ori	$a4, $zero, 97
	bne	$a3, $a4, .LBB61_45
# %bb.13:
	addi.w	$a3, $a2, -6
	and	$a3, $a1, $a3
	ldx.bu	$a3, $a0, $a3
	ori	$a4, $zero, 116
	bne	$a3, $a4, .LBB61_45
# %bb.14:
	addi.w	$a3, $a2, -5
	and	$a1, $a1, $a3
	ldx.bu	$a0, $a0, $a1
	ori	$a1, $zero, 97
	bne	$a0, $a1, .LBB61_45
# %bb.15:                               # %.preheader511
	st.d	$s0, $sp, 160                   # 8-byte Folded Spill
	ori	$a7, $zero, 32
	addi.d	$a3, $zero, -32
	ori	$s8, $zero, 102
	ori	$s0, $zero, 109
	ori	$t0, $zero, 116
	lu12i.w	$a0, 15
	ori	$t1, $a0, 4094
	pcalau12i	$t2, %pc_hi20(_ZZ8wavModelR5MixerE4bits)
	pcalau12i	$t3, %pc_hi20(_ZZ8wavModelR5MixerE5bytes)
	pcalau12i	$t4, %pc_hi20(_ZZ8wavModelR5MixerE1w)
	pcalau12i	$t5, %pc_hi20(_ZZ8wavModelR5MixerE1s)
	ori	$t6, $zero, 1
	ori	$t7, $zero, 16
	pcalau12i	$t8, %pc_hi20(_ZL1S)
	pcalau12i	$ra, %pc_hi20(_ZL1D)
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE7counter)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE7counter)
	st.d	$a0, $sp, 208                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE1n)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE1n)
	st.d	$a0, $sp, 200                   # 8-byte Folded Spill
	ori	$s1, $zero, 2
	ori	$s5, $zero, 1001
	ori	$s3, $zero, 32
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$a5, $sp, 184                   # 8-byte Folded Spill
	b	.LBB61_18
.LBB61_16:                              #   in Loop: Header=BB61_18 Depth=1
	st.w	$a0, $fp, %pc_lo12(_ZZ8wavModelR5MixerE3eof)
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$a5, $sp, 184                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB61_17:                              #   in Loop: Header=BB61_18 Depth=1
	addi.w	$a0, $s3, 1
	nor	$a3, $s3, $zero
	move	$s3, $a0
	beq	$a0, $s5, .LBB61_44
.LBB61_18:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_30 Depth 2
                                        #       Child Loop BB61_32 Depth 3
                                        #         Child Loop BB61_34 Depth 4
                                        #         Child Loop BB61_37 Depth 4
                                        #     Child Loop BB61_39 Depth 2
	ld.w	$a0, $a5, %pc_lo12(pos)
	ld.w	$a2, $s4, 0
	ld.d	$a1, $s4, 16
	sub.w	$a4, $a0, $s3
	addi.w	$a2, $a2, -1
	and	$a4, $a2, $a4
	ldx.bu	$a4, $a1, $a4
	bne	$a4, $s8, .LBB61_17
# %bb.19:                               #   in Loop: Header=BB61_18 Depth=1
	add.d	$a3, $a3, $a0
	addi.w	$a4, $a3, 1
	and	$a4, $a2, $a4
	ldx.bu	$a4, $a1, $a4
	bne	$a4, $s0, .LBB61_17
# %bb.20:                               #   in Loop: Header=BB61_18 Depth=1
	addi.w	$a4, $a3, 2
	and	$a4, $a2, $a4
	ldx.bu	$a4, $a1, $a4
	bne	$a4, $t0, .LBB61_17
# %bb.21:                               #   in Loop: Header=BB61_18 Depth=1
	addi.w	$a4, $a3, 3
	and	$a4, $a2, $a4
	ldx.bu	$a4, $a1, $a4
	bne	$a4, $a7, .LBB61_17
# %bb.22:                               #   in Loop: Header=BB61_18 Depth=1
	addi.w	$a4, $a3, 8
	and	$a4, $a2, $a4
	addi.w	$a5, $a3, 9
	and	$a5, $a2, $a5
	ldx.b	$a5, $a1, $a5
	ldx.bu	$a4, $a1, $a4
	slli.d	$a5, $a5, 8
	or	$a4, $a5, $a4
	ld.d	$a5, $sp, 184                   # 8-byte Folded Reload
	bstrpick.d	$a4, $a4, 15, 0
	beq	$a4, $t1, .LBB61_24
# %bb.23:                               #   in Loop: Header=BB61_18 Depth=1
	bne	$a4, $t6, .LBB61_17
.LBB61_24:                              #   in Loop: Header=BB61_18 Depth=1
	addi.w	$a4, $a3, 22
	and	$a4, $a2, $a4
	ldx.bu	$s2, $a1, $a4
	st.w	$s2, $t2, %pc_lo12(_ZZ8wavModelR5MixerE4bits)
	addi.d	$a4, $s2, 7
	srli.d	$a4, $a4, 3
	st.w	$a4, $t3, %pc_lo12(_ZZ8wavModelR5MixerE5bytes)
	addi.w	$a3, $a3, 10
	and	$a3, $a2, $a3
	ldx.bu	$s7, $a1, $a3
	mul.d	$a3, $a4, $s7
	st.w	$a3, $t4, %pc_lo12(_ZZ8wavModelR5MixerE1w)
	addi.w	$a3, $a0, -4
	and	$a3, $a2, $a3
	addi.w	$a4, $a0, -3
	and	$a4, $a2, $a4
	addi.w	$a5, $a0, -2
	and	$a5, $a2, $a5
	addi.w	$a6, $a0, -1
	and	$a2, $a2, $a6
	st.w	$s7, $s6, %pc_lo12(_ZZ8wavModelR5MixerE8channels)
	ldx.bu	$a4, $a1, $a4
	ldx.bu	$a3, $a1, $a3
	ldx.bu	$a5, $a1, $a5
	ldx.b	$a1, $a1, $a2
	slli.d	$a2, $a4, 8
	or	$a2, $a2, $a3
	slli.d	$a3, $a5, 16
	or	$a2, $a2, $a3
	slli.d	$a1, $a1, 24
	or	$a1, $a2, $a1
	addi.d	$a2, $s7, -1
	st.w	$a1, $t5, %pc_lo12(_ZZ8wavModelR5MixerE1s)
	bltu	$t6, $a2, .LBB61_16
# %bb.25:                               #   in Loop: Header=BB61_18 Depth=1
	beq	$s2, $t7, .LBB61_27
# %bb.26:                               #   in Loop: Header=BB61_18 Depth=1
	ori	$a2, $zero, 8
	bne	$s2, $a2, .LBB61_16
.LBB61_27:                              # %.preheader510.lr.ph
                                        #   in Loop: Header=BB61_18 Depth=1
	st.d	$t5, $sp, 136                   # 8-byte Folded Spill
	st.d	$t4, $sp, 144                   # 8-byte Folded Spill
	st.d	$t3, $sp, 152                   # 8-byte Folded Spill
	st.d	$t2, $sp, 176                   # 8-byte Folded Spill
	st.d	$t1, $sp, 192                   # 8-byte Folded Spill
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	ld.bu	$a3, $ra, %pc_lo12(_ZL1D)
	st.d	$t8, $sp, 128                   # 8-byte Folded Spill
	ld.w	$a2, $t8, %pc_lo12(_ZL1S)
	add.d	$a1, $a1, $a0
	ori	$a0, $zero, 12
	maskeqz	$a0, $a0, $a3
	add.w	$a3, $a0, $a2
	st.w	$a1, $fp, %pc_lo12(_ZZ8wavModelR5MixerE3eof)
	bltz	$a3, .LBB61_38
# %bb.28:                               # %.preheader510.preheader
                                        #   in Loop: Header=BB61_18 Depth=1
	add.d	$a0, $a2, $a0
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	slli.d	$s6, $s7, 2
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE7counter)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE7counter)
	move	$a1, $zero
	move	$a2, $s6
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE1n)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE1n)
	move	$a1, $zero
	move	$a2, $s6
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	ld.d	$a1, $sp, 112                   # 8-byte Folded Reload
	bstrpick.d	$a1, $a1, 31, 0
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	lu12i.w	$a2, 4
	ori	$a2, $a2, 3048
	add.d	$a2, $sp, $a2
	lu12i.w	$a3, 4
	ori	$a3, $a3, 3064
	add.d	$a3, $sp, $a3
	lu12i.w	$a4, 4
	ori	$a4, $a4, 3832
	add.d	$t5, $sp, $a4
	lu52i.d	$t6, $zero, 1023
	b	.LBB61_30
	.p2align	4, , 16
.LBB61_29:                              # %._crit_edge
                                        #   in Loop: Header=BB61_30 Depth=2
	slli.d	$a4, $a0, 3
	stx.d	$t6, $t5, $a4
	addi.d	$a0, $a0, 1
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 8
	beq	$a0, $s7, .LBB61_40
.LBB61_30:                              # %.preheader510
                                        #   Parent Loop BB61_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_32 Depth 3
                                        #         Child Loop BB61_34 Depth 4
                                        #         Child Loop BB61_37 Depth 4
	move	$a4, $zero
	move	$a5, $a2
	move	$a6, $a3
	move	$a7, $a1
	b	.LBB61_32
	.p2align	4, , 16
.LBB61_31:                              # %.loopexit828
                                        #   in Loop: Header=BB61_32 Depth=3
	addi.d	$a4, $a4, 1
	addi.d	$a7, $a7, -1
	addi.d	$a6, $a6, 800
	addi.d	$a5, $a5, 784
	beq	$a4, $a1, .LBB61_29
.LBB61_32:                              # %.preheader509
                                        #   Parent Loop BB61_18 Depth=1
                                        #     Parent Loop BB61_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_34 Depth 4
                                        #         Child Loop BB61_37 Depth 4
	sub.d	$t0, $a1, $a4
	move	$t1, $a4
	bltu	$t0, $s1, .LBB61_36
# %bb.33:                               # %vector.ph819
                                        #   in Loop: Header=BB61_32 Depth=3
	move	$t3, $a7
	bstrins.d	$t3, $zero, 0, 0
	move	$t2, $t0
	bstrins.d	$t2, $zero, 0, 0
	add.d	$t1, $a4, $t2
	move	$t4, $a6
	.p2align	4, , 16
.LBB61_34:                              # %vector.body822
                                        #   Parent Loop BB61_18 Depth=1
                                        #     Parent Loop BB61_30 Depth=2
                                        #       Parent Loop BB61_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	st.d	$zero, $t4, -16
	st.d	$zero, $t4, 0
	addi.d	$t3, $t3, -2
	addi.d	$t4, $t4, 32
	bnez	$t3, .LBB61_34
# %bb.35:                               # %middle.block825
                                        #   in Loop: Header=BB61_32 Depth=3
	beq	$t0, $t2, .LBB61_31
.LBB61_36:                              # %scalar.ph817.preheader
                                        #   in Loop: Header=BB61_32 Depth=3
	alsl.d	$t0, $t1, $a5, 4
	sub.d	$t1, $a1, $t1
	.p2align	4, , 16
.LBB61_37:                              # %scalar.ph817
                                        #   Parent Loop BB61_18 Depth=1
                                        #     Parent Loop BB61_30 Depth=2
                                        #       Parent Loop BB61_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	st.d	$zero, $t0, 0
	addi.d	$t1, $t1, -1
	addi.d	$t0, $t0, 16
	bnez	$t1, .LBB61_37
	b	.LBB61_31
.LBB61_38:                              # %.preheader510.us.preheader
                                        #   in Loop: Header=BB61_18 Depth=1
	slli.d	$a2, $s7, 2
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	ld.d	$a0, $sp, 208                   # 8-byte Folded Reload
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 200                   # 8-byte Folded Reload
	move	$a1, $zero
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	lu12i.w	$a1, 4
	ori	$a1, $a1, 3832
	add.d	$a1, $sp, $a1
	lu52i.d	$a2, $zero, 1023
	ori	$a3, $zero, 3
	bltu	$a3, $s7, .LBB61_133
.LBB61_39:                              # %.preheader510.us
                                        #   Parent Loop BB61_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	st.d	$a2, $a1, 0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB61_39
.LBB61_40:                              # %._crit_edge523
                                        #   in Loop: Header=BB61_18 Depth=1
	add.d	$a0, $s7, $s2
	pcalau12i	$a1, %pc_hi20(_ZL5wmode)
	st.w	$a0, $a1, %pc_lo12(_ZL5wmode)
	pcalau12i	$a0, %pc_hi20(.L.str.14)
	addi.d	$a0, $a0, %pc_lo12(.L.str.14)
	move	$a1, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(_ZZ8wavModelR5MixerE8channels)
	ori	$s2, $zero, 1
	bne	$a0, $s2, .LBB61_42
# %bb.41:                               #   in Loop: Header=BB61_18 Depth=1
	pcalau12i	$a0, %pc_hi20(.L.str.15)
	addi.d	$a0, $a0, %pc_lo12(.L.str.15)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$t8, $sp, 128                   # 8-byte Folded Reload
	ori	$a0, $zero, 48
	st.w	$a0, $t8, %pc_lo12(_ZL1S)
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	st.b	$zero, $ra, %pc_lo12(_ZL1D)
	b	.LBB61_43
.LBB61_42:                              #   in Loop: Header=BB61_18 Depth=1
	pcalau12i	$a0, %pc_hi20(.L.str.16)
	addi.d	$a0, $a0, %pc_lo12(.L.str.16)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$t8, $sp, 128                   # 8-byte Folded Reload
	ori	$a0, $zero, 36
	st.w	$a0, $t8, %pc_lo12(_ZL1S)
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	st.b	$s2, $ra, %pc_lo12(_ZL1D)
.LBB61_43:                              #   in Loop: Header=BB61_18 Depth=1
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$a5, $sp, 184                   # 8-byte Folded Reload
	ori	$a7, $zero, 32
	ori	$t0, $zero, 116
	ld.d	$t1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$t2, $sp, 176                   # 8-byte Folded Reload
	ld.d	$t3, $sp, 152                   # 8-byte Folded Reload
	ld.d	$t4, $sp, 144                   # 8-byte Folded Reload
	ld.d	$t5, $sp, 136                   # 8-byte Folded Reload
	ori	$t6, $zero, 1
	ori	$t7, $zero, 16
	b	.LBB61_17
.LBB61_44:                              # %.loopexit512.loopexit
	ld.w	$a2, $a5, %pc_lo12(pos)
	ld.d	$s0, $sp, 160                   # 8-byte Folded Reload
.LBB61_45:                              # %.loopexit512
	ld.w	$a0, $fp, %pc_lo12(_ZZ8wavModelR5MixerE3eof)
	bge	$a0, $a2, .LBB61_47
# %bb.46:
	move	$a0, $zero
	st.w	$zero, $s6, %pc_lo12(_ZZ8wavModelR5MixerE8channels)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4bits)
	st.w	$zero, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4bits)
	b	.LBB61_132
.LBB61_47:
	st.d	$a5, $sp, 184                   # 8-byte Folded Spill
	ld.w	$a1, $s0, %pc_lo12(bpos)
	pcalau12i	$a3, %pc_hi20(buf)
	addi.d	$s8, $a3, %pc_lo12(buf)
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE4scm1)
	addi.d	$s5, $a3, %pc_lo12(_ZZ8wavModelR5MixerE4scm1)
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE4scm2)
	addi.d	$ra, $a3, %pc_lo12(_ZZ8wavModelR5MixerE4scm2)
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE4scm3)
	addi.d	$s4, $a3, %pc_lo12(_ZZ8wavModelR5MixerE4scm3)
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE4scm4)
	addi.d	$s2, $a3, %pc_lo12(_ZZ8wavModelR5MixerE4scm4)
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE4scm5)
	addi.d	$s3, $a3, %pc_lo12(_ZZ8wavModelR5MixerE4scm5)
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE4scm7)
	addi.d	$s1, $a3, %pc_lo12(_ZZ8wavModelR5MixerE4scm7)
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE4scm8)
	addi.d	$fp, $a3, %pc_lo12(_ZZ8wavModelR5MixerE4scm8)
	bnez	$a1, .LBB61_131
# %bb.48:
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE2cm)
	addi.d	$t1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE2cm)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE1s)
	ld.w	$a3, $a1, %pc_lo12(_ZZ8wavModelR5MixerE1s)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE5bytes)
	ld.w	$a4, $a1, %pc_lo12(_ZZ8wavModelR5MixerE5bytes)
	pcalau12i	$a5, %pc_hi20(_ZZ8wavModelR5MixerE1w)
	ld.w	$a1, $a5, %pc_lo12(_ZZ8wavModelR5MixerE1w)
	sub.d	$a0, $a2, $a0
	add.w	$a0, $a0, $a3
	mod.w	$a3, $a0, $a4
	mod.w	$t8, $a0, $a1
	div.w	$a0, $t8, $a4
	st.d	$a0, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s0, $sp, 160                   # 8-byte Folded Spill
	st.d	$fp, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$t1, $sp, 96                    # 8-byte Folded Spill
	beqz	$a3, .LBB61_54
# %bb.49:                               # %_Z1ciiiii.exit395
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a3, $s8, 0
	ld.d	$a0, $s8, 16
	addi.w	$a2, $a2, -1
	addi.w	$a3, $a3, -1
	and	$a2, $a3, $a2
	ldx.bu	$a2, $a0, $a2
	lu12i.w	$a3, 7325
	ori	$t0, $a3, 2291
	mul.d	$a3, $a2, $t0
	lu12i.w	$a5, 12208
	ori	$a5, $a5, 271
	mul.d	$s1, $t8, $a5
	add.w	$a3, $s1, $a3
	lu12i.w	$a6, 4881
	ori	$a6, $a6, 3097
	add.d	$a6, $a3, $a6
	bstrpick.d	$a7, $a6, 31, 9
	srli.d	$a2, $a2, 3
	bstrpick.d	$a3, $t8, 31, 4
	xor	$a2, $a2, $a7
	xor	$a2, $a2, $a3
	ld.w	$t2, $t1, 136
	xor	$a2, $a2, $a6
	lu12i.w	$s2, 16384
	xor	$a2, $a2, $s2
	addi.d	$a6, $t2, 1
	st.w	$a6, $t1, 136
	lu12i.w	$a6, 241126
	ori	$a6, $a6, 2227
	mul.d	$a2, $a2, $a6
	add.d	$a2, $a2, $t2
	rotri.w	$a2, $a2, 16
	lu12i.w	$a7, 30140
	ori	$a7, $a7, 3351
	ld.d	$a4, $t1, 96
	mul.d	$a2, $a2, $a7
	add.d	$a2, $a2, $t2
	slli.d	$t2, $t2, 2
	stx.w	$a2, $a4, $t2
	ld.d	$t6, $sp, 184                   # 8-byte Folded Reload
	ld.w	$a2, $t6, %pc_lo12(pos)
	ld.w	$t2, $s8, 0
	addi.w	$t3, $a2, -1
	addi.w	$t2, $t2, -1
	and	$t3, $t2, $t3
	ldx.bu	$t3, $a0, $t3
	addi.w	$t4, $a2, -2
	addi.w	$a2, $a2, -3
	and	$a2, $t2, $a2
	ldx.bu	$a2, $a0, $a2
	and	$t2, $t2, $t4
	ldx.bu	$t2, $a0, $t2
	srli.d	$t3, $t3, 7
	srli.d	$a2, $a2, 7
	mul.d	$t3, $t3, $t0
	mul.d	$t4, $t2, $a5
	lu12i.w	$t5, 17091
	ori	$s5, $t5, 71
	mul.d	$a2, $a2, $s5
	lu12i.w	$t5, 26856
	ori	$t5, $t5, 323
	mul.d	$t5, $t8, $t5
	st.d	$t5, $sp, 200                   # 8-byte Folded Spill
	add.d	$t3, $t5, $t3
	add.d	$t3, $t3, $t4
	add.w	$a2, $t3, $a2
	lu12i.w	$t3, 97657
	ori	$t3, $t3, 2886
	add.d	$a2, $a2, $t3
	bstrpick.d	$t3, $a2, 31, 9
	srli.d	$t2, $t2, 4
	bstrpick.d	$t5, $t8, 31, 6
	st.d	$t5, $sp, 208                   # 8-byte Folded Spill
	ld.w	$t4, $t1, 136
	xor	$t2, $t2, $t3
	xor	$t2, $t2, $t5
	xor	$a2, $t2, $a2
	addi.d	$t2, $t4, 1
	st.w	$t2, $t1, 136
	mul.d	$a2, $a2, $a6
	add.d	$a2, $a2, $t4
	rotri.w	$a2, $a2, 16
	mul.d	$a2, $a2, $a7
	add.d	$a2, $a2, $t4
	slli.d	$t2, $t4, 2
	stx.w	$a2, $a4, $t2
	slli.d	$t4, $a1, 1
	move	$t3, $t6
	ld.w	$t2, $t6, %pc_lo12(pos)
	ld.w	$t5, $s8, 0
	alsl.d	$a2, $a1, $a1, 1
	slli.d	$s0, $a1, 2
	sub.w	$t6, $t2, $a1
	addi.w	$t5, $t5, -1
	and	$t6, $t5, $t6
	ldx.bu	$t6, $a0, $t6
	sub.w	$t7, $t2, $t4
	and	$t7, $t5, $t7
	ldx.bu	$t7, $a0, $t7
	slli.d	$t6, $t6, 13
	lu12i.w	$fp, 508
	and	$t6, $t6, $fp
	srli.d	$t7, $t7, 1
	bstrins.d	$t6, $t7, 13, 7
	sub.w	$t7, $t2, $a2
	and	$t7, $t5, $t7
	ldx.bu	$t7, $a0, $t7
	sub.w	$t2, $t2, $s0
	and	$t2, $t5, $t2
	ldx.bu	$t2, $a0, $t2
	srli.d	$t5, $t7, 1
	or	$t5, $t6, $t5
	slli.d	$t5, $t5, 7
	srli.d	$t2, $t2, 1
	or	$t2, $t5, $t2
	bstrpick.d	$t5, $t2, 27, 3
	mul.d	$t2, $t2, $t0
	st.d	$s1, $sp, 72                    # 8-byte Folded Spill
	add.w	$t2, $s1, $t2
	lu12i.w	$t6, 102539
	ori	$t6, $t6, 1887
	add.d	$t2, $t2, $t6
	bstrpick.d	$t6, $t2, 31, 9
	bstrpick.d	$t5, $t5, 60, 0
	xor	$t5, $t5, $t6
	ld.w	$t6, $t1, 136
	st.d	$a3, $sp, 88                    # 8-byte Folded Spill
	xor	$t5, $t5, $a3
	xor	$t2, $t5, $t2
	xor	$t2, $t2, $s2
	addi.d	$t5, $t6, 1
	st.w	$t5, $t1, 136
	mul.d	$t2, $t2, $a6
	add.d	$t2, $t2, $t6
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t2, $t2, $t6
	slli.d	$t5, $t6, 2
	stx.w	$t2, $a4, $t5
	ld.w	$t2, $t3, %pc_lo12(pos)
	move	$a3, $t3
	ld.w	$t5, $s8, 0
	bstrpick.d	$t7, $t8, 31, 5
	sub.w	$t6, $t2, $a1
	addi.w	$t5, $t5, -1
	and	$t6, $t5, $t6
	ldx.bu	$t6, $a0, $t6
	sub.w	$fp, $t2, $t4
	and	$fp, $t5, $fp
	ldx.bu	$fp, $a0, $fp
	slli.d	$t6, $t6, 7
	bstrpick.d	$t6, $t6, 14, 10
	slli.d	$t6, $t6, 10
	srli.d	$fp, $fp, 3
	bstrins.d	$t6, $fp, 9, 5
	move	$t3, $a2
	sub.w	$fp, $t2, $a2
	and	$fp, $t5, $fp
	ldx.bu	$fp, $a0, $fp
	sub.w	$s2, $t2, $s0
	and	$s2, $t5, $s2
	ldx.bu	$s2, $a0, $s2
	srli.d	$fp, $fp, 3
	or	$t6, $t6, $fp
	slli.d	$t6, $t6, 5
	srli.d	$fp, $s2, 3
	alsl.d	$s4, $a1, $a1, 2
	alsl.d	$s2, $a1, $s0, 1
	sub.w	$s3, $t2, $s4
	and	$s3, $t5, $s3
	sub.w	$t2, $t2, $s2
	and	$t2, $t5, $t2
	ldx.bu	$t2, $a0, $t2
	ldx.bu	$t5, $a0, $s3
	or	$t6, $t6, $fp
	bstrpick.d	$fp, $t6, 19, 3
	srli.d	$t2, $t2, 3
	srli.d	$t5, $t5, 3
	bstrins.d	$t2, $t5, 9, 5
	mul.d	$t5, $t6, $t0
	mul.d	$s3, $t2, $a5
	move	$s1, $s5
	mul.d	$a2, $t8, $s5
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	add.d	$t5, $a2, $t5
	add.w	$t5, $t5, $s3
	lu12i.w	$s3, 168459
	ori	$s3, $s3, 1353
	add.d	$t5, $t5, $s3
	bstrpick.d	$s3, $t5, 31, 9
	bstrpick.d	$fp, $fp, 60, 0
	srli.d	$t2, $t2, 4
	bstrpick.d	$a2, $t7, 58, 0
	xor	$t2, $t2, $fp
	xor	$t2, $t2, $s3
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	xor	$t2, $t2, $a2
	xor	$t2, $t2, $t5
	ld.w	$t5, $t1, 136
	lu12i.w	$a2, 16383
	ori	$t7, $a2, 4094
	xor	$t2, $t2, $t7
	addi.d	$t7, $t5, 1
	st.w	$t7, $t1, 136
	mul.d	$t2, $t2, $a6
	add.d	$t2, $t2, $t5
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t2, $t2, $t5
	slli.d	$t5, $t5, 2
	stx.w	$t2, $a4, $t5
	ld.w	$s5, $a3, %pc_lo12(pos)
	ld.w	$t2, $s8, 0
	sub.w	$t5, $s5, $a1
	addi.w	$s7, $t2, -1
	and	$t2, $s7, $t5
	sub.w	$t5, $s5, $t4
	and	$t5, $s7, $t5
	ldx.bu	$t5, $a0, $t5
	ldx.bu	$t2, $a0, $t2
	srli.d	$t5, $t5, 4
	srli.d	$t2, $t2, 4
	bstrins.d	$t5, $t2, 7, 4
	sub.w	$t2, $s5, $t3
	and	$t2, $s7, $t2
	ldx.bu	$t2, $a0, $t2
	sub.w	$t7, $s5, $s0
	and	$t7, $s7, $t7
	ldx.bu	$t7, $a0, $t7
	slli.d	$t5, $t5, 8
	srli.d	$t2, $t2, 4
	bstrins.d	$t5, $t2, 7, 4
	srli.d	$t2, $t7, 4
	or	$t2, $t5, $t2
	sub.w	$t5, $s5, $s4
	and	$t5, $s7, $t5
	sub.w	$t7, $s5, $s2
	and	$t7, $s7, $t7
	ldx.bu	$t7, $a0, $t7
	ldx.b	$t5, $a0, $t5
	slli.d	$fp, $a1, 3
	sub.d	$s3, $fp, $a1
	srli.d	$t7, $t7, 5
	srli.d	$t5, $t5, 5
	bstrins.d	$t7, $t5, 5, 3
	sub.w	$t5, $s5, $s3
	and	$t5, $s7, $t5
	ldx.bu	$ra, $a0, $t5
	slli.d	$t5, $t7, 6
	alsl.d	$s6, $a1, $a1, 3
	sub.w	$t7, $s5, $s6
	and	$t7, $s7, $t7
	alsl.d	$a2, $a1, $fp, 1
	sub.w	$t6, $s5, $a2
	and	$t6, $s7, $t6
	ldx.bu	$t6, $a0, $t6
	ldx.b	$t7, $a0, $t7
	srli.d	$ra, $ra, 5
	bstrins.d	$t5, $ra, 5, 3
	srli.d	$t6, $t6, 6
	srli.d	$t7, $t7, 6
	bstrins.d	$t6, $t7, 3, 2
	sub.w	$t7, $s5, $fp
	and	$t8, $s7, $t7
	alsl.d	$t7, $s4, $a1, 1
	sub.w	$ra, $s5, $t7
	and	$ra, $s7, $ra
	ldx.b	$a3, $a0, $ra
	alsl.d	$ra, $a1, $fp, 2
	sub.w	$s5, $s5, $ra
	and	$s5, $s7, $s5
	ldx.bu	$t8, $a0, $t8
	bstrpick.d	$a3, $a3, 7, 6
	ldx.b	$s5, $a0, $s5
	slli.d	$t6, $t6, 4
	slli.d	$a3, $a3, 2
	or	$a3, $t6, $a3
	bstrpick.d	$t6, $s5, 7, 6
	or	$a3, $a3, $t6
	srli.d	$t6, $t8, 5
	or	$t6, $t5, $t6
	st.d	$a5, $sp, 64                    # 8-byte Folded Spill
	mul.d	$t6, $t6, $a5
	st.d	$t0, $sp, 48                    # 8-byte Folded Spill
	mul.d	$t8, $t2, $t0
	ld.d	$a5, $sp, 200                   # 8-byte Folded Reload
	add.d	$t8, $a5, $t8
	add.d	$t6, $t8, $t6
	st.d	$s1, $sp, 24                    # 8-byte Folded Spill
	mul.d	$t8, $a3, $s1
	add.w	$t6, $t6, $t8
	srli.d	$t2, $t2, 3
	srli.d	$t5, $t5, 4
	xor	$t2, $t2, $t5
	srli.d	$a3, $a3, 5
	xor	$a3, $t2, $a3
	addu16i.d	$t2, $t6, 15259
	addi.d	$t2, $t2, 1071
	bstrpick.d	$t5, $t2, 31, 9
	ld.w	$t6, $t1, 136
	xor	$a3, $a3, $t5
	ld.d	$a5, $sp, 208                   # 8-byte Folded Reload
	xor	$a3, $a3, $a5
	xor	$a3, $a3, $t2
	addi.d	$t2, $t6, 1
	st.w	$t2, $t1, 136
	xori	$a3, $a3, 1
	move	$t1, $a6
	mul.d	$a3, $a3, $a6
	add.d	$a3, $a3, $t6
	rotri.w	$a3, $a3, 16
	st.d	$a7, $sp, 56                    # 8-byte Folded Spill
	mul.d	$a3, $a3, $a7
	add.d	$a3, $a3, $t6
	slli.d	$t2, $t6, 2
	move	$a5, $a4
	stx.w	$a3, $a4, $t2
	move	$s1, $s8
	ld.w	$a3, $s8, 0
	ld.d	$a4, $sp, 184                   # 8-byte Folded Reload
	ld.w	$s5, $a4, %pc_lo12(pos)
	addi.w	$s7, $a3, -1
	sub.w	$a3, $s5, $a1
	and	$a3, $s7, $a3
	ldx.b	$a3, $a0, $a3
	st.d	$t4, $sp, 8                     # 8-byte Folded Spill
	sub.w	$t2, $s5, $t4
	and	$t2, $s7, $t2
	ldx.bu	$t2, $a0, $t2
	sub.w	$t4, $s5, $t3
	and	$t4, $s7, $t4
	ldx.b	$t4, $a0, $t4
	srli.d	$t2, $t2, 6
	srli.d	$a3, $a3, 6
	bstrins.d	$t2, $a3, 3, 2
	bstrpick.d	$a3, $t4, 7, 6
	st.d	$s0, $sp, 192                   # 8-byte Folded Spill
	sub.w	$t4, $s5, $s0
	and	$t4, $s7, $t4
	ldx.b	$t4, $a0, $t4
	slli.d	$t2, $t2, 4
	slli.d	$a3, $a3, 2
	or	$a3, $t2, $a3
	bstrpick.d	$t2, $t4, 7, 6
	or	$t4, $a3, $t2
	sub.w	$a3, $s5, $s4
	and	$a3, $s7, $a3
	ldx.b	$a3, $a0, $a3
	sub.w	$t2, $s5, $s2
	and	$t2, $s7, $t2
	ldx.bu	$t2, $a0, $t2
	sub.w	$t5, $s5, $s3
	and	$t5, $s7, $t5
	ldx.b	$t5, $a0, $t5
	srli.d	$t2, $t2, 6
	srli.d	$a3, $a3, 6
	bstrins.d	$t2, $a3, 3, 2
	bstrpick.d	$a3, $t5, 7, 6
	sub.w	$t5, $s5, $fp
	and	$t5, $s7, $t5
	ldx.b	$t5, $a0, $t5
	slli.d	$t2, $t2, 4
	slli.d	$a3, $a3, 2
	or	$a3, $t2, $a3
	bstrpick.d	$t2, $t5, 7, 6
	or	$fp, $a3, $t2
	sub.w	$a3, $s5, $s6
	and	$a3, $s7, $a3
	ldx.b	$a3, $a0, $a3
	sub.w	$t2, $s5, $a2
	and	$t2, $s7, $t2
	ldx.bu	$t2, $a0, $t2
	sub.w	$t5, $s5, $t7
	and	$t5, $s7, $t5
	ldx.b	$t5, $a0, $t5
	srli.d	$t2, $t2, 6
	srli.d	$a3, $a3, 6
	bstrins.d	$t2, $a3, 3, 2
	bstrpick.d	$a3, $t5, 7, 6
	sub.w	$t5, $s5, $ra
	and	$t5, $s7, $t5
	ldx.b	$t5, $a0, $t5
	slli.d	$t2, $t2, 4
	slli.d	$a3, $a3, 2
	or	$a3, $t2, $a3
	bstrpick.d	$t2, $t5, 7, 6
	or	$a3, $a3, $t2
	addi.d	$t2, $zero, -13
	mul.d	$t2, $a1, $t2
	addi.d	$t5, $zero, -14
	mul.d	$t5, $a1, $t5
	slli.d	$t6, $a1, 4
	sub.d	$t7, $a1, $t6
	add.w	$t2, $s5, $t2
	and	$t2, $s7, $t2
	ldx.b	$t2, $a0, $t2
	add.w	$t5, $s5, $t5
	and	$t5, $s7, $t5
	ldx.bu	$t5, $a0, $t5
	add.w	$t7, $s5, $t7
	and	$t7, $s7, $t7
	ldx.b	$t7, $a0, $t7
	srli.d	$t5, $t5, 6
	srli.d	$t2, $t2, 6
	bstrins.d	$t5, $t2, 3, 2
	bstrpick.d	$t2, $t7, 7, 6
	sub.w	$t6, $s5, $t6
	and	$t6, $s7, $t6
	ldx.b	$t6, $a0, $t6
	slli.d	$t5, $t5, 4
	slli.d	$t2, $t2, 2
	or	$t2, $t5, $t2
	bstrpick.d	$t5, $t6, 7, 6
	alsl.d	$t6, $a1, $a1, 4
	sub.w	$t6, $s5, $t6
	and	$t6, $s7, $t6
	ldx.bu	$t6, $a0, $t6
	or	$t5, $t2, $t5
	slli.d	$t2, $t4, 8
	slli.d	$t7, $a3, 8
	srli.d	$s3, $t6, 6
	beqz	$a1, .LBB61_51
# %bb.50:
	addi.d	$a3, $zero, -20
	mul.d	$a3, $a1, $a3
	addi.d	$t4, $zero, -18
	mul.d	$t4, $a1, $t4
	add.w	$t4, $s5, $t4
	and	$t4, $s7, $t4
	ldx.bu	$t4, $a0, $t4
	addi.d	$t6, $zero, -19
	mul.d	$t6, $a1, $t6
	slli.d	$t8, $s3, 4
	srli.d	$t4, $t4, 6
	bstrins.d	$t8, $t4, 3, 2
	add.w	$t4, $s5, $t6
	and	$t4, $s7, $t4
	ldx.bu	$t4, $a0, $t4
	add.w	$a3, $s5, $a3
	and	$a3, $s7, $a3
	ldx.bu	$a3, $a0, $a3
	srli.d	$t4, $t4, 6
	or	$t4, $t8, $t4
	slli.d	$t4, $t4, 2
	srli.d	$a3, $a3, 6
	or	$s3, $t4, $a3
.LBB61_51:                              # %_Z1ciiiii.exit402
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.w	$a3, $a1, $a1, 1
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	alsl.w	$a3, $a1, $a1, 2
	st.d	$a3, $sp, 104                   # 8-byte Folded Spill
	addi.d	$a3, $zero, -21
	mul.d	$a3, $a1, $a3
	add.w	$a3, $s5, $a3
	and	$a3, $s7, $a3
	ldx.bu	$a3, $a0, $a3
	or	$t2, $t2, $fp
	or	$t5, $t7, $t5
	slli.d	$t7, $s3, 8
	srli.d	$fp, $a3, 6
	move	$s8, $s1
	beqz	$a1, .LBB61_53
# %bb.52:
	addi.d	$a3, $zero, -24
	mul.d	$a3, $a1, $a3
	addi.d	$t6, $zero, -22
	mul.d	$t6, $a1, $t6
	add.w	$t6, $s5, $t6
	and	$t6, $s7, $t6
	ldx.bu	$t6, $a0, $t6
	addi.d	$t8, $zero, -23
	mul.d	$t8, $a1, $t8
	slli.d	$fp, $fp, 4
	srli.d	$t6, $t6, 6
	bstrins.d	$fp, $t6, 3, 2
	add.w	$t6, $s5, $t8
	and	$t6, $s7, $t6
	ldx.bu	$t6, $a0, $t6
	add.w	$a3, $s5, $a3
	and	$a3, $s7, $a3
	ldx.bu	$a3, $a0, $a3
	srli.d	$t6, $t6, 6
	or	$t6, $fp, $t6
	slli.d	$t6, $t6, 2
	srli.d	$a3, $a3, 6
	or	$fp, $t6, $a3
.LBB61_53:                              # %_Z1ciiiii.exit409
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 96                    # 8-byte Folded Reload
	or	$a3, $fp, $t7
	ld.d	$t0, $sp, 48                    # 8-byte Folded Reload
	mul.d	$t6, $t2, $t0
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	mul.d	$t7, $t5, $a4
	ld.d	$a6, $sp, 24                    # 8-byte Folded Reload
	mul.d	$t8, $a3, $a6
	ld.d	$a6, $sp, 200                   # 8-byte Folded Reload
	add.d	$t6, $a6, $t6
	add.d	$t6, $t6, $t7
	add.w	$t6, $t6, $t8
	lu12i.w	$t7, 292973
	ori	$t7, $t7, 466
	add.d	$t6, $t6, $t7
	bstrpick.d	$t7, $t6, 31, 9
	bstrpick.d	$t2, $t2, 31, 3
	bstrpick.d	$t5, $t5, 31, 4
	bstrpick.d	$a3, $a3, 31, 5
	xor	$t2, $t2, $t5
	xor	$a3, $t2, $a3
	xor	$a3, $a3, $t7
	ld.w	$t2, $s6, 136
	ld.d	$a6, $sp, 208                   # 8-byte Folded Reload
	xor	$a3, $a3, $a6
	xor	$a3, $a3, $t6
	xori	$a3, $a3, 1
	addi.d	$t5, $t2, 1
	st.w	$t5, $s6, 136
	move	$a6, $t1
	mul.d	$a3, $a3, $t1
	add.d	$a3, $a3, $t2
	rotri.w	$a3, $a3, 16
	ld.d	$a7, $sp, 56                    # 8-byte Folded Reload
	mul.d	$a3, $a3, $a7
	add.d	$a3, $a3, $t2
	slli.d	$t2, $t2, 2
	move	$s2, $a5
	stx.w	$a3, $a5, $t2
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE2pr)
	addi.d	$a3, $a3, %pc_lo12(_ZZ8wavModelR5MixerE2pr)
	ld.d	$a5, $sp, 176                   # 8-byte Folded Reload
	slli.d	$t2, $a5, 2
	ldx.w	$t8, $a3, $t2
	srai.d	$t2, $t8, 8
	mul.d	$s3, $t2, $t0
	ld.d	$t4, $sp, 72                    # 8-byte Folded Reload
	add.w	$t5, $t4, $s3
	lu12i.w	$t6, 297854
	ori	$t6, $t6, 3563
	add.d	$t5, $t5, $t6
	bstrpick.d	$t6, $t5, 31, 9
	bstrpick.d	$t7, $t2, 31, 3
	xor	$t2, $t7, $t6
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	xor	$t2, $t2, $ra
	ld.w	$t6, $s6, 136
	xor	$t2, $t2, $t5
	lu12i.w	$t1, 16384
	ori	$t5, $t1, 1
	xor	$t2, $t2, $t5
	addi.d	$t5, $t6, 1
	st.w	$t5, $s6, 136
	mul.d	$t2, $t2, $a6
	add.d	$t2, $t2, $t6
	rotri.w	$t2, $t2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t2, $t2, $t6
	slli.d	$t5, $t6, 2
	stx.w	$t2, $s2, $t5
	ld.d	$s5, $sp, 184                   # 8-byte Folded Reload
	ld.w	$t2, $s5, %pc_lo12(pos)
	ld.w	$t5, $s8, 0
	addi.d	$s0, $a1, 1
	sub.w	$t2, $t2, $s0
	addi.w	$t5, $t5, -1
	addi.w	$t6, $t2, 1
	and	$t6, $t5, $t6
	ldx.b	$t6, $a0, $t6
	and	$t2, $t5, $t2
	ldx.bu	$t2, $a0, $t2
	alsl.d	$s4, $a5, $a3, 2
	slli.w	$a3, $t6, 24
	ld.w	$fp, $s4, 8
	slli.w	$t2, $t2, 16
	or	$a3, $a3, $t2
	srli.d	$a3, $a3, 16
	sub.d	$t2, $t8, $fp
	add.w	$a3, $t2, $a3
	srai.d	$a3, $a3, 8
	mul.d	$t2, $a3, $t0
	add.w	$t2, $t4, $t2
	lu12i.w	$t5, 346683
	ori	$t5, $t5, 2958
	add.d	$t2, $t2, $t5
	bstrpick.d	$t5, $t2, 31, 9
	bstrpick.d	$a3, $a3, 31, 3
	xor	$a3, $a3, $t5
	xor	$a3, $a3, $ra
	ld.w	$t5, $s6, 136
	xor	$a3, $a3, $t2
	ori	$s1, $t1, 2
	xor	$a3, $a3, $s1
	addi.d	$t2, $t5, 1
	st.w	$t2, $s6, 136
	mul.d	$a3, $a3, $a6
	add.d	$a3, $a3, $t5
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $a7
	add.d	$a3, $a3, $t5
	slli.d	$t2, $t5, 2
	stx.w	$a3, $s2, $t2
	ld.w	$a3, $s5, %pc_lo12(pos)
	ld.w	$t2, $s8, 0
	sub.w	$t5, $a3, $s0
	addi.w	$t6, $t2, -1
	and	$t2, $t6, $t5
	addi.w	$t5, $t5, 1
	and	$t5, $t6, $t5
	ldx.b	$t5, $a0, $t5
	ldx.bu	$t2, $a0, $t2
	slli.w	$t5, $t5, 24
	slli.w	$t2, $t2, 16
	or	$t5, $t5, $t2
	ld.d	$a5, $sp, 8                     # 8-byte Folded Reload
	ori	$t2, $a5, 1
	sub.w	$a3, $a3, $t2
	and	$t3, $t6, $a3
	addi.w	$a3, $a3, 1
	and	$a3, $t6, $a3
	ldx.b	$a3, $a0, $a3
	ldx.bu	$t6, $a0, $t3
	srli.d	$t5, $t5, 16
	ld.w	$t3, $s4, 16
	slli.w	$a3, $a3, 24
	slli.w	$t6, $t6, 16
	or	$a3, $a3, $t6
	add.d	$t6, $t3, $fp
	sub.d	$t5, $t5, $t6
	srli.d	$a3, $a3, 16
	add.w	$a3, $t5, $a3
	ld.d	$a5, $sp, 32                    # 8-byte Folded Reload
	add.d	$t5, $a5, $s3
	srai.d	$a3, $a3, 9
	mul.d	$t1, $a3, $a4
	add.w	$t1, $t5, $t1
	lu12i.w	$t5, 412603
	ori	$t5, $t5, 2424
	add.d	$t1, $t1, $t5
	bstrpick.d	$t5, $t1, 31, 9
	bstrpick.d	$a3, $a3, 31, 4
	xor	$a3, $a3, $t5
	xor	$a3, $a3, $t7
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	xor	$a3, $a3, $a4
	ld.w	$t5, $s6, 136
	xor	$a3, $a3, $t1
	lu12i.w	$a4, 16383
	ori	$t1, $a4, 4093
	xor	$a3, $a3, $t1
	addi.d	$t1, $t5, 1
	st.w	$t1, $s6, 136
	mul.d	$a3, $a3, $a6
	add.d	$a3, $a3, $t5
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $a7
	add.d	$a3, $a3, $t5
	slli.d	$t1, $t5, 2
	stx.w	$a3, $s2, $t1
	ld.w	$a3, $s5, %pc_lo12(pos)
	ld.w	$t1, $s8, 0
	sub.w	$t5, $a3, $s0
	addi.w	$t1, $t1, -1
	and	$t6, $t1, $t5
	addi.w	$t5, $t5, 1
	and	$t5, $t1, $t5
	ldx.b	$t5, $a0, $t5
	sub.w	$a3, $a3, $t2
	and	$t7, $t1, $a3
	addi.w	$a3, $a3, 1
	and	$a3, $t1, $a3
	ldx.bu	$t1, $a0, $t6
	slli.w	$t5, $t5, 24
	ldx.b	$a3, $a0, $a3
	ldx.bu	$t6, $a0, $t7
	slli.w	$t1, $t1, 16
	or	$t1, $t5, $t1
	slli.w	$a3, $a3, 24
	slli.w	$t5, $t6, 16
	or	$a3, $a3, $t5
	srli.d	$t1, $t1, 15
	srli.d	$a3, $a3, 16
	slli.d	$t5, $fp, 1
	sub.d	$t5, $t8, $t5
	add.d	$t3, $t5, $t3
	add.d	$t1, $t3, $t1
	sub.w	$a3, $t1, $a3
	srai.d	$a3, $a3, 8
	mul.d	$a4, $a3, $t0
	add.w	$a4, $t4, $a4
	lu12i.w	$a5, 444341
	ori	$a5, $a5, 1748
	add.d	$a4, $a4, $a5
	bstrpick.d	$a5, $a4, 31, 9
	bstrpick.d	$a3, $a3, 31, 3
	xor	$a3, $a3, $a5
	ld.w	$a5, $s6, 136
	xor	$a3, $a3, $ra
	xor	$a3, $a3, $a4
	xor	$a3, $a3, $s1
	addi.d	$a4, $a5, 1
	st.w	$a4, $s6, 136
	mul.d	$a3, $a3, $a6
	add.d	$a3, $a3, $a5
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $a7
	add.d	$a3, $a3, $a5
	slli.d	$a4, $a5, 2
	stx.w	$a3, $s2, $a4
	ld.w	$a3, $s5, %pc_lo12(pos)
	ld.w	$a4, $s8, 0
	addi.w	$a5, $a3, -5
	addi.w	$a4, $a4, -1
	and	$a5, $a4, $a5
	addi.w	$a6, $a3, -4
	and	$a6, $a4, $a6
	ldx.b	$a6, $a0, $a6
	ldx.bu	$a5, $a0, $a5
	slli.w	$a6, $a6, 24
	slli.w	$a5, $a5, 16
	addi.w	$a7, $a3, -3
	and	$a7, $a4, $a7
	addi.w	$t0, $a3, -2
	and	$t0, $a4, $t0
	ldx.b	$t0, $a0, $t0
	ldx.bu	$a7, $a0, $a7
	or	$a5, $a6, $a5
	srli.d	$a5, $a5, 16
	slli.w	$a6, $t0, 24
	slli.w	$a7, $a7, 16
	addi.w	$t0, $a3, -7
	and	$t0, $a4, $t0
	addi.w	$t1, $a3, -6
	and	$t1, $a4, $t1
	ldx.b	$t1, $a0, $t1
	ldx.bu	$t0, $a0, $t0
	or	$a6, $a6, $a7
	srli.d	$a7, $a6, 16
	slli.w	$a6, $t1, 24
	slli.w	$t0, $t0, 16
	or	$t0, $a6, $t0
	addi.w	$a6, $a3, -1
	and	$a6, $a4, $a6
	ldx.bu	$t1, $a0, $a6
	srli.d	$t0, $t0, 16
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $a7
	add.d	$a7, $t0, $t1
	sub.w	$a5, $a5, $a7
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.wu	$a7, $s5, 0
	srli.d	$t0, $a5, 1
	addi.w	$a5, $zero, -256
	lu32i.d	$a5, 0
	and	$a7, $a7, $a5
	addi.d	$a7, $a7, -256
	and	$a7, $a7, $t0
	st.w	$a7, $s5, 24
	sub.w	$t0, $a3, $s0
	and	$a7, $a4, $t0
	addi.w	$t0, $t0, 1
	and	$t0, $a4, $t0
	ldx.b	$t1, $a0, $t0
	ldx.bu	$t3, $a0, $a7
	slli.w	$t1, $t1, 24
	slli.w	$t3, $t3, 16
	ldx.bu	$t5, $a0, $a6
	or	$t1, $t1, $t3
	srli.d	$t1, $t1, 16
	ld.wu	$t3, $a2, 0
	sub.d	$t5, $t8, $t5
	add.w	$t1, $t5, $t1
	srli.d	$t1, $t1, 1
	and	$t3, $t3, $a5
	addi.d	$t3, $t3, -256
	and	$t1, $t3, $t1
	st.w	$t1, $a2, 24
	ldx.b	$t1, $a0, $t0
	ldx.bu	$t3, $a0, $a7
	slli.w	$t5, $t1, 24
	slli.w	$t3, $t3, 16
	sub.w	$t2, $a3, $t2
	and	$t1, $a4, $t2
	addi.w	$t2, $t2, 1
	and	$t2, $a4, $t2
	ldx.b	$t6, $a0, $t2
	ldx.bu	$t7, $a0, $t1
	or	$t3, $t5, $t3
	srli.d	$t3, $t3, 15
	slli.w	$t5, $t6, 24
	slli.w	$t6, $t7, 16
	or	$t5, $t5, $t6
	ldx.bu	$t6, $a0, $a6
	srli.d	$t5, $t5, 16
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.wu	$t7, $s4, 0
	add.d	$t3, $t8, $t3
	add.d	$t5, $t5, $t6
	sub.d	$t3, $t3, $t5
	and	$t5, $t7, $a5
	addi.d	$t5, $t5, -256
	and	$t3, $t5, $t3
	st.w	$t3, $s4, 24
	ldx.b	$t3, $a0, $t0
	ldx.bu	$t5, $a0, $a7
	slli.w	$t3, $t3, 24
	slli.w	$t5, $t5, 16
	ldx.b	$t6, $a0, $t2
	ldx.bu	$t7, $a0, $t1
	or	$t3, $t3, $t5
	srai.d	$fp, $t3, 16
	slli.w	$t6, $t6, 24
	slli.w	$t7, $t7, 16
	ld.d	$t4, $sp, 16                    # 8-byte Folded Reload
	sub.w	$t3, $t4, $a3
	andn	$t3, $a4, $t3
	sub.w	$t5, $a3, $t4
	and	$t5, $a4, $t5
	ldx.b	$s0, $a0, $t5
	ldx.bu	$s1, $a0, $t3
	or	$t6, $t6, $t7
	srai.d	$t6, $t6, 16
	slli.w	$t7, $s0, 24
	slli.w	$s0, $s1, 16
	or	$t7, $t7, $s0
	srli.d	$t7, $t7, 16
	ldx.bu	$s0, $a0, $a6
	sub.d	$t6, $fp, $t6
	alsl.d	$t6, $t6, $t6, 1
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.wu	$fp, $s2, 0
	sub.d	$t7, $t7, $s0
	add.d	$t6, $t7, $t6
	slli.d	$t6, $t6, 1
	and	$t7, $fp, $a5
	addi.d	$t7, $t7, -256
	and	$t6, $t7, $t6
	st.w	$t6, $s2, 24
	sub.d	$a1, $a3, $a1
	addi.w	$t6, $a1, 1
	and	$t6, $a4, $t6
	addi.w	$a1, $a1, 2
	and	$a1, $a4, $a1
	ldx.b	$a1, $a0, $a1
	ldx.bu	$t6, $a0, $t6
	slli.w	$a1, $a1, 24
	slli.w	$t6, $t6, 16
	ldx.b	$t7, $a0, $t0
	ldx.bu	$fp, $a0, $a7
	or	$a1, $a1, $t6
	srli.d	$a1, $a1, 16
	slli.w	$t6, $t7, 24
	slli.w	$t7, $fp, 16
	or	$t6, $t6, $t7
	ldx.bu	$t7, $a0, $a6
	srli.d	$t6, $t6, 16
	alsl.d	$a1, $t8, $a1, 1
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.wu	$fp, $s3, 0
	sub.d	$a1, $a1, $t7
	add.w	$a1, $a1, $t6
	srli.d	$a1, $a1, 2
	and	$t6, $fp, $a5
	addi.d	$t6, $t6, -256
	and	$a1, $t6, $a1
	st.w	$a1, $s3, 24
	ldx.b	$a1, $a0, $t0
	ldx.bu	$t6, $a0, $a7
	slli.w	$a1, $a1, 24
	slli.w	$t6, $t6, 16
	ldx.b	$t7, $a0, $t2
	ldx.bu	$fp, $a0, $t1
	or	$a1, $a1, $t6
	srai.d	$t6, $a1, 16
	slli.w	$a1, $t7, 24
	slli.w	$t7, $fp, 16
	or	$a1, $a1, $t7
	srli.d	$a1, $a1, 16
	ldx.b	$t7, $a0, $t5
	ldx.bu	$fp, $a0, $t3
	addi.w	$s0, $zero, -6
	mul.d	$s0, $a1, $s0
	slli.w	$a1, $t7, 24
	slli.w	$t7, $fp, 16
	or	$t7, $a1, $t7
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	sub.w	$a1, $fp, $a3
	andn	$a1, $a4, $a1
	move	$ra, $a2
	sub.w	$a2, $a3, $fp
	and	$a2, $a4, $a2
	ldx.b	$fp, $a0, $a2
	ldx.bu	$s1, $a0, $a1
	srai.d	$t7, $t7, 16
	add.d	$t6, $t7, $t6
	slli.w	$t7, $fp, 24
	slli.w	$fp, $s1, 16
	or	$t7, $t7, $fp
	ldx.bu	$fp, $a0, $a6
	srli.d	$t7, $t7, 16
	alsl.d	$t6, $t6, $s0, 2
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.wu	$s0, $s1, 0
	add.d	$t7, $t7, $fp
	sub.d	$t6, $t6, $t7
	slli.d	$t6, $t6, 1
	and	$t7, $s0, $a5
	addi.d	$t7, $t7, -256
	and	$t6, $t7, $t6
	st.w	$t6, $s1, 24
	ldx.b	$t0, $a0, $t0
	ldx.bu	$a7, $a0, $a7
	slli.w	$t0, $t0, 24
	ldx.b	$t2, $a0, $t2
	slli.w	$a7, $a7, 16
	or	$a7, $t0, $a7
	ldx.bu	$t0, $a0, $t1
	slli.w	$t1, $t2, 24
	ldx.b	$t2, $a0, $t5
	ldx.bu	$t3, $a0, $t3
	slli.w	$t0, $t0, 16
	or	$t0, $t1, $t0
	slli.w	$t1, $t2, 24
	slli.w	$t2, $t3, 16
	or	$t1, $t1, $t2
	ld.d	$t3, $sp, 104                   # 8-byte Folded Reload
	sub.w	$t2, $t3, $a3
	sub.w	$a3, $a3, $t3
	ldx.b	$a2, $a0, $a2
	andn	$t2, $a4, $t2
	and	$a3, $a4, $a3
	ldx.bu	$a1, $a0, $a1
	slli.w	$a2, $a2, 24
	ldx.b	$a3, $a0, $a3
	ldx.bu	$a4, $a0, $t2
	slli.w	$a1, $a1, 16
	or	$a1, $a2, $a1
	slli.w	$a2, $a3, 24
	slli.w	$a3, $a4, 16
	or	$a2, $a2, $a3
	ldx.bu	$a0, $a0, $a6
	srli.d	$a3, $t0, 16
	srli.d	$a4, $t1, 16
	sub.w	$a3, $a4, $a3
	slli.d	$a4, $a3, 3
	alsl.d	$a3, $a3, $a4, 1
	srai.d	$a4, $a7, 16
	srai.d	$a1, $a1, 16
	sub.d	$a1, $a4, $a1
	sub.d	$a0, $t8, $a0
	srli.d	$a2, $a2, 16
	add.d	$a0, $a0, $a3
	ld.d	$fp, $sp, 152                   # 8-byte Folded Reload
	ld.wu	$a3, $fp, 0
	add.d	$a0, $a0, $a2
	alsl.d	$a1, $a1, $a1, 2
	add.w	$a0, $a0, $a1
	and	$a1, $a3, $a5
	srli.d	$a0, $a0, 1
	addi.d	$a1, $a1, -256
	and	$a0, $a1, $a0
	st.w	$a0, $fp, 24
	ld.d	$s0, $sp, 160                   # 8-byte Folded Reload
	b	.LBB61_130
.LBB61_54:                              # %.preheader508
	st.d	$t8, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZL1S)
	pcalau12i	$a1, %pc_hi20(_ZL1D)
	st.d	$a1, $sp, 200                   # 8-byte Folded Spill
	ld.bu	$a1, $a1, %pc_lo12(_ZL1D)
	st.d	$a0, $sp, 208                   # 8-byte Folded Spill
	ld.w	$a0, $a0, %pc_lo12(_ZL1S)
	ori	$fp, $zero, 12
	maskeqz	$a2, $fp, $a1
	add.w	$a2, $a2, $a0
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE7counter)
	addi.d	$a4, $a3, %pc_lo12(_ZZ8wavModelR5MixerE7counter)
	pcalau12i	$a6, %pc_hi20(.LCPI61_0)
	st.d	$a5, $sp, 40                    # 8-byte Folded Spill
	st.d	$a4, $sp, 72                    # 8-byte Folded Spill
	st.d	$a6, $sp, 192                   # 8-byte Folded Spill
	bltz	$a2, .LBB61_61
# %bb.55:                               # %.lr.ph
	move	$s2, $zero
	move	$s3, $zero
	ld.d	$a3, $sp, 176                   # 8-byte Folded Reload
	alsl.d	$s4, $a3, $a4, 2
	fld.d	$fs0, $a6, %pc_lo12(.LCPI61_0)
	lu12i.w	$a2, 4
	ori	$a2, $a2, 3048
	add.d	$a2, $sp, $a2
	alsl.d	$s6, $a3, $a2, 3
	addi.w	$s8, $zero, -1
	b	.LBB61_58
	.p2align	4, , 16
.LBB61_56:                              #   in Loop: Header=BB61_58 Depth=1
	fld.d	$fs1, $s6, 0
	ori	$a1, $zero, 1
	move	$a0, $zero
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	movgr2fr.w	$fa0, $a0
	ld.d	$a0, $sp, 208                   # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZL1S)
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	ld.b	$a1, $a1, %pc_lo12(_ZL1D)
	ffint.d.w	$fa0, $fa0
	fmadd.d	$fa0, $fs1, $fs0, $fa0
	fst.d	$fa0, $s6, 0
.LBB61_57:                              #   in Loop: Header=BB61_58 Depth=1
	addi.w	$s3, $s3, 1
	andi	$a2, $a1, 1
	maskeqz	$a2, $fp, $a2
	add.w	$a2, $a2, $a0
	addi.w	$s2, $s2, 1
	addi.d	$s6, $s6, 16
	bge	$s8, $a2, .LBB61_61
.LBB61_58:                              # =>This Inner Loop Header: Depth=1
	ld.w	$a2, $s4, 0
	addi.d	$s8, $s8, 1
	move	$s0, $s2
	blt	$s8, $a2, .LBB61_56
# %bb.59:                               #   in Loop: Header=BB61_58 Depth=1
	nor	$a3, $a0, $zero
	add.w	$a3, $a3, $s2
	bltz	$a3, .LBB61_57
# %bb.60:                               #   in Loop: Header=BB61_58 Depth=1
	move	$s0, $s3
	blt	$a3, $a2, .LBB61_56
	b	.LBB61_57
.LBB61_61:                              # %._crit_edge529
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.w	$a2, $s6, %pc_lo12(_ZZ8wavModelR5MixerE8channels)
	ori	$a3, $zero, 2
	bne	$a2, $a3, .LBB61_72
# %bb.62:                               # %.preheader507
	andi	$a1, $a1, 1
	beqz	$a1, .LBB61_67
# %bb.63:                               # %.lr.ph536
	ld.d	$a2, $sp, 176                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$fp, $a2, $a1, 2
	slli.d	$a1, $a0, 4
	alsl.d	$a1, $a2, $a1, 3
	lu12i.w	$a2, 4
	ori	$a2, $a2, 3048
	add.d	$a2, $sp, $a2
	add.d	$s2, $a2, $a1
	ld.d	$a1, $sp, 192                   # 8-byte Folded Reload
	fld.d	$fs0, $a1, %pc_lo12(.LCPI61_0)
	ori	$a1, $zero, 1
	ori	$s3, $zero, 784
	ori	$s4, $zero, 12
	move	$s5, $a0
	move	$s0, $a0
	b	.LBB61_65
	.p2align	4, , 16
.LBB61_64:                              #   in Loop: Header=BB61_65 Depth=1
	addi.d	$s5, $s5, 1
	andi	$a2, $a1, 1
	maskeqz	$a2, $s4, $a2
	add.w	$a2, $a2, $a0
	addi.d	$s2, $s2, 16
	bge	$s5, $a2, .LBB61_67
.LBB61_65:                              # =>This Inner Loop Header: Depth=1
	ld.w	$a2, $fp, 0
	sub.w	$a3, $s0, $a0
	addi.w	$s0, $s0, 1
	bge	$a3, $a2, .LBB61_64
# %bb.66:                               #   in Loop: Header=BB61_65 Depth=1
	addi.w	$a0, $a0, 1
	mul.d	$a1, $a0, $s3
	add.d	$a1, $s2, $a1
	fld.d	$fs1, $a1, 16
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s1
	movgr2fr.w	$fa0, $a0
	ld.d	$a0, $sp, 208                   # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZL1S)
	ffint.d.w	$fa0, $fa0
	fmadd.d	$fa0, $fs1, $fs0, $fa0
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	ld.b	$a1, $a1, %pc_lo12(_ZL1D)
	mul.d	$a2, $a0, $s3
	add.d	$a2, $s2, $a2
	fst.d	$fa0, $a2, 800
	b	.LBB61_64
.LBB61_67:                              # %.preheader505
	blez	$a0, .LBB61_72
# %bb.68:                               # %.lr.ph539
	move	$fp, $zero
	ld.d	$s4, $sp, 176                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$s2, $s4, $a1, 2
	lu12i.w	$a1, 4
	ori	$a1, $a1, 3048
	add.d	$a1, $sp, $a1
	ld.d	$a2, $sp, 192                   # 8-byte Folded Reload
	fld.d	$fs0, $a2, %pc_lo12(.LCPI61_0)
	alsl.d	$a1, $s4, $a1, 3
	addi.d	$s3, $a1, 800
	ori	$s0, $zero, 1
	ld.d	$s8, $sp, 208                   # 8-byte Folded Reload
	b	.LBB61_70
	.p2align	4, , 16
.LBB61_69:                              #   in Loop: Header=BB61_70 Depth=1
	addi.d	$s3, $s3, 784
	addi.w	$s0, $s0, 1
	bge	$fp, $a0, .LBB61_73
.LBB61_70:                              # =>This Inner Loop Header: Depth=1
	ld.w	$a1, $s2, 0
	addi.d	$fp, $fp, 1
	bge	$fp, $a1, .LBB61_69
# %bb.71:                               #   in Loop: Header=BB61_70 Depth=1
	slli.d	$a0, $a0, 4
	fldx.d	$fs1, $s3, $a0
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s8, %pc_lo12(_ZL1S)
	move	$s1, $a0
	addi.w	$a0, $a1, 1
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	mul.d	$a1, $a0, $s1
	ld.w	$a0, $s8, %pc_lo12(_ZL1S)
	movgr2fr.w	$fa0, $a1
	ffint.d.w	$fa0, $fa0
	fmadd.d	$fa0, $fs1, $fs0, $fa0
	slli.d	$a1, $a0, 4
	fstx.d	$fa0, $s3, $a1
	b	.LBB61_69
.LBB61_72:
	ld.d	$s4, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 208                   # 8-byte Folded Reload
.LBB61_73:                              # %.loopexit506
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE1n)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE1n)
	slli.d	$a4, $s4, 2
	ldx.w	$a2, $a1, $a4
	pcalau12i	$a3, %pc_hi20(_ZZ8wavModelR5MixerE1K)
	ld.w	$a3, $a3, %pc_lo12(_ZZ8wavModelR5MixerE1K)
	addi.w	$a2, $a2, 1
	st.d	$a4, $sp, 64                    # 8-byte Folded Spill
	stx.w	$a2, $a1, $a4
	bne	$a2, $a3, .LBB61_98
# %bb.74:
	alsl.d	$a5, $s4, $a1, 2
	ld.w	$a3, $s6, %pc_lo12(_ZZ8wavModelR5MixerE8channels)
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	ld.bu	$a1, $a1, %pc_lo12(_ZL1D)
	lu12i.w	$a2, 4
	ori	$a2, $a2, 3048
	add.d	$a2, $sp, $a2
	alsl.d	$s5, $s4, $a2, 3
	ori	$a2, $zero, 12
	maskeqz	$a2, $a2, $a1
	ori	$a4, $zero, 1
	add.w	$a2, $a2, $a0
	st.d	$a5, $sp, 32                    # 8-byte Folded Spill
	bne	$a3, $a4, .LBB61_99
# %bb.75:                               # %.preheader499
	ld.d	$a3, $sp, 192                   # 8-byte Folded Reload
	blez	$a2, .LBB61_110
# %bb.76:                               # %.preheader498.preheader
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fld.d	$fs0, $a3, %pc_lo12(.LCPI61_0)
	move	$s1, $zero
	move	$s8, $zero
	ori	$a3, $zero, 1
	ori	$s6, $zero, 12
.LBB61_77:                              # %.preheader498
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_79 Depth 2
	andi	$a2, $a1, 1
	maskeqz	$a2, $s6, $a2
	add.w	$a2, $a2, $a0
	blt	$a2, $a3, .LBB61_81
# %bb.78:                               # %.lr.ph560
                                        #   in Loop: Header=BB61_77 Depth=1
	move	$s4, $a3
	addi.d	$s0, $a3, -1
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	move	$s7, $s5
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 200                   # 8-byte Folded Reload
	.p2align	4, , 16
.LBB61_79:                              #   Parent Loop BB61_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fs1, $s7, 0
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	move	$s2, $a0
	ori	$a1, $zero, 1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s2
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fsub.d	$fa0, $fs1, $fa0
	ld.bu	$a1, $s3, %pc_lo12(_ZL1D)
	ld.w	$a0, $fp, %pc_lo12(_ZL1S)
	fdiv.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $s7, 800
	maskeqz	$a2, $s6, $a1
	add.w	$a2, $a2, $a0
	addi.d	$s8, $s8, 1
	addi.d	$s7, $s7, 16
	addi.w	$s1, $s1, 1
	blt	$s8, $a2, .LBB61_79
# %bb.80:                               # %._crit_edge561
                                        #   in Loop: Header=BB61_77 Depth=1
	addi.d	$a3, $s4, 1
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	addi.d	$s8, $s8, 1
	addi.d	$s5, $s5, 800
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	addi.w	$s1, $s1, 1
	blt	$s4, $a2, .LBB61_77
.LBB61_81:                              # %.loopexit500
	blez	$a2, .LBB61_108
# %bb.82:                               # %.lr.ph597.preheader
	move	$s0, $zero
	move	$t1, $zero
	addi.d	$s2, $sp, 624
	lu12i.w	$a2, 4
	ori	$a2, $a2, 3048
	add.d	$t2, $sp, $a2
	ld.d	$a3, $sp, 176                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $t2, 3
	addi.d	$t3, $a2, 816
	ori	$t4, $zero, 2
	ori	$t5, $zero, 1
	addi.d	$s4, $zero, -1
	addi.d	$fp, $sp, 1016
	ori	$t6, $zero, 784
	slli.d	$t7, $a3, 3
	movgr2fr.d	$fs0, $zero
	ori	$s6, $zero, 392
	addi.d	$t8, $sp, 224
	ori	$ra, $zero, 12
	move	$s3, $fp
	ori	$s1, $zero, 1
	ori	$s8, $zero, 2
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	b	.LBB61_84
	.p2align	4, , 16
.LBB61_83:                              # %.loopexit496
                                        #   in Loop: Header=BB61_84 Depth=1
	addi.d	$s1, $s1, 1
	addi.d	$s8, $s8, 1
	addi.d	$s2, $s2, 392
	addi.d	$t1, $t1, 1
	addi.d	$t3, $t3, 800
	addi.d	$s3, $s3, 400
	addi.d	$s4, $s4, -1
	addi.d	$fp, $fp, 392
	addi.d	$s0, $s0, 8
.LBB61_84:                              # %.lr.ph597
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_86 Depth 2
                                        #     Child Loop BB61_96 Depth 2
                                        #     Child Loop BB61_92 Depth 2
                                        #       Child Loop BB61_93 Depth 3
	mul.d	$a2, $s1, $t6
	add.d	$s5, $t2, $a2
	alsl.d	$a2, $s1, $s5, 4
	fldx.d	$fa0, $a2, $t7
	bltu	$s1, $t4, .LBB61_87
# %bb.85:                               # %.lr.ph576
                                        #   in Loop: Header=BB61_84 Depth=1
	move	$a2, $t1
	move	$a3, $s2
	.p2align	4, , 16
.LBB61_86:                              #   Parent Loop BB61_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, 0
	fneg.d	$fa2, $fa1
	fmadd.d	$fa0, $fa2, $fa1, $fa0
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 8
	bnez	$a2, .LBB61_86
.LBB61_87:                              # %._crit_edge577
                                        #   in Loop: Header=BB61_84 Depth=1
	fcmp.cule.d	$fcc0, $fa0, $fs0
	bcnez	$fcc0, .LBB61_123
# %bb.88:                               #   in Loop: Header=BB61_84 Depth=1
	fsqrt.d	$fa1, $fa0
	fcmp.cor.d	$fcc0, $fa1, $fa1
	bceqz	$fcc0, .LBB61_97
.LBB61_89:                              # %.split
                                        #   in Loop: Header=BB61_84 Depth=1
	ld.d	$a0, $sp, 200                   # 8-byte Folded Reload
	ld.bu	$a1, $a0, %pc_lo12(_ZL1D)
	ld.d	$a0, $sp, 208                   # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZL1S)
	mul.d	$a3, $s1, $s6
	alsl.d	$a4, $s1, $t8, 3
	maskeqz	$a5, $ra, $a1
	add.w	$a2, $a5, $a0
	fstx.d	$fa1, $a4, $a3
	bge	$s1, $a2, .LBB61_109
# %bb.90:                               # %.lr.ph592
                                        #   in Loop: Header=BB61_84 Depth=1
	add.d	$a3, $a4, $a3
	bgeu	$t5, $s1, .LBB61_95
# %bb.91:                               # %.lr.ph582.us.preheader
                                        #   in Loop: Header=BB61_84 Depth=1
	ld.d	$a2, $sp, 176                   # 8-byte Folded Reload
	alsl.d	$a2, $a2, $s5, 3
	add.d	$a5, $a0, $a5
	addi.w	$a5, $a5, 1
	move	$a6, $fp
	move	$a7, $s8
	.p2align	4, , 16
.LBB61_92:                              # %.lr.ph582.us
                                        #   Parent Loop BB61_84 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_93 Depth 3
	slli.d	$t0, $a7, 4
	fldx.d	$fa0, $a2, $t0
	move	$t0, $zero
	.p2align	4, , 16
.LBB61_93:                              #   Parent Loop BB61_84 Depth=1
                                        #     Parent Loop BB61_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	fldx.d	$fa1, $a6, $t0
	fldx.d	$fa2, $s2, $t0
	fneg.d	$fa1, $fa1
	addi.d	$t0, $t0, 8
	fmadd.d	$fa0, $fa1, $fa2, $fa0
	bne	$s0, $t0, .LBB61_93
# %bb.94:                               # %._crit_edge583.us
                                        #   in Loop: Header=BB61_92 Depth=2
	fld.d	$fa1, $a3, 0
	fdiv.d	$fa0, $fa0, $fa1
	mul.d	$t0, $a7, $s6
	fstx.d	$fa0, $a4, $t0
	addi.d	$a7, $a7, 1
	addi.w	$t0, $a7, 0
	addi.d	$a6, $a6, 392
	bne	$a5, $t0, .LBB61_92
	b	.LBB61_83
.LBB61_95:                              # %.lr.ph592.split.preheader
                                        #   in Loop: Header=BB61_84 Depth=1
	add.d	$a2, $a2, $s4
	move	$a4, $s3
	move	$a5, $t3
	.p2align	4, , 16
.LBB61_96:                              # %.lr.ph592.split
                                        #   Parent Loop BB61_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa0, $a5, 0
	fld.d	$fa1, $a3, 0
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $a4, 0
	addi.d	$a5, $a5, 16
	addi.w	$a2, $a2, -1
	addi.d	$a4, $a4, 392
	bnez	$a2, .LBB61_96
	b	.LBB61_83
.LBB61_97:                              # %call.sqrt
                                        #   in Loop: Header=BB61_84 Depth=1
	st.d	$t1, $sp, 192                   # 8-byte Folded Spill
	st.d	$t3, $sp, 88                    # 8-byte Folded Spill
	st.d	$t7, $sp, 24                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(sqrt)
	jirl	$ra, $ra, 0
	ori	$ra, $zero, 12
	addi.d	$t8, $sp, 224
	ld.d	$t7, $sp, 24                    # 8-byte Folded Reload
	ori	$t6, $zero, 784
	ori	$t5, $zero, 1
	ori	$t4, $zero, 2
	ld.d	$t3, $sp, 88                    # 8-byte Folded Reload
	lu12i.w	$a0, 4
	ori	$a0, $a0, 3048
	add.d	$t2, $sp, $a0
	ld.d	$t1, $sp, 192                   # 8-byte Folded Reload
	fmov.d	$fa1, $fa0
	b	.LBB61_89
.LBB61_98:                              # %.loopexit506._crit_edge
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	ld.b	$a1, $a1, %pc_lo12(_ZL1D)
	ld.d	$s6, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	b	.LBB61_124
.LBB61_99:                              # %.preheader503
	blez	$a2, .LBB61_110
# %bb.100:                              # %.lr.ph556.preheader
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	move	$s7, $zero
	move	$s3, $zero
	ori	$a3, $zero, 1
	ori	$s6, $zero, 12
	b	.LBB61_102
	.p2align	4, , 16
.LBB61_101:                             # %.loopexit502
                                        #   in Loop: Header=BB61_102 Depth=1
	addi.d	$a3, $s8, 1
	andi	$a2, $a1, 1
	maskeqz	$a2, $s6, $a2
	add.w	$a2, $a2, $a0
	addi.d	$s5, $s5, 800
	addi.w	$s3, $s3, 1
	addi.d	$s7, $s7, 1
	bge	$s8, $a2, .LBB61_81
.LBB61_102:                             # %.lr.ph556
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_106 Depth 2
	addi.d	$a2, $a0, 1
	bstrpick.d	$a2, $a2, 31, 0
	move	$s8, $a3
	beq	$a3, $a2, .LBB61_101
# %bb.103:                              # %.preheader501
                                        #   in Loop: Header=BB61_102 Depth=1
	andi	$a2, $a1, 1
	maskeqz	$a2, $s6, $a2
	add.w	$a2, $a2, $a0
	blt	$a2, $s8, .LBB61_101
# %bb.104:                              # %.lr.ph543
                                        #   in Loop: Header=BB61_102 Depth=1
	addi.d	$s0, $s8, -1
	move	$fp, $s7
	move	$s1, $s3
	move	$s4, $s5
	b	.LBB61_106
	.p2align	4, , 16
.LBB61_105:                             #   in Loop: Header=BB61_106 Depth=2
	andi	$a2, $a1, 1
	maskeqz	$a2, $s6, $a2
	add.w	$a2, $a2, $a0
	addi.d	$s4, $s4, 16
	addi.w	$s1, $s1, 1
	bge	$fp, $a2, .LBB61_101
.LBB61_106:                             #   Parent Loop BB61_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$fp, $fp, 1
	addi.d	$a2, $a0, 1
	bstrpick.d	$a2, $a2, 31, 0
	beq	$fp, $a2, .LBB61_105
# %bb.107:                              #   in Loop: Header=BB61_106 Depth=2
	fld.d	$fs0, $s4, 0
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	move	$s2, $a0
	ori	$a1, $zero, 1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	mul.d	$a0, $a0, $s2
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	ld.d	$a0, $sp, 192                   # 8-byte Folded Reload
	fld.d	$fa1, $a0, %pc_lo12(.LCPI61_0)
	ld.d	$a0, $sp, 208                   # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(_ZL1S)
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	ld.b	$a1, $a1, %pc_lo12(_ZL1D)
	fsub.d	$fa0, $fs0, $fa0
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $s4, 800
	b	.LBB61_105
.LBB61_108:
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
.LBB61_109:                             # %.thread
	ld.d	$s4, $sp, 176                   # 8-byte Folded Reload
.LBB61_110:                             # %.thread
	ld.d	$fp, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	ldx.w	$a3, $fp, $a3
	addi.w	$a4, $a0, 1
	bge	$a4, $a3, .LBB61_123
# %bb.111:                              # %.preheader495
	blez	$a2, .LBB61_123
# %bb.112:                              # %.lr.ph612
	move	$a4, $zero
	lu12i.w	$a3, 4
	ori	$a3, $a3, 3048
	add.d	$a3, $sp, $a3
	alsl.d	$a3, $s4, $a3, 3
	addi.d	$a5, $a2, 1
	bstrpick.d	$a5, $a5, 31, 0
	addi.d	$a6, $sp, 624
	addi.d	$a7, $a3, 784
	ori	$t0, $zero, 1
	ori	$t1, $zero, 784
	ori	$t2, $zero, 2
	ori	$t3, $zero, 392
	addi.d	$t4, $sp, 224
	b	.LBB61_114
	.p2align	4, , 16
.LBB61_113:                             # %._crit_edge605
                                        #   in Loop: Header=BB61_114 Depth=1
	mul.d	$t6, $t0, $t3
	add.d	$t6, $t4, $t6
	slli.d	$t7, $t0, 3
	fldx.d	$fa1, $t6, $t7
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $t5, 0
	addi.d	$t0, $t0, 1
	addi.d	$a6, $a6, 392
	addi.d	$a4, $a4, 1
	beq	$t0, $a5, .LBB61_117
.LBB61_114:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_116 Depth 2
	slli.d	$t5, $t0, 4
	fldx.d	$fa0, $a3, $t5
	mul.d	$t6, $t0, $t1
	add.d	$t5, $a3, $t6
	fstx.d	$fa0, $a3, $t6
	bltu	$t0, $t2, .LBB61_113
# %bb.115:                              # %.lr.ph604
                                        #   in Loop: Header=BB61_114 Depth=1
	move	$t6, $a4
	move	$t7, $a7
	move	$t8, $a6
	.p2align	4, , 16
.LBB61_116:                             #   Parent Loop BB61_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $t8, 0
	fld.d	$fa2, $t7, 0
	fneg.d	$fa1, $fa1
	fmadd.d	$fa0, $fa1, $fa2, $fa0
	fst.d	$fa0, $t5, 0
	addi.d	$t8, $t8, 8
	addi.d	$t6, $t6, -1
	addi.d	$t7, $t7, 784
	bnez	$t6, .LBB61_116
	b	.LBB61_113
.LBB61_117:                             # %.preheader.lr.ph
	bstrpick.d	$t4, $a2, 31, 0
	ori	$a4, $zero, 784
	mul.d	$a5, $t4, $a4
	alsl.d	$a5, $s4, $a5, 3
	lu12i.w	$a6, 4
	ori	$a6, $a6, 3048
	add.d	$a6, $sp, $a6
	add.d	$a5, $a5, $a6
	addi.d	$a5, $a5, 784
	ori	$a6, $zero, 400
	mul.d	$a7, $t4, $a6
	addi.d	$a6, $sp, 224
	add.d	$a7, $a7, $a6
	addi.d	$a7, $a7, 392
	ori	$t0, $zero, 392
	ori	$t1, $zero, 1
	move	$t2, $a2
	b	.LBB61_120
.LBB61_118:                             # %.preheader.._crit_edge620_crit_edge
                                        #   in Loop: Header=BB61_120 Depth=1
	fldx.d	$fa0, $a3, $t4
.LBB61_119:                             # %._crit_edge620
                                        #   in Loop: Header=BB61_120 Depth=1
	mul.d	$t5, $t3, $t0
	add.d	$t5, $a6, $t5
	slli.d	$t6, $t3, 3
	fldx.d	$fa1, $t5, $t6
	fdiv.d	$fa0, $fa0, $fa1
	fstx.d	$fa0, $a3, $t4
	addi.d	$t4, $t3, -1
	addi.d	$t2, $t2, -1
	addi.d	$a5, $a5, -784
	addi.d	$a7, $a7, -400
	bge	$t1, $t3, .LBB61_123
.LBB61_120:                             # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_122 Depth 2
	move	$t3, $t4
	mul.d	$t4, $t4, $a4
	bge	$t3, $a2, .LBB61_118
# %bb.121:                              # %.lr.ph619
                                        #   in Loop: Header=BB61_120 Depth=1
	fldx.d	$fa0, $a3, $t4
	add.d	$t5, $a3, $t4
	move	$t6, $a7
	move	$t7, $a5
	move	$t8, $t2
	.p2align	4, , 16
.LBB61_122:                             #   Parent Loop BB61_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $t6, 0
	fld.d	$fa2, $t7, 0
	fneg.d	$fa1, $fa1
	fmadd.d	$fa0, $fa1, $fa2, $fa0
	fst.d	$fa0, $t5, 0
	addi.w	$t8, $t8, 1
	addi.d	$t7, $t7, 784
	addi.d	$t6, $t6, 392
	blt	$t8, $a2, .LBB61_122
	b	.LBB61_119
.LBB61_123:                             # %.loopexit
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	st.w	$zero, $a2, 0
	ld.d	$s6, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s8, $sp, 208                   # 8-byte Folded Reload
.LBB61_124:
	andi	$a1, $a1, 1
	ori	$fp, $zero, 12
	maskeqz	$a1, $fp, $a1
	add.w	$a0, $a1, $a0
	blez	$a0, .LBB61_128
# %bb.125:                              # %.lr.ph633.preheader
	move	$s1, $zero
	lu12i.w	$a0, 4
	ori	$a0, $a0, 3048
	add.d	$a0, $sp, $a0
	alsl.d	$a0, $s4, $a0, 3
	addi.d	$s2, $a0, 784
	movgr2fr.d	$fa0, $zero
	ori	$s0, $zero, 1
	.p2align	4, , 16
.LBB61_126:                             # %.lr.ph633
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $sp, 208                  # 16-byte Folded Spill
	fld.d	$fs0, $s2, 0
	move	$a0, $s0
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_Z1Xii)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $a0
	ld.d	$a0, $sp, 200                   # 8-byte Folded Reload
	ld.bu	$a0, $a0, %pc_lo12(_ZL1D)
	ld.w	$a1, $s8, %pc_lo12(_ZL1S)
	ffint.d.w	$fa0, $fa0
	vld	$vr1, $sp, 208                  # 16-byte Folded Reload
	fmadd.d	$fa1, $fs0, $fa0, $fa1
	vst	$vr1, $sp, 208                  # 16-byte Folded Spill
	vld	$vr0, $sp, 208                  # 16-byte Folded Reload
	maskeqz	$a0, $fp, $a0
	add.w	$a0, $a0, $a1
	addi.d	$s1, $s1, 1
	addi.w	$s0, $s0, 1
	addi.d	$s2, $s2, 784
	blt	$s1, $a0, .LBB61_126
# %bb.127:                              # %._crit_edge634.loopexit
	vreplvei.d	$vr0, $vr0, 0
	vfrintrm.d	$vr0, $vr0
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	b	.LBB61_129
.LBB61_128:
	move	$a1, $zero
.LBB61_129:                             # %._crit_edge634
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE2pr)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE2pr)
	alsl.d	$a4, $s4, $a0, 2
	ld.w	$a5, $a4, 16
	ld.w	$a2, $a4, 8
	ld.d	$a7, $sp, 64                    # 8-byte Folded Reload
	ldx.w	$a3, $a0, $a7
	st.w	$a5, $a4, 24
	ld.d	$a6, $sp, 72                    # 8-byte Folded Reload
	ldx.w	$a5, $a6, $a7
	st.w	$a2, $a4, 16
	st.w	$a3, $a4, 8
	stx.w	$a1, $a0, $a7
	addi.d	$a0, $a5, 1
	ld.d	$s8, $sp, 184                   # 8-byte Folded Reload
	ld.w	$a4, $s8, %pc_lo12(pos)
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a5, $ra, 0
	stx.w	$a0, $a6, $a7
	ld.d	$a0, $ra, 16
	addi.w	$a4, $a4, -1
	addi.w	$a5, $a5, -1
	and	$a4, $a5, $a4
	ldx.bu	$a6, $a0, $a4
	lu12i.w	$a4, 7325
	ori	$a4, $a4, 2291
	mul.d	$a7, $a6, $a4
	lu12i.w	$a5, 12208
	ori	$t3, $a5, 271
	mul.d	$a5, $s3, $t3
	add.w	$a7, $a5, $a7
	lu12i.w	$t0, 4881
	ori	$t0, $t0, 3097
	add.d	$a7, $a7, $t0
	bstrpick.d	$t0, $a7, 31, 9
	srli.d	$t1, $a6, 3
	bstrpick.d	$a6, $s3, 31, 4
	xor	$t0, $t1, $t0
	xor	$t0, $t0, $a6
	ld.w	$t4, $s6, 136
	xor	$t0, $t0, $a7
	lu12i.w	$a7, 16384
	xor	$t1, $t0, $a7
	addi.d	$t0, $t4, 1
	st.w	$t0, $s6, 136
	lu12i.w	$t0, 241126
	ori	$t0, $t0, 2227
	mul.d	$t1, $t1, $t0
	add.d	$t1, $t1, $t4
	rotri.w	$t5, $t1, 16
	lu12i.w	$t1, 30140
	ori	$t1, $t1, 3351
	ld.d	$t2, $s6, 96
	mul.d	$t5, $t5, $t1
	add.d	$t5, $t5, $t4
	slli.d	$t4, $t4, 2
	stx.w	$t5, $t2, $t4
	ld.w	$t4, $s8, %pc_lo12(pos)
	ld.w	$t5, $ra, 0
	addi.w	$t6, $t4, -1
	addi.w	$t5, $t5, -1
	and	$t6, $t5, $t6
	ldx.bu	$t6, $a0, $t6
	addi.w	$t4, $t4, -2
	and	$t4, $t5, $t4
	ldx.bu	$t4, $a0, $t4
	mul.d	$t8, $t6, $a4
	mul.d	$fp, $t4, $t3
	lu12i.w	$t5, 17091
	ori	$t7, $t5, 71
	mul.d	$t5, $s3, $t7
	add.d	$t8, $t5, $t8
	add.w	$t8, $t8, $fp
	lu12i.w	$fp, 70801
	ori	$fp, $fp, 2563
	add.d	$t8, $t8, $fp
	bstrpick.d	$fp, $t8, 31, 9
	srli.d	$t6, $t6, 3
	srli.d	$s0, $t4, 4
	bstrpick.d	$t4, $s3, 31, 5
	xor	$t6, $t6, $s0
	xor	$t6, $t6, $fp
	xor	$t6, $t6, $t4
	xor	$t8, $t6, $t8
	ld.w	$fp, $s6, 136
	lu12i.w	$t6, 16383
	ori	$t6, $t6, 4095
	xor	$t8, $t8, $t6
	addi.d	$s0, $fp, 1
	st.w	$s0, $s6, 136
	mul.d	$t8, $t8, $t0
	add.d	$t8, $t8, $fp
	rotri.w	$t8, $t8, 16
	mul.d	$t8, $t8, $t1
	add.d	$t8, $t8, $fp
	slli.d	$fp, $fp, 2
	stx.w	$t8, $t2, $fp
	ld.w	$t8, $ra, 0
	ld.w	$fp, $s8, %pc_lo12(pos)
	bstrpick.d	$s0, $s3, 31, 6
	addi.w	$t8, $t8, -1
	addi.w	$s1, $fp, -2
	and	$s1, $t8, $s1
	ldx.bu	$s1, $a0, $s1
	addi.w	$s2, $fp, -1
	and	$s2, $t8, $s2
	ldx.bu	$s2, $a0, $s2
	move	$s4, $s3
	srli.d	$s3, $s1, 3
	addi.w	$fp, $fp, -3
	and	$t8, $t8, $fp
	ldx.bu	$t8, $a0, $t8
	lu12i.w	$fp, 26856
	ori	$fp, $fp, 323
	mul.d	$fp, $s4, $fp
	mul.d	$s4, $s2, $a4
	mul.d	$s3, $s3, $t3
	mul.d	$t7, $t8, $t7
	add.d	$fp, $fp, $s4
	add.d	$fp, $fp, $s3
	add.w	$t7, $fp, $t7
	lu12i.w	$fp, 146486
	ori	$fp, $fp, 2281
	add.d	$t7, $t7, $fp
	bstrpick.d	$fp, $t7, 31, 9
	srli.d	$s2, $s2, 3
	srli.d	$s1, $s1, 7
	srli.d	$t8, $t8, 5
	bstrpick.d	$s0, $s0, 57, 0
	xor	$s0, $s2, $s0
	xor	$s0, $s0, $s1
	ld.w	$s1, $s6, 136
	xor	$t8, $s0, $t8
	xor	$t8, $t8, $fp
	xor	$t7, $t8, $t7
	addi.d	$t8, $s1, 1
	st.w	$t8, $s6, 136
	mul.d	$t7, $t7, $t0
	add.d	$t7, $t7, $s1
	rotri.w	$t7, $t7, 16
	mul.d	$t7, $t7, $t1
	add.d	$t7, $t7, $s1
	slli.d	$t8, $s1, 2
	stx.w	$t7, $t2, $t8
	ld.w	$t7, $s8, %pc_lo12(pos)
	ld.w	$t8, $ra, 0
	addi.w	$fp, $t7, -4
	addi.w	$t8, $t8, -1
	and	$fp, $t8, $fp
	ldx.b	$fp, $a0, $fp
	addi.w	$s0, $t7, -2
	and	$s0, $t8, $s0
	ldx.b	$s0, $a0, $s0
	addi.w	$t7, $t7, -6
	and	$t7, $t8, $t7
	ldx.b	$t7, $a0, $t7
	add.d	$t8, $s0, $fp
	sub.d	$t7, $t8, $t7
	andi	$t8, $t7, 255
	mul.d	$t8, $t8, $a4
	add.w	$t8, $a5, $t8
	lu12i.w	$fp, 151368
	ori	$fp, $fp, 1282
	add.d	$t8, $t8, $fp
	bstrpick.d	$fp, $t8, 31, 9
	bstrpick.d	$t7, $t7, 7, 3
	xor	$t7, $t7, $fp
	xor	$t7, $t7, $a6
	ld.w	$fp, $s6, 136
	xor	$t7, $t7, $t8
	ori	$t8, $a7, 1
	xor	$t7, $t7, $t8
	addi.d	$s0, $fp, 1
	st.w	$s0, $s6, 136
	mul.d	$t7, $t7, $t0
	add.d	$t7, $t7, $fp
	rotri.w	$t7, $t7, 16
	mul.d	$t7, $t7, $t1
	add.d	$t7, $t7, $fp
	slli.d	$fp, $fp, 2
	stx.w	$t7, $t2, $fp
	andi	$t7, $a1, 255
	mul.d	$s0, $t7, $a4
	add.w	$t7, $a5, $s0
	lu12i.w	$fp, 200197
	ori	$fp, $fp, 677
	add.d	$t7, $t7, $fp
	bstrpick.d	$s1, $t7, 31, 9
	bstrpick.d	$fp, $a1, 7, 3
	xori	$fp, $fp, 1
	xor	$s1, $fp, $s1
	ld.w	$s2, $s6, 136
	xor	$s1, $s1, $a6
	xor	$t7, $s1, $t7
	xor	$t7, $t7, $a7
	addi.d	$s1, $s2, 1
	st.w	$s1, $s6, 136
	mul.d	$t7, $t7, $t0
	add.d	$t7, $s2, $t7
	rotri.w	$t7, $t7, 16
	mul.d	$t7, $t7, $t1
	add.d	$t7, $t7, $s2
	slli.d	$s1, $s2, 2
	stx.w	$t7, $t2, $s1
	ld.d	$t7, $sp, 40                    # 8-byte Folded Reload
	ld.w	$t7, $t7, %pc_lo12(_ZZ8wavModelR5MixerE1w)
	ld.w	$s1, $s8, %pc_lo12(pos)
	ld.w	$s2, $ra, 0
	sub.w	$s1, $s1, $t7
	addi.w	$s2, $s2, -1
	and	$s1, $s2, $s1
	ldx.b	$s1, $a0, $s1
	sub.w	$s2, $a1, $a3
	add.d	$s1, $s1, $s2
	andi	$s2, $s1, 255
	mul.d	$s2, $s2, $a4
	add.w	$s2, $a5, $s2
	lu12i.w	$s3, 249026
	ori	$s3, $s3, 72
	add.d	$s2, $s2, $s3
	bstrpick.d	$s3, $s2, 31, 9
	bstrpick.d	$s1, $s1, 7, 3
	xor	$s1, $s1, $s3
	ld.w	$s3, $s6, 136
	xor	$s1, $s1, $a6
	xor	$s1, $s1, $s2
	xor	$t8, $s1, $t8
	addi.d	$s1, $s3, 1
	st.w	$s1, $s6, 136
	mul.d	$t8, $t8, $t0
	add.d	$t8, $t8, $s3
	rotri.w	$t8, $t8, 16
	mul.d	$t8, $t8, $t1
	add.d	$t8, $t8, $s3
	slli.d	$s1, $s3, 2
	stx.w	$t8, $t2, $s1
	ld.w	$s1, $s8, %pc_lo12(pos)
	ld.w	$t8, $ra, 0
	sub.w	$s2, $s1, $t7
	addi.w	$s3, $t8, -1
	and	$s4, $s3, $s2
	addi.w	$t8, $s2, 1
	and	$s2, $s3, $t8
	slli.d	$t8, $t7, 1
	sub.w	$s1, $s1, $t8
	and	$s5, $s3, $s1
	addi.w	$s1, $s1, 1
	and	$s1, $s3, $s1
	ldx.bu	$s2, $a0, $s2
	ldx.bu	$s3, $a0, $s4
	ldx.b	$s1, $a0, $s1
	ldx.bu	$s4, $a0, $s5
	slli.d	$s2, $s2, 8
	or	$s2, $s2, $s3
	slli.d	$s1, $s1, 8
	or	$s1, $s1, $s4
	add.d	$s3, $a3, $a2
	sub.d	$s2, $s2, $s3
	add.d	$s1, $s2, $s1
	bstrpick.d	$s2, $s1, 8, 1
	mul.d	$t3, $s2, $t3
	add.d	$t5, $t5, $s0
	add.w	$t3, $t5, $t3
	lu12i.w	$t5, 314945
	ori	$t5, $t5, 3634
	add.d	$t3, $t3, $t5
	bstrpick.d	$t5, $t3, 31, 9
	bstrpick.d	$s0, $s1, 8, 5
	xor	$t5, $s0, $t5
	xor	$t5, $t5, $fp
	ld.w	$fp, $s6, 136
	xor	$t4, $t5, $t4
	xor	$t3, $t4, $t3
	xor	$t3, $t3, $t6
	addi.d	$t4, $fp, 1
	st.w	$t4, $s6, 136
	mul.d	$t3, $t3, $t0
	add.d	$t3, $t3, $fp
	rotri.w	$t3, $t3, 16
	mul.d	$t3, $t3, $t1
	add.d	$t3, $t3, $fp
	slli.d	$t4, $fp, 2
	stx.w	$t3, $t2, $t4
	ld.w	$t3, $s8, %pc_lo12(pos)
	ld.w	$t4, $ra, 0
	sub.w	$t5, $t3, $t7
	addi.w	$t4, $t4, -1
	and	$t5, $t4, $t5
	ldx.b	$t5, $a0, $t5
	sub.w	$t3, $t3, $t8
	and	$t3, $t4, $t3
	ldx.b	$t3, $a0, $t3
	sub.d	$a3, $t5, $a3
	add.d	$a1, $a2, $a1
	sub.d	$a1, $a1, $t3
	alsl.d	$a1, $a3, $a1, 1
	andi	$a2, $a1, 255
	mul.d	$a2, $a2, $a4
	add.w	$a2, $a5, $a2
	lu12i.w	$a3, 346683
	ori	$a3, $a3, 2958
	add.d	$a2, $a2, $a3
	bstrpick.d	$a3, $a2, 31, 9
	bstrpick.d	$a1, $a1, 7, 3
	xor	$a1, $a1, $a3
	xor	$a1, $a1, $a6
	ld.w	$a3, $s6, 136
	xor	$a1, $a1, $a2
	ori	$a2, $a7, 2
	xor	$a1, $a1, $a2
	addi.d	$a2, $a3, 1
	st.w	$a2, $s6, 136
	mul.d	$a1, $a1, $t0
	add.d	$a1, $a1, $a3
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $t1
	add.d	$a1, $a1, $a3
	slli.d	$a2, $a3, 2
	stx.w	$a1, $t2, $a2
	ld.w	$a1, $s8, %pc_lo12(pos)
	move	$s8, $ra
	ld.w	$a2, $ra, 0
	sub.w	$a3, $a1, $t7
	addi.w	$a2, $a2, -1
	and	$a4, $a2, $a3
	ldx.bu	$a5, $a0, $a4
	addi.w	$a3, $a3, 1
	and	$a3, $a2, $a3
	ldx.b	$a6, $a0, $a3
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a7, $s5, 0
	bstrins.d	$a5, $a6, 8, 8
	slli.d	$a5, $a5, 8
	addu16i.d	$a6, $a7, 2
	addi.d	$a6, $a6, -256
	and	$a5, $a5, $a6
	st.w	$a5, $s5, 24
	sub.w	$a5, $a1, $t8
	and	$a6, $a2, $a5
	addi.w	$a5, $a5, 1
	and	$a5, $a2, $a5
	ldx.b	$a7, $a0, $a5
	ldx.bu	$t0, $a0, $a6
	ldx.b	$t1, $a0, $a4
	slli.d	$a7, $a7, 16
	slli.d	$t0, $t0, 8
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	ld.w	$t2, $ra, 0
	or	$a7, $a7, $t0
	slli.d	$t0, $t1, 9
	sub.d	$a7, $t0, $a7
	addu16i.d	$t0, $t2, 2
	addi.d	$t0, $t0, -256
	and	$a7, $t0, $a7
	lu12i.w	$t0, 31
	ori	$t0, $t0, 3840
	and	$a7, $a7, $t0
	st.w	$a7, $ra, 24
	ldx.bu	$a3, $a0, $a3
	ldx.bu	$a4, $a0, $a4
	ldx.bu	$a5, $a0, $a5
	ldx.bu	$a6, $a0, $a6
	slli.d	$a3, $a3, 8
	or	$a3, $a3, $a4
	slli.d	$a4, $a5, 8
	or	$a4, $a4, $a6
	ori	$a5, $zero, 509
	mul.d	$a4, $a4, $a5
	alsl.d	$a5, $t7, $t7, 1
	sub.w	$a1, $a1, $a5
	and	$a5, $a2, $a1
	addi.w	$a1, $a1, 1
	and	$a1, $a2, $a1
	ldx.bu	$a1, $a0, $a1
	ldx.bu	$a0, $a0, $a5
	alsl.d	$a2, $a3, $a3, 1
	add.d	$a2, $a4, $a2
	slli.d	$a1, $a1, 8
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.w	$a3, $s4, 0
	or	$a0, $a1, $a0
	add.d	$a0, $a2, $a0
	slli.d	$a0, $a0, 8
	addu16i.d	$a1, $a3, 2
	addi.d	$a1, $a1, -256
	and	$a0, $a1, $a0
	and	$a0, $a0, $t0
	st.w	$a0, $s4, 24
	ld.d	$s0, $sp, 160                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
.LBB61_130:
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
.LBB61_131:
	ld.d	$a0, $s5, 32
	pcalau12i	$a1, %pc_hi20(y)
	ld.w	$a5, $a1, %pc_lo12(y)
	ld.hu	$a3, $a0, 0
	slli.d	$a1, $a5, 16
	addi.d	$a1, $a1, 64
	sub.d	$a2, $a1, $a3
	srli.d	$a4, $a2, 7
	ld.w	$a6, $s5, 24
	pcalau12i	$a2, %pc_hi20(c0)
	ld.w	$a2, $a2, %pc_lo12(c0)
	add.d	$a3, $a3, $a4
	ld.d	$a7, $s5, 16
	st.h	$a3, $a0, 0
	add.w	$t0, $a2, $a6
	slli.d	$a0, $t0, 1
	ldx.hu	$a3, $a7, $a0
	pcalau12i	$a0, %pc_hi20(stretch+16)
	ld.d	$a0, $a0, %pc_lo12(stretch+16)
	srli.d	$a4, $a3, 3
	lu12i.w	$a3, 1
	ori	$a3, $a3, 4094
	and	$a4, $a4, $a3
	ldx.h	$a6, $a0, $a4
	ld.w	$a4, $s7, 96
	ld.d	$t3, $s7, 32
	ld.d	$t2, $ra, 32
	slli.d	$t1, $a4, 1
	stx.h	$a6, $t3, $t1
	ld.hu	$a6, $t2, 0
	sub.d	$t1, $a1, $a6
	srli.d	$t1, $t1, 7
	ld.w	$t4, $ra, 24
	add.d	$a6, $a6, $t1
	ld.d	$t1, $ra, 16
	st.h	$a6, $t2, 0
	add.w	$t2, $t4, $a2
	slli.d	$a6, $t2, 1
	ldx.hu	$a6, $t1, $a6
	srli.d	$a6, $a6, 3
	and	$a6, $a6, $a3
	ldx.h	$t4, $a0, $a6
	ld.d	$t5, $s4, 32
	alsl.d	$a6, $a4, $t3, 1
	st.h	$t4, $a6, 2
	ld.hu	$t3, $t5, 0
	sub.d	$t4, $a1, $t3
	srli.d	$t4, $t4, 7
	ld.w	$t6, $s4, 24
	add.d	$t3, $t3, $t4
	ld.d	$t4, $s4, 16
	st.h	$t3, $t5, 0
	add.w	$t3, $t6, $a2
	slli.d	$t5, $t3, 1
	ldx.hu	$t5, $t4, $t5
	srli.d	$t5, $t5, 3
	and	$t5, $t5, $a3
	ldx.h	$t5, $a0, $t5
	ld.d	$t6, $s2, 32
	st.h	$t5, $a6, 4
	ld.hu	$t5, $t6, 0
	sub.d	$t7, $a1, $t5
	srli.d	$t7, $t7, 7
	ld.w	$t8, $s2, 24
	add.d	$t5, $t5, $t7
	ld.d	$t7, $s2, 16
	st.h	$t5, $t6, 0
	add.w	$t5, $t8, $a2
	slli.d	$t6, $t5, 1
	ldx.hu	$t6, $t7, $t6
	srli.d	$t6, $t6, 3
	and	$t6, $t6, $a3
	ldx.h	$t6, $a0, $t6
	ld.d	$t8, $s3, 32
	alsl.d	$a7, $t0, $a7, 1
	st.h	$t6, $a6, 6
	ld.hu	$t0, $t8, 0
	st.d	$a7, $s5, 32
	alsl.d	$a7, $t2, $t1, 1
	st.d	$a7, $ra, 32
	sub.d	$a7, $a1, $t0
	srli.d	$a7, $a7, 7
	ld.w	$t1, $s3, 24
	add.d	$a7, $t0, $a7
	ld.d	$t0, $s3, 16
	st.h	$a7, $t8, 0
	add.w	$a7, $t1, $a2
	slli.d	$t1, $a7, 1
	ldx.hu	$t1, $t0, $t1
	alsl.d	$t2, $t3, $t4, 1
	st.d	$t2, $s4, 32
	alsl.d	$t2, $t5, $t7, 1
	srli.d	$t1, $t1, 3
	and	$t1, $t1, $a3
	ldx.h	$t1, $a0, $t1
	st.d	$t2, $s2, 32
	alsl.d	$a7, $a7, $t0, 1
	st.d	$a7, $s3, 32
	st.h	$t1, $a6, 8
	pcalau12i	$a7, %pc_hi20(_ZZ8wavModelR5MixerE4scm6)
	addi.d	$a7, $a7, %pc_lo12(_ZZ8wavModelR5MixerE4scm6)
	ld.d	$t0, $a7, 32
	ld.hu	$t1, $t0, 0
	sub.d	$t2, $a1, $t1
	srli.d	$t2, $t2, 7
	ld.w	$t3, $a7, 24
	add.d	$t1, $t1, $t2
	ld.d	$t2, $a7, 16
	st.h	$t1, $t0, 0
	add.w	$t0, $t3, $a2
	slli.d	$t1, $t0, 1
	ldx.hu	$t1, $t2, $t1
	srli.d	$t1, $t1, 3
	and	$t1, $t1, $a3
	ldx.h	$t1, $a0, $t1
	ld.d	$t3, $s1, 32
	st.h	$t1, $a6, 10
	ld.hu	$t1, $t3, 0
	sub.d	$t4, $a1, $t1
	srli.d	$t4, $t4, 7
	ld.w	$t5, $s1, 24
	add.d	$t1, $t1, $t4
	ld.d	$t4, $s1, 16
	st.h	$t1, $t3, 0
	add.w	$t1, $t5, $a2
	slli.d	$t3, $t1, 1
	ldx.hu	$t3, $t4, $t3
	srli.d	$t3, $t3, 3
	and	$t3, $t3, $a3
	ldx.h	$t3, $a0, $t3
	ld.d	$t5, $fp, 32
	st.h	$t3, $a6, 12
	ld.hu	$t3, $t5, 0
	alsl.d	$t0, $t0, $t2, 1
	st.d	$t0, $a7, 32
	sub.d	$a1, $a1, $t3
	srli.d	$a1, $a1, 7
	ld.w	$a7, $fp, 24
	add.d	$a1, $t3, $a1
	ld.d	$t0, $fp, 16
	st.h	$a1, $t5, 0
	add.w	$a1, $a7, $a2
	slli.d	$a7, $a1, 1
	ldx.hu	$a7, $t0, $a7
	alsl.d	$t1, $t1, $t4, 1
	st.d	$t1, $s1, 32
	alsl.d	$a1, $a1, $t0, 1
	srli.d	$a7, $a7, 3
	and	$a3, $a7, $a3
	ldx.h	$a0, $a0, $a3
	st.d	$a1, $fp, 32
	addi.d	$a1, $a4, 8
	st.w	$a1, $s7, 96
	st.h	$a0, $a6, 14
	ld.d	$a0, $sp, 184                   # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(pos)
	ld.w	$a1, $s8, 0
	ld.w	$a3, $s0, %pc_lo12(bpos)
	ld.d	$a4, $s8, 16
	addi.w	$a0, $a0, -1
	addi.w	$a1, $a1, -1
	and	$a0, $a1, $a0
	ldx.bu	$a4, $a4, $a0
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE2cm)
	move	$a1, $s7
	pcaddu18i	$ra, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(_ZZ8wavModelR5MixerE8channels)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4bits)
	ld.w	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4bits)
	slli.w	$a0, $a0, 8
	or	$a0, $a0, $a1
.LBB61_132:
	lu12i.w	$a1, 13
	ori	$a1, $a1, 2672
	add.d	$sp, $sp, $a1
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.LBB61_133:                             # %vector.body.preheader
	lu12i.w	$a0, 4
	ori	$a0, $a0, 3848
	add.d	$a0, $sp, $a0
	vreplgr2vr.d	$vr0, $a2
	.p2align	4, , 16
.LBB61_134:                             # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$a0, $a0, 32
	b	.LBB61_134
.LBB61_135:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE1K)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE1K)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_1
# %bb.136:
	pcalau12i	$a0, %pc_hi20(level)
	ld.w	$a0, $a0, %pc_lo12(level)
	addi.d	$a0, $a0, -1
	ori	$a1, $zero, 128
	srl.w	$a0, $a1, $a0
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE1K)
	st.w	$a0, $a1, %pc_lo12(_ZZ8wavModelR5MixerE1K)
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE1K)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE1K)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_1
.LBB61_137:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm1)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm1)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_2
# %bb.138:
.Ltmp249:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm1)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp250:                               # EH_LABEL
# %bb.139:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm1)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm1)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm1)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm1)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_2
.LBB61_140:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm2)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm2)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_3
# %bb.141:
.Ltmp252:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm2)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm2)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp253:                               # EH_LABEL
# %bb.142:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm2)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm2)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm2)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm2)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_3
.LBB61_143:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm3)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm3)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_4
# %bb.144:
.Ltmp255:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm3)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm3)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp256:                               # EH_LABEL
# %bb.145:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm3)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm3)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm3)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm3)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_4
.LBB61_146:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm4)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm4)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_5
# %bb.147:
.Ltmp258:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm4)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm4)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp259:                               # EH_LABEL
# %bb.148:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm4)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm4)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm4)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm4)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_5
.LBB61_149:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm5)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm5)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_6
# %bb.150:
.Ltmp261:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm5)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm5)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp262:                               # EH_LABEL
# %bb.151:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm5)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm5)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm5)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm5)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_6
.LBB61_152:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm6)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm6)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_7
# %bb.153:
.Ltmp264:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm6)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm6)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp265:                               # EH_LABEL
# %bb.154:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm6)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm6)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm6)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm6)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_7
.LBB61_155:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm7)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm7)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_8
# %bb.156:
.Ltmp267:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm7)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm7)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp268:                               # EH_LABEL
# %bb.157:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm7)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm7)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm7)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm7)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_8
.LBB61_158:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm8)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm8)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_9
# %bb.159:
.Ltmp270:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE4scm8)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE4scm8)
	lu12i.w	$a1, 32
	pcaddu18i	$ra, %call36(_ZN25SmallStationaryContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp271:                               # EH_LABEL
# %bb.160:
	pcalau12i	$a0, %pc_hi20(_ZN25SmallStationaryContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN25SmallStationaryContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE4scm8)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE4scm8)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE4scm8)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE4scm8)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_9
.LBB61_161:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE2cm)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE2cm)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB61_10
# %bb.162:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 64
	sll.w	$a1, $a1, $a0
.Ltmp273:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8wavModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8wavModelR5MixerE2cm)
	ori	$a2, $zero, 10
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp274:                               # EH_LABEL
# %bb.163:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8wavModelR5MixerE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8wavModelR5MixerE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8wavModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8wavModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB61_10
.LBB61_164:
.Ltmp275:                               # EH_LABEL
	b	.LBB61_173
.LBB61_165:
.Ltmp272:                               # EH_LABEL
	b	.LBB61_173
.LBB61_166:
.Ltmp269:                               # EH_LABEL
	b	.LBB61_173
.LBB61_167:
.Ltmp266:                               # EH_LABEL
	b	.LBB61_173
.LBB61_168:
.Ltmp263:                               # EH_LABEL
	b	.LBB61_173
.LBB61_169:
.Ltmp260:                               # EH_LABEL
	b	.LBB61_173
.LBB61_170:
.Ltmp257:                               # EH_LABEL
	b	.LBB61_173
.LBB61_171:
.Ltmp254:                               # EH_LABEL
	b	.LBB61_173
.LBB61_172:
.Ltmp251:                               # EH_LABEL
.LBB61_173:
	move	$fp, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end61:
	.size	_Z8wavModelR5Mixer, .Lfunc_end61-_Z8wavModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table61:
.Lexception11:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end11-.Lcst_begin11
.Lcst_begin11:
	.uleb128 .Lfunc_begin11-.Lfunc_begin11  # >> Call Site 1 <<
	.uleb128 .Ltmp249-.Lfunc_begin11        #   Call between .Lfunc_begin11 and .Ltmp249
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp249-.Lfunc_begin11        # >> Call Site 2 <<
	.uleb128 .Ltmp250-.Ltmp249              #   Call between .Ltmp249 and .Ltmp250
	.uleb128 .Ltmp251-.Lfunc_begin11        #     jumps to .Ltmp251
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp250-.Lfunc_begin11        # >> Call Site 3 <<
	.uleb128 .Ltmp252-.Ltmp250              #   Call between .Ltmp250 and .Ltmp252
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp252-.Lfunc_begin11        # >> Call Site 4 <<
	.uleb128 .Ltmp253-.Ltmp252              #   Call between .Ltmp252 and .Ltmp253
	.uleb128 .Ltmp254-.Lfunc_begin11        #     jumps to .Ltmp254
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp253-.Lfunc_begin11        # >> Call Site 5 <<
	.uleb128 .Ltmp255-.Ltmp253              #   Call between .Ltmp253 and .Ltmp255
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp255-.Lfunc_begin11        # >> Call Site 6 <<
	.uleb128 .Ltmp256-.Ltmp255              #   Call between .Ltmp255 and .Ltmp256
	.uleb128 .Ltmp257-.Lfunc_begin11        #     jumps to .Ltmp257
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp256-.Lfunc_begin11        # >> Call Site 7 <<
	.uleb128 .Ltmp258-.Ltmp256              #   Call between .Ltmp256 and .Ltmp258
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp258-.Lfunc_begin11        # >> Call Site 8 <<
	.uleb128 .Ltmp259-.Ltmp258              #   Call between .Ltmp258 and .Ltmp259
	.uleb128 .Ltmp260-.Lfunc_begin11        #     jumps to .Ltmp260
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp259-.Lfunc_begin11        # >> Call Site 9 <<
	.uleb128 .Ltmp261-.Ltmp259              #   Call between .Ltmp259 and .Ltmp261
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp261-.Lfunc_begin11        # >> Call Site 10 <<
	.uleb128 .Ltmp262-.Ltmp261              #   Call between .Ltmp261 and .Ltmp262
	.uleb128 .Ltmp263-.Lfunc_begin11        #     jumps to .Ltmp263
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp262-.Lfunc_begin11        # >> Call Site 11 <<
	.uleb128 .Ltmp264-.Ltmp262              #   Call between .Ltmp262 and .Ltmp264
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp264-.Lfunc_begin11        # >> Call Site 12 <<
	.uleb128 .Ltmp265-.Ltmp264              #   Call between .Ltmp264 and .Ltmp265
	.uleb128 .Ltmp266-.Lfunc_begin11        #     jumps to .Ltmp266
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp265-.Lfunc_begin11        # >> Call Site 13 <<
	.uleb128 .Ltmp267-.Ltmp265              #   Call between .Ltmp265 and .Ltmp267
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp267-.Lfunc_begin11        # >> Call Site 14 <<
	.uleb128 .Ltmp268-.Ltmp267              #   Call between .Ltmp267 and .Ltmp268
	.uleb128 .Ltmp269-.Lfunc_begin11        #     jumps to .Ltmp269
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp268-.Lfunc_begin11        # >> Call Site 15 <<
	.uleb128 .Ltmp270-.Ltmp268              #   Call between .Ltmp268 and .Ltmp270
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp270-.Lfunc_begin11        # >> Call Site 16 <<
	.uleb128 .Ltmp271-.Ltmp270              #   Call between .Ltmp270 and .Ltmp271
	.uleb128 .Ltmp272-.Lfunc_begin11        #     jumps to .Ltmp272
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp271-.Lfunc_begin11        # >> Call Site 17 <<
	.uleb128 .Ltmp273-.Ltmp271              #   Call between .Ltmp271 and .Ltmp273
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp273-.Lfunc_begin11        # >> Call Site 18 <<
	.uleb128 .Ltmp274-.Ltmp273              #   Call between .Ltmp273 and .Ltmp274
	.uleb128 .Ltmp275-.Lfunc_begin11        #     jumps to .Ltmp275
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp274-.Lfunc_begin11        # >> Call Site 19 <<
	.uleb128 .Lfunc_end61-.Ltmp274          #   Call between .Ltmp274 and .Lfunc_end61
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end11:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z1Xii,"axG",@progbits,_Z1Xii,comdat
	.weak	_Z1Xii                          # -- Begin function _Z1Xii
	.p2align	5
	.type	_Z1Xii,@function
_Z1Xii:                                 # @_Z1Xii
	.cfi_startproc
# %bb.0:
	pcalau12i	$a2, %pc_hi20(_ZL5wmode)
	ld.w	$a2, $a2, %pc_lo12(_ZL5wmode)
	ori	$a3, $zero, 10
	beq	$a2, $a3, .LBB62_6
# %bb.1:
	ori	$a3, $zero, 17
	beq	$a2, $a3, .LBB62_5
# %bb.2:
	ori	$a3, $zero, 18
	bne	$a2, $a3, .LBB62_8
# %bb.3:
	pcalau12i	$a2, %pc_hi20(_ZL1S)
	ld.w	$a2, $a2, %pc_lo12(_ZL1S)
	add.d	$a1, $a1, $a0
	bge	$a2, $a0, .LBB62_11
# %bb.4:
	pcalau12i	$a0, %pc_hi20(pos)
	ld.w	$a0, $a0, %pc_lo12(pos)
	sub.w	$a1, $a2, $a1
	alsl.d	$a0, $a1, $a0, 2
	addi.w	$a1, $a0, 2
	pcalau12i	$a2, %pc_hi20(buf)
	addi.d	$a2, $a2, %pc_lo12(buf)
	ld.w	$a3, $a2, 0
	addi.w	$a3, $a3, -1
	ld.d	$a2, $a2, 16
	and	$a1, $a3, $a1
	addi.w	$a0, $a0, 3
	and	$a0, $a3, $a0
	ldx.b	$a0, $a2, $a0
	ldx.bu	$a1, $a2, $a1
	b	.LBB62_13
.LBB62_5:
	pcalau12i	$a2, %pc_hi20(pos)
	ld.w	$a2, $a2, %pc_lo12(pos)
	add.d	$a0, $a1, $a0
	slli.d	$a0, $a0, 1
	sub.w	$a0, $a2, $a0
	b	.LBB62_12
.LBB62_6:
	pcalau12i	$a2, %pc_hi20(_ZL1S)
	ld.w	$a2, $a2, %pc_lo12(_ZL1S)
	add.w	$a1, $a1, $a0
	bge	$a2, $a0, .LBB62_9
# %bb.7:
	pcalau12i	$a0, %pc_hi20(pos)
	ld.w	$a0, $a0, %pc_lo12(pos)
	sub.d	$a1, $a2, $a1
	alsl.d	$a0, $a1, $a0, 1
	addi.w	$a0, $a0, 1
	b	.LBB62_10
.LBB62_8:
	pcalau12i	$a2, %pc_hi20(pos)
	ld.w	$a2, $a2, %pc_lo12(pos)
	add.d	$a0, $a1, $a0
	sub.w	$a0, $a2, $a0
	b	.LBB62_10
.LBB62_9:
	pcalau12i	$a0, %pc_hi20(pos)
	ld.w	$a0, $a0, %pc_lo12(pos)
	slli.d	$a1, $a1, 1
	sub.w	$a0, $a0, $a1
.LBB62_10:
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a1, $a1, %pc_lo12(buf)
	ld.w	$a2, $a1, 0
	ld.d	$a1, $a1, 16
	addi.w	$a2, $a2, -1
	and	$a0, $a2, $a0
	ldx.bu	$a0, $a1, $a0
	ret
.LBB62_11:
	pcalau12i	$a0, %pc_hi20(pos)
	ld.w	$a0, $a0, %pc_lo12(pos)
	slli.d	$a1, $a1, 2
	sub.w	$a0, $a0, $a1
.LBB62_12:
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a1, $a1, %pc_lo12(buf)
	ld.w	$a2, $a1, 0
	addi.w	$a2, $a2, -1
	ld.d	$a1, $a1, 16
	and	$a3, $a2, $a0
	addi.w	$a0, $a0, 1
	and	$a0, $a2, $a0
	ldx.b	$a0, $a1, $a0
	ldx.bu	$a1, $a1, $a3
.LBB62_13:
	slli.w	$a0, $a0, 24
	slli.w	$a1, $a1, 16
	or	$a0, $a0, $a1
	srai.d	$a0, $a0, 16
	ret
.Lfunc_end62:
	.size	_Z1Xii, .Lfunc_end62-_Z1Xii
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z6execxtii                     # -- Begin function _Z6execxtii
	.p2align	5
	.type	_Z6execxtii,@function
_Z6execxtii:                            # @_Z6execxtii
# %bb.0:
	pcalau12i	$a2, %pc_hi20(pos)
	ld.w	$a2, $a2, %pc_lo12(pos)
	sub.w	$a5, $a2, $a0
	addi.w	$a3, $a5, -2
	pcalau12i	$a4, %pc_hi20(buf)
	addi.d	$a4, $a4, %pc_lo12(buf)
	ld.w	$a7, $a4, 0
	ld.d	$a6, $a4, 16
	addi.w	$a7, $a7, -1
	and	$a3, $a7, $a3
	ldx.bu	$a4, $a6, $a3
	addi.w	$a3, $a5, -3
	and	$a3, $a7, $a3
	ldx.bu	$a3, $a6, $a3
	sub.w	$a2, $a0, $a2
	andn	$a2, $a7, $a2
	ldx.bu	$a2, $a6, $a2
	beqz	$a0, .LBB63_2
# %bb.1:
	and	$a0, $a7, $a5
	ldx.b	$a0, $a6, $a0
	slli.w	$a0, $a0, 12
	lu12i.w	$a5, 199
	and	$a0, $a0, $a5
	b	.LBB63_3
.LBB63_2:
	move	$a0, $zero
.LBB63_3:
	addi.d	$a5, $a4, -102
	sltui	$a5, $a5, 1
	slli.d	$a5, $a5, 1
	addi.d	$a6, $a4, -15
	sltui	$a6, $a6, 1
	or	$a5, $a5, $a6
	addi.d	$a4, $a4, -103
	sltui	$a4, $a4, 1
	ori	$a6, $zero, 3
	maskeqz	$a4, $a6, $a4
	add.d	$a4, $a5, $a4
	addi.d	$a5, $a3, -15
	sltui	$a5, $a5, 1
	alsl.d	$a4, $a5, $a4, 2
	addi.d	$a5, $a3, -102
	sltui	$a5, $a5, 1
	alsl.d	$a4, $a5, $a4, 3
	addi.d	$a3, $a3, -103
	sltui	$a3, $a3, 1
	ori	$a5, $zero, 12
	maskeqz	$a3, $a5, $a3
	add.w	$a3, $a4, $a3
	slli.w	$a2, $a2, 4
	slli.w	$a1, $a1, 20
	or	$a1, $a2, $a1
	or	$a1, $a1, $a3
	or	$a0, $a1, $a0
	ret
.Lfunc_end63:
	.size	_Z6execxtii, .Lfunc_end63-_Z6execxtii
                                        # -- End function
	.globl	_Z8exeModelR5Mixer              # -- Begin function _Z8exeModelR5Mixer
	.p2align	5
	.type	_Z8exeModelR5Mixer,@function
_Z8exeModelR5Mixer:                     # @_Z8exeModelR5Mixer
.Lfunc_begin12:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception12
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	pcalau12i	$a1, %pc_hi20(_ZGVZ8exeModelR5MixerE2cm)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ8exeModelR5MixerE2cm)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB64_6
.LBB64_1:
	pcalau12i	$a4, %pc_hi20(bpos)
	ld.w	$a3, $a4, %pc_lo12(bpos)
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a1, $a0, %pc_lo12(buf)
	ld.d	$a0, $a1, 16
	pcalau12i	$a2, %pc_hi20(pos)
	bnez	$a3, .LBB64_5
# %bb.2:                                # %.peel.next
	pcalau12i	$a3, %pc_hi20(_ZZ8exeModelR5MixerE2cm)
	addi.d	$a3, $a3, %pc_lo12(_ZZ8exeModelR5MixerE2cm)
	ld.w	$a6, $a1, 0
	ld.w	$a7, $a2, %pc_lo12(pos)
	ld.d	$a5, $a3, 96
	addi.w	$a6, $a6, -1
	addi.w	$t0, $a7, -3
	and	$t0, $a6, $t0
	ldx.bu	$t0, $a0, $t0
	addi.w	$t1, $a7, -2
	and	$t1, $a6, $t1
	ldx.bu	$t1, $a0, $t1
	addi.w	$a7, $a7, -1
	and	$a6, $a6, $a7
	ldx.bu	$t2, $a0, $a6
	addi.d	$a6, $t1, -102
	sltui	$a6, $a6, 1
	slli.d	$a6, $a6, 1
	addi.d	$a7, $t1, -15
	sltui	$a7, $a7, 1
	or	$a7, $a6, $a7
	addi.d	$a6, $t1, -103
	sltui	$t1, $a6, 1
	ori	$a6, $zero, 3
	maskeqz	$t1, $a6, $t1
	add.d	$a7, $a7, $t1
	addi.d	$t1, $t0, -15
	sltui	$t1, $t1, 1
	alsl.d	$a7, $t1, $a7, 2
	addi.d	$t1, $t0, -102
	sltui	$t1, $t1, 1
	alsl.d	$t1, $t1, $a7, 3
	addi.d	$a7, $t0, -103
	sltui	$t0, $a7, 1
	ori	$a7, $zero, 12
	maskeqz	$t0, $a7, $t0
	ld.w	$t3, $a3, 136
	add.d	$t0, $t1, $t0
	slli.d	$t1, $t2, 4
	or	$t1, $t0, $t1
	addi.d	$t0, $t3, 1
	st.w	$t0, $a3, 136
	lu12i.w	$t0, 241126
	ori	$t0, $t0, 2227
	mul.d	$t1, $t1, $t0
	add.d	$t1, $t1, $t3
	rotri.w	$t2, $t1, 16
	lu12i.w	$t1, 30140
	ori	$t1, $t1, 3351
	mul.d	$t2, $t2, $t1
	add.d	$t2, $t2, $t3
	slli.d	$t3, $t3, 2
	stx.w	$t2, $a5, $t3
	ori	$t2, $zero, 1
	addi.d	$t3, $zero, -4
	ori	$t4, $zero, 4
	lu12i.w	$t5, 199
	addi.w	$t6, $zero, -15
	.p2align	4, , 16
.LBB64_3:                               # %_Z6execxtii.exit
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$t7, $a2, %pc_lo12(pos)
	ld.w	$t8, $a1, 0
	addi.w	$s0, $t7, -1
	addi.w	$t8, $t8, -1
	and	$s0, $t8, $s0
	ldx.bu	$s0, $a0, $s0
	sltu	$s1, $t4, $t2
	add.w	$t7, $t3, $t7
	addi.w	$s2, $t7, 3
	addi.w	$s3, $t7, 1
	and	$s3, $t8, $s3
	ldx.bu	$s3, $a0, $s3
	and	$s4, $t8, $t7
	ldx.bu	$s4, $a0, $s4
	and	$s2, $t8, $s2
	ldx.b	$s2, $a0, $s2
	addi.w	$t7, $t7, 2
	and	$t7, $t8, $t7
	ldx.bu	$t7, $a0, $t7
	slli.d	$t8, $s2, 12
	and	$t8, $t8, $t5
	addi.d	$s2, $s3, -102
	sltui	$s2, $s2, 1
	slli.d	$s2, $s2, 1
	addi.d	$s5, $s3, -15
	sltui	$s5, $s5, 1
	or	$s2, $s2, $s5
	addi.d	$s3, $s3, -103
	sltui	$s3, $s3, 1
	maskeqz	$s3, $a6, $s3
	add.d	$s2, $s2, $s3
	addi.d	$s3, $s4, -15
	sltui	$s3, $s3, 1
	alsl.d	$s2, $s3, $s2, 2
	addi.d	$s3, $s4, -102
	sltui	$s3, $s3, 1
	alsl.d	$s2, $s3, $s2, 3
	addi.d	$s3, $s4, -103
	sltui	$s3, $s3, 1
	maskeqz	$s3, $a7, $s3
	add.d	$s2, $s2, $s3
	slli.d	$t7, $t7, 4
	slli.d	$s0, $s0, 20
	maskeqz	$s0, $s0, $s1
	ld.w	$s1, $a3, 136
	or	$t7, $t7, $s0
	or	$t7, $s2, $t7
	or	$t7, $t7, $t8
	addi.d	$t8, $s1, 1
	st.w	$t8, $a3, 136
	mul.d	$t7, $t7, $t0
	add.d	$t7, $t7, $s1
	rotri.w	$t7, $t7, 16
	mul.d	$t7, $t7, $t1
	add.d	$t7, $t7, $s1
	slli.d	$t8, $s1, 2
	stx.w	$t7, $a5, $t8
	addi.w	$t3, $t3, -1
	addi.w	$t2, $t2, 1
	bne	$t3, $t6, .LBB64_3
# %bb.4:                                # %.loopexit.loopexit
	ld.w	$a3, $a4, %pc_lo12(bpos)
.LBB64_5:                               # %.loopexit
	ld.w	$a4, $a2, %pc_lo12(pos)
	ld.w	$a1, $a1, 0
	pcalau12i	$a2, %pc_hi20(c0)
	ld.w	$a2, $a2, %pc_lo12(c0)
	addi.w	$a4, $a4, -1
	addi.w	$a1, $a1, -1
	and	$a1, $a1, $a4
	ldx.bu	$a4, $a0, $a1
	pcalau12i	$a0, %pc_hi20(y)
	ld.w	$a5, $a0, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ8exeModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8exeModelR5MixerE2cm)
	move	$a1, $fp
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	pcaddu18i	$t8, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jr	$t8
.LBB64_6:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8exeModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8exeModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB64_1
# %bb.7:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp276:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8exeModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8exeModelR5MixerE2cm)
	ori	$a2, $zero, 12
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp277:                               # EH_LABEL
# %bb.8:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8exeModelR5MixerE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8exeModelR5MixerE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8exeModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8exeModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB64_1
.LBB64_9:
.Ltmp278:                               # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8exeModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8exeModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end64:
	.size	_Z8exeModelR5Mixer, .Lfunc_end64-_Z8exeModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table64:
.Lexception12:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end12-.Lcst_begin12
.Lcst_begin12:
	.uleb128 .Lfunc_begin12-.Lfunc_begin12  # >> Call Site 1 <<
	.uleb128 .Ltmp276-.Lfunc_begin12        #   Call between .Lfunc_begin12 and .Ltmp276
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp276-.Lfunc_begin12        # >> Call Site 2 <<
	.uleb128 .Ltmp277-.Ltmp276              #   Call between .Ltmp276 and .Ltmp277
	.uleb128 .Ltmp278-.Lfunc_begin12        #     jumps to .Ltmp278
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp277-.Lfunc_begin12        # >> Call Site 3 <<
	.uleb128 .Lfunc_end64-.Ltmp277          #   Call between .Ltmp277 and .Lfunc_end64
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end12:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z13indirectModelR5Mixer        # -- Begin function _Z13indirectModelR5Mixer
	.p2align	5
	.type	_Z13indirectModelR5Mixer,@function
_Z13indirectModelR5Mixer:               # @_Z13indirectModelR5Mixer
.Lfunc_begin13:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception13
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	pcalau12i	$a1, %pc_hi20(_ZGVZ13indirectModelR5MixerE2cm)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ13indirectModelR5MixerE2cm)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB65_4
.LBB65_1:
	pcalau12i	$a0, %pc_hi20(bpos)
	ld.w	$a3, $a0, %pc_lo12(bpos)
	bnez	$a3, .LBB65_3
# %bb.2:
	pcalau12i	$a1, %pc_hi20(_ZZ13indirectModelR5MixerE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13indirectModelR5MixerE2cm)
	pcalau12i	$a2, %pc_hi20(c4)
	ld.wu	$a2, $a2, %pc_lo12(c4)
	bstrpick.d	$a3, $a2, 15, 0
	bstrpick.d	$a4, $a2, 15, 8
	andi	$a6, $a2, 255
	slli.d	$a4, $a4, 2
	bstrpick.d	$a4, $a4, 57, 2
	slli.d	$a4, $a4, 2
	pcalau12i	$a5, %pc_hi20(_ZZ13indirectModelR5MixerE2t1)
	addi.d	$a7, $a5, %pc_lo12(_ZZ13indirectModelR5MixerE2t1)
	ldx.w	$a5, $a7, $a4
	move	$t0, $a2
	bstrins.d	$t0, $a5, 63, 8
	stx.w	$t0, $a7, $a4
	srli.d	$a4, $a2, 7
	lu12i.w	$a5, 31
	ori	$a5, $a5, 4094
	and	$t0, $a4, $a5
	pcalau12i	$a4, %pc_hi20(_ZZ13indirectModelR5MixerE2t2)
	addi.d	$a5, $a4, %pc_lo12(_ZZ13indirectModelR5MixerE2t2)
	slli.d	$a4, $a6, 2
	ldx.w	$t1, $a7, $a4
	ld.w	$t2, $a1, 136
	move	$t3, $a2
	bstrins.d	$t3, $t1, 63, 8
	bstrpick.d	$a6, $t3, 15, 0
	addi.d	$a4, $t2, 1
	st.w	$a4, $a1, 136
	lu12i.w	$a4, 241126
	ori	$a4, $a4, 2227
	mul.d	$a6, $a6, $a4
	add.d	$a6, $a6, $t2
	rotri.w	$t4, $a6, 16
	lu12i.w	$a6, 30140
	ori	$a6, $a6, 3351
	ld.d	$a7, $a1, 96
	mul.d	$t4, $t4, $a6
	add.d	$t4, $t4, $t2
	slli.d	$t2, $t2, 2
	stx.w	$t4, $a7, $t2
	ld.w	$t2, $a1, 136
	ldx.h	$t4, $a5, $t0
	addi.d	$t5, $t2, 1
	st.w	$t5, $a1, 136
	bstrpick.d	$t5, $t3, 23, 0
	mul.d	$t5, $t5, $a4
	add.d	$t5, $t2, $t5
	rotri.w	$t5, $t5, 16
	mul.d	$t5, $t5, $a6
	add.d	$t5, $t5, $t2
	slli.d	$t2, $t2, 2
	stx.w	$t5, $a7, $t2
	ld.w	$t2, $a1, 136
	move	$t5, $a2
	bstrins.d	$t5, $t4, 63, 8
	addi.d	$t4, $t2, 1
	st.w	$t4, $a1, 136
	mul.d	$t3, $t3, $a4
	add.d	$t3, $t2, $t3
	rotri.w	$t3, $t3, 16
	mul.d	$t3, $t3, $a6
	add.d	$t3, $t3, $t2
	slli.d	$t2, $t2, 2
	stx.w	$t3, $a7, $t2
	ld.w	$t2, $a1, 136
	stx.h	$t5, $a5, $t0
	slli.d	$t0, $t1, 8
	bstrpick.d	$t0, $t0, 15, 8
	addi.d	$t1, $t2, 1
	st.w	$t1, $a1, 136
	lu12i.w	$t1, -137589
	ori	$t1, $t1, 768
	lu32i.d	$t1, 58
	mul.d	$t0, $t0, $t1
	add.d	$t0, $t2, $t0
	rotri.w	$t0, $t0, 16
	mul.d	$t0, $t0, $a6
	add.d	$t0, $t0, $t2
	slli.d	$t1, $t2, 2
	slli.d	$a3, $a3, 1
	ldx.h	$a3, $a5, $a3
	stx.w	$t0, $a7, $t1
	ld.w	$a5, $a1, 136
	bstrins.d	$a2, $a3, 63, 16
	bstrpick.d	$a3, $a2, 23, 0
	addi.d	$t0, $a5, 1
	st.w	$t0, $a1, 136
	mul.d	$a3, $a3, $a4
	add.d	$a3, $a3, $a5
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $a6
	add.d	$a3, $a3, $a5
	slli.d	$a5, $a5, 2
	stx.w	$a3, $a7, $a5
	ld.w	$a3, $a1, 136
	addi.d	$a5, $a3, 1
	st.w	$a5, $a1, 136
	mul.d	$a1, $a2, $a4
	add.d	$a1, $a3, $a1
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $a6
	add.d	$a1, $a1, $a3
	slli.d	$a2, $a3, 2
	stx.w	$a1, $a7, $a2
	ld.w	$a3, $a0, %pc_lo12(bpos)
.LBB65_3:
	pcalau12i	$a0, %pc_hi20(c0)
	pcalau12i	$a1, %pc_hi20(pos)
	ld.w	$a1, $a1, %pc_lo12(pos)
	ld.w	$a2, $a0, %pc_lo12(c0)
	addi.w	$a0, $a1, -1
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a1, $a1, %pc_lo12(buf)
	ld.w	$a4, $a1, 0
	ld.d	$a1, $a1, 16
	addi.w	$a4, $a4, -1
	and	$a0, $a4, $a0
	ldx.bu	$a4, $a1, $a0
	pcalau12i	$a0, %pc_hi20(y)
	ld.w	$a5, $a0, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ13indirectModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13indirectModelR5MixerE2cm)
	move	$a1, $fp
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	pcaddu18i	$t8, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jr	$t8
.LBB65_4:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13indirectModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13indirectModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB65_1
# %bb.5:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp279:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ13indirectModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13indirectModelR5MixerE2cm)
	ori	$a2, $zero, 6
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp280:                               # EH_LABEL
# %bb.6:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ13indirectModelR5MixerE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13indirectModelR5MixerE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13indirectModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13indirectModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB65_1
.LBB65_7:
.Ltmp281:                               # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13indirectModelR5MixerE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13indirectModelR5MixerE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end65:
	.size	_Z13indirectModelR5Mixer, .Lfunc_end65-_Z13indirectModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table65:
.Lexception13:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end13-.Lcst_begin13
.Lcst_begin13:
	.uleb128 .Lfunc_begin13-.Lfunc_begin13  # >> Call Site 1 <<
	.uleb128 .Ltmp279-.Lfunc_begin13        #   Call between .Lfunc_begin13 and .Ltmp279
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp279-.Lfunc_begin13        # >> Call Site 2 <<
	.uleb128 .Ltmp280-.Ltmp279              #   Call between .Ltmp279 and .Ltmp280
	.uleb128 .Ltmp281-.Lfunc_begin13        #     jumps to .Ltmp281
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp280-.Lfunc_begin13        # >> Call Site 3 <<
	.uleb128 .Lfunc_end65-.Ltmp280          #   Call between .Ltmp280 and .Lfunc_end65
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end13:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z8dmcModelR5Mixer              # -- Begin function _Z8dmcModelR5Mixer
	.p2align	5
	.type	_Z8dmcModelR5Mixer,@function
_Z8dmcModelR5Mixer:                     # @_Z8dmcModelR5Mixer
.Lfunc_begin14:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception14
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	pcalau12i	$a1, %pc_hi20(_ZGVZ8dmcModelR5MixerE1t)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ8dmcModelR5MixerE1t)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB66_28
.LBB66_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8dmcModelR5MixerE2sm)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ8dmcModelR5MixerE2sm)
	dbar	20
	beqz	$a0, .LBB66_31
.LBB66_2:
	pcalau12i	$a3, %pc_hi20(_ZZ8dmcModelR5MixerE3top)
	ld.w	$a5, $a3, %pc_lo12(_ZZ8dmcModelR5MixerE3top)
	pcalau12i	$a0, %pc_hi20(_ZZ8dmcModelR5MixerE1t)
	addi.d	$a2, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE1t)
	pcalau12i	$a0, %pc_hi20(_ZZ8dmcModelR5MixerE4curr)
	pcalau12i	$a1, %pc_hi20(y)
	pcalau12i	$a4, %pc_hi20(_ZZ8dmcModelR5MixerE9threshold)
	blez	$a5, .LBB66_9
# %bb.3:
	ld.w	$a6, $a2, 0
	bge	$a5, $a6, .LBB66_9
# %bb.4:
	ld.w	$a6, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE4curr)
	ld.d	$t1, $a2, 16
	ori	$a7, $zero, 12
	mul.d	$t0, $a6, $a7
	add.d	$t0, $t1, $t0
	ld.w	$t2, $a1, %pc_lo12(y)
	ld.bu	$t3, $t0, 11
	ld.hu	$t4, $t0, 9
	sltui	$t5, $t2, 1
	slli.d	$t3, $t3, 16
	or	$t3, $t4, $t3
	andi	$t6, $t3, 4095
	srli.d	$t3, $t3, 12
	ld.w	$t4, $a4, %pc_lo12(_ZZ8dmcModelR5MixerE9threshold)
	masknez	$t3, $t3, $t5
	maskeqz	$t5, $t6, $t5
	or	$t3, $t5, $t3
	slli.w	$t5, $t4, 1
	bltu	$t3, $t5, .LBB66_9
# %bb.5:
	slli.d	$t2, $t2, 2
	ldx.w	$t2, $t0, $t2
	mul.d	$a7, $t2, $a7
	add.d	$a7, $t1, $a7
	ld.bu	$t0, $a7, 11
	ld.hu	$a7, $a7, 9
	slli.d	$t0, $t0, 16
	or	$a7, $a7, $t0
	andi	$t5, $a7, 4095
	srli.d	$a7, $a7, 12
	add.d	$t6, $t5, $a7
	sub.d	$a7, $t6, $t3
	alsl.w	$t0, $t4, $t4, 1
	blt	$a7, $t0, .LBB66_9
# %bb.6:                                # %condstore.split
	slli.d	$t3, $t3, 12
	ori	$a7, $zero, 12
	mul.d	$t0, $a5, $a7
	add.d	$t1, $t1, $t0
	ld.hu	$t4, $t1, 9
	div.wu	$t3, $t3, $t6
	mul.d	$t5, $t3, $t5
	bstrpick.d	$t5, $t5, 23, 12
	srli.d	$t4, $t4, 12
	move	$t6, $t5
	bstrins.d	$t6, $t4, 15, 12
	st.h	$t6, $t1, 9
	ld.d	$t1, $a2, 16
	mul.d	$t2, $t2, $a7
	add.d	$t1, $t1, $t2
	ld.hu	$t4, $t1, 9
	sub.d	$t5, $t4, $t5
	srli.d	$t4, $t4, 12
	bstrins.d	$t5, $t4, 63, 12
	st.h	$t5, $t1, 9
	ld.d	$t1, $a2, 16
	add.d	$t4, $t1, $t2
	ld.bu	$t5, $t4, 11
	ld.hu	$t4, $t4, 9
	slli.d	$t5, $t5, 16
	or	$t4, $t4, $t5
	add.d	$t1, $t1, $t0
	ld.hu	$t5, $t1, 9
	srli.d	$t4, $t4, 12
	mul.d	$t3, $t3, $t4
	bstrpick.d	$t4, $t3, 15, 12
	bstrins.d	$t5, $t4, 63, 12
	bstrpick.d	$t4, $t3, 23, 16
	st.b	$t4, $t1, 11
	st.h	$t5, $t1, 9
	ld.d	$t1, $a2, 16
	add.d	$t1, $t1, $t2
	ld.bu	$t4, $t1, 11
	ld.hu	$t5, $t1, 9
	srli.d	$t3, $t3, 12
	slli.d	$t4, $t4, 16
	or	$t4, $t5, $t4
	srli.d	$t4, $t4, 12
	sub.d	$t3, $t4, $t3
	bstrins.d	$t5, $t3, 63, 12
	st.h	$t5, $t1, 9
	srli.d	$t3, $t3, 4
	st.b	$t3, $t1, 11
	ld.d	$t1, $a2, 16
	ldx.d	$t3, $t1, $t2
	add.d	$t2, $t1, $t2
	ld.b	$t2, $t2, 8
	add.d	$t4, $t1, $t0
	stx.d	$t3, $t1, $t0
	ld.w	$t0, $a1, %pc_lo12(y)
	st.b	$t2, $t4, 8
	mul.d	$a6, $a6, $a7
	add.d	$a6, $t1, $a6
	slli.d	$a7, $t0, 2
	stx.w	$a5, $a6, $a7
	pcalau12i	$a6, %pc_hi20(level)
	ld.wu	$a6, $a6, %pc_lo12(level)
	addi.w	$a5, $a5, 1
	st.w	$a5, $a3, %pc_lo12(_ZZ8dmcModelR5MixerE3top)
	lu12i.w	$a7, 32
	sll.w	$a7, $a7, $a6
	lu12i.w	$t0, 16
	sll.w	$a6, $t0, $a6
	alsl.w	$a6, $a6, $a6, 1
	beq	$a5, $a7, .LBB66_8
# %bb.7:                                # %condstore.split
	bne	$a5, $a6, .LBB66_9
.LBB66_8:
	xor	$a6, $a5, $a6
	sltui	$a6, $a6, 1
	ori	$a7, $zero, 512
	masknez	$a7, $a7, $a6
	ori	$t0, $zero, 768
	maskeqz	$a6, $t0, $a6
	or	$a6, $a6, $a7
	st.w	$a6, $a4, %pc_lo12(_ZZ8dmcModelR5MixerE9threshold)
.LBB66_9:
	ld.w	$a6, $a2, 0
	bne	$a5, $a6, .LBB66_12
# %bb.10:
	pcalau12i	$a6, %pc_hi20(bpos)
	ld.w	$a6, $a6, %pc_lo12(bpos)
	ori	$a7, $zero, 1
	bne	$a6, $a7, .LBB66_12
# %bb.11:                               # %.critedge
	st.w	$zero, $a3, %pc_lo12(_ZZ8dmcModelR5MixerE3top)
	b	.LBB66_13
.LBB66_12:                              # %thread-pre-split
	bnez	$a5, .LBB66_21
.LBB66_13:                              # %.preheader.preheader
	move	$a5, $zero
	move	$a6, $zero
	ori	$a7, $zero, 2
	ori	$t0, $zero, 126
	ori	$t1, $zero, 8
	ori	$t2, $zero, 256
	lu12i.w	$t3, -8
	ori	$t3, $t3, 256
	b	.LBB66_15
	.p2align	4, , 16
.LBB66_14:                              # %.split.us
                                        #   in Loop: Header=BB66_15 Depth=1
	addi.d	$a6, $a6, 1
	addi.d	$a5, $a5, 12
	addi.d	$a7, $a7, 2
	beq	$a6, $t2, .LBB66_20
.LBB66_15:                              # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_19 Depth 2
                                        #     Child Loop BB66_17 Depth 2
	bltu	$t0, $a6, .LBB66_18
# %bb.16:                               # %.preheader.split.us.preheader
                                        #   in Loop: Header=BB66_15 Depth=1
	ori	$t4, $zero, 256
	move	$t6, $a5
	move	$t5, $a7
	.p2align	4, , 16
.LBB66_17:                              # %.preheader.split.us
                                        #   Parent Loop BB66_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$t7, $a2, 16
	add.d	$t8, $t7, $t6
	ld.hu	$s0, $t8, 9
	srli.d	$s0, $s0, 12
	ori	$s1, $zero, 128
	bstrins.d	$s1, $s0, 15, 12
	st.h	$s1, $t8, 9
	ld.d	$s0, $a2, 16
	addi.d	$s1, $t5, -1
	stx.w	$s1, $t7, $t6
	st.w	$t5, $t8, 4
	add.d	$t7, $s0, $t6
	ld.hu	$t8, $t7, 9
	andi	$t8, $t8, 4095
	st.b	$t1, $t7, 11
	st.h	$t8, $t7, 9
	addi.d	$t5, $t5, 256
	addi.d	$t6, $t6, 2047
	addi.d	$t4, $t4, -1
	addi.d	$t6, $t6, 1025
	bnez	$t4, .LBB66_17
	b	.LBB66_14
	.p2align	4, , 16
.LBB66_18:                              # %.preheader.split.preheader
                                        #   in Loop: Header=BB66_15 Depth=1
	slli.d	$t5, $a6, 8
	add.d	$t4, $t5, $t3
	addi.d	$t5, $t5, 256
	ori	$t6, $zero, 256
	move	$t7, $a5
	.p2align	4, , 16
.LBB66_19:                              # %.preheader.split
                                        #   Parent Loop BB66_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$t8, $a2, 16
	add.d	$s0, $t8, $t7
	ld.hu	$s1, $s0, 9
	srli.d	$s1, $s1, 12
	ori	$s2, $zero, 128
	bstrins.d	$s2, $s1, 15, 12
	st.h	$s2, $s0, 9
	ld.d	$s1, $a2, 16
	stx.w	$t4, $t8, $t7
	st.w	$t5, $s0, 4
	add.d	$t8, $s1, $t7
	ld.hu	$s0, $t8, 9
	andi	$s0, $s0, 4095
	st.b	$t1, $t8, 11
	st.h	$s0, $t8, 9
	addi.d	$t7, $t7, 2047
	addi.d	$t6, $t6, -1
	addi.d	$t7, $t7, 1025
	bnez	$t6, .LBB66_19
	b	.LBB66_14
.LBB66_20:
	lu12i.w	$a5, 16
	st.w	$a5, $a3, %pc_lo12(_ZZ8dmcModelR5MixerE3top)
	st.w	$zero, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE4curr)
	ori	$a3, $zero, 256
	st.w	$a3, $a4, %pc_lo12(_ZZ8dmcModelR5MixerE9threshold)
.LBB66_21:
	ld.w	$a4, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE4curr)
	ld.d	$a3, $a2, 16
	slli.d	$a5, $a4, 3
	alsl.d	$a5, $a4, $a5, 2
	add.d	$a5, $a3, $a5
	ld.b	$a3, $a5, 11
	ld.hu	$a6, $a5, 9
	ld.w	$a7, $a1, %pc_lo12(y)
	slli.d	$a3, $a3, 16
	or	$a6, $a6, $a3
	lu12i.w	$a3, 4095
	beqz	$a7, .LBB66_24
# %bb.22:
	bstrpick.d	$a7, $a6, 23, 15
	ori	$t0, $zero, 474
	bltu	$t0, $a7, .LBB66_27
# %bb.23:
	move	$a7, $a6
	bstrins.d	$a7, $zero, 11, 0
	addu16i.d	$a7, $a7, 16
	ori	$t0, $zero, 4095
	b	.LBB66_26
.LBB66_24:
	bstrpick.d	$a7, $a6, 11, 3
	ori	$t0, $zero, 474
	bltu	$t0, $a7, .LBB66_27
# %bb.25:
	addi.d	$a7, $a6, 256
	andi	$a7, $a7, 4095
	move	$t0, $a3
.LBB66_26:                              # %.sink.split
	and	$a6, $a6, $t0
	or	$a6, $a7, $a6
	st.h	$a6, $a5, 9
	srli.d	$a6, $a6, 16
	st.b	$a6, $a5, 11
.LBB66_27:
	ld.d	$a2, $a2, 16
	ori	$a5, $zero, 12
	mul.d	$a4, $a4, $a5
	add.d	$a4, $a2, $a4
	ld.bu	$a6, $a4, 8
	pcalau12i	$a7, %pc_hi20(_ZL11State_table)
	addi.d	$a7, $a7, %pc_lo12(_ZL11State_table)
	ld.w	$a1, $a1, %pc_lo12(y)
	alsl.d	$a6, $a6, $a7, 2
	ldx.b	$a6, $a6, $a1
	slli.d	$a7, $a1, 2
	ldx.w	$a7, $a4, $a7
	st.b	$a6, $a4, 8
	mul.d	$a4, $a7, $a5
	add.d	$a2, $a2, $a4
	ld.bu	$a4, $a2, 8
	st.w	$a7, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE4curr)
	pcalau12i	$a0, %pc_hi20(_ZZ8dmcModelR5MixerE2sm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE2sm)
	ld.w	$a5, $a0, 4
	ld.d	$a6, $a0, 24
	slli.d	$a5, $a5, 2
	ldx.wu	$a7, $a6, $a5
	andi	$t0, $a7, 1023
	addi.d	$t1, $t0, -1023
	sltui	$t1, $t1, 1
	addi.d	$t2, $a7, 1
	ori	$t3, $a7, 1023
	masknez	$t2, $t2, $t1
	maskeqz	$t1, $t3, $t1
	or	$t1, $t1, $t2
	srli.d	$a7, $a7, 10
	slli.d	$a1, $a1, 22
	sub.w	$a1, $a1, $a7
	srli.d	$a1, $a1, 3
	slli.d	$a7, $t0, 2
	pcalau12i	$t0, %pc_hi20(_ZL2dt)
	addi.d	$t0, $t0, %pc_lo12(_ZL2dt)
	ldx.w	$a7, $t0, $a7
	mul.d	$a1, $a1, $a7
	bstrpick.d	$a1, $a1, 31, 10
	slli.d	$a1, $a1, 10
	add.d	$a1, $a1, $t1
	stx.w	$a1, $a6, $a5
	st.w	$a4, $a0, 4
	ld.bu	$a0, $a2, 11
	ld.hu	$a1, $a2, 9
	slli.d	$a2, $a4, 2
	ldx.wu	$a2, $a6, $a2
	slli.d	$a0, $a0, 16
	or	$a0, $a1, $a0
	srli.d	$a1, $a0, 12
	andi	$a4, $a0, 4095
	and	$a0, $a0, $a3
	lu12i.w	$a3, 5
	add.d	$a0, $a0, $a3
	add.d	$a1, $a1, $a4
	pcalau12i	$a3, %pc_hi20(stretch+16)
	ld.d	$a3, $a3, %pc_lo12(stretch+16)
	srli.d	$a2, $a2, 19
	lu12i.w	$a4, 1
	ori	$a4, $a4, 4094
	and	$a2, $a2, $a4
	ldx.h	$a2, $a3, $a2
	ld.w	$a4, $fp, 96
	ld.d	$a5, $fp, 32
	addi.d	$a1, $a1, 10
	div.wu	$a0, $a0, $a1
	slli.d	$a1, $a4, 1
	stx.h	$a2, $a5, $a1
	bstrpick.d	$a0, $a0, 31, 0
	slli.d	$a0, $a0, 1
	ldx.h	$a0, $a3, $a0
	alsl.d	$a1, $a4, $a5, 1
	addi.d	$a2, $a4, 2
	st.w	$a2, $fp, 96
	st.h	$a0, $a1, 2
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB66_28:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8dmcModelR5MixerE1t)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8dmcModelR5MixerE1t)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB66_1
# %bb.29:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 32
	sll.w	$a1, $a1, $a0
.Ltmp282:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8dmcModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE1t)
	pcaddu18i	$ra, %call36(_ZN5ArrayI7DMCNodeLi0EEC2Ei)
	jirl	$ra, $ra, 0
.Ltmp283:                               # EH_LABEL
# %bb.30:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayI7DMCNodeLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayI7DMCNodeLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8dmcModelR5MixerE1t)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8dmcModelR5MixerE1t)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8dmcModelR5MixerE1t)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8dmcModelR5MixerE1t)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB66_1
.LBB66_31:
	pcalau12i	$a0, %pc_hi20(_ZGVZ8dmcModelR5MixerE2sm)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZ8dmcModelR5MixerE2sm)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB66_2
# %bb.32:
.Ltmp285:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ8dmcModelR5MixerE2sm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ8dmcModelR5MixerE2sm)
	ori	$a1, $zero, 256
	pcaddu18i	$ra, %call36(_ZN8StateMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp286:                               # EH_LABEL
# %bb.33:
	pcalau12i	$a0, %pc_hi20(_ZN8StateMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN8StateMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ8dmcModelR5MixerE2sm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ8dmcModelR5MixerE2sm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ8dmcModelR5MixerE2sm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ8dmcModelR5MixerE2sm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB66_2
.LBB66_34:
.Ltmp287:                               # EH_LABEL
	b	.LBB66_36
.LBB66_35:
.Ltmp284:                               # EH_LABEL
.LBB66_36:
	move	$fp, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end66:
	.size	_Z8dmcModelR5Mixer, .Lfunc_end66-_Z8dmcModelR5Mixer
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table66:
.Lexception14:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end14-.Lcst_begin14
.Lcst_begin14:
	.uleb128 .Lfunc_begin14-.Lfunc_begin14  # >> Call Site 1 <<
	.uleb128 .Ltmp282-.Lfunc_begin14        #   Call between .Lfunc_begin14 and .Ltmp282
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp282-.Lfunc_begin14        # >> Call Site 2 <<
	.uleb128 .Ltmp283-.Ltmp282              #   Call between .Ltmp282 and .Ltmp283
	.uleb128 .Ltmp284-.Lfunc_begin14        #     jumps to .Ltmp284
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp283-.Lfunc_begin14        # >> Call Site 3 <<
	.uleb128 .Ltmp285-.Ltmp283              #   Call between .Ltmp283 and .Ltmp285
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp285-.Lfunc_begin14        # >> Call Site 4 <<
	.uleb128 .Ltmp286-.Ltmp285              #   Call between .Ltmp285 and .Ltmp286
	.uleb128 .Ltmp287-.Lfunc_begin14        #     jumps to .Ltmp287
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp286-.Lfunc_begin14        # >> Call Site 5 <<
	.uleb128 .Lfunc_end66-.Ltmp286          #   Call between .Ltmp286 and .Lfunc_end66
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end14:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN5ArrayI7DMCNodeLi0EEC2Ei,"axG",@progbits,_ZN5ArrayI7DMCNodeLi0EEC2Ei,comdat
	.weak	_ZN5ArrayI7DMCNodeLi0EEC2Ei     # -- Begin function _ZN5ArrayI7DMCNodeLi0EEC2Ei
	.p2align	5
	.type	_ZN5ArrayI7DMCNodeLi0EEC2Ei,@function
_ZN5ArrayI7DMCNodeLi0EEC2Ei:            # @_ZN5ArrayI7DMCNodeLi0EEC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	st.w	$a1, $a0, 4
	st.w	$a1, $a0, 0
	blez	$a1, .LBB67_5
# %bb.1:
	slli.d	$a2, $a1, 3
	alsl.w	$a0, $a1, $a2, 2
	alsl.d	$a2, $a1, $a2, 2
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	add.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB67_3
# %bb.2:
	st.w	$a2, $a1, 4
.LBB67_3:                               # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB67_6
# %bb.4:                                # %_ZN5ArrayI7DMCNodeLi0EE6createEi.exit
	st.d	$a0, $fp, 16
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB67_5:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB67_6:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end67:
	.size	_ZN5ArrayI7DMCNodeLi0EEC2Ei, .Lfunc_end67-_ZN5ArrayI7DMCNodeLi0EEC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayI7DMCNodeLi0EED2Ev,"axG",@progbits,_ZN5ArrayI7DMCNodeLi0EED2Ev,comdat
	.weak	_ZN5ArrayI7DMCNodeLi0EED2Ev     # -- Begin function _ZN5ArrayI7DMCNodeLi0EED2Ev
	.p2align	5
	.type	_ZN5ArrayI7DMCNodeLi0EED2Ev,@function
_ZN5ArrayI7DMCNodeLi0EED2Ev:            # @_ZN5ArrayI7DMCNodeLi0EED2Ev
# %bb.0:
	ld.w	$a1, $a0, 0
	addi.d	$a2, $zero, -12
	mul.d	$a2, $a1, $a2
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	add.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB68_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB68_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end68:
	.size	_ZN5ArrayI7DMCNodeLi0EED2Ev, .Lfunc_end68-_ZN5ArrayI7DMCNodeLi0EED2Ev
                                        # -- End function
	.text
	.globl	_Z13contextModel2v              # -- Begin function _Z13contextModel2v
	.p2align	5
	.type	_Z13contextModel2v,@function
_Z13contextModel2v:                     # @_Z13contextModel2v
.Lfunc_begin15:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception15
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE2cm)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE2cm)
	dbar	20
	beqz	$a0, .LBB69_80
.LBB69_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE4rcm7)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE4rcm7)
	dbar	20
	beqz	$a0, .LBB69_83
.LBB69_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE4rcm9)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE4rcm9)
	dbar	20
	beqz	$a0, .LBB69_86
.LBB69_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE5rcm10)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE5rcm10)
	dbar	20
	beqz	$a0, .LBB69_89
.LBB69_4:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE1m)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE1m)
	dbar	20
	beqz	$a0, .LBB69_92
.LBB69_5:
	pcalau12i	$s5, %pc_hi20(bpos)
	ld.w	$a0, $s5, %pc_lo12(bpos)
	pcalau12i	$s6, %pc_hi20(_ZZ13contextModel2vE8filetype)
	beqz	$a0, .LBB69_23
.LBB69_6:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$fp, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	ld.w	$a1, $fp, 88
	ld.d	$a0, $fp, 32
	blez	$a1, .LBB69_20
# %bb.7:                                # %.lr.ph.i
	ld.w	$a7, $fp, 96
	blez	$a7, .LBB69_20
# %bb.8:                                # %.lr.ph.split.us.preheader.i
	pcalau12i	$a2, %pc_hi20(y)
	ld.w	$a3, $a2, %pc_lo12(y)
	move	$a2, $zero
	slli.w	$a3, $a3, 12
	ld.d	$a4, $fp, 120
	ld.d	$a5, $fp, 80
	ld.w	$a6, $fp, 0
	addi.w	$a7, $a7, 7
	ld.d	$t0, $fp, 56
	move	$t1, $a7
	bstrins.d	$t1, $zero, 2, 0
	ori	$t2, $zero, 1
	slt	$t3, $t2, $t1
	masknez	$t2, $t2, $t3
	maskeqz	$t1, $t1, $t3
	or	$t1, $t1, $t2
	alsl.d	$t2, $t1, $t0, 1
	alsl.d	$t3, $t1, $a0, 1
	bstrpick.d	$t4, $t1, 30, 3
	slli.d	$t4, $t4, 3
	sub.d	$t5, $zero, $t1
	ori	$t6, $zero, 8
	lu12i.w	$t7, -8
	lu12i.w	$t8, 7
	ori	$t8, $t8, 4095
	vreplgr2vr.w	$vr0, $t7
	b	.LBB69_10
	.p2align	4, , 16
.LBB69_9:                               # %_Z5trainPsS_ii.exit.us.i
                                        #   in Loop: Header=BB69_10 Depth=1
	addi.d	$a2, $a2, 1
	beq	$a2, $a1, .LBB69_20
.LBB69_10:                              # %.lr.ph.split.us.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_18 Depth 2
                                        #     Child Loop BB69_16 Depth 2
	slli.d	$s1, $a2, 2
	ldx.w	$s0, $a4, $s1
	beq	$a3, $s0, .LBB69_9
# %bb.11:                               # %.lr.ph.preheader.i.us.i
                                        #   in Loop: Header=BB69_10 Depth=1
	ldx.w	$s1, $a5, $s1
	sub.d	$s0, $a3, $s0
	slli.d	$s2, $s0, 3
	sub.d	$s0, $s2, $s0
	mul.w	$s1, $s1, $a6
	blt	$a7, $t6, .LBB69_14
# %bb.12:                               # %vector.memcheck
                                        #   in Loop: Header=BB69_10 Depth=1
	alsl.d	$s2, $s1, $t0, 1
	bgeu	$s2, $t3, .LBB69_17
# %bb.13:                               # %vector.memcheck
                                        #   in Loop: Header=BB69_10 Depth=1
	alsl.d	$s3, $s1, $t2, 1
	bgeu	$a0, $s3, .LBB69_17
.LBB69_14:                              #   in Loop: Header=BB69_10 Depth=1
	move	$s3, $zero
.LBB69_15:                              # %.lr.ph.i.us.i.preheader
                                        #   in Loop: Header=BB69_10 Depth=1
	add.d	$s2, $t5, $s3
	slli.d	$s4, $s3, 1
	alsl.d	$s3, $s3, $a0, 1
	alsl.d	$s1, $s1, $s4, 1
	add.d	$s1, $t0, $s1
	.p2align	4, , 16
.LBB69_16:                              # %.lr.ph.i.us.i
                                        #   Parent Loop BB69_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$s4, $s3, 0
	ld.h	$s7, $s1, 0
	mul.w	$s4, $s0, $s4
	srli.d	$s4, $s4, 15
	addi.w	$s4, $s4, 1
	srai.d	$s4, $s4, 1
	add.d	$s4, $s4, $s7
	slt	$s7, $t7, $s4
	maskeqz	$s4, $s4, $s7
	masknez	$s7, $t7, $s7
	or	$s4, $s4, $s7
	slt	$s7, $s4, $t8
	maskeqz	$s4, $s4, $s7
	masknez	$s7, $t8, $s7
	or	$s4, $s4, $s7
	st.h	$s4, $s1, 0
	addi.d	$s2, $s2, 1
	addi.d	$s3, $s3, 2
	addi.d	$s1, $s1, 2
	bnez	$s2, .LBB69_16
	b	.LBB69_9
.LBB69_17:                              # %vector.ph
                                        #   in Loop: Header=BB69_10 Depth=1
	vreplgr2vr.w	$vr1, $s0
	move	$s3, $a0
	move	$s4, $t4
	.p2align	4, , 16
.LBB69_18:                              # %vector.body
                                        #   Parent Loop BB69_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $s2, 0
	vilvh.h	$vr3, $vr2, $vr2
	vslli.w	$vr3, $vr3, 16
	vsrai.w	$vr3, $vr3, 16
	vld	$vr4, $s3, 0
	vilvl.h	$vr2, $vr2, $vr2
	vslli.w	$vr2, $vr2, 16
	vsrai.w	$vr2, $vr2, 16
	vilvl.h	$vr5, $vr4, $vr4
	vslli.w	$vr5, $vr5, 16
	vsrai.w	$vr5, $vr5, 16
	vilvh.h	$vr4, $vr4, $vr4
	vslli.w	$vr4, $vr4, 16
	vsrai.w	$vr4, $vr4, 16
	vmul.w	$vr4, $vr1, $vr4
	vmul.w	$vr5, $vr1, $vr5
	vsrai.w	$vr5, $vr5, 15
	vsrai.w	$vr4, $vr4, 15
	vaddi.wu	$vr4, $vr4, 1
	vsrai.w	$vr4, $vr4, 1
	vaddi.wu	$vr5, $vr5, 1
	vsrai.w	$vr5, $vr5, 1
	vadd.w	$vr2, $vr5, $vr2
	vadd.w	$vr3, $vr4, $vr3
	vmax.w	$vr3, $vr3, $vr0
	vmax.w	$vr2, $vr2, $vr0
	vreplgr2vr.w	$vr4, $t8
	vmin.w	$vr2, $vr2, $vr4
	vmin.w	$vr3, $vr3, $vr4
	vpickev.h	$vr2, $vr3, $vr2
	vst	$vr2, $s2, 0
	addi.d	$s4, $s4, -8
	addi.d	$s3, $s3, 16
	addi.d	$s2, $s2, 16
	bnez	$s4, .LBB69_18
# %bb.19:                               # %middle.block
                                        #   in Loop: Header=BB69_10 Depth=1
	move	$s3, $t4
	beq	$t4, $t1, .LBB69_9
	b	.LBB69_15
.LBB69_20:                              # %_ZN5Mixer6updateEv.exit
	st.d	$zero, $fp, 88
	ori	$s2, $zero, 1
	st.w	$s2, $fp, 96
	ori	$a1, $zero, 256
	st.h	$a1, $a0, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z10matchModelR5Mixer)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(ilog+16)
	ld.d	$a1, $s8, %pc_lo12(ilog+16)
	bstrpick.d	$a0, $a0, 15, 0
	ldx.bu	$s0, $a1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z8wavModelR5Mixer)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
	move	$s1, $a0
	bne	$a1, $s2, .LBB69_28
# %bb.21:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$s2, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z9jpegModelR5Mixer)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB69_27
# %bb.22:
	ld.w	$a2, $s2, 88
	ld.w	$a3, $s2, 92
	addi.d	$a4, $a2, 1
	ld.d	$a1, $s2, 80
	st.w	$a4, $s2, 88
	addi.d	$a3, $a3, 1
	slli.d	$a2, $a2, 2
	stx.w	$a3, $a1, $a2
	ld.w	$a2, $s2, 92
	addi.d	$a2, $a2, 8
	ld.w	$a3, $s2, 88
	st.w	$a2, $s2, 92
	add.d	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a3, 1
	st.w	$a2, $s2, 88
	slli.d	$a2, $a3, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a0, $s2, 92
	pcalau12i	$a2, %pc_hi20(pos)
	ld.w	$a2, $a2, %pc_lo12(pos)
	addi.d	$a0, $a0, 257
	st.w	$a0, $s2, 92
	addi.w	$a2, $a2, -1
	pcalau12i	$a3, %pc_hi20(buf)
	addi.d	$a3, $a3, %pc_lo12(buf)
	ld.w	$a4, $a3, 0
	ld.d	$a3, $a3, 16
	addi.w	$a4, $a4, -1
	and	$a2, $a4, $a2
	ldx.bu	$a2, $a3, $a2
	add.d	$a0, $a0, $a2
	ori	$a2, $zero, 256
	b	.LBB69_78
.LBB69_23:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE4size)
	ld.w	$a2, $a0, %pc_lo12(_ZZ13contextModel2vE4size)
	addi.w	$a1, $a2, -1
	st.w	$a1, $a0, %pc_lo12(_ZZ13contextModel2vE4size)
	beqz	$a2, .LBB69_31
# %bb.24:
	addi.w	$a2, $zero, -5
	bne	$a1, $a2, .LBB69_6
# %bb.25:
	pcalau12i	$a1, %pc_hi20(pos)
	ld.w	$a1, $a1, %pc_lo12(pos)
	addi.w	$a2, $a1, -4
	pcalau12i	$a3, %pc_hi20(buf)
	addi.d	$a3, $a3, %pc_lo12(buf)
	ld.w	$a4, $a3, 0
	ld.d	$a3, $a3, 16
	addi.w	$a4, $a4, -1
	and	$a2, $a4, $a2
	ldx.b	$a2, $a3, $a2
	addi.w	$a5, $a1, -3
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a3, $a5
	slli.d	$a2, $a2, 24
	slli.d	$a5, $a5, 16
	or	$a2, $a5, $a2
	addi.w	$a5, $a1, -2
	and	$a5, $a4, $a5
	ldx.bu	$a5, $a3, $a5
	addi.w	$a1, $a1, -1
	and	$a1, $a4, $a1
	ldx.bu	$a1, $a3, $a1
	slli.d	$a3, $a5, 8
	ld.w	$a4, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
	or	$a2, $a2, $a3
	or	$a1, $a2, $a1
	ori	$a2, $zero, 8
	st.w	$a1, $a0, %pc_lo12(_ZZ13contextModel2vE4size)
	bne	$a4, $a2, .LBB69_6
# %bb.26:
	addi.d	$a1, $a1, 8
	st.w	$a1, $a0, %pc_lo12(_ZZ13contextModel2vE4size)
	b	.LBB69_6
.LBB69_27:                              # %..thread83_crit_edge
	ld.w	$a1, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
.LBB69_28:                              # %.thread83
	bstrpick.d	$a0, $a1, 31, 1
	slli.w	$a0, $a0, 1
	ori	$a2, $zero, 4
	bne	$a0, $a2, .LBB69_33
# %bb.29:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$s2, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z8bmpModelR5Mixer)
	jirl	$ra, $ra, 0
	blez	$a0, .LBB69_32
# %bb.30:
	pcalau12i	$a1, %pc_hi20(_ZZ13contextModel2vE3col)
	ld.w	$a2, $a1, %pc_lo12(_ZZ13contextModel2vE3col)
	addi.d	$a3, $a2, 1
	ori	$a4, $zero, 22
	slt	$a2, $a4, $a2
	ld.w	$a4, $s2, 88
	masknez	$a2, $a3, $a2
	st.w	$a2, $a1, %pc_lo12(_ZZ13contextModel2vE3col)
	ld.w	$a3, $s2, 92
	addi.d	$a5, $a4, 1
	ld.d	$a1, $s2, 80
	st.w	$a5, $s2, 88
	addi.d	$a3, $a3, 2
	slli.d	$a4, $a4, 2
	stx.w	$a3, $a1, $a4
	ld.w	$a3, $s2, 92
	ld.w	$a4, $s2, 88
	addi.d	$a3, $a3, 8
	st.w	$a3, $s2, 92
	add.d	$a2, $a3, $a2
	addi.d	$a3, $a4, 1
	st.w	$a3, $s2, 88
	slli.d	$a3, $a4, 2
	stx.w	$a2, $a1, $a3
	ld.w	$a2, $s2, 92
	pcalau12i	$a3, %pc_hi20(pos)
	ld.w	$a3, $a3, %pc_lo12(pos)
	addi.d	$a2, $a2, 24
	st.w	$a2, $s2, 92
	sub.w	$a0, $a3, $a0
	pcalau12i	$a4, %pc_hi20(buf)
	addi.d	$a4, $a4, %pc_lo12(buf)
	ld.w	$a5, $a4, 0
	ld.d	$a4, $a4, 16
	addi.w	$a5, $a5, -1
	and	$a0, $a5, $a0
	ldx.bu	$a0, $a4, $a0
	addi.w	$a3, $a3, -3
	and	$a3, $a5, $a3
	ldx.bu	$a3, $a4, $a3
	ld.w	$a4, $s2, 88
	add.d	$a0, $a3, $a0
	srli.d	$a0, $a0, 4
	add.d	$a0, $a0, $a2
	addi.d	$a2, $a4, 1
	st.w	$a2, $s2, 88
	slli.d	$a2, $a4, 2
	stx.w	$a0, $a1, $a2
	ld.w	$a0, $s2, 92
	pcalau12i	$a2, %pc_hi20(c0)
	ld.w	$a2, $a2, %pc_lo12(c0)
	addi.d	$a0, $a0, 32
	st.w	$a0, $s2, 92
	add.d	$a0, $a2, $a0
	ori	$a2, $zero, 256
	b	.LBB69_78
.LBB69_31:                              # %.thread
	pcalau12i	$a0, %pc_hi20(pos)
	ld.w	$a0, $a0, %pc_lo12(pos)
	addi.w	$a0, $a0, -1
	pcalau12i	$a1, %pc_hi20(buf)
	addi.d	$a1, $a1, %pc_lo12(buf)
	ld.w	$a2, $a1, 0
	ld.d	$a1, $a1, 16
	addi.w	$a2, $a2, -1
	and	$a0, $a2, $a0
	ldx.bu	$a0, $a1, $a0
	st.w	$a0, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
	b	.LBB69_6
.LBB69_32:                              # %.thread85
	ld.w	$a1, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
.LBB69_33:
	ori	$a0, $zero, 6
	bne	$a1, $a0, .LBB69_36
# %bb.34:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	pcaddu18i	$ra, %call36(_Z8pgmModelR5Mixer)
	jirl	$ra, $ra, 0
	bnez	$a0, .LBB69_79
# %bb.35:                               # %._crit_edge
	ld.w	$a1, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
.LBB69_36:
	ori	$a0, $zero, 3
	bne	$a1, $a0, .LBB69_39
# %bb.37:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	pcaddu18i	$ra, %call36(_Z9bmpModel8R5Mixer)
	jirl	$ra, $ra, 0
	bgtz	$a0, .LBB69_79
# %bb.38:                               # %thread-pre-split
	ld.w	$a1, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
.LBB69_39:
	ori	$a0, $zero, 7
	bne	$a1, $a0, .LBB69_41
# %bb.40:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	pcaddu18i	$ra, %call36(_Z9rgbModel8R5Mixer)
	jirl	$ra, $ra, 0
	bnez	$a0, .LBB69_79
.LBB69_41:
	blez	$s1, .LBB69_45
# %bb.42:
	andi	$a0, $s1, 255
	pcalau12i	$a4, %pc_hi20(_ZZ13contextModel2vE3col_0)
	ld.w	$a1, $a4, %pc_lo12(_ZZ13contextModel2vE3col_0)
	bstrpick.d	$a2, $s1, 31, 8
	mul.d	$a5, $a2, $a0
	addi.w	$a2, $a5, 0
	addi.w	$a1, $a1, 1
	ld.w	$a3, $fp, 92
	slt	$a6, $a1, $a2
	maskeqz	$a1, $a1, $a6
	st.w	$a1, $a4, %pc_lo12(_ZZ13contextModel2vE3col_0)
	beq	$a5, $a0, .LBB69_44
# %bb.43:
	ld.w	$a4, $fp, 88
	add.d	$a3, $a3, $a1
	ld.d	$a5, $fp, 80
	addi.d	$a6, $a4, 1
	st.w	$a6, $fp, 88
	slli.d	$a4, $a4, 2
	stx.w	$a3, $a5, $a4
	ld.w	$a3, $fp, 92
	add.d	$a3, $a3, $a2
	st.w	$a3, $fp, 92
.LBB69_44:
	ld.w	$a2, $fp, 88
	add.d	$a3, $a3, $a1
	ld.d	$a1, $fp, 80
	addi.d	$a4, $a2, 1
	st.w	$a4, $fp, 88
	slli.d	$a2, $a2, 2
	stx.w	$a3, $a1, $a2
	ld.w	$a2, $fp, 92
	pcalau12i	$a3, %pc_hi20(c0)
	ld.w	$a3, $a3, %pc_lo12(c0)
	add.d	$a0, $a2, $a0
	st.w	$a0, $fp, 92
	add.d	$a0, $a3, $a0
	ori	$a2, $zero, 256
	b	.LBB69_78
.LBB69_45:
	ld.w	$a3, $s5, %pc_lo12(bpos)
	pcalau12i	$s1, %pc_hi20(c4)
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE4rcm7)
	addi.d	$s3, $a0, %pc_lo12(_ZZ13contextModel2vE4rcm7)
	pcalau12i	$a1, %pc_hi20(pos)
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$s7, $a0, %pc_lo12(buf)
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE4rcm9)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE4rcm9)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE5rcm10)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE5rcm10)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	bnez	$a3, .LBB69_62
# %bb.46:                               # %.preheader88
	st.d	$s7, $sp, 56                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE2cm)
	addi.d	$s4, $a0, %pc_lo12(_ZZ13contextModel2vE2cm)
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	ld.bu	$a0, $s1, %pc_lo12(c4)
	pcalau12i	$a2, %pc_hi20(_ZZ13contextModel2vE3cxt.13)
	ld.w	$a3, $a2, %pc_lo12(_ZZ13contextModel2vE3cxt.13)
	addi.d	$a1, $a0, 1
	slli.d	$a0, $a3, 8
	add.d	$a0, $a0, $a3
	pcalau12i	$t4, %pc_hi20(_ZZ13contextModel2vE3cxt.12)
	ld.w	$a3, $t4, %pc_lo12(_ZZ13contextModel2vE3cxt.12)
	add.d	$a0, $a0, $a1
	pcalau12i	$t3, %pc_hi20(_ZZ13contextModel2vE3cxt.14)
	st.w	$a0, $t3, %pc_lo12(_ZZ13contextModel2vE3cxt.14)
	slli.d	$a0, $a3, 8
	pcalau12i	$a4, %pc_hi20(_ZZ13contextModel2vE3cxt.11)
	ld.w	$a5, $a4, %pc_lo12(_ZZ13contextModel2vE3cxt.11)
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, %pc_lo12(_ZZ13contextModel2vE3cxt.13)
	slli.d	$a0, $a5, 8
	pcalau12i	$t5, %pc_hi20(_ZZ13contextModel2vE3cxt.10)
	ld.w	$a2, $t5, %pc_lo12(_ZZ13contextModel2vE3cxt.10)
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $a1
	st.w	$a0, $t4, %pc_lo12(_ZZ13contextModel2vE3cxt.12)
	slli.d	$a0, $a2, 8
	pcalau12i	$a3, %pc_hi20(_ZZ13contextModel2vE3cxt.9)
	ld.w	$a5, $a3, %pc_lo12(_ZZ13contextModel2vE3cxt.9)
	add.d	$a0, $a0, $a2
	add.d	$a0, $a0, $a1
	st.w	$a0, $a4, %pc_lo12(_ZZ13contextModel2vE3cxt.11)
	slli.d	$a0, $a5, 8
	pcalau12i	$t6, %pc_hi20(_ZZ13contextModel2vE3cxt.8)
	ld.w	$a2, $t6, %pc_lo12(_ZZ13contextModel2vE3cxt.8)
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $a1
	st.w	$a0, $t5, %pc_lo12(_ZZ13contextModel2vE3cxt.10)
	slli.d	$a4, $a2, 8
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE3cxt.7)
	ld.w	$a5, $a0, %pc_lo12(_ZZ13contextModel2vE3cxt.7)
	add.d	$a2, $a4, $a2
	add.d	$a2, $a2, $a1
	st.w	$a2, $a3, %pc_lo12(_ZZ13contextModel2vE3cxt.9)
	slli.d	$a2, $a5, 8
	pcalau12i	$a3, %pc_hi20(_ZZ13contextModel2vE3cxt.6)
	ld.w	$a4, $a3, %pc_lo12(_ZZ13contextModel2vE3cxt.6)
	add.d	$a2, $a2, $a5
	add.d	$a2, $a2, $a1
	st.w	$a2, $t6, %pc_lo12(_ZZ13contextModel2vE3cxt.8)
	slli.d	$a2, $a4, 8
	pcalau12i	$a5, %pc_hi20(_ZZ13contextModel2vE3cxt.5)
	ld.w	$a6, $a5, %pc_lo12(_ZZ13contextModel2vE3cxt.5)
	add.d	$a2, $a2, $a4
	add.d	$a2, $a2, $a1
	st.w	$a2, $a0, %pc_lo12(_ZZ13contextModel2vE3cxt.7)
	slli.d	$a2, $a6, 8
	pcalau12i	$a4, %pc_hi20(_ZZ13contextModel2vE3cxt.4)
	ld.w	$a7, $a4, %pc_lo12(_ZZ13contextModel2vE3cxt.4)
	add.d	$a2, $a2, $a6
	add.d	$a2, $a2, $a1
	st.w	$a2, $a3, %pc_lo12(_ZZ13contextModel2vE3cxt.6)
	slli.d	$a3, $a7, 8
	pcalau12i	$a6, %pc_hi20(_ZZ13contextModel2vE3cxt.3)
	ld.w	$t0, $a6, %pc_lo12(_ZZ13contextModel2vE3cxt.3)
	add.d	$a3, $a3, $a7
	add.d	$a3, $a3, $a1
	st.w	$a3, $a5, %pc_lo12(_ZZ13contextModel2vE3cxt.5)
	slli.d	$a5, $t0, 8
	pcalau12i	$a7, %pc_hi20(_ZZ13contextModel2vE3cxt.2)
	ld.w	$t1, $a7, %pc_lo12(_ZZ13contextModel2vE3cxt.2)
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $a1
	st.w	$a5, $a4, %pc_lo12(_ZZ13contextModel2vE3cxt.4)
	slli.d	$a4, $t1, 8
	pcalau12i	$t0, %pc_hi20(_ZZ13contextModel2vE3cxt.1)
	ld.w	$t2, $t0, %pc_lo12(_ZZ13contextModel2vE3cxt.1)
	add.d	$a4, $a4, $t1
	add.d	$t1, $a4, $a1
	st.w	$t1, $a6, %pc_lo12(_ZZ13contextModel2vE3cxt.3)
	slli.d	$a4, $t2, 8
	add.d	$a4, $a4, $t2
	add.d	$a6, $a4, $a1
	ld.w	$t2, $s4, 136
	st.w	$a6, $a7, %pc_lo12(_ZZ13contextModel2vE3cxt.2)
	st.w	$a1, $t0, %pc_lo12(_ZZ13contextModel2vE3cxt.1)
	ld.d	$a4, $s4, 96
	addi.d	$a7, $t2, 1
	st.w	$a7, $s4, 136
	rotri.w	$a7, $t2, 16
	lu12i.w	$t0, 30140
	ori	$s2, $t0, 3351
	mul.d	$a7, $a7, $s2
	add.d	$a7, $a7, $t2
	slli.d	$t0, $t2, 2
	stx.w	$a7, $a4, $t0
	ld.w	$a7, $s4, 136
	addi.d	$t0, $a7, 1
	st.w	$t0, $s4, 136
	lu12i.w	$t0, 241126
	ori	$s1, $t0, 2227
	mul.d	$a1, $a1, $s1
	add.d	$a1, $a7, $a1
	rotri.w	$a1, $a1, 16
	mul.d	$a1, $a1, $s2
	add.d	$a1, $a1, $a7
	slli.d	$a7, $a7, 2
	stx.w	$a1, $a4, $a7
	ld.w	$a1, $s4, 136
	addi.d	$a7, $a1, 1
	st.w	$a7, $s4, 136
	mul.d	$a6, $a6, $s1
	add.d	$a6, $a1, $a6
	rotri.w	$a6, $a6, 16
	mul.d	$a6, $a6, $s2
	add.d	$a6, $a6, $a1
	slli.d	$a1, $a1, 2
	stx.w	$a6, $a4, $a1
	ld.w	$a1, $s4, 136
	addi.d	$a6, $a1, 1
	st.w	$a6, $s4, 136
	mul.d	$a6, $t1, $s1
	add.d	$a6, $a1, $a6
	rotri.w	$a6, $a6, 16
	mul.d	$a6, $a6, $s2
	add.d	$a6, $a6, $a1
	slli.d	$a1, $a1, 2
	stx.w	$a6, $a4, $a1
	ld.w	$a1, $s4, 136
	addi.d	$a6, $a1, 1
	st.w	$a6, $s4, 136
	mul.d	$a5, $a5, $s1
	add.d	$a5, $a1, $a5
	rotri.w	$a5, $a5, 16
	mul.d	$a5, $a5, $s2
	add.d	$a5, $a5, $a1
	slli.d	$a1, $a1, 2
	stx.w	$a5, $a4, $a1
	ld.w	$a1, $s4, 136
	addi.d	$a5, $a1, 1
	st.w	$a5, $s4, 136
	mul.d	$a3, $a3, $s1
	add.d	$a3, $a1, $a3
	rotri.w	$a3, $a3, 16
	mul.d	$a3, $a3, $s2
	add.d	$a3, $a3, $a1
	slli.d	$a1, $a1, 2
	stx.w	$a3, $a4, $a1
	ld.w	$a1, $s4, 136
	addi.d	$a3, $a1, 1
	st.w	$a3, $s4, 136
	mul.d	$a2, $a2, $s1
	add.d	$a2, $a1, $a2
	rotri.w	$a2, $a2, 16
	mul.d	$a3, $a2, $s2
	move	$s7, $s3
	ld.d	$a2, $s3, 32
	add.d	$a3, $a3, $a1
	slli.d	$a1, $a1, 2
	stx.w	$a3, $a4, $a1
	ld.bu	$a3, $a2, 0
	ld.w	$a1, $a0, %pc_lo12(_ZZ13contextModel2vE3cxt.7)
	st.d	$t3, $sp, 32                    # 8-byte Folded Spill
	st.d	$t4, $sp, 24                    # 8-byte Folded Spill
	st.d	$t5, $sp, 16                    # 8-byte Folded Spill
	beqz	$a3, .LBB69_50
# %bb.47:
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(pos)
	ld.d	$a6, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a4, $a6, 0
	ld.bu	$a5, $a2, 1
	ld.d	$a6, $a6, 16
	addi.w	$a0, $a0, -1
	addi.w	$a4, $a4, -1
	and	$a0, $a4, $a0
	ldx.bu	$a0, $a6, $a0
	bne	$a0, $a5, .LBB69_50
# %bb.48:
	move	$s3, $t6
	ori	$a0, $zero, 255
	beq	$a3, $a0, .LBB69_51
# %bb.49:
	addi.d	$a0, $a3, 1
	st.b	$a0, $a2, 0
	b	.LBB69_51
.LBB69_50:
	move	$s3, $t6
	ori	$a0, $zero, 1
	st.b	$a0, $a2, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(pos)
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a2, $a3, 0
	ld.d	$a3, $a3, 16
	addi.w	$a0, $a0, -1
	addi.w	$a2, $a2, -1
	and	$a0, $a2, $a0
	ldx.b	$a0, $a3, $a0
	ld.d	$a2, $s7, 32
	st.b	$a0, $a2, 1
.LBB69_51:                              # %_ZN13RunContextMap3setEj.exit
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN2BHILi4EEixEj)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, 136
	ld.w	$a2, $s3, %pc_lo12(_ZZ13contextModel2vE3cxt.8)
	addi.d	$a3, $a1, 1
	st.w	$a3, $s4, 136
	mul.d	$a2, $a2, $s1
	add.d	$a2, $a1, $a2
	rotri.w	$a2, $a2, 16
	mul.d	$a2, $a2, $s2
	ld.d	$a3, $s4, 96
	add.d	$a4, $a2, $a1
	slli.d	$a1, $a1, 2
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$a2, $s3, 32
	stx.w	$a4, $a3, $a1
	addi.d	$a0, $a0, 1
	st.d	$a0, $s7, 32
	ld.bu	$a0, $a2, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.w	$a1, $a1, %pc_lo12(_ZZ13contextModel2vE3cxt.10)
	st.d	$s7, $sp, 40                    # 8-byte Folded Spill
	beqz	$a0, .LBB69_55
# %bb.52:
	ld.d	$a3, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a3, $a3, %pc_lo12(pos)
	ld.d	$a6, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a4, $a6, 0
	ld.bu	$a5, $a2, 1
	ld.d	$a6, $a6, 16
	addi.w	$a3, $a3, -1
	addi.w	$a4, $a4, -1
	and	$a3, $a4, $a3
	ldx.bu	$a3, $a6, $a3
	bne	$a3, $a5, .LBB69_55
# %bb.53:
	ori	$a3, $zero, 255
	ld.d	$s7, $sp, 56                    # 8-byte Folded Reload
	beq	$a0, $a3, .LBB69_56
# %bb.54:
	addi.d	$a0, $a0, 1
	st.b	$a0, $a2, 0
	b	.LBB69_56
.LBB69_55:
	ori	$a0, $zero, 1
	st.b	$a0, $a2, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(pos)
	ld.d	$s7, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a2, $s7, 0
	ld.d	$a3, $s7, 16
	addi.w	$a0, $a0, -1
	addi.w	$a2, $a2, -1
	and	$a0, $a2, $a0
	ldx.b	$a0, $a3, $a0
	ld.d	$a2, $s3, 32
	st.b	$a0, $a2, 1
.LBB69_56:                              # %_ZN13RunContextMap3setEj.exit75
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZN2BHILi4EEixEj)
	jirl	$ra, $ra, 0
	ld.d	$a7, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a2, $a7, 32
	addi.d	$a0, $a0, 1
	st.d	$a0, $s3, 32
	ld.bu	$a0, $a2, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.w	$a1, $a1, %pc_lo12(_ZZ13contextModel2vE3cxt.12)
	beqz	$a0, .LBB69_60
# %bb.57:
	ld.d	$a3, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a3, $a3, %pc_lo12(pos)
	ld.w	$a4, $s7, 0
	ld.bu	$a5, $a2, 1
	ld.d	$a6, $s7, 16
	addi.w	$a3, $a3, -1
	addi.w	$a4, $a4, -1
	and	$a3, $a4, $a3
	ldx.bu	$a3, $a6, $a3
	bne	$a3, $a5, .LBB69_60
# %bb.58:
	ori	$a3, $zero, 255
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beq	$a0, $a3, .LBB69_61
# %bb.59:
	addi.d	$a0, $a0, 1
	st.b	$a0, $a2, 0
	b	.LBB69_61
.LBB69_60:
	ori	$a0, $zero, 1
	st.b	$a0, $a2, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(pos)
	ld.w	$a2, $s7, 0
	ld.d	$a3, $s7, 16
	addi.w	$a0, $a0, -1
	addi.w	$a2, $a2, -1
	and	$a0, $a2, $a0
	ldx.b	$a0, $a3, $a0
	ld.d	$a2, $a7, 32
	st.b	$a0, $a2, 1
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
.LBB69_61:                              # %_ZN13RunContextMap3setEj.exit78
	move	$a0, $a7
	pcaddu18i	$ra, %call36(_ZN2BHILi4EEixEj)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, 136
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a2, $a2, %pc_lo12(_ZZ13contextModel2vE3cxt.14)
	addi.d	$a3, $a1, 1
	st.w	$a3, $s4, 136
	mul.d	$a2, $a2, $s1
	add.d	$a2, $a1, $a2
	rotri.w	$a2, $a2, 16
	ld.d	$a3, $s4, 96
	mul.d	$a2, $a2, $s2
	add.d	$a2, $a2, $a1
	slli.d	$a1, $a1, 2
	stx.w	$a2, $a3, $a1
	ld.w	$a3, $s5, %pc_lo12(bpos)
	addi.d	$a0, $a0, 1
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	st.d	$a0, $a1, 32
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
.LBB69_62:
	pcalau12i	$s2, %pc_hi20(c0)
	ld.w	$a0, $a1, %pc_lo12(pos)
	ld.w	$a1, $s7, 0
	ld.w	$a2, $s2, %pc_lo12(c0)
	ld.d	$a4, $s7, 16
	addi.w	$a0, $a0, -1
	addi.w	$a1, $a1, -1
	and	$a0, $a1, $a0
	ldx.bu	$a4, $a4, $a0
	pcalau12i	$a0, %pc_hi20(y)
	ld.w	$a5, $a0, %pc_lo12(y)
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE2cm)
	pcalau12i	$a1, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$s4, $a1, %pc_lo12(_ZZ13contextModel2vE1m)
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZN10ContextMap4mix1ER5Mixeriiii)
	jirl	$ra, $ra, 0
	ld.d	$a5, $s3, 32
	ld.bu	$a4, $a5, 1
	ld.w	$a1, $s5, %pc_lo12(bpos)
	addi.d	$a6, $a4, 256
	ld.w	$a2, $s2, %pc_lo12(c0)
	ori	$a3, $zero, 8
	sub.d	$a3, $a3, $a1
	srl.w	$a6, $a6, $a3
	move	$s3, $a0
	bne	$a6, $a2, .LBB69_64
# %bb.63:
	ori	$a0, $zero, 7
	ld.bu	$a5, $a5, 0
	ld.d	$a6, $s8, %pc_lo12(ilog+16)
	sub.d	$a0, $a0, $a1
	srl.w	$a0, $a4, $a0
	slli.d	$a0, $a0, 4
	add.d	$a4, $a6, $a5
	ld.bu	$a4, $a4, 1
	andi	$a0, $a0, 16
	addu16i.d	$a0, $a0, 1
	addi.d	$a0, $a0, -8
	mul.d	$a6, $a0, $a4
	b	.LBB69_65
.LBB69_64:
	move	$a6, $zero
.LBB69_65:                              # %_ZN13RunContextMap3mixER5Mixer.exit
	ld.d	$a7, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a4, $s4, 96
	addi.w	$a5, $a4, 1
	ld.d	$a0, $s4, 32
	ld.d	$a7, $a7, 32
	st.w	$a5, $s4, 96
	slli.d	$t0, $a4, 1
	stx.h	$a6, $a0, $t0
	ld.bu	$a6, $a7, 1
	addi.d	$t0, $a6, 256
	srl.w	$t0, $t0, $a3
	ld.d	$t2, $sp, 72                    # 8-byte Folded Reload
	bne	$t0, $a2, .LBB69_67
# %bb.66:
	ori	$t0, $zero, 7
	ld.bu	$a7, $a7, 0
	ld.d	$t1, $s8, %pc_lo12(ilog+16)
	sub.d	$t0, $t0, $a1
	srl.w	$a6, $a6, $t0
	slli.d	$a6, $a6, 4
	add.d	$a7, $t1, $a7
	ld.bu	$a7, $a7, 1
	andi	$a6, $a6, 16
	addu16i.d	$a6, $a6, 1
	addi.d	$a6, $a6, -8
	mul.d	$t0, $a6, $a7
	b	.LBB69_68
.LBB69_67:
	move	$t0, $zero
.LBB69_68:                              # %_ZN13RunContextMap3mixER5Mixer.exit80
	addi.w	$a6, $a4, 2
	ld.d	$a7, $t2, 32
	st.w	$a6, $s4, 96
	slli.d	$a5, $a5, 1
	stx.h	$t0, $a0, $a5
	ld.bu	$a5, $a7, 1
	addi.d	$t0, $a5, 256
	srl.w	$a3, $t0, $a3
	bne	$a3, $a2, .LBB69_70
# %bb.69:
	ori	$a2, $zero, 7
	ld.bu	$a3, $a7, 0
	ld.d	$a7, $s8, %pc_lo12(ilog+16)
	sub.d	$a1, $a2, $a1
	srl.w	$a1, $a5, $a1
	slli.d	$a1, $a1, 4
	add.d	$a2, $a7, $a3
	ld.bu	$a2, $a2, 1
	andi	$a1, $a1, 16
	addu16i.d	$a1, $a1, 1
	addi.d	$a1, $a1, -8
	mul.d	$a1, $a1, $a2
	b	.LBB69_71
.LBB69_70:
	move	$a1, $zero
.LBB69_71:                              # %_ZN13RunContextMap3mixER5Mixer.exit82
	addi.d	$a2, $a4, 3
	pcalau12i	$a3, %pc_hi20(level)
	ld.w	$a3, $a3, %pc_lo12(level)
	st.w	$a2, $s4, 96
	slli.d	$a2, $a6, 1
	ori	$a4, $zero, 4
	stx.h	$a1, $a0, $a2
	blt	$a3, $a4, .LBB69_74
# %bb.72:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	move	$s8, $s1
	addi.d	$s1, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	move	$a0, $s1
	move	$a1, $s0
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z11sparseModelR5Mixerii)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z13distanceModelR5Mixer)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z8picModelR5Mixer)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z11recordModelR5Mixer)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z9wordModelR5Mixer)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z13indirectModelR5Mixer)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	move	$s1, $s8
	pcaddu18i	$ra, %call36(_Z8dmcModelR5Mixer)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
	ori	$a1, $zero, 8
	bne	$a0, $a1, .LBB69_74
# %bb.73:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	pcaddu18i	$ra, %call36(_Z8exeModelR5Mixer)
	jirl	$ra, $ra, 0
.LBB69_74:
	ori	$a0, $zero, 2
	slt	$a1, $a0, $s3
	masknez	$a4, $a0, $a1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a3, $a0, %pc_lo12(pos)
	ld.w	$a0, $s7, 0
	maskeqz	$a5, $s3, $a1
	ld.d	$a1, $s7, 16
	addi.w	$a2, $a3, -1
	addi.w	$a6, $a0, -1
	and	$a0, $a6, $a2
	ldx.bu	$a2, $a1, $a0
	addi.w	$a0, $a3, -2
	and	$a0, $a6, $a0
	ldx.bu	$a0, $a1, $a0
	addi.w	$a3, $a3, -3
	ld.w	$a7, $s4, 88
	and	$a3, $a6, $a3
	ldx.bu	$a3, $a1, $a3
	ld.w	$a6, $s4, 92
	addi.d	$a1, $a7, 1
	st.w	$a1, $s4, 88
	ld.d	$a1, $s4, 80
	add.d	$a6, $a2, $a6
	addi.d	$a6, $a6, 8
	slli.d	$a7, $a7, 2
	stx.w	$a6, $a1, $a7
	ld.w	$a6, $s4, 92
	or	$a4, $a5, $a4
	ld.w	$a5, $s2, %pc_lo12(c0)
	ld.w	$a7, $s4, 88
	addi.d	$a6, $a6, 264
	st.w	$a6, $s4, 92
	add.d	$a5, $a5, $a6
	addi.d	$a6, $a7, 1
	st.w	$a6, $s4, 88
	xor	$a6, $a2, $a0
	sltui	$a6, $a6, 1
	slli.d	$a7, $a7, 2
	stx.w	$a5, $a1, $a7
	ld.w	$a5, $s4, 92
	slli.d	$a6, $a6, 6
	add.d	$a4, $a4, $a6
	ld.w	$a6, $s1, %pc_lo12(c4)
	addi.d	$a5, $a5, 256
	ld.w	$a7, $s6, %pc_lo12(_ZZ13contextModel2vE8filetype)
	st.w	$a5, $s4, 92
	srli.d	$a6, $a6, 2
	andi	$a6, $a6, 56
	addi.d	$a7, $a7, -8
	sltui	$a7, $a7, 1
	slli.d	$a7, $a7, 7
	add.d	$a4, $a4, $a5
	ld.w	$a5, $s4, 88
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	addi.d	$a4, $a4, -2
	addi.d	$a6, $a5, 1
	st.w	$a6, $s4, 88
	slli.d	$a5, $a5, 2
	stx.w	$a4, $a1, $a5
	ld.w	$a4, $s4, 92
	ld.w	$a5, $s4, 88
	addi.d	$a4, $a4, 256
	st.w	$a4, $s4, 92
	add.d	$a4, $a4, $a0
	addi.d	$a6, $a5, 1
	st.w	$a6, $s4, 88
	slli.d	$a5, $a5, 2
	stx.w	$a4, $a1, $a5
	ld.w	$a4, $s4, 92
	ld.w	$a5, $s4, 88
	addi.d	$a4, $a4, 256
	st.w	$a4, $s4, 92
	add.d	$a4, $a4, $a3
	addi.d	$a6, $a5, 1
	st.w	$a6, $s4, 88
	slli.d	$a5, $a5, 2
	stx.w	$a4, $a1, $a5
	ld.w	$a4, $s4, 92
	ld.w	$a5, $s4, 88
	addi.d	$a4, $a4, 256
	st.w	$a4, $s4, 92
	add.d	$a4, $a4, $s0
	addi.d	$a6, $a5, 1
	st.w	$a6, $s4, 88
	slli.d	$a5, $a5, 2
	stx.w	$a4, $a1, $a5
	ld.w	$a4, $s4, 92
	ld.w	$a5, $s5, %pc_lo12(bpos)
	addi.d	$a4, $a4, 256
	st.w	$a4, $s4, 92
	beqz	$a5, .LBB69_76
# %bb.75:
	ld.w	$a6, $s2, %pc_lo12(c0)
	ori	$a7, $zero, 8
	sub.d	$a7, $a7, $a5
	sll.w	$a6, $a6, $a7
	addi.d	$a7, $a5, -1
	sltui	$a7, $a7, 1
	srli.d	$a3, $a3, 1
	maskeqz	$a3, $a3, $a7
	add.d	$a6, $a6, $a3
	slti	$a3, $a5, 5
	ori	$a7, $zero, 5
	masknez	$a7, $a7, $a3
	maskeqz	$a3, $a5, $a3
	or	$a3, $a3, $a7
	slli.d	$a3, $a3, 8
	srli.d	$a2, $a2, 5
	or	$a3, $a3, $a2
	srli.d	$a0, $a0, 5
	bstrins.d	$a3, $a0, 5, 3
	srli.d	$a0, $a6, 6
	bstrins.d	$a3, $a0, 7, 6
	b	.LBB69_77
.LBB69_76:
	srli.d	$a3, $a3, 7
	ld.w	$a5, $s1, %pc_lo12(c4)
	srli.d	$a2, $a2, 4
	bstrins.d	$a3, $a2, 7, 4
	srli.d	$a0, $a0, 6
	bstrins.d	$a3, $a0, 3, 2
	srli.d	$a0, $a5, 31
	bstrins.d	$a3, $a0, 1, 1
.LBB69_77:
	add.d	$a0, $a3, $a4
	ori	$a2, $zero, 1536
.LBB69_78:                              # %.sink.split
	ld.w	$a3, $fp, 88
	addi.d	$a4, $a3, 1
	st.w	$a4, $fp, 88
	slli.d	$a3, $a3, 2
	stx.w	$a0, $a1, $a3
	ld.w	$a0, $fp, 92
	add.d	$a0, $a0, $a2
	st.w	$a0, $fp, 92
.LBB69_79:
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	pcaddu18i	$t8, %call36(_ZN5Mixer1pEv)
	jr	$t8
.LBB69_80:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE2cm)
	addi.d	$fp, $a0, %pc_lo12(_ZGVZ13contextModel2vE2cm)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB69_1
# %bb.81:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 512
	sll.w	$a1, $a1, $a0
.Ltmp288:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE2cm)
	ori	$a2, $zero, 9
	pcaddu18i	$ra, %call36(_ZN10ContextMapC2Eii)
	jirl	$ra, $ra, 0
.Ltmp289:                               # EH_LABEL
# %bb.82:
	pcalau12i	$a0, %pc_hi20(_ZN10ContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN10ContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ13contextModel2vE2cm)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13contextModel2vE2cm)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE2cm)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE2cm)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB69_1
.LBB69_83:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE4rcm7)
	addi.d	$fp, $a0, %pc_lo12(_ZGVZ13contextModel2vE4rcm7)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB69_2
# %bb.84:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp291:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE4rcm7)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE4rcm7)
	pcaddu18i	$ra, %call36(_ZN13RunContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp292:                               # EH_LABEL
# %bb.85:
	pcalau12i	$a0, %pc_hi20(_ZN13RunContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN13RunContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ13contextModel2vE4rcm7)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13contextModel2vE4rcm7)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE4rcm7)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE4rcm7)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB69_2
.LBB69_86:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE4rcm9)
	addi.d	$fp, $a0, %pc_lo12(_ZGVZ13contextModel2vE4rcm9)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB69_3
# %bb.87:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp294:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE4rcm9)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE4rcm9)
	pcaddu18i	$ra, %call36(_ZN13RunContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp295:                               # EH_LABEL
# %bb.88:
	pcalau12i	$a0, %pc_hi20(_ZN13RunContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN13RunContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ13contextModel2vE4rcm9)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13contextModel2vE4rcm9)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE4rcm9)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE4rcm9)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB69_3
.LBB69_89:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE5rcm10)
	addi.d	$fp, $a0, %pc_lo12(_ZGVZ13contextModel2vE5rcm10)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB69_4
# %bb.90:
	pcalau12i	$a0, %pc_hi20(level)
	ld.wu	$a0, $a0, %pc_lo12(level)
	lu12i.w	$a1, 16
	sll.w	$a1, $a1, $a0
.Ltmp297:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE5rcm10)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE5rcm10)
	pcaddu18i	$ra, %call36(_ZN13RunContextMapC2Ei)
	jirl	$ra, $ra, 0
.Ltmp298:                               # EH_LABEL
# %bb.91:
	pcalau12i	$a0, %pc_hi20(_ZN13RunContextMapD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN13RunContextMapD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ13contextModel2vE5rcm10)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13contextModel2vE5rcm10)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE5rcm10)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE5rcm10)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB69_4
.LBB69_92:
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE1m)
	addi.d	$fp, $a0, %pc_lo12(_ZGVZ13contextModel2vE1m)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB69_5
# %bb.93:
.Ltmp300:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$a0, $a0, %pc_lo12(_ZZ13contextModel2vE1m)
	ori	$a1, $zero, 800
	ori	$a2, $zero, 3088
	ori	$a3, $zero, 7
	ori	$a4, $zero, 128
	pcaddu18i	$ra, %call36(_ZN5MixerC2Eiiii)
	jirl	$ra, $ra, 0
.Ltmp301:                               # EH_LABEL
# %bb.94:
	pcalau12i	$a0, %pc_hi20(_ZN5MixerD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5MixerD2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ13contextModel2vE1m)
	addi.d	$a1, $a1, %pc_lo12(_ZZ13contextModel2vE1m)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ13contextModel2vE1m)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ13contextModel2vE1m)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB69_5
.LBB69_95:
.Ltmp302:                               # EH_LABEL
	b	.LBB69_100
.LBB69_96:
.Ltmp299:                               # EH_LABEL
	b	.LBB69_100
.LBB69_97:
.Ltmp296:                               # EH_LABEL
	b	.LBB69_100
.LBB69_98:
.Ltmp293:                               # EH_LABEL
	b	.LBB69_100
.LBB69_99:
.Ltmp290:                               # EH_LABEL
.LBB69_100:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end69:
	.size	_Z13contextModel2v, .Lfunc_end69-_Z13contextModel2v
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table69:
.Lexception15:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end15-.Lcst_begin15
.Lcst_begin15:
	.uleb128 .Lfunc_begin15-.Lfunc_begin15  # >> Call Site 1 <<
	.uleb128 .Ltmp288-.Lfunc_begin15        #   Call between .Lfunc_begin15 and .Ltmp288
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp288-.Lfunc_begin15        # >> Call Site 2 <<
	.uleb128 .Ltmp289-.Ltmp288              #   Call between .Ltmp288 and .Ltmp289
	.uleb128 .Ltmp290-.Lfunc_begin15        #     jumps to .Ltmp290
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp289-.Lfunc_begin15        # >> Call Site 3 <<
	.uleb128 .Ltmp291-.Ltmp289              #   Call between .Ltmp289 and .Ltmp291
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp291-.Lfunc_begin15        # >> Call Site 4 <<
	.uleb128 .Ltmp292-.Ltmp291              #   Call between .Ltmp291 and .Ltmp292
	.uleb128 .Ltmp293-.Lfunc_begin15        #     jumps to .Ltmp293
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp292-.Lfunc_begin15        # >> Call Site 5 <<
	.uleb128 .Ltmp294-.Ltmp292              #   Call between .Ltmp292 and .Ltmp294
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp294-.Lfunc_begin15        # >> Call Site 6 <<
	.uleb128 .Ltmp295-.Ltmp294              #   Call between .Ltmp294 and .Ltmp295
	.uleb128 .Ltmp296-.Lfunc_begin15        #     jumps to .Ltmp296
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp295-.Lfunc_begin15        # >> Call Site 7 <<
	.uleb128 .Ltmp297-.Ltmp295              #   Call between .Ltmp295 and .Ltmp297
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp297-.Lfunc_begin15        # >> Call Site 8 <<
	.uleb128 .Ltmp298-.Ltmp297              #   Call between .Ltmp297 and .Ltmp298
	.uleb128 .Ltmp299-.Lfunc_begin15        #     jumps to .Ltmp299
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp298-.Lfunc_begin15        # >> Call Site 9 <<
	.uleb128 .Ltmp300-.Ltmp298              #   Call between .Ltmp298 and .Ltmp300
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp300-.Lfunc_begin15        # >> Call Site 10 <<
	.uleb128 .Ltmp301-.Ltmp300              #   Call between .Ltmp300 and .Ltmp301
	.uleb128 .Ltmp302-.Lfunc_begin15        #     jumps to .Ltmp302
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp301-.Lfunc_begin15        # >> Call Site 11 <<
	.uleb128 .Lfunc_end69-.Ltmp301          #   Call between .Ltmp301 and .Lfunc_end69
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end15:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN13RunContextMapC2Ei,"axG",@progbits,_ZN13RunContextMapC2Ei,comdat
	.weak	_ZN13RunContextMapC2Ei          # -- Begin function _ZN13RunContextMapC2Ei
	.p2align	5
	.type	_ZN13RunContextMapC2Ei,@function
_ZN13RunContextMapC2Ei:                 # @_ZN13RunContextMapC2Ei
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	bstrpick.d	$a2, $a1, 62, 61
	add.w	$s1, $a1, $a2
	move	$fp, $a0
	move	$a0, $s1
	bstrins.d	$a0, $zero, 1, 0
	st.w	$a0, $fp, 4
	ori	$a2, $zero, 3
	st.w	$a0, $fp, 0
	blt	$a2, $a1, .LBB70_2
# %bb.1:
	move	$s0, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 8
	b	.LBB70_6
.LBB70_2:
	addi.w	$a0, $a0, 64
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a2, $a1, 0
	ld.w	$a3, $a1, 4
	add.w	$a2, $a2, $a0
	st.w	$a2, $a1, 0
	bge	$a3, $a2, .LBB70_4
# %bb.3:
	st.w	$a2, $a1, 4
.LBB70_4:                               # %_ZN14ProgramChecker5allocEi.exit.i.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB70_42
# %bb.5:
	bstrins.d	$a0, $zero, 5, 0
	addi.d	$s0, $a0, 64
	st.d	$s0, $fp, 16
.LBB70_6:                               # %_ZN2BHILi4EEC2Ei.exit
	ld.bu	$a0, $s0, 2
	srai.d	$a1, $s1, 2
	addi.d	$a1, $a1, -1
	st.w	$a1, $fp, 24
	addi.d	$s1, $s0, 2
	beqz	$a0, .LBB70_23
# %bb.7:
	ld.hu	$a0, $s0, 0
	beqz	$a0, .LBB70_40
# %bb.8:
	ld.bu	$a1, $s0, 6
	addi.d	$a0, $s0, 4
	beqz	$a1, .LBB70_24
# %bb.9:
	ld.hu	$a1, $a0, 0
	beqz	$a1, .LBB70_25
# %bb.10:
	ld.bu	$a2, $s0, 10
	addi.d	$a1, $s0, 8
	beqz	$a2, .LBB70_26
# %bb.11:
	ld.hu	$a2, $a1, 0
	beqz	$a2, .LBB70_27
# %bb.12:
	ld.bu	$a2, $s0, 14
	addi.d	$a1, $s0, 12
	beqz	$a2, .LBB70_28
# %bb.13:
	ld.hu	$a2, $a1, 0
	beqz	$a2, .LBB70_29
# %bb.14:
	ld.bu	$a2, $s0, 18
	addi.d	$a1, $s0, 16
	beqz	$a2, .LBB70_30
# %bb.15:
	ld.hu	$a2, $a1, 0
	beqz	$a2, .LBB70_31
# %bb.16:
	ld.bu	$a2, $s0, 22
	addi.d	$a1, $s0, 20
	beqz	$a2, .LBB70_32
# %bb.17:
	ld.hu	$a2, $a1, 0
	beqz	$a2, .LBB70_33
# %bb.18:
	ld.bu	$a2, $s0, 26
	addi.d	$a1, $s0, 24
	beqz	$a2, .LBB70_34
# %bb.19:
	ld.hu	$a3, $a1, 0
	beqz	$a3, .LBB70_35
# %bb.20:
	ld.bu	$a3, $s0, 30
	addi.d	$a1, $s0, 28
	beqz	$a3, .LBB70_36
# %bb.21:
	ld.hu	$a4, $a1, 0
	beqz	$a4, .LBB70_41
# %bb.22:
	move	$s2, $zero
	pcalau12i	$a1, %pc_hi20(_ZZN2BHILi4EEixEjE3tmp)
	st.w	$zero, $a1, %pc_lo12(_ZZN2BHILi4EEixEjE3tmp)
	sltu	$a1, $a2, $a3
	ori	$a2, $zero, 28
	masknez	$a2, $a2, $a1
	ori	$a3, $zero, 24
	maskeqz	$a1, $a3, $a1
	or	$a2, $a1, $a2
	b	.LBB70_39
.LBB70_23:                              # %.loopexit.i
	st.h	$zero, $s0, 0
	b	.LBB70_40
.LBB70_24:
	ori	$a2, $zero, 4
	move	$a1, $a0
	b	.LBB70_37
.LBB70_25:
	ori	$a2, $zero, 4
	move	$a1, $a0
	b	.LBB70_38
.LBB70_26:
	ori	$a2, $zero, 8
	b	.LBB70_37
.LBB70_27:
	ori	$a2, $zero, 8
	b	.LBB70_38
.LBB70_28:
	ori	$a2, $zero, 12
	b	.LBB70_37
.LBB70_29:
	ori	$a2, $zero, 12
	b	.LBB70_38
.LBB70_30:
	ori	$a2, $zero, 16
	b	.LBB70_37
.LBB70_31:
	ori	$a2, $zero, 16
	b	.LBB70_38
.LBB70_32:
	ori	$a2, $zero, 20
	b	.LBB70_37
.LBB70_33:
	ori	$a2, $zero, 20
	b	.LBB70_38
.LBB70_34:
	ori	$a2, $zero, 24
	b	.LBB70_37
.LBB70_35:
	ori	$a2, $zero, 24
	b	.LBB70_38
.LBB70_36:
	ori	$a2, $zero, 28
.LBB70_37:                              # %.loopexit.thread47.i
	st.h	$zero, $a1, 0
.LBB70_38:                              # %.loopexit.thread.i
	ld.w	$s2, $a1, 0
	pcalau12i	$a1, %pc_hi20(_ZZN2BHILi4EEixEjE3tmp)
	st.w	$s2, $a1, %pc_lo12(_ZZN2BHILi4EEixEjE3tmp)
.LBB70_39:
	move	$a1, $s0
	pcaddu18i	$ra, %call36(memmove)
	jirl	$ra, $ra, 0
	st.w	$s2, $s0, 0
.LBB70_40:
	st.d	$s1, $fp, 32
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB70_41:
	ori	$a2, $zero, 28
	b	.LBB70_38
.LBB70_42:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end70:
	.size	_ZN13RunContextMapC2Ei, .Lfunc_end70-_ZN13RunContextMapC2Ei
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13RunContextMapD2Ev,"axG",@progbits,_ZN13RunContextMapD2Ev,comdat
	.weak	_ZN13RunContextMapD2Ev          # -- Begin function _ZN13RunContextMapD2Ev
	.p2align	5
	.type	_ZN13RunContextMapD2Ev,@function
_ZN13RunContextMapD2Ev:                 # @_ZN13RunContextMapD2Ev
	.cfi_startproc
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.d	$a2, $a3, $a2
	addi.w	$a2, $a2, -64
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB71_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB71_2:                               # %_ZN2BHILi4EED2Ev.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end71:
	.size	_ZN13RunContextMapD2Ev, .Lfunc_end71-_ZN13RunContextMapD2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_ZN9PredictorC2Ev               # -- Begin function _ZN9PredictorC2Ev
	.p2align	5
	.type	_ZN9PredictorC2Ev,@function
_ZN9PredictorC2Ev:                      # @_ZN9PredictorC2Ev
# %bb.0:
	ori	$a1, $zero, 2048
	st.w	$a1, $a0, 0
	ret
.Lfunc_end72:
	.size	_ZN9PredictorC2Ev, .Lfunc_end72-_ZN9PredictorC2Ev
                                        # -- End function
	.globl	_ZN9Predictor6updateEv          # -- Begin function _ZN9Predictor6updateEv
	.p2align	5
	.type	_ZN9Predictor6updateEv,@function
_ZN9Predictor6updateEv:                 # @_ZN9Predictor6updateEv
.Lfunc_begin16:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception16
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$a1, %pc_hi20(_ZGVZN9Predictor6updateEvE1a)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZN9Predictor6updateEvE1a)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB73_10
.LBB73_1:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a1)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a1)
	dbar	20
	beqz	$a0, .LBB73_13
.LBB73_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a2)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a2)
	dbar	20
	beqz	$a0, .LBB73_16
.LBB73_3:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a3)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a3)
	dbar	20
	beqz	$a0, .LBB73_19
.LBB73_4:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a4)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a4)
	dbar	20
	beqz	$a0, .LBB73_22
.LBB73_5:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a5)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a5)
	dbar	20
	beqz	$a0, .LBB73_25
.LBB73_6:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a6)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a6)
	dbar	20
	beqz	$a0, .LBB73_28
.LBB73_7:
	pcalau12i	$s1, %pc_hi20(c0)
	ld.w	$a1, $s1, %pc_lo12(c0)
	pcalau12i	$s0, %pc_hi20(y)
	ld.w	$a2, $s0, %pc_lo12(y)
	alsl.w	$a0, $a1, $a2, 1
	alsl.d	$a1, $a1, $a2, 1
	st.w	$a1, $s1, %pc_lo12(c0)
	ori	$a1, $zero, 256
	pcalau12i	$s3, %pc_hi20(pos)
	pcalau12i	$a2, %pc_hi20(buf)
	addi.d	$s2, $a2, %pc_lo12(buf)
	blt	$a0, $a1, .LBB73_9
# %bb.8:
	ld.w	$a1, $s3, %pc_lo12(pos)
	ld.w	$a2, $s2, 0
	addi.d	$a3, $a1, 1
	ld.d	$a4, $s2, 16
	st.w	$a3, $s3, %pc_lo12(pos)
	addi.w	$a2, $a2, -1
	and	$a1, $a2, $a1
	stx.b	$a0, $a4, $a1
	pcalau12i	$a0, %pc_hi20(c4)
	ld.w	$a1, $a0, %pc_lo12(c4)
	ld.w	$a2, $s1, %pc_lo12(c0)
	slli.d	$a1, $a1, 8
	add.d	$a1, $a2, $a1
	addi.d	$a1, $a1, -256
	st.w	$a1, $a0, %pc_lo12(c4)
	ori	$a0, $zero, 1
	st.w	$a0, $s1, %pc_lo12(c0)
.LBB73_9:
	pcalau12i	$a0, %pc_hi20(bpos)
	ld.w	$a1, $a0, %pc_lo12(bpos)
	addi.d	$a1, $a1, 1
	andi	$a1, $a1, 7
	st.w	$a1, $a0, %pc_lo12(bpos)
	pcaddu18i	$ra, %call36(_Z13contextModel2v)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(stretch+16)
	ld.d	$a1, $a1, %pc_lo12(stretch+16)
	ld.w	$a3, $s1, %pc_lo12(c0)
	slli.d	$t4, $a0, 1
	ld.w	$a2, $s0, %pc_lo12(y)
	ldx.h	$a4, $a1, $t4
	lu12i.w	$a5, 16
	ori	$a5, $a5, 126
	mul.d	$a2, $a2, $a5
	pcalau12i	$a6, %pc_hi20(_ZZN9Predictor6updateEvE1a)
	addi.d	$a6, $a6, %pc_lo12(_ZZN9Predictor6updateEvE1a)
	ld.w	$a7, $a6, 0
	ld.d	$t0, $a6, 24
	slli.d	$t1, $a7, 1
	ldx.hu	$t2, $t0, $t1
	alsl.d	$a7, $a7, $t0, 1
	sub.d	$t3, $a2, $t2
	ld.hu	$t5, $a7, 2
	srli.d	$t3, $t3, 7
	add.d	$t2, $t2, $t3
	stx.h	$t2, $t0, $t1
	sub.d	$a2, $a2, $t5
	srli.d	$a2, $a2, 7
	add.d	$a2, $t5, $a2
	st.h	$a2, $a7, 2
	andi	$a7, $a4, 127
	ori	$a2, $zero, 2048
	add.d	$a4, $a4, $a2
	srli.d	$a4, $a4, 7
	slli.d	$t1, $a3, 5
	add.d	$a3, $t1, $a3
	add.w	$t1, $a4, $a3
	alsl.d	$a3, $t1, $t0, 1
	slli.d	$a4, $t1, 1
	ldx.hu	$a4, $t0, $a4
	ld.hu	$t0, $a3, 2
	ori	$a3, $zero, 128
	sub.d	$t2, $a3, $a7
	mul.d	$a4, $t2, $a4
	mul.d	$a7, $a7, $t0
	add.d	$a4, $a7, $a4
	srli.d	$a4, $a4, 11
	st.w	$a4, $fp, 0
	ld.w	$t7, $s3, %pc_lo12(pos)
	ld.w	$t0, $s2, 0
	st.w	$t1, $a6, 0
	ld.d	$a7, $s2, 16
	addi.w	$a6, $t7, -1
	addi.w	$t8, $t0, -1
	and	$t0, $t8, $a6
	ldx.bu	$t1, $a7, $t0
	ld.w	$a6, $s1, %pc_lo12(c0)
	ld.w	$t2, $s0, %pc_lo12(y)
	ldx.h	$t3, $a1, $t4
	slli.d	$t1, $t1, 8
	add.d	$t1, $t1, $a6
	mul.d	$a5, $t2, $a5
	pcalau12i	$t2, %pc_hi20(_ZZN9Predictor6updateEvE2a1)
	addi.d	$t2, $t2, %pc_lo12(_ZZN9Predictor6updateEvE2a1)
	ld.w	$t5, $t2, 0
	ld.d	$t6, $t2, 24
	slli.d	$s0, $t5, 1
	ldx.hu	$s1, $t6, $s0
	alsl.d	$t5, $t5, $t6, 1
	sub.d	$s2, $a5, $s1
	ld.hu	$s3, $t5, 2
	srli.d	$s2, $s2, 7
	add.d	$s1, $s1, $s2
	stx.h	$s1, $t6, $s0
	sub.d	$s0, $a5, $s3
	srli.d	$s0, $s0, 7
	add.d	$s0, $s3, $s0
	st.h	$s0, $t5, 2
	andi	$t5, $t3, 127
	add.d	$t3, $t3, $a2
	srli.d	$t3, $t3, 7
	slli.d	$s0, $t1, 5
	add.d	$t1, $s0, $t1
	add.w	$t1, $t3, $t1
	alsl.d	$t3, $t1, $t6, 1
	slli.d	$s0, $t1, 1
	ldx.hu	$t6, $t6, $s0
	ld.hu	$t3, $t3, 2
	st.w	$t1, $t2, 0
	sub.d	$t1, $a3, $t5
	mul.d	$t1, $t1, $t6
	mul.d	$t2, $t5, $t3
	add.d	$t1, $t2, $t1
	srli.d	$s1, $t1, 11
	ldx.bu	$t6, $a7, $t0
	addi.w	$t1, $t7, -2
	and	$t1, $t8, $t1
	ldx.bu	$s0, $a7, $t1
	lu12i.w	$t2, 48828
	ori	$t2, $t2, 3491
	mul.d	$t5, $t6, $t2
	lu12i.w	$t3, 7325
	ori	$t3, $t3, 2291
	mul.d	$s2, $s0, $t3
	add.w	$s2, $t5, $s2
	lu12i.w	$t5, -56156
	ori	$t5, $t5, 3431
	add.d	$s2, $s2, $t5
	srli.d	$s3, $s2, 9
	srli.d	$t6, $t6, 2
	srli.d	$s0, $s0, 3
	xor	$t6, $s0, $t6
	xor	$t6, $t6, $s3
	xor	$t6, $t6, $s2
	bstrpick.d	$t6, $t6, 15, 0
	xor	$s0, $a6, $t6
	ldx.h	$s2, $a1, $t4
	lu12i.w	$t6, 15
	ori	$t6, $t6, 4095
	xor	$s0, $s0, $t6
	pcalau12i	$s3, %pc_hi20(_ZZN9Predictor6updateEvE2a2)
	addi.d	$s3, $s3, %pc_lo12(_ZZN9Predictor6updateEvE2a2)
	ld.w	$s4, $s3, 0
	ld.d	$s5, $s3, 24
	slli.d	$s6, $s4, 1
	ldx.hu	$s7, $s5, $s6
	alsl.d	$s4, $s4, $s5, 1
	sub.d	$s8, $a5, $s7
	ld.hu	$ra, $s4, 2
	srli.d	$s8, $s8, 7
	add.d	$s7, $s7, $s8
	stx.h	$s7, $s5, $s6
	sub.d	$s6, $a5, $ra
	srli.d	$s6, $s6, 7
	add.d	$s6, $ra, $s6
	st.h	$s6, $s4, 2
	andi	$s4, $s2, 127
	add.d	$s2, $s2, $a2
	srli.d	$s2, $s2, 7
	slli.d	$s6, $s0, 5
	add.d	$s0, $s6, $s0
	add.w	$s0, $s0, $s2
	alsl.d	$s2, $s0, $s5, 1
	slli.d	$s6, $s0, 1
	ldx.hu	$s5, $s5, $s6
	ld.hu	$s2, $s2, 2
	st.w	$s0, $s3, 0
	sub.d	$s0, $a3, $s4
	mul.d	$s0, $s0, $s5
	mul.d	$s2, $s4, $s2
	add.d	$s0, $s2, $s0
	srli.d	$s2, $s0, 11
	ldx.bu	$s3, $a7, $t0
	ldx.bu	$s4, $a7, $t1
	addi.w	$t7, $t7, -3
	and	$t7, $t8, $t7
	ldx.bu	$s5, $a7, $t7
	mul.d	$s0, $s3, $t2
	mul.d	$s6, $s4, $t3
	lu12i.w	$t8, 12208
	ori	$t8, $t8, 271
	mul.d	$s7, $s5, $t8
	add.d	$s0, $s0, $s6
	add.w	$s6, $s0, $s7
	lu12i.w	$s0, -43948
	ori	$s0, $s0, 3702
	add.d	$s6, $s6, $s0
	srli.d	$s7, $s6, 9
	srli.d	$s3, $s3, 2
	srli.d	$s4, $s4, 3
	srli.d	$s5, $s5, 4
	xor	$s3, $s4, $s3
	xor	$s3, $s3, $s5
	xor	$s3, $s3, $s7
	ldx.h	$t4, $a1, $t4
	xor	$s3, $s3, $s6
	bstrpick.d	$s3, $s3, 15, 0
	xor	$s3, $s3, $a6
	pcalau12i	$s4, %pc_hi20(_ZZN9Predictor6updateEvE2a3)
	addi.d	$s4, $s4, %pc_lo12(_ZZN9Predictor6updateEvE2a3)
	ld.w	$s5, $s4, 0
	ld.d	$s6, $s4, 24
	slli.d	$s7, $s5, 1
	ldx.hu	$s8, $s6, $s7
	alsl.d	$s5, $s5, $s6, 1
	sub.d	$ra, $a5, $s8
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	ld.hu	$fp, $s5, 2
	srli.d	$ra, $ra, 7
	add.d	$s8, $s8, $ra
	stx.h	$s8, $s6, $s7
	sub.d	$s7, $a5, $fp
	srli.d	$s7, $s7, 7
	add.d	$fp, $fp, $s7
	st.h	$fp, $s5, 2
	andi	$fp, $t4, 127
	add.d	$t4, $t4, $a2
	srli.d	$t4, $t4, 7
	slli.d	$s5, $s3, 5
	add.d	$s3, $s5, $s3
	add.w	$t4, $s3, $t4
	alsl.d	$s3, $t4, $s6, 1
	slli.d	$s5, $t4, 1
	ldx.hu	$s5, $s6, $s5
	ld.hu	$s3, $s3, 2
	st.w	$t4, $s4, 0
	sub.d	$t4, $a3, $fp
	mul.d	$t4, $t4, $s5
	mul.d	$fp, $fp, $s3
	add.d	$t4, $fp, $t4
	srli.d	$t4, $t4, 11
	add.d	$a0, $a0, $s1
	add.d	$a0, $a0, $s2
	add.d	$a0, $a0, $t4
	addi.w	$a0, $a0, 2
	ldx.bu	$fp, $a7, $t0
	slli.d	$t4, $a4, 1
	ldx.h	$s1, $a1, $t4
	srli.d	$a0, $a0, 2
	slli.d	$fp, $fp, 8
	add.d	$fp, $fp, $a6
	pcalau12i	$s2, %pc_hi20(_ZZN9Predictor6updateEvE2a4)
	addi.d	$s2, $s2, %pc_lo12(_ZZN9Predictor6updateEvE2a4)
	ld.w	$s3, $s2, 0
	ld.d	$s4, $s2, 24
	slli.d	$s5, $s3, 1
	ldx.hu	$s6, $s4, $s5
	alsl.d	$s3, $s3, $s4, 1
	sub.d	$s7, $a5, $s6
	ld.hu	$s8, $s3, 2
	srli.d	$s7, $s7, 7
	add.d	$s6, $s6, $s7
	stx.h	$s6, $s4, $s5
	sub.d	$s5, $a5, $s8
	srli.d	$s5, $s5, 7
	add.d	$s5, $s8, $s5
	st.h	$s5, $s3, 2
	andi	$s3, $s1, 127
	add.d	$s1, $s1, $a2
	srli.d	$s1, $s1, 7
	slli.d	$s5, $fp, 5
	add.d	$fp, $s5, $fp
	add.w	$fp, $s1, $fp
	alsl.d	$s1, $fp, $s4, 1
	slli.d	$s5, $fp, 1
	ldx.hu	$s4, $s4, $s5
	ld.hu	$s1, $s1, 2
	st.w	$fp, $s2, 0
	sub.d	$fp, $a3, $s3
	mul.d	$fp, $fp, $s4
	mul.d	$s1, $s3, $s1
	ldx.bu	$s2, $a7, $t0
	ldx.bu	$s3, $a7, $t1
	add.d	$fp, $s1, $fp
	srli.d	$s1, $fp, 11
	mul.d	$fp, $s2, $t2
	mul.d	$s4, $s3, $t3
	add.w	$fp, $fp, $s4
	add.d	$t5, $fp, $t5
	srli.d	$fp, $t5, 9
	srli.d	$s2, $s2, 2
	srli.d	$s3, $s3, 3
	xor	$s2, $s3, $s2
	xor	$fp, $s2, $fp
	xor	$t5, $fp, $t5
	ldx.h	$fp, $a1, $t4
	bstrpick.d	$t5, $t5, 15, 0
	xor	$t5, $a6, $t5
	xor	$t5, $t5, $t6
	pcalau12i	$t6, %pc_hi20(_ZZN9Predictor6updateEvE2a5)
	addi.d	$t6, $t6, %pc_lo12(_ZZN9Predictor6updateEvE2a5)
	ld.w	$s2, $t6, 0
	ld.d	$s3, $t6, 24
	slli.d	$s4, $s2, 1
	ldx.hu	$s5, $s3, $s4
	alsl.d	$s2, $s2, $s3, 1
	sub.d	$s6, $a5, $s5
	ld.hu	$s7, $s2, 2
	srli.d	$s6, $s6, 7
	add.d	$s5, $s5, $s6
	stx.h	$s5, $s3, $s4
	sub.d	$s4, $a5, $s7
	srli.d	$s4, $s4, 7
	add.d	$s4, $s7, $s4
	st.h	$s4, $s2, 2
	andi	$s2, $fp, 127
	add.d	$fp, $fp, $a2
	srli.d	$fp, $fp, 7
	slli.d	$s4, $t5, 5
	add.d	$t5, $s4, $t5
	add.w	$t5, $t5, $fp
	alsl.d	$fp, $t5, $s3, 1
	slli.d	$s4, $t5, 1
	ldx.hu	$s3, $s3, $s4
	ld.hu	$fp, $fp, 2
	st.w	$t5, $t6, 0
	sub.d	$t5, $a3, $s2
	mul.d	$t5, $t5, $s3
	mul.d	$t6, $s2, $fp
	add.d	$t5, $t6, $t5
	ldx.bu	$t0, $a7, $t0
	ldx.bu	$t1, $a7, $t1
	ldx.bu	$t6, $a7, $t7
	srli.d	$a7, $t5, 11
	mul.d	$t2, $t0, $t2
	mul.d	$t3, $t1, $t3
	mul.d	$t5, $t6, $t8
	add.d	$t2, $t2, $t3
	add.w	$t2, $t2, $t5
	add.d	$t2, $t2, $s0
	srli.d	$t3, $t2, 9
	srli.d	$t0, $t0, 2
	srli.d	$t1, $t1, 3
	srli.d	$t5, $t6, 4
	xor	$t0, $t1, $t0
	xor	$t0, $t0, $t5
	xor	$t0, $t0, $t3
	ldx.h	$a1, $a1, $t4
	xor	$t0, $t0, $t2
	bstrpick.d	$t0, $t0, 15, 0
	xor	$a6, $t0, $a6
	pcalau12i	$t0, %pc_hi20(_ZZN9Predictor6updateEvE2a6)
	addi.d	$t0, $t0, %pc_lo12(_ZZN9Predictor6updateEvE2a6)
	ld.w	$t1, $t0, 0
	ld.d	$t2, $t0, 24
	slli.d	$t3, $t1, 1
	ldx.hu	$t4, $t2, $t3
	alsl.d	$t1, $t1, $t2, 1
	sub.d	$t5, $a5, $t4
	ld.hu	$t6, $t1, 2
	srli.d	$t5, $t5, 7
	add.d	$t4, $t4, $t5
	stx.h	$t4, $t2, $t3
	sub.d	$a5, $a5, $t6
	srli.d	$a5, $a5, 7
	add.d	$a5, $t6, $a5
	st.h	$a5, $t1, 2
	andi	$a5, $a1, 127
	add.d	$a1, $a1, $a2
	srli.d	$a1, $a1, 7
	slli.d	$a2, $a6, 5
	add.d	$a2, $a2, $a6
	add.w	$a1, $a2, $a1
	alsl.d	$a2, $a1, $t2, 1
	slli.d	$a6, $a1, 1
	ldx.hu	$a6, $t2, $a6
	ld.hu	$a2, $a2, 2
	st.w	$a1, $t0, 0
	sub.d	$a1, $a3, $a5
	mul.d	$a1, $a1, $a6
	mul.d	$a2, $a5, $a2
	add.d	$a1, $a2, $a1
	srli.d	$a1, $a1, 11
	add.d	$a2, $a4, $s1
	add.d	$a2, $a2, $a7
	add.d	$a1, $a2, $a1
	addi.d	$a1, $a1, 2
	bstrpick.d	$a1, $a1, 24, 2
	add.d	$a0, $a0, $a1
	addi.d	$a0, $a0, 1
	srli.d	$a0, $a0, 1
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	st.w	$a0, $a1, 0
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB73_10:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE1a)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE1a)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB73_1
# %bb.11:
.Ltmp303:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN9Predictor6updateEvE1a)
	addi.d	$a0, $a0, %pc_lo12(_ZZN9Predictor6updateEvE1a)
	ori	$a1, $zero, 256
	pcaddu18i	$ra, %call36(_ZN4APM1C2Ei)
	jirl	$ra, $ra, 0
.Ltmp304:                               # EH_LABEL
# %bb.12:
	pcalau12i	$a0, %pc_hi20(_ZN4APM1D2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4APM1D2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZN9Predictor6updateEvE1a)
	addi.d	$a1, $a1, %pc_lo12(_ZZN9Predictor6updateEvE1a)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE1a)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE1a)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB73_1
.LBB73_13:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a1)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a1)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB73_2
# %bb.14:
.Ltmp306:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN9Predictor6updateEvE2a1)
	addi.d	$a0, $a0, %pc_lo12(_ZZN9Predictor6updateEvE2a1)
	lu12i.w	$a1, 16
	pcaddu18i	$ra, %call36(_ZN4APM1C2Ei)
	jirl	$ra, $ra, 0
.Ltmp307:                               # EH_LABEL
# %bb.15:
	pcalau12i	$a0, %pc_hi20(_ZN4APM1D2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4APM1D2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZN9Predictor6updateEvE2a1)
	addi.d	$a1, $a1, %pc_lo12(_ZZN9Predictor6updateEvE2a1)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a1)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a1)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB73_2
.LBB73_16:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a2)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a2)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB73_3
# %bb.17:
.Ltmp309:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN9Predictor6updateEvE2a2)
	addi.d	$a0, $a0, %pc_lo12(_ZZN9Predictor6updateEvE2a2)
	lu12i.w	$a1, 16
	pcaddu18i	$ra, %call36(_ZN4APM1C2Ei)
	jirl	$ra, $ra, 0
.Ltmp310:                               # EH_LABEL
# %bb.18:
	pcalau12i	$a0, %pc_hi20(_ZN4APM1D2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4APM1D2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZN9Predictor6updateEvE2a2)
	addi.d	$a1, $a1, %pc_lo12(_ZZN9Predictor6updateEvE2a2)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a2)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a2)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB73_3
.LBB73_19:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a3)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a3)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB73_4
# %bb.20:
.Ltmp312:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN9Predictor6updateEvE2a3)
	addi.d	$a0, $a0, %pc_lo12(_ZZN9Predictor6updateEvE2a3)
	lu12i.w	$a1, 16
	pcaddu18i	$ra, %call36(_ZN4APM1C2Ei)
	jirl	$ra, $ra, 0
.Ltmp313:                               # EH_LABEL
# %bb.21:
	pcalau12i	$a0, %pc_hi20(_ZN4APM1D2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4APM1D2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZN9Predictor6updateEvE2a3)
	addi.d	$a1, $a1, %pc_lo12(_ZZN9Predictor6updateEvE2a3)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a3)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a3)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB73_4
.LBB73_22:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a4)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a4)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB73_5
# %bb.23:
.Ltmp315:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN9Predictor6updateEvE2a4)
	addi.d	$a0, $a0, %pc_lo12(_ZZN9Predictor6updateEvE2a4)
	lu12i.w	$a1, 16
	pcaddu18i	$ra, %call36(_ZN4APM1C2Ei)
	jirl	$ra, $ra, 0
.Ltmp316:                               # EH_LABEL
# %bb.24:
	pcalau12i	$a0, %pc_hi20(_ZN4APM1D2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4APM1D2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZN9Predictor6updateEvE2a4)
	addi.d	$a1, $a1, %pc_lo12(_ZZN9Predictor6updateEvE2a4)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a4)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a4)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB73_5
.LBB73_25:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a5)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a5)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB73_6
# %bb.26:
.Ltmp318:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN9Predictor6updateEvE2a5)
	addi.d	$a0, $a0, %pc_lo12(_ZZN9Predictor6updateEvE2a5)
	lu12i.w	$a1, 16
	pcaddu18i	$ra, %call36(_ZN4APM1C2Ei)
	jirl	$ra, $ra, 0
.Ltmp319:                               # EH_LABEL
# %bb.27:
	pcalau12i	$a0, %pc_hi20(_ZN4APM1D2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4APM1D2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZN9Predictor6updateEvE2a5)
	addi.d	$a1, $a1, %pc_lo12(_ZZN9Predictor6updateEvE2a5)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a5)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a5)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB73_6
.LBB73_28:
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a6)
	addi.d	$s0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a6)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB73_7
# %bb.29:
.Ltmp321:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN9Predictor6updateEvE2a6)
	addi.d	$a0, $a0, %pc_lo12(_ZZN9Predictor6updateEvE2a6)
	lu12i.w	$a1, 16
	pcaddu18i	$ra, %call36(_ZN4APM1C2Ei)
	jirl	$ra, $ra, 0
.Ltmp322:                               # EH_LABEL
# %bb.30:
	pcalau12i	$a0, %pc_hi20(_ZN4APM1D2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4APM1D2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZN9Predictor6updateEvE2a6)
	addi.d	$a1, $a1, %pc_lo12(_ZZN9Predictor6updateEvE2a6)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZN9Predictor6updateEvE2a6)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN9Predictor6updateEvE2a6)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB73_7
.LBB73_31:
.Ltmp323:                               # EH_LABEL
	b	.LBB73_38
.LBB73_32:
.Ltmp320:                               # EH_LABEL
	b	.LBB73_38
.LBB73_33:
.Ltmp317:                               # EH_LABEL
	b	.LBB73_38
.LBB73_34:
.Ltmp314:                               # EH_LABEL
	b	.LBB73_38
.LBB73_35:
.Ltmp311:                               # EH_LABEL
	b	.LBB73_38
.LBB73_36:
.Ltmp308:                               # EH_LABEL
	b	.LBB73_38
.LBB73_37:
.Ltmp305:                               # EH_LABEL
.LBB73_38:
	move	$fp, $a0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end73:
	.size	_ZN9Predictor6updateEv, .Lfunc_end73-_ZN9Predictor6updateEv
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table73:
.Lexception16:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end16-.Lcst_begin16
.Lcst_begin16:
	.uleb128 .Lfunc_begin16-.Lfunc_begin16  # >> Call Site 1 <<
	.uleb128 .Ltmp303-.Lfunc_begin16        #   Call between .Lfunc_begin16 and .Ltmp303
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp303-.Lfunc_begin16        # >> Call Site 2 <<
	.uleb128 .Ltmp304-.Ltmp303              #   Call between .Ltmp303 and .Ltmp304
	.uleb128 .Ltmp305-.Lfunc_begin16        #     jumps to .Ltmp305
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp304-.Lfunc_begin16        # >> Call Site 3 <<
	.uleb128 .Ltmp306-.Ltmp304              #   Call between .Ltmp304 and .Ltmp306
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp306-.Lfunc_begin16        # >> Call Site 4 <<
	.uleb128 .Ltmp307-.Ltmp306              #   Call between .Ltmp306 and .Ltmp307
	.uleb128 .Ltmp308-.Lfunc_begin16        #     jumps to .Ltmp308
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp307-.Lfunc_begin16        # >> Call Site 5 <<
	.uleb128 .Ltmp309-.Ltmp307              #   Call between .Ltmp307 and .Ltmp309
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp309-.Lfunc_begin16        # >> Call Site 6 <<
	.uleb128 .Ltmp310-.Ltmp309              #   Call between .Ltmp309 and .Ltmp310
	.uleb128 .Ltmp311-.Lfunc_begin16        #     jumps to .Ltmp311
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp310-.Lfunc_begin16        # >> Call Site 7 <<
	.uleb128 .Ltmp312-.Ltmp310              #   Call between .Ltmp310 and .Ltmp312
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp312-.Lfunc_begin16        # >> Call Site 8 <<
	.uleb128 .Ltmp313-.Ltmp312              #   Call between .Ltmp312 and .Ltmp313
	.uleb128 .Ltmp314-.Lfunc_begin16        #     jumps to .Ltmp314
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp313-.Lfunc_begin16        # >> Call Site 9 <<
	.uleb128 .Ltmp315-.Ltmp313              #   Call between .Ltmp313 and .Ltmp315
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp315-.Lfunc_begin16        # >> Call Site 10 <<
	.uleb128 .Ltmp316-.Ltmp315              #   Call between .Ltmp315 and .Ltmp316
	.uleb128 .Ltmp317-.Lfunc_begin16        #     jumps to .Ltmp317
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp316-.Lfunc_begin16        # >> Call Site 11 <<
	.uleb128 .Ltmp318-.Ltmp316              #   Call between .Ltmp316 and .Ltmp318
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp318-.Lfunc_begin16        # >> Call Site 12 <<
	.uleb128 .Ltmp319-.Ltmp318              #   Call between .Ltmp318 and .Ltmp319
	.uleb128 .Ltmp320-.Lfunc_begin16        #     jumps to .Ltmp320
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp319-.Lfunc_begin16        # >> Call Site 13 <<
	.uleb128 .Ltmp321-.Ltmp319              #   Call between .Ltmp319 and .Ltmp321
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp321-.Lfunc_begin16        # >> Call Site 14 <<
	.uleb128 .Ltmp322-.Ltmp321              #   Call between .Ltmp321 and .Ltmp322
	.uleb128 .Ltmp323-.Lfunc_begin16        #     jumps to .Ltmp323
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp322-.Lfunc_begin16        # >> Call Site 15 <<
	.uleb128 .Lfunc_end73-.Ltmp322          #   Call between .Ltmp322 and .Lfunc_end73
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end16:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN4APM1D2Ev,"axG",@progbits,_ZN4APM1D2Ev,comdat
	.weak	_ZN4APM1D2Ev                    # -- Begin function _ZN4APM1D2Ev
	.p2align	5
	.type	_ZN4APM1D2Ev,@function
_ZN4APM1D2Ev:                           # @_ZN4APM1D2Ev
# %bb.0:
	ld.w	$a2, $a0, 8
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	slli.d	$a2, $a2, 1
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB74_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB74_2:                               # %_ZN5ArrayItLi0EED2Ev.exit
	ld.d	$a0, $a0, 16
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end74:
	.size	_ZN4APM1D2Ev, .Lfunc_end74-_ZN4APM1D2Ev
                                        # -- End function
	.text
	.globl	_ZN7EncoderC2E4ModeP8_IO_FILE   # -- Begin function _ZN7EncoderC2E4ModeP8_IO_FILE
	.p2align	5
	.type	_ZN7EncoderC2E4ModeP8_IO_FILE,@function
_ZN7EncoderC2E4ModeP8_IO_FILE:          # @_ZN7EncoderC2E4ModeP8_IO_FILE
# %bb.0:
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a0
	ori	$a0, $zero, 2048
	st.w	$a0, $fp, 0
	st.w	$a1, $fp, 4
	st.d	$a2, $fp, 8
	ori	$a0, $zero, 0
	lu32i.d	$a0, -1
	st.d	$a0, $fp, 16
	st.w	$zero, $fp, 24
	ori	$a0, $zero, 1
	st.d	$zero, $fp, 32
	bne	$a1, $a0, .LBB75_3
# %bb.1:
	pcalau12i	$a0, %pc_hi20(level)
	ld.w	$a0, $a0, %pc_lo12(level)
	blez	$a0, .LBB75_3
# %bb.2:                                # %.preheader.preheader
	move	$a0, $a2
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $fp, 8
	andi	$s1, $a0, 255
	st.w	$s1, $fp, 24
	move	$a0, $a1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $fp, 8
	move	$s0, $a0
	bstrins.d	$s0, $s1, 63, 8
	st.w	$s0, $fp, 24
	move	$a0, $a1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $fp, 8
	move	$s1, $a0
	bstrins.d	$s1, $s0, 63, 8
	st.w	$s1, $fp, 24
	move	$a0, $a1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	bstrins.d	$a0, $s1, 63, 8
	st.w	$a0, $fp, 24
.LBB75_3:                               # %vector.body.preheader
	lu12i.w	$a0, 16
	lu32i.d	$a0, 196610
	vreplgr2vr.d	$vr0, $a0
	lu12i.w	$a0, -1
	lu12i.w	$a1, 4
	vrepli.b	$vr1, 0
	pcalau12i	$a2, %pc_hi20(_ZL2dt)
	addi.d	$a2, $a2, %pc_lo12(_ZL2dt)
	lu12i.w	$a3, 1
	ori	$a4, $a3, 16
	.p2align	4, , 16
.LBB75_4:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vslli.h	$vr2, $vr0, 1
	vaddi.hu	$vr3, $vr2, 3
	vaddi.hu	$vr2, $vr2, 11
	vpickve2gr.h	$a5, $vr3, 1
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vpickve2gr.h	$a6, $vr3, 0
	bstrpick.d	$a6, $a6, 15, 0
	div.du	$a6, $a1, $a6
	vinsgr2vr.h	$vr4, $a6, 0
	vinsgr2vr.h	$vr4, $a5, 1
	vpickve2gr.h	$a5, $vr3, 2
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr4, $a5, 2
	vpickve2gr.h	$a5, $vr3, 3
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr4, $a5, 3
	vpickve2gr.h	$a5, $vr2, 1
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vpickve2gr.h	$a6, $vr2, 0
	bstrpick.d	$a6, $a6, 15, 0
	div.du	$a6, $a1, $a6
	vinsgr2vr.h	$vr3, $a6, 0
	vinsgr2vr.h	$vr3, $a5, 1
	vpickve2gr.h	$a5, $vr2, 2
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr3, $a5, 2
	vpickve2gr.h	$a5, $vr2, 3
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr3, $a5, 3
	vilvl.h	$vr2, $vr1, $vr4
	vilvl.h	$vr3, $vr1, $vr3
	add.d	$a5, $a2, $a0
	vstx	$vr2, $a5, $a3
	vstx	$vr3, $a5, $a4
	addi.d	$a0, $a0, 32
	vaddi.hu	$vr0, $vr0, 8
	bnez	$a0, .LBB75_4
# %bb.5:                                # %middle.block
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end75:
	.size	_ZN7EncoderC2E4ModeP8_IO_FILE, .Lfunc_end75-_ZN7EncoderC2E4ModeP8_IO_FILE
                                        # -- End function
	.globl	_ZN7Encoder5flushEv             # -- Begin function _ZN7Encoder5flushEv
	.p2align	5
	.type	_ZN7Encoder5flushEv,@function
_ZN7Encoder5flushEv:                    # @_ZN7Encoder5flushEv
# %bb.0:
	ld.w	$a1, $a0, 4
	bnez	$a1, .LBB76_3
# %bb.1:
	pcalau12i	$a1, %pc_hi20(level)
	ld.w	$a1, $a1, %pc_lo12(level)
	blez	$a1, .LBB76_3
# %bb.2:
	ld.bu	$a2, $a0, 19
	ld.d	$a1, $a0, 8
	move	$a0, $a2
	pcaddu18i	$t8, %call36(putc)
	jr	$t8
.LBB76_3:
	ret
.Lfunc_end76:
	.size	_ZN7Encoder5flushEv, .Lfunc_end76-_ZN7Encoder5flushEv
                                        # -- End function
	.globl	_Z6detectP8_IO_FILEi8Filetype   # -- Begin function _Z6detectP8_IO_FILEi8Filetype
	.p2align	5
	.type	_Z6detectP8_IO_FILEi8Filetype,@function
_Z6detectP8_IO_FILEi8Filetype:          # @_Z6detectP8_IO_FILEi8Filetype
.Lfunc_begin17:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception17
# %bb.0:
	addi.d	$sp, $sp, -432
	.cfi_def_cfa_offset 432
	st.d	$ra, $sp, 424                   # 8-byte Folded Spill
	st.d	$fp, $sp, 416                   # 8-byte Folded Spill
	st.d	$s0, $sp, 408                   # 8-byte Folded Spill
	st.d	$s1, $sp, 400                   # 8-byte Folded Spill
	st.d	$s2, $sp, 392                   # 8-byte Folded Spill
	st.d	$s3, $sp, 384                   # 8-byte Folded Spill
	st.d	$s4, $sp, 376                   # 8-byte Folded Spill
	st.d	$s5, $sp, 368                   # 8-byte Folded Spill
	st.d	$s6, $sp, 360                   # 8-byte Folded Spill
	st.d	$s7, $sp, 352                   # 8-byte Folded Spill
	st.d	$s8, $sp, 344                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s4, $a2
	st.d	$a1, $sp, 216                   # 8-byte Folded Spill
	st.d	$a0, $sp, 208                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$s1, $a0, %pc_lo12(programChecker)
	ld.w	$fp, $s1, 0
	ld.w	$s0, $s1, 4
	addi.w	$a0, $fp, 1024
	st.w	$a0, $s1, 0
	bge	$s0, $a0, .LBB77_2
# %bb.1:
	st.w	$a0, $s1, 4
	move	$s0, $a0
.LBB77_2:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a0, $zero, 1024
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	beqz	$a0, .LBB77_166
# %bb.3:                                # %_ZN5ArrayIiLi0EEC2Ei.exit
	addi.d	$a0, $fp, 2047
	addi.w	$a0, $a0, 1
	addi.d	$a1, $fp, 2047
	addi.d	$a1, $a1, 1
	st.w	$a1, $s1, 0
	bge	$s0, $a0, .LBB77_5
# %bb.4:
	st.w	$a0, $s1, 4
.LBB77_5:                               # %_ZN14ProgramChecker5allocEi.exit.i.i591
	ori	$a0, $zero, 1024
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	beqz	$a0, .LBB77_167
# %bb.6:                                # %_ZN5ArrayIiLi0EEC2Ei.exit593
	ld.d	$a0, $sp, 216                   # 8-byte Folded Reload
	blez	$a0, .LBB77_159
# %bb.7:                                # %.lr.ph
	st.d	$s3, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	move	$s3, $zero
	move	$s7, $zero
	st.d	$zero, $sp, 16                  # 8-byte Folded Spill
	move	$fp, $zero
	move	$s2, $zero
	st.d	$zero, $sp, 264                 # 8-byte Folded Spill
	st.d	$zero, $sp, 288                 # 8-byte Folded Spill
	move	$t3, $zero
	st.d	$zero, $sp, 144                 # 8-byte Folded Spill
	st.d	$zero, $sp, 112                 # 8-byte Folded Spill
	move	$t2, $zero
	st.d	$zero, $sp, 280                 # 8-byte Folded Spill
	st.d	$zero, $sp, 200                 # 8-byte Folded Spill
	move	$t1, $zero
	st.d	$zero, $sp, 224                 # 8-byte Folded Spill
	st.d	$zero, $sp, 232                 # 8-byte Folded Spill
	st.d	$zero, $sp, 192                 # 8-byte Folded Spill
	st.d	$zero, $sp, 80                  # 8-byte Folded Spill
	st.d	$zero, $sp, 304                 # 8-byte Folded Spill
	st.d	$zero, $sp, 24                  # 8-byte Folded Spill
	st.d	$zero, $sp, 56                  # 8-byte Folded Spill
	st.d	$zero, $sp, 48                  # 8-byte Folded Spill
	move	$t0, $zero
	st.d	$zero, $sp, 120                 # 8-byte Folded Spill
	move	$s0, $zero
	lu12i.w	$a0, 65496
	ori	$a0, $a0, 4094
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	lu12i.w	$a0, -262144
	ori	$a0, $a0, 8
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	lu12i.w	$a0, 4
	ori	$a0, $a0, 589
	st.d	$a0, $sp, 176                   # 8-byte Folded Spill
	lu12i.w	$a0, 1283
	ori	$a0, $a0, 1290
	st.d	$a0, $sp, 152                   # 8-byte Folded Spill
	lu12i.w	$a0, 1
	ori	$a0, $a0, 1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	addi.w	$a0, $s4, -2
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	lu12i.w	$a1, 15
	ori	$a1, $a1, 4095
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	st.d	$a0, $sp, 272                   # 8-byte Folded Spill
	st.d	$a0, $sp, 184                   # 8-byte Folded Spill
	st.d	$a0, $sp, 248                   # 8-byte Folded Spill
	st.d	$s4, $sp, 96                    # 8-byte Folded Spill
	b	.LBB77_9
	.p2align	4, , 16
.LBB77_8:                               #   in Loop: Header=BB77_9 Depth=1
	addi.w	$fp, $fp, 1
	ld.d	$a0, $sp, 216                   # 8-byte Folded Reload
	beq	$a0, $fp, .LBB77_141
.LBB77_9:                               # =>This Inner Loop Header: Depth=1
	st.d	$t3, $sp, 256                   # 8-byte Folded Spill
	move	$s5, $t2
	move	$s1, $t1
	move	$s6, $t0
	ld.d	$a0, $sp, 208                   # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$s8, $a0
	ld.d	$a0, $sp, 184                   # 8-byte Folded Reload
	beq	$s8, $a0, .LBB77_140
# %bb.10:                               #   in Loop: Header=BB77_9 Depth=1
	st.d	$s7, $sp, 240                   # 8-byte Folded Spill
	st.d	$s3, $sp, 296                   # 8-byte Folded Spill
	slli.d	$a0, $s3, 8
	or	$s3, $s8, $a0
	bstrpick.d	$s7, $s3, 15, 0
	ld.d	$a6, $sp, 280                   # 8-byte Folded Reload
	bnez	$a6, .LBB77_14
# %bb.11:                               #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 3
	bltu	$fp, $a0, .LBB77_14
# %bb.12:                               #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 31, 4
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	move	$t0, $s6
	move	$t1, $s1
	move	$t2, $s5
	bne	$a0, $a1, .LBB77_19
# %bb.13:                               #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $fp, 2
	move	$a6, $fp
	b	.LBB77_22
	.p2align	4, , 16
.LBB77_14:                              #   in Loop: Header=BB77_9 Depth=1
	move	$t0, $s6
	move	$t1, $s1
	move	$t2, $s5
	beqz	$a6, .LBB77_19
# %bb.15:                               # %.thread609
                                        #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 144                   # 8-byte Folded Reload
	bne	$fp, $a0, .LBB77_22
# %bb.16:                               #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s3, 0
	srai.d	$a0, $a0, 20
	addi.w	$a1, $zero, -2
	beq	$a0, $a1, .LBB77_20
# %bb.17:                               #   in Loop: Header=BB77_9 Depth=1
	move	$a0, $s3
	bstrins.d	$a0, $zero, 15, 0
	addi.w	$a0, $a0, 0
	lu12i.w	$a1, -32
	beq	$a0, $a1, .LBB77_20
# %bb.18:                               #   in Loop: Header=BB77_9 Depth=1
	move	$a0, $fp
	b	.LBB77_21
	.p2align	4, , 16
.LBB77_19:                              #   in Loop: Header=BB77_9 Depth=1
	st.d	$zero, $sp, 280                 # 8-byte Folded Spill
	andi	$a0, $s8, 248
	ori	$a1, $zero, 208
	bne	$a0, $a1, .LBB77_30
	b	.LBB77_36
.LBB77_20:                              #   in Loop: Header=BB77_9 Depth=1
	add.d	$a0, $fp, $s7
	addi.w	$a0, $a0, 2
.LBB77_21:                              # %.thread609.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a6, $sp, 280                   # 8-byte Folded Reload
.LBB77_22:                              # %.thread609.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	st.d	$a0, $sp, 144                   # 8-byte Folded Spill
	slt	$a1, $a0, $fp
	sub.w	$a0, $fp, $a6
	lu12i.w	$a2, 16
	slt	$a2, $a0, $a2
	ld.d	$a3, $sp, 296                   # 8-byte Folded Reload
	bstrpick.d	$a3, $a3, 31, 24
	ori	$a4, $zero, 254
	sltu	$a3, $a4, $a3
	ori	$a4, $zero, 255
	bstrins.d	$a4, $a4, 32, 24
	and	$a4, $s3, $a4
	addi.w	$a4, $a4, 0
	ld.d	$a5, $sp, 88                    # 8-byte Folded Reload
	xor	$a4, $a4, $a5
	sltui	$a4, $a4, 1
	masknez	$a5, $t2, $a4
	maskeqz	$a4, $fp, $a4
	or	$a4, $a4, $a5
	maskeqz	$a4, $a4, $a3
	masknez	$a3, $t2, $a3
	or	$a3, $a4, $a3
	maskeqz	$a3, $a3, $a2
	masknez	$a2, $t2, $a2
	or	$a2, $a3, $a2
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $t2, $a1
	or	$t2, $a2, $a1
	st.d	$a6, $sp, 280                   # 8-byte Folded Spill
	beqz	$t2, .LBB77_35
# %bb.23:                               #   in Loop: Header=BB77_9 Depth=1
	bge	$a6, $t2, .LBB77_29
# %bb.24:                               #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	blt	$a1, $a0, .LBB77_29
# %bb.25:                               #   in Loop: Header=BB77_9 Depth=1
	sub.w	$a0, $fp, $t2
	ori	$a1, $zero, 4095
	blt	$a1, $a0, .LBB77_29
# %bb.26:                               #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 15, 0
	lu12i.w	$a1, 15
	ori	$a1, $a1, 4058
	bne	$a0, $a1, .LBB77_29
# %bb.27:                               #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 1
	bne	$s4, $a0, .LBB77_151
# %bb.28:                               #   in Loop: Header=BB77_9 Depth=1
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	.p2align	4, , 16
.LBB77_29:                              # %.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	andi	$a0, $s8, 248
	ori	$a1, $zero, 208
	beq	$a0, $a1, .LBB77_36
.LBB77_30:                              # %.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	andi	$a0, $s8, 255
	beqz	$a0, .LBB77_36
# %bb.31:                               # %.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 1
	bne	$s4, $a0, .LBB77_36
# %bb.32:                               # %.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	beqz	$a0, .LBB77_36
# %bb.33:                               # %.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	bgeu	$a0, $fp, .LBB77_36
# %bb.34:                               # %.thread
                                        #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 15, 8
	slli.w	$a0, $a0, 8
	lu12i.w	$a1, 15
	ori	$a1, $a1, 3840
	bne	$a0, $a1, .LBB77_36
	b	.LBB77_142
	.p2align	4, , 16
.LBB77_35:                              #   in Loop: Header=BB77_9 Depth=1
	move	$t2, $zero
	andi	$a0, $s8, 248
	ori	$a1, $zero, 208
	bne	$a0, $a1, .LBB77_30
	.p2align	4, , 16
.LBB77_36:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 176                   # 8-byte Folded Reload
	xor	$a0, $s7, $a0
	sltui	$a0, $a0, 1
	masknez	$a1, $s0, $a0
	maskeqz	$a0, $fp, $a0
	or	$s0, $a0, $a1
	beqz	$s0, .LBB77_40
# %bb.37:                               #   in Loop: Header=BB77_9 Depth=1
	sub.w	$a0, $fp, $s0
	ori	$a1, $zero, 12
	beq	$a0, $a1, .LBB77_41
# %bb.38:                               #   in Loop: Header=BB77_9 Depth=1
	ori	$a1, $zero, 4
	bne	$a0, $a1, .LBB77_42
# %bb.39:                               # %.thread615
                                        #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 31, 24
	slli.d	$a1, $s8, 24
	or	$a1, $a0, $a1
	srli.d	$a0, $s3, 16
	bstrins.d	$a1, $a0, 15, 8
	bstrpick.d	$a0, $s3, 55, 8
	bstrins.d	$a1, $a0, 23, 16
	st.d	$a1, $sp, 120                   # 8-byte Folded Spill
	b	.LBB77_45
	.p2align	4, , 16
.LBB77_40:                              #   in Loop: Header=BB77_9 Depth=1
	move	$s0, $zero
	b	.LBB77_64
.LBB77_41:                              #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 31, 24
	slli.d	$a1, $s8, 24
	or	$a1, $a0, $a1
	srli.d	$a0, $s3, 16
	bstrins.d	$a1, $a0, 15, 8
	bstrpick.d	$a0, $s3, 55, 8
	bstrins.d	$a1, $a0, 23, 16
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	b	.LBB77_45
.LBB77_42:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $a0, -16
	bnez	$a0, .LBB77_45
# %bb.43:                               #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s3, 0
	lu12i.w	$a1, 163840
	beq	$a0, $a1, .LBB77_45
# %bb.44:                               #   in Loop: Header=BB77_9 Depth=1
	move	$s0, $zero
	st.d	$zero, $sp, 120                 # 8-byte Folded Spill
	move	$t0, $zero
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 248                   # 8-byte Folded Spill
	.p2align	4, , 16
.LBB77_45:                              # %.thread618
                                        #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s0, 20
	bne	$a0, $fp, .LBB77_47
# %bb.46:                               #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 31, 24
	srli.d	$a1, $s3, 16
	bstrins.d	$a0, $a1, 15, 8
	bstrpick.d	$a1, $s3, 55, 8
	bstrins.d	$a0, $a1, 23, 16
	slli.d	$a1, $s8, 24
	or	$a0, $a0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB77_50
.LBB77_47:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s0, 24
	bne	$a0, $fp, .LBB77_51
.LBB77_48:                              #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 31, 24
	srli.d	$a1, $s3, 16
	bstrins.d	$a0, $a1, 15, 8
	bstrpick.d	$a1, $s3, 55, 8
	bstrins.d	$a0, $a1, 23, 16
	slli.d	$a1, $s8, 24
	or	$a0, $a0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	addi.w	$a0, $a0, 0
	bnez	$a0, .LBB77_51
# %bb.49:                               #   in Loop: Header=BB77_9 Depth=1
	move	$s0, $zero
	st.d	$zero, $sp, 120                 # 8-byte Folded Spill
	move	$t0, $zero
	st.d	$zero, $sp, 56                  # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 248                   # 8-byte Folded Spill
	b	.LBB77_51
.LBB77_50:                              #   in Loop: Header=BB77_9 Depth=1
	move	$s0, $zero
	st.d	$zero, $sp, 120                 # 8-byte Folded Spill
	move	$t0, $zero
	st.d	$zero, $sp, 48                  # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 248                   # 8-byte Folded Spill
	addi.w	$a0, $s0, 24
	beq	$a0, $fp, .LBB77_48
	.p2align	4, , 16
.LBB77_51:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s0, 31
	addi.w	$a1, $s0, 27
	xor	$a1, $a1, $fp
	sltui	$a1, $a1, 1
	masknez	$a2, $t0, $a1
	maskeqz	$a1, $s8, $a1
	or	$t0, $a1, $a2
	bne	$a0, $fp, .LBB77_54
# %bb.52:                               #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s3, 0
	beqz	$a0, .LBB77_57
# %bb.53:                               #   in Loop: Header=BB77_9 Depth=1
	move	$s0, $zero
	st.d	$zero, $sp, 120                 # 8-byte Folded Spill
	move	$t0, $zero
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 248                   # 8-byte Folded Spill
.LBB77_54:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ori	$a1, $zero, 2
	bltu	$a1, $a0, .LBB77_58
.LBB77_55:                              #   in Loop: Header=BB77_9 Depth=1
	addi.d	$a0, $t0, -4
	sltu	$a1, $zero, $a0
	addi.d	$a0, $t0, -8
	sltu	$a2, $zero, $a0
	and	$a1, $a1, $a2
	addi.d	$a2, $t0, -24
	sltu	$a2, $zero, $a2
	and	$a1, $a2, $a1
	bnez	$a1, .LBB77_58
# %bb.56:                               #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a1, $sp, 248                   # 8-byte Folded Reload
	bnez	$a1, .LBB77_58
	b	.LBB77_147
.LBB77_57:                              #   in Loop: Header=BB77_9 Depth=1
	st.d	$zero, $sp, 248                 # 8-byte Folded Spill
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ori	$a1, $zero, 2
	bgeu	$a1, $a0, .LBB77_55
	.p2align	4, , 16
.LBB77_58:                              #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 4
	bne	$t0, $a0, .LBB77_60
# %bb.59:                               #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 248                   # 8-byte Folded Reload
	beqz	$a0, .LBB77_144
.LBB77_60:                              #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 8
	bne	$t0, $a0, .LBB77_62
# %bb.61:                               #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 248                   # 8-byte Folded Reload
	beqz	$a0, .LBB77_145
.LBB77_62:                              #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 24
	bne	$t0, $a0, .LBB77_64
# %bb.63:                               #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 248                   # 8-byte Folded Reload
	beqz	$a0, .LBB77_146
.LBB77_64:                              #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 23, 0
	ld.d	$a1, $sp, 152                   # 8-byte Folded Reload
	xor	$a0, $a0, $a1
	sltui	$a0, $a0, 1
	ld.d	$a1, $sp, 304                   # 8-byte Folded Reload
	masknez	$a1, $a1, $a0
	maskeqz	$a0, $fp, $a0
	or	$a0, $a0, $a1
	beqz	$a0, .LBB77_71
# %bb.65:                               #   in Loop: Header=BB77_9 Depth=1
	st.d	$t2, $sp, 160                   # 8-byte Folded Spill
	st.d	$a0, $sp, 304                   # 8-byte Folded Spill
	addi.w	$a0, $a0, 1
	xor	$a0, $a0, $fp
	sltui	$a0, $a0, 1
	addi.d	$a1, $s8, -35
	sltui	$a1, $a1, 1
	ld.d	$a4, $sp, 192                   # 8-byte Folded Reload
	masknez	$a2, $a4, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$a0, $a0, $a2
	maskeqz	$a0, $a0, $a1
	masknez	$a1, $a4, $a1
	or	$s6, $a0, $a1
	ori	$a0, $zero, 32
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	bne	$s8, $a0, .LBB77_74
# %bb.66:                               #   in Loop: Header=BB77_9 Depth=1
	bnez	$s6, .LBB77_74
# %bb.67:                               #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 232                   # 8-byte Folded Reload
	addi.w	$a0, $a0, 0
	bnez	$a0, .LBB77_74
# %bb.68:                               #   in Loop: Header=BB77_9 Depth=1
	beqz	$t1, .LBB77_74
# %bb.69:                               #   in Loop: Header=BB77_9 Depth=1
	move	$s1, $t0
	addi.d	$a0, $sp, 312
	stx.b	$zero, $t1, $a0
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 232                   # 8-byte Folded Spill
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB77_72
# %bb.70:                               #   in Loop: Header=BB77_9 Depth=1
	move	$t1, $zero
	b	.LBB77_73
	.p2align	4, , 16
.LBB77_71:                              #   in Loop: Header=BB77_9 Depth=1
	st.d	$zero, $sp, 304                 # 8-byte Folded Spill
	b	.LBB77_86
.LBB77_72:                              #   in Loop: Header=BB77_9 Depth=1
	st.d	$zero, $sp, 304                 # 8-byte Folded Spill
	st.d	$zero, $sp, 232                 # 8-byte Folded Spill
	st.d	$zero, $sp, 224                 # 8-byte Folded Spill
	move	$t1, $zero
	st.d	$zero, $sp, 200                 # 8-byte Folded Spill
.LBB77_73:                              #   in Loop: Header=BB77_9 Depth=1
	move	$t0, $s1
.LBB77_74:                              #   in Loop: Header=BB77_9 Depth=1
	sltui	$a0, $s6, 1
	addi.d	$a1, $s8, -10
	sltui	$s1, $a1, 1
	and	$a0, $s1, $a0
	beqz	$a0, .LBB77_79
# %bb.75:                               #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a1, $sp, 224                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	bnez	$a1, .LBB77_79
# %bb.76:                               #   in Loop: Header=BB77_9 Depth=1
	beqz	$t1, .LBB77_79
# %bb.77:                               #   in Loop: Header=BB77_9 Depth=1
	move	$s6, $t0
	addi.d	$a0, $sp, 312
	stx.b	$zero, $t1, $a0
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 224                   # 8-byte Folded Spill
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB77_129
# %bb.78:                               #   in Loop: Header=BB77_9 Depth=1
	move	$t1, $zero
	b	.LBB77_130
	.p2align	4, , 16
.LBB77_79:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	sltui	$a1, $a1, 1
	and	$a0, $a0, $a1
	beqz	$a0, .LBB77_82
# %bb.80:                               #   in Loop: Header=BB77_9 Depth=1
	beqz	$t1, .LBB77_82
# %bb.81:                               #   in Loop: Header=BB77_9 Depth=1
	addi.d	$a0, $sp, 312
	stx.b	$zero, $t1, $a0
	ori	$a2, $zero, 10
	move	$a1, $zero
	move	$s6, $t0
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	move	$t0, $s6
	st.d	$a0, $sp, 200                   # 8-byte Folded Spill
	move	$t1, $zero
	b	.LBB77_131
.LBB77_82:                              #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 1
	beqz	$s6, .LBB77_131
	.p2align	4, , 16
# %bb.83:                               #   in Loop: Header=BB77_9 Depth=1
	ori	$a1, $zero, 31
	bge	$a1, $t1, .LBB77_132
.LBB77_84:                              #   in Loop: Header=BB77_9 Depth=1
	st.d	$zero, $sp, 304                 # 8-byte Folded Spill
	st.d	$zero, $sp, 192                 # 8-byte Folded Spill
	st.d	$zero, $sp, 232                 # 8-byte Folded Spill
	st.d	$zero, $sp, 224                 # 8-byte Folded Spill
	move	$t1, $zero
	st.d	$zero, $sp, 200                 # 8-byte Folded Spill
	ld.d	$s4, $sp, 96                    # 8-byte Folded Reload
.LBB77_85:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$t2, $sp, 160                   # 8-byte Folded Reload
.LBB77_86:                              # %.thread863
                                        #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a3, $sp, 256                   # 8-byte Folded Reload
.LBB77_87:                              # %.thread863
                                        #   in Loop: Header=BB77_9 Depth=1
	addi.d	$a0, $s7, -474
	sltui	$a0, $a0, 1
	masknez	$a1, $a3, $a0
	maskeqz	$a0, $fp, $a0
	or	$t3, $a0, $a1
	beqz	$t3, .LBB77_114
# %bb.88:                               #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $t3, 1
	bne	$a0, $fp, .LBB77_99
# %bb.89:                               #   in Loop: Header=BB77_9 Depth=1
	sltui	$a0, $s8, 2
	maskeqz	$t3, $t3, $a0
	addi.w	$a1, $zero, -1
	masknez	$a1, $a1, $a0
	maskeqz	$a2, $s8, $a0
	or	$a1, $a2, $a1
	st.d	$a1, $sp, 272                   # 8-byte Folded Spill
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	maskeqz	$a1, $a1, $a0
	st.d	$a1, $sp, 288                   # 8-byte Folded Spill
	ld.d	$a1, $sp, 264                   # 8-byte Folded Reload
	maskeqz	$a1, $a1, $a0
	st.d	$a1, $sp, 264                   # 8-byte Folded Spill
	addi.w	$a0, $t3, 2
	beq	$a0, $fp, .LBB77_100
.LBB77_90:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s7, -1
	ori	$a1, $zero, 3
	bltu	$a0, $a1, .LBB77_101
.LBB77_91:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $t3, 4
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	bne	$a0, $fp, .LBB77_93
# %bb.92:                               #   in Loop: Header=BB77_9 Depth=1
	move	$t3, $zero
	move	$a1, $zero
	st.d	$zero, $sp, 264                 # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 272                   # 8-byte Folded Spill
.LBB77_93:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $t3, 6
	bne	$a0, $fp, .LBB77_102
.LBB77_94:                              #   in Loop: Header=BB77_9 Depth=1
	sltui	$a0, $s7, 1
	masknez	$t3, $t3, $a0
	move	$a3, $a1
	ld.d	$a1, $sp, 272                   # 8-byte Folded Reload
	masknez	$a1, $a1, $a0
	addi.w	$a2, $zero, -1
	maskeqz	$a2, $a2, $a0
	or	$a1, $a2, $a1
	st.d	$a1, $sp, 272                   # 8-byte Folded Spill
	masknez	$a1, $a3, $a0
	st.d	$s7, $sp, 264                   # 8-byte Folded Spill
	addi.w	$a0, $t3, 8
	beq	$a0, $fp, .LBB77_103
.LBB77_95:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $t3, 10
	bne	$a0, $fp, .LBB77_105
.LBB77_96:                              #   in Loop: Header=BB77_9 Depth=1
	bstrpick.d	$a0, $s3, 15, 0
	ori	$a1, $zero, 4
	bltu	$a1, $a0, .LBB77_98
# %bb.97:                               #   in Loop: Header=BB77_9 Depth=1
	ori	$a1, $zero, 1
	sll.d	$a0, $a1, $a0
	andi	$a0, $a0, 26
	bnez	$a0, .LBB77_106
.LBB77_98:                              #   in Loop: Header=BB77_9 Depth=1
	move	$t3, $zero
	move	$s7, $zero
	st.d	$zero, $sp, 264                 # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 272                   # 8-byte Folded Spill
	b	.LBB77_106
	.p2align	4, , 16
.LBB77_99:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $t3, 2
	bne	$a0, $fp, .LBB77_90
.LBB77_100:                             #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $s8, -1
	sltui	$a0, $a0, 2
	maskeqz	$t3, $t3, $a0
	addi.w	$a1, $zero, -1
	masknez	$a1, $a1, $a0
	ld.d	$a2, $sp, 272                   # 8-byte Folded Reload
	maskeqz	$a2, $a2, $a0
	or	$a1, $a2, $a1
	st.d	$a1, $sp, 272                   # 8-byte Folded Spill
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	maskeqz	$a1, $a1, $a0
	st.d	$a1, $sp, 288                   # 8-byte Folded Spill
	ld.d	$a1, $sp, 264                   # 8-byte Folded Reload
	maskeqz	$a1, $a1, $a0
	st.d	$a1, $sp, 264                   # 8-byte Folded Spill
	addi.w	$a0, $s7, -1
	ori	$a1, $zero, 3
	bgeu	$a0, $a1, .LBB77_91
.LBB77_101:                             #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	addi.w	$a0, $t3, 6
	beq	$a0, $fp, .LBB77_94
	.p2align	4, , 16
.LBB77_102:                             #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a0, $t3, 8
	bne	$a0, $fp, .LBB77_95
.LBB77_103:                             #   in Loop: Header=BB77_9 Depth=1
	beqz	$s7, .LBB77_139
# %bb.104:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 264                   # 8-byte Folded Reload
	mul.d	$a0, $a0, $s7
	addi.w	$s2, $a0, 512
	addi.w	$a0, $t3, 10
	beq	$a0, $fp, .LBB77_96
.LBB77_105:                             #   in Loop: Header=BB77_9 Depth=1
	move	$s7, $a1
.LBB77_106:                             #   in Loop: Header=BB77_9 Depth=1
	beqz	$s2, .LBB77_115
# %bb.107:                              #   in Loop: Header=BB77_9 Depth=1
	sub.w	$a0, $fp, $t3
	blez	$a0, .LBB77_116
# %bb.108:                              #   in Loop: Header=BB77_9 Depth=1
	bge	$s2, $a0, .LBB77_116
# %bb.109:                              #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 7
	bne	$s4, $a0, .LBB77_112
# %bb.110:                              #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 1
	bne	$s7, $a0, .LBB77_112
# %bb.111:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 272                   # 8-byte Folded Reload
	beqz	$a0, .LBB77_152
.LBB77_112:                             #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 1
	bne	$s7, $a0, .LBB77_116
# %bb.113:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 272                   # 8-byte Folded Reload
	bnez	$a0, .LBB77_116
	b	.LBB77_153
	.p2align	4, , 16
.LBB77_114:                             #   in Loop: Header=BB77_9 Depth=1
	move	$t3, $zero
	b	.LBB77_117
	.p2align	4, , 16
.LBB77_115:                             #   in Loop: Header=BB77_9 Depth=1
	move	$s2, $zero
.LBB77_116:                             #   in Loop: Header=BB77_9 Depth=1
	st.d	$s7, $sp, 288                   # 8-byte Folded Spill
.LBB77_117:                             #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 296                   # 8-byte Folded Reload
	bstrpick.d	$a0, $a0, 31, 25
	ld.d	$s7, $sp, 240                   # 8-byte Folded Reload
	ori	$a1, $zero, 116
	bne	$a0, $a1, .LBB77_119
# %bb.118:                              #   in Loop: Header=BB77_9 Depth=1
	addi.d	$a0, $s8, 1
	andi	$a0, $a0, 254
	beqz	$a0, .LBB77_121
.LBB77_119:                             #   in Loop: Header=BB77_9 Depth=1
	ori	$a0, $zero, 8
	bne	$s4, $a0, .LBB77_8
.LBB77_120:                             #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	sub.w	$a0, $fp, $a0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	blt	$a0, $a1, .LBB77_8
	b	.LBB77_143
.LBB77_121:                             #   in Loop: Header=BB77_9 Depth=1
	srli.d	$a0, $s3, 24
	add.d	$a0, $fp, $a0
	andi	$a0, $a0, 255
	slli.d	$a1, $a0, 2
	ld.d	$a2, $sp, 136                   # 8-byte Folded Reload
	ldx.w	$a3, $a2, $a1
	move	$a1, $zero
	srli.d	$a2, $s3, 22
	andi	$a2, $a2, 1020
	ori	$a4, $zero, 6
	blt	$a3, $a4, .LBB77_128
# %bb.122:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a4, $sp, 128                   # 8-byte Folded Reload
	ldx.w	$a4, $a4, $a2
	bge	$a4, $a3, .LBB77_128
# %bb.123:                              #   in Loop: Header=BB77_9 Depth=1
	sub.w	$a4, $fp, $a3
	ori	$a5, $zero, 4095
	blt	$a5, $a4, .LBB77_128
# %bb.124:                              #   in Loop: Header=BB77_9 Depth=1
	addi.w	$a1, $s7, 1
	ld.d	$a7, $sp, 16                    # 8-byte Folded Reload
	sltui	$a4, $a7, 1
	slt	$a5, $a7, $a3
	masknez	$a6, $a3, $a5
	maskeqz	$a5, $a7, $a5
	or	$a5, $a5, $a6
	masknez	$a5, $a5, $a4
	maskeqz	$a3, $a3, $a4
	or	$a3, $a3, $a5
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	ori	$a3, $zero, 8
	beq	$s4, $a3, .LBB77_127
# %bb.125:                              #   in Loop: Header=BB77_9 Depth=1
	ori	$a3, $zero, 3
	blt	$s7, $a3, .LBB77_127
# %bb.126:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a3, $sp, 16                    # 8-byte Folded Reload
	ori	$a4, $zero, 5
	blt	$a4, $a3, .LBB77_156
.LBB77_127:                             #   in Loop: Header=BB77_9 Depth=1
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
.LBB77_128:                             # %.thread682
                                        #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a3, $sp, 128                   # 8-byte Folded Reload
	add.d	$a2, $a3, $a2
	ld.d	$a3, $sp, 136                   # 8-byte Folded Reload
	alsl.d	$a0, $a0, $a3, 2
	st.w	$fp, $a0, 0
	st.w	$fp, $a2, 0
	move	$s7, $a1
	ori	$a0, $zero, 8
	beq	$s4, $a0, .LBB77_120
	b	.LBB77_8
.LBB77_129:                             #   in Loop: Header=BB77_9 Depth=1
	st.d	$zero, $sp, 200                 # 8-byte Folded Spill
	move	$t1, $zero
	st.d	$zero, $sp, 304                 # 8-byte Folded Spill
	st.d	$zero, $sp, 232                 # 8-byte Folded Spill
	st.d	$zero, $sp, 224                 # 8-byte Folded Spill
.LBB77_130:                             # %.thread642
                                        #   in Loop: Header=BB77_9 Depth=1
	move	$t0, $s6
.LBB77_131:                             # %.thread642
                                        #   in Loop: Header=BB77_9 Depth=1
	move	$a0, $zero
	addi.w	$a1, $t1, 1
	addi.d	$a2, $sp, 312
	stx.b	$s8, $t1, $a2
	move	$t1, $a1
	ori	$a1, $zero, 31
	blt	$a1, $t1, .LBB77_84
.LBB77_132:                             #   in Loop: Header=BB77_9 Depth=1
	ld.d	$a1, $sp, 232                   # 8-byte Folded Reload
	addi.w	$a3, $a1, 0
	ld.d	$a1, $sp, 224                   # 8-byte Folded Reload
	addi.w	$a2, $a1, 0
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	ld.d	$s4, $sp, 96                    # 8-byte Folded Reload
	ori	$a4, $zero, 6
	bne	$s4, $a4, .LBB77_136
# %bb.133:                              #   in Loop: Header=BB77_9 Depth=1
	beqz	$a3, .LBB77_136
# %bb.134:                              #   in Loop: Header=BB77_9 Depth=1
	beqz	$a2, .LBB77_136
# %bb.135:                              #   in Loop: Header=BB77_9 Depth=1
	bnez	$a1, .LBB77_149
.LBB77_136:                             #   in Loop: Header=BB77_9 Depth=1
	masknez	$a0, $a0, $s1
	st.d	$a0, $sp, 192                   # 8-byte Folded Spill
	beqz	$a3, .LBB77_85
# %bb.137:                              #   in Loop: Header=BB77_9 Depth=1
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$t2, $sp, 160                   # 8-byte Folded Reload
	ld.d	$a3, $sp, 256                   # 8-byte Folded Reload
	beqz	$a2, .LBB77_87
# %bb.138:                              #   in Loop: Header=BB77_9 Depth=1
	beqz	$a1, .LBB77_87
	b	.LBB77_150
.LBB77_139:                             #   in Loop: Header=BB77_9 Depth=1
	move	$t3, $zero
	move	$a1, $zero
	st.d	$zero, $sp, 264                 # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 272                   # 8-byte Folded Spill
	addi.w	$a0, $t3, 10
	beq	$a0, $fp, .LBB77_96
	b	.LBB77_105
.LBB77_140:
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
.LBB77_141:
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	b	.LBB77_159
.LBB77_142:
	move	$s4, $zero
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	b	.LBB77_159
.LBB77_143:
	move	$s4, $zero
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	add.d	$a1, $a0, $a1
	b	.LBB77_157
.LBB77_144:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	add.d	$a0, $a0, $s0
	addi.d	$a1, $a0, -1
	ori	$s4, $zero, 2
	b	.LBB77_157
.LBB77_145:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	add.d	$a0, $a0, $s0
	addi.d	$a1, $a0, -1
	ori	$s4, $zero, 3
	b	.LBB77_157
.LBB77_146:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	add.d	$a0, $a0, $s0
	addi.d	$a1, $a0, -1
	ori	$s4, $zero, 4
	b	.LBB77_157
.LBB77_147:
	ori	$a2, $zero, 4
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 48                    # 8-byte Folded Reload
	mul.d	$a1, $a1, $a3
	bne	$t0, $a2, .LBB77_154
# %bb.148:                              # %.thread623
	addi.w	$a0, $a1, 0
	srli.d	$a0, $a0, 1
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 8                     # 8-byte Folded Reload
	b	.LBB77_165
.LBB77_149:
	move	$s4, $zero
	ld.d	$a0, $sp, 232                   # 8-byte Folded Reload
	ld.d	$a1, $sp, 224                   # 8-byte Folded Reload
	mul.d	$a0, $a1, $a0
	ld.d	$a1, $sp, 304                   # 8-byte Folded Reload
	add.d	$a0, $a1, $a0
	add.d	$a0, $a0, $fp
	addi.w	$a0, $a0, -1
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	add.d	$a1, $a1, $a0
	b	.LBB77_157
.LBB77_150:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$a1, $sp, 304                   # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	addi.d	$a1, $a0, -2
	ori	$s4, $zero, 6
	b	.LBB77_157
.LBB77_151:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$a1, $sp, 280                   # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	addi.d	$a1, $a0, -3
	ori	$s4, $zero, 1
	b	.LBB77_157
.LBB77_152:
	move	$s4, $zero
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	add.d	$a1, $a0, $s2
	b	.LBB77_157
.LBB77_153:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	add.d	$a0, $a0, $t3
	addi.d	$a1, $a0, -1
	ori	$s4, $zero, 7
	b	.LBB77_157
.LBB77_154:
	ori	$a2, $zero, 24
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 8                     # 8-byte Folded Reload
	bne	$t0, $a2, .LBB77_164
# %bb.155:
	alsl.d	$a0, $a1, $a1, 1
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	b	.LBB77_165
.LBB77_156:
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	addi.d	$a1, $a0, -5
	ori	$s4, $zero, 8
.LBB77_157:                             # %.thread689.sink.split
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
.LBB77_158:                             # %.thread689.sink.split
	ld.d	$a0, $sp, 208                   # 8-byte Folded Reload
	move	$a2, $zero
	pcaddu18i	$ra, %call36(fseek)
	jirl	$ra, $ra, 0
.LBB77_159:                             # %.thread689
	ld.w	$fp, $s1, 0
	ld.w	$s0, $s1, 4
	addi.w	$a0, $fp, -1024
	st.w	$a0, $s1, 0
	bge	$s0, $a0, .LBB77_161
# %bb.160:
	st.w	$a0, $s1, 4
	move	$s0, $a0
.LBB77_161:                             # %_ZN5ArrayIiLi0EED2Ev.exit594
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	addi.w	$a0, $fp, -2048
	st.w	$a0, $s1, 0
	bge	$s0, $a0, .LBB77_163
# %bb.162:
	st.w	$a0, $s1, 4
.LBB77_163:                             # %_ZN5ArrayIiLi0EED2Ev.exit595
	ld.d	$a0, $sp, 136                   # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	ld.d	$s8, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 360                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 368                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 376                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 384                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 392                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 400                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 408                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 416                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 424                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 432
	ret
.LBB77_164:
	sltui	$a0, $a0, 1
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	add.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 120                   # 8-byte Folded Reload
	masknez	$a2, $a2, $a0
	maskeqz	$a0, $a1, $a0
	or	$a0, $a0, $a2
.LBB77_165:
	move	$s4, $zero
	addi.w	$a0, $a0, 0
	add.d	$a1, $a3, $a0
	b	.LBB77_158
.LBB77_166:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.LBB77_167:
.Ltmp324:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp325:                               # EH_LABEL
# %bb.168:                              # %.noexc
.LBB77_169:
.Ltmp326:                               # EH_LABEL
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	move	$s0, $a0
	addi.w	$a0, $a1, -1024
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB77_171
# %bb.170:
	st.w	$a0, $s1, 4
.LBB77_171:                             # %_ZN5ArrayIiLi0EED2Ev.exit
	ld.d	$a0, $sp, 136                   # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end77:
	.size	_Z6detectP8_IO_FILEi8Filetype, .Lfunc_end77-_Z6detectP8_IO_FILEi8Filetype
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table77:
.Lexception17:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end17-.Lcst_begin17
.Lcst_begin17:
	.uleb128 .Lfunc_begin17-.Lfunc_begin17  # >> Call Site 1 <<
	.uleb128 .Ltmp324-.Lfunc_begin17        #   Call between .Lfunc_begin17 and .Ltmp324
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp324-.Lfunc_begin17        # >> Call Site 2 <<
	.uleb128 .Ltmp325-.Ltmp324              #   Call between .Ltmp324 and .Ltmp325
	.uleb128 .Ltmp326-.Lfunc_begin17        #     jumps to .Ltmp326
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp325-.Lfunc_begin17        # >> Call Site 3 <<
	.uleb128 .Lfunc_end77-.Ltmp325          #   Call between .Ltmp325 and .Lfunc_end77
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end17:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z14encode_defaultP8_IO_FILES0_i # -- Begin function _Z14encode_defaultP8_IO_FILES0_i
	.p2align	5
	.type	_Z14encode_defaultP8_IO_FILES0_i,@function
_Z14encode_defaultP8_IO_FILES0_i:       # @_Z14encode_defaultP8_IO_FILES0_i
# %bb.0:
	beqz	$a2, .LBB78_4
# %bb.1:                                # %.lr.ph.preheader
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	.p2align	4, , 16
.LBB78_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	addi.w	$fp, $fp, -1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bnez	$fp, .LBB78_2
# %bb.3:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
.LBB78_4:                               # %._crit_edge
	ret
.Lfunc_end78:
	.size	_Z14encode_defaultP8_IO_FILES0_i, .Lfunc_end78-_Z14encode_defaultP8_IO_FILES0_i
                                        # -- End function
	.globl	_Z14decode_defaultR7Encoder     # -- Begin function _Z14decode_defaultR7Encoder
	.p2align	5
	.type	_Z14decode_defaultR7Encoder,@function
_Z14decode_defaultR7Encoder:            # @_Z14decode_defaultR7Encoder
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZN7Encoder10decompressEv)
	jr	$t8
.Lfunc_end79:
	.size	_Z14decode_defaultR7Encoder, .Lfunc_end79-_Z14decode_defaultR7Encoder
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN7Encoder10decompressEv,"axG",@progbits,_ZN7Encoder10decompressEv,comdat
	.weak	_ZN7Encoder10decompressEv       # -- Begin function _ZN7Encoder10decompressEv
	.p2align	5
	.type	_ZN7Encoder10decompressEv,@function
_ZN7Encoder10decompressEv:              # @_ZN7Encoder10decompressEv
	.cfi_startproc
# %bb.0:
	ld.w	$a1, $a0, 4
	beqz	$a1, .LBB80_3
# %bb.1:
	pcalau12i	$a1, %pc_hi20(level)
	ld.w	$a1, $a1, %pc_lo12(level)
	beqz	$a1, .LBB80_4
# %bb.2:                                # %.preheader.preheader
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	slli.d	$a1, $s0, 2
	alsl.d	$a1, $s1, $a1, 1
	add.d	$s1, $a0, $a1
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	slli.d	$a1, $s1, 2
	alsl.d	$a1, $s0, $a1, 1
	add.w	$s1, $a0, $a1
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	slli.d	$a1, $s1, 2
	alsl.d	$a1, $s0, $a1, 1
	add.d	$s0, $a0, $a1
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	alsl.w	$a0, $s0, $a0, 1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB80_3:
	ld.d	$a0, $a0, 32
	pcaddu18i	$t8, %call36(getc)
	jr	$t8
.LBB80_4:
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(getc)
	jr	$t8
.Lfunc_end80:
	.size	_ZN7Encoder10decompressEv, .Lfunc_end80-_ZN7Encoder10decompressEv
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z11encode_jpegP8_IO_FILES0_i   # -- Begin function _Z11encode_jpegP8_IO_FILES0_i
	.p2align	5
	.type	_Z11encode_jpegP8_IO_FILES0_i,@function
_Z11encode_jpegP8_IO_FILES0_i:          # @_Z11encode_jpegP8_IO_FILES0_i
# %bb.0:
	beqz	$a2, .LBB81_4
# %bb.1:                                # %.lr.ph.preheader
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	.p2align	4, , 16
.LBB81_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	addi.w	$fp, $fp, -1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bnez	$fp, .LBB81_2
# %bb.3:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
.LBB81_4:                               # %._crit_edge
	ret
.Lfunc_end81:
	.size	_Z11encode_jpegP8_IO_FILES0_i, .Lfunc_end81-_Z11encode_jpegP8_IO_FILES0_i
                                        # -- End function
	.globl	_Z11decode_jpegR7Encoder        # -- Begin function _Z11decode_jpegR7Encoder
	.p2align	5
	.type	_Z11decode_jpegR7Encoder,@function
_Z11decode_jpegR7Encoder:               # @_Z11decode_jpegR7Encoder
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZN7Encoder10decompressEv)
	jr	$t8
.Lfunc_end82:
	.size	_Z11decode_jpegR7Encoder, .Lfunc_end82-_Z11decode_jpegR7Encoder
	.cfi_endproc
                                        # -- End function
	.globl	_Z10encode_bmpP8_IO_FILES0_i    # -- Begin function _Z10encode_bmpP8_IO_FILES0_i
	.p2align	5
	.type	_Z10encode_bmpP8_IO_FILES0_i,@function
_Z10encode_bmpP8_IO_FILES0_i:           # @_Z10encode_bmpP8_IO_FILES0_i
# %bb.0:
	beqz	$a2, .LBB83_4
# %bb.1:                                # %.lr.ph.preheader
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	.p2align	4, , 16
.LBB83_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	addi.w	$fp, $fp, -1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bnez	$fp, .LBB83_2
# %bb.3:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
.LBB83_4:                               # %._crit_edge
	ret
.Lfunc_end83:
	.size	_Z10encode_bmpP8_IO_FILES0_i, .Lfunc_end83-_Z10encode_bmpP8_IO_FILES0_i
                                        # -- End function
	.globl	_Z10decode_bmpR7Encoder         # -- Begin function _Z10decode_bmpR7Encoder
	.p2align	5
	.type	_Z10decode_bmpR7Encoder,@function
_Z10decode_bmpR7Encoder:                # @_Z10decode_bmpR7Encoder
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZN7Encoder10decompressEv)
	jr	$t8
.Lfunc_end84:
	.size	_Z10decode_bmpR7Encoder, .Lfunc_end84-_Z10decode_bmpR7Encoder
	.cfi_endproc
                                        # -- End function
	.globl	_Z10encode_pgmP8_IO_FILES0_i    # -- Begin function _Z10encode_pgmP8_IO_FILES0_i
	.p2align	5
	.type	_Z10encode_pgmP8_IO_FILES0_i,@function
_Z10encode_pgmP8_IO_FILES0_i:           # @_Z10encode_pgmP8_IO_FILES0_i
# %bb.0:
	beqz	$a2, .LBB85_4
# %bb.1:                                # %.lr.ph.preheader
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	.p2align	4, , 16
.LBB85_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	addi.w	$fp, $fp, -1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bnez	$fp, .LBB85_2
# %bb.3:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
.LBB85_4:                               # %._crit_edge
	ret
.Lfunc_end85:
	.size	_Z10encode_pgmP8_IO_FILES0_i, .Lfunc_end85-_Z10encode_pgmP8_IO_FILES0_i
                                        # -- End function
	.globl	_Z10decode_pgmR7Encoder         # -- Begin function _Z10decode_pgmR7Encoder
	.p2align	5
	.type	_Z10decode_pgmR7Encoder,@function
_Z10decode_pgmR7Encoder:                # @_Z10decode_pgmR7Encoder
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZN7Encoder10decompressEv)
	jr	$t8
.Lfunc_end86:
	.size	_Z10decode_pgmR7Encoder, .Lfunc_end86-_Z10decode_pgmR7Encoder
	.cfi_endproc
                                        # -- End function
	.globl	_Z10encode_rgbP8_IO_FILES0_i    # -- Begin function _Z10encode_rgbP8_IO_FILES0_i
	.p2align	5
	.type	_Z10encode_rgbP8_IO_FILES0_i,@function
_Z10encode_rgbP8_IO_FILES0_i:           # @_Z10encode_rgbP8_IO_FILES0_i
# %bb.0:
	beqz	$a2, .LBB87_4
# %bb.1:                                # %.lr.ph.preheader
	addi.d	$sp, $sp, -32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	.p2align	4, , 16
.LBB87_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	addi.w	$fp, $fp, -1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bnez	$fp, .LBB87_2
# %bb.3:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
.LBB87_4:                               # %._crit_edge
	ret
.Lfunc_end87:
	.size	_Z10encode_rgbP8_IO_FILES0_i, .Lfunc_end87-_Z10encode_rgbP8_IO_FILES0_i
                                        # -- End function
	.globl	_Z10decode_rgbR7Encoder         # -- Begin function _Z10decode_rgbR7Encoder
	.p2align	5
	.type	_Z10decode_rgbR7Encoder,@function
_Z10decode_rgbR7Encoder:                # @_Z10decode_rgbR7Encoder
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZN7Encoder10decompressEv)
	jr	$t8
.Lfunc_end88:
	.size	_Z10decode_rgbR7Encoder, .Lfunc_end88-_Z10decode_rgbR7Encoder
	.cfi_endproc
                                        # -- End function
	.globl	_Z10encode_exeP8_IO_FILES0_ii   # -- Begin function _Z10encode_exeP8_IO_FILES0_ii
	.p2align	5
	.type	_Z10encode_exeP8_IO_FILES0_ii,@function
_Z10encode_exeP8_IO_FILES0_ii:          # @_Z10encode_exeP8_IO_FILES0_ii
.Lfunc_begin18:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception18
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a3
	move	$fp, $a2
	st.d	$a1, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$a3, $a0, %pc_lo12(programChecker)
	ld.w	$a0, $a3, 0
	ld.w	$a1, $a3, 4
	addu16i.d	$a2, $a0, 1
	addi.w	$a0, $a2, 0
	st.w	$a2, $a3, 0
	bge	$a1, $a0, .LBB89_2
# %bb.1:
	st.w	$a0, $a3, 4
.LBB89_2:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	lu12i.w	$a0, 16
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB89_19
# %bb.3:                                # %_ZN5ArrayIhLi0EEC2Ei.exit
	move	$s3, $a0
	srai.d	$a2, $fp, 24
	srai.d	$a3, $fp, 16
	srai.d	$a4, $fp, 8
	pcalau12i	$a0, %pc_hi20(.L.str.17)
	addi.d	$s5, $a0, %pc_lo12(.L.str.17)
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	move	$a0, $s1
	move	$a1, $s5
	move	$a5, $fp
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	srai.d	$a2, $s0, 24
	srai.d	$a3, $s0, 16
	srai.d	$a4, $s0, 8
	move	$a0, $s1
	move	$a1, $s5
	move	$a5, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	blez	$fp, .LBB89_14
# %bb.4:                                # %.lr.ph68.preheader
	move	$s7, $zero
	addi.d	$s5, $s3, -5
	ori	$s8, $zero, 5
	ori	$s6, $zero, 232
	move	$s1, $fp
	b	.LBB89_6
	.p2align	4, , 16
.LBB89_5:                               # %._crit_edge
                                        #   in Loop: Header=BB89_6 Depth=1
	ori	$a1, $zero, 1
	move	$a0, $s3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(fwrite)
	jirl	$ra, $ra, 0
	addu16i.d	$a0, $s7, 1
	addi.w	$s7, $a0, 0
	addu16i.d	$a0, $s1, -1
	addi.w	$s1, $a0, 0
	addu16i.d	$a0, $s0, 1
	addi.w	$s0, $a0, 0
	bge	$s7, $fp, .LBB89_14
.LBB89_6:                               # %.lr.ph68
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_11 Depth 2
	move	$s2, $fp
	sub.w	$s4, $fp, $s7
	lu12i.w	$a2, 16
	slt	$a0, $s4, $a2
	maskeqz	$a1, $s4, $a0
	masknez	$a2, $a2, $a0
	move	$a0, $s3
	or	$fp, $a1, $a2
	bstrpick.d	$a2, $fp, 31, 0
	ori	$a1, $zero, 1
	ld.d	$a3, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(fread)
	jirl	$ra, $ra, 0
	addi.w	$a2, $a0, 0
	bne	$fp, $a2, .LBB89_17
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB89_6 Depth=1
	move	$fp, $s2
	ori	$t0, $zero, 255
	blt	$s4, $s8, .LBB89_5
# %bb.8:                                #   in Loop: Header=BB89_6 Depth=1
	lu12i.w	$a1, 16
	slt	$a0, $s1, $a1
	masknez	$a1, $a1, $a0
	maskeqz	$a0, $s1, $a0
	or	$a1, $a0, $a1
	bstrpick.d	$a0, $a1, 31, 0
	addi.d	$a0, $a0, 1
	add.d	$a1, $a1, $s0
	b	.LBB89_11
	.p2align	4, , 16
.LBB89_9:                               #   in Loop: Header=BB89_11 Depth=2
	ld.bu	$a5, $a3, 1
	ld.bu	$a6, $a3, 2
	ldx.bu	$a7, $s5, $a0
	slli.d	$a5, $a5, 8
	slli.d	$a6, $a6, 16
	slli.d	$a4, $a4, 24
	or	$a4, $a4, $a6
	or	$a4, $a4, $a5
	or	$a4, $a4, $a7
	add.d	$a4, $a1, $a4
	slli.w	$a5, $a4, 7
	srli.d	$a5, $a5, 31
	st.b	$a5, $a3, 3
	srli.d	$a5, $a4, 16
	st.b	$a5, $a3, 2
	srli.d	$a5, $a4, 8
	st.b	$a5, $a3, 1
	stx.b	$a4, $s5, $a0
.LBB89_10:                              #   in Loop: Header=BB89_11 Depth=2
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, -1
	bgeu	$s8, $a0, .LBB89_5
.LBB89_11:                              #   Parent Loop BB89_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add.d	$a3, $s5, $a0
	ld.bu	$a4, $a3, -1
	andi	$a4, $a4, 254
	bne	$a4, $s6, .LBB89_10
# %bb.12:                               #   in Loop: Header=BB89_11 Depth=2
	ld.bu	$a4, $a3, 3
	beq	$a4, $t0, .LBB89_9
# %bb.13:                               #   in Loop: Header=BB89_11 Depth=2
	beqz	$a4, .LBB89_9
	b	.LBB89_10
.LBB89_14:                              # %._crit_edge69
	ld.d	$a3, $sp, 16                    # 8-byte Folded Reload
	ld.w	$a0, $a3, 0
	ld.w	$a1, $a3, 4
	addu16i.d	$a2, $a0, -1
	addi.w	$a0, $a2, 0
	st.w	$a2, $a3, 0
	bge	$a1, $a0, .LBB89_16
# %bb.15:
	st.w	$a0, $a3, 4
.LBB89_16:                              # %_ZN5ArrayIhLi0EED2Ev.exit
	move	$a0, $s3
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.LBB89_17:
.Ltmp327:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.18)
	addi.d	$a0, $a0, %pc_lo12(.L.str.18)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp328:                               # EH_LABEL
# %bb.18:                               # %.unreachable
.LBB89_19:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.LBB89_20:
.Ltmp329:                               # EH_LABEL
	ld.d	$a3, $sp, 16                    # 8-byte Folded Reload
	ld.w	$a1, $a3, 0
	ld.w	$a2, $a3, 4
	move	$fp, $a0
	addu16i.d	$a1, $a1, -1
	addi.w	$a0, $a1, 0
	st.w	$a1, $a3, 0
	bge	$a2, $a0, .LBB89_22
# %bb.21:
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	st.w	$a0, $a1, 4
.LBB89_22:                              # %_ZN5ArrayIhLi0EED2Ev.exit48
	move	$a0, $s3
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end89:
	.size	_Z10encode_exeP8_IO_FILES0_ii, .Lfunc_end89-_Z10encode_exeP8_IO_FILES0_ii
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table89:
.Lexception18:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end18-.Lcst_begin18
.Lcst_begin18:
	.uleb128 .Lfunc_begin18-.Lfunc_begin18  # >> Call Site 1 <<
	.uleb128 .Ltmp327-.Lfunc_begin18        #   Call between .Lfunc_begin18 and .Ltmp327
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp327-.Lfunc_begin18        # >> Call Site 2 <<
	.uleb128 .Ltmp328-.Ltmp327              #   Call between .Ltmp327 and .Ltmp328
	.uleb128 .Ltmp329-.Lfunc_begin18        #     jumps to .Ltmp329
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp328-.Lfunc_begin18        # >> Call Site 3 <<
	.uleb128 .Lfunc_end89-.Ltmp328          #   Call between .Ltmp328 and .Lfunc_end89
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end18:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_Z10decode_exeR7Encoder         # -- Begin function _Z10decode_exeR7Encoder
	.p2align	5
	.type	_Z10decode_exeR7Encoder,@function
_Z10decode_exeR7Encoder:                # @_Z10decode_exeR7Encoder
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	pcalau12i	$s1, %pc_hi20(_ZZ10decode_exeR7EncoderE6offset)
	ld.w	$a2, $s1, %pc_lo12(_ZZ10decode_exeR7EncoderE6offset)
	pcalau12i	$s2, %pc_hi20(_ZZ10decode_exeR7EncoderE4size)
	ld.w	$a3, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	pcalau12i	$s0, %pc_hi20(_ZZ10decode_exeR7EncoderE1q)
	ld.w	$a1, $s0, %pc_lo12(_ZZ10decode_exeR7EncoderE1q)
	move	$fp, $a0
	bne	$a2, $a3, .LBB90_5
# %bb.1:
	bnez	$a1, .LBB90_5
# %bb.2:
	pcalau12i	$s3, %pc_hi20(_ZZ10decode_exeR7EncoderE5begin)
	.p2align	4, , 16
.LBB90_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	st.w	$zero, $s1, %pc_lo12(_ZZ10decode_exeR7EncoderE6offset)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	slli.d	$a0, $a0, 24
	st.w	$a0, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	slli.d	$a0, $a0, 16
	or	$a0, $a1, $a0
	st.w	$a0, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	slli.d	$a0, $a0, 8
	or	$a0, $a1, $a0
	st.w	$a0, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	or	$a0, $a1, $a0
	st.w	$a0, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	slli.d	$a0, $a0, 24
	st.w	$a0, $s3, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	slli.d	$a0, $a0, 16
	or	$a0, $a1, $a0
	st.w	$a0, $s3, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s3, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	slli.d	$a0, $a0, 8
	or	$a0, $a1, $a0
	st.w	$a0, $s3, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a4, $s3, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	ld.w	$a2, $s1, %pc_lo12(_ZZ10decode_exeR7EncoderE6offset)
	ld.w	$a3, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	ld.w	$a1, $s0, %pc_lo12(_ZZ10decode_exeR7EncoderE1q)
	or	$a0, $a4, $a0
	st.w	$a0, $s3, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	bne	$a2, $a3, .LBB90_5
# %bb.4:                                # %.lr.ph
                                        #   in Loop: Header=BB90_3 Depth=1
	beqz	$a1, .LBB90_3
.LBB90_5:                               # %.preheader
	bge	$a2, $a3, .LBB90_10
# %bb.6:                                # %.preheader
	ori	$s3, $zero, 4
	blt	$s3, $a1, .LBB90_10
# %bb.7:
	pcalau12i	$a0, %pc_hi20(_ZZ10decode_exeR7EncoderE1c)
	addi.d	$s4, $a0, %pc_lo12(_ZZ10decode_exeR7EncoderE1c)
	.p2align	4, , 16
.LBB90_8:                               # %.lr.ph23
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a0, $s4, 0
	st.w	$a0, $s4, 1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a3, $s0, %pc_lo12(_ZZ10decode_exeR7EncoderE1q)
	st.b	$a0, $s4, 0
	ld.w	$a0, $s1, %pc_lo12(_ZZ10decode_exeR7EncoderE6offset)
	ld.w	$a4, $s2, %pc_lo12(_ZZ10decode_exeR7EncoderE4size)
	addi.w	$a1, $a3, 1
	st.w	$a1, $s0, %pc_lo12(_ZZ10decode_exeR7EncoderE1q)
	addi.w	$a2, $a0, 1
	st.w	$a2, $s1, %pc_lo12(_ZZ10decode_exeR7EncoderE6offset)
	bge	$a2, $a4, .LBB90_10
# %bb.9:                                # %.lr.ph23
                                        #   in Loop: Header=BB90_8 Depth=1
	blt	$a3, $s3, .LBB90_8
.LBB90_10:                              # %._crit_edge
	ori	$a3, $zero, 5
	pcalau12i	$a0, %pc_hi20(_ZZ10decode_exeR7EncoderE1c)
	addi.d	$a0, $a0, %pc_lo12(_ZZ10decode_exeR7EncoderE1c)
	bne	$a1, $a3, .LBB90_15
# %bb.11:
	ld.bu	$a3, $a0, 4
	andi	$a3, $a3, 254
	ori	$a4, $zero, 232
	bne	$a3, $a4, .LBB90_15
# %bb.12:
	ld.bu	$a3, $a0, 0
	addi.d	$a4, $a3, -255
	addi.w	$a5, $zero, -255
	bltu	$a5, $a4, .LBB90_15
# %bb.13:
	addi.d	$a4, $a2, -1
	addi.d	$a5, $a2, -5
	xor	$a4, $a4, $a5
	bstrpick.d	$a4, $a4, 31, 16
	bnez	$a4, .LBB90_15
# %bb.14:
	ld.bu	$a4, $a0, 2
	ld.bu	$a5, $a0, 3
	slli.d	$a4, $a4, 8
	ld.bu	$a6, $a0, 1
	slli.d	$a3, $a3, 24
	or	$a3, $a3, $a5
	pcalau12i	$a5, %pc_hi20(_ZZ10decode_exeR7EncoderE5begin)
	ld.w	$a5, $a5, %pc_lo12(_ZZ10decode_exeR7EncoderE5begin)
	slli.d	$a6, $a6, 16
	or	$a3, $a3, $a4
	or	$a3, $a3, $a6
	add.d	$a2, $a5, $a2
	sub.d	$a2, $a3, $a2
	slli.w	$a3, $a2, 7
	st.b	$a2, $a0, 3
	srli.d	$a4, $a2, 8
	st.b	$a4, $a0, 2
	srli.d	$a2, $a2, 16
	st.b	$a2, $a0, 1
	srli.d	$a2, $a3, 31
	st.b	$a2, $a0, 0
.LBB90_15:
	addi.w	$a1, $a1, -1
	ldx.bu	$a0, $a0, $a1
	st.w	$a1, $s0, %pc_lo12(_ZZ10decode_exeR7EncoderE1q)
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	ret
.Lfunc_end90:
	.size	_Z10decode_exeR7Encoder, .Lfunc_end90-_Z10decode_exeR7Encoder
	.cfi_endproc
                                        # -- End function
	.globl	_Z6encodeP8_IO_FILES0_i         # -- Begin function _Z6encodeP8_IO_FILES0_i
	.p2align	5
	.type	_Z6encodeP8_IO_FILES0_i,@function
_Z6encodeP8_IO_FILES0_i:                # @_Z6encodeP8_IO_FILES0_i
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	blez	$fp, .LBB91_17
# %bb.1:                                # %.lr.ph.preheader
	move	$s5, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.LJTI91_0)
	addi.d	$s8, $a0, %pc_lo12(.LJTI91_0)
	move	$s6, $zero
	b	.LBB91_4
.LBB91_2:                               #   in Loop: Header=BB91_4 Depth=1
	addi.w	$a3, $s5, 0
	move	$a0, $s1
	move	$a1, $s0
	move	$a2, $s7
	pcaddu18i	$ra, %call36(_Z10encode_exeP8_IO_FILES0_ii)
	jirl	$ra, $ra, 0
	.p2align	4, , 16
.LBB91_3:                               # %_Z11encode_jpegP8_IO_FILES0_i.exit
                                        #   in Loop: Header=BB91_4 Depth=1
	sub.w	$fp, $fp, $s2
	move	$s6, $s3
	move	$s5, $s4
	blez	$fp, .LBB91_17
.LBB91_4:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_12 Depth 2
                                        #     Child Loop BB91_16 Depth 2
                                        #     Child Loop BB91_8 Depth 2
                                        #     Child Loop BB91_14 Depth 2
                                        #     Child Loop BB91_10 Depth 2
	move	$a0, $s1
	move	$a1, $fp
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z6detectP8_IO_FILEi8Filetype)
	jirl	$ra, $ra, 0
	move	$s3, $a0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	move	$s4, $a0
	move	$a0, $s1
	move	$a1, $s5
	move	$a2, $zero
	pcaddu18i	$ra, %call36(fseek)
	jirl	$ra, $ra, 0
	sub.d	$s2, $s4, $s5
	addi.w	$s7, $s2, 0
	blez	$s7, .LBB91_3
# %bb.5:                                #   in Loop: Header=BB91_4 Depth=1
	bstrpick.d	$a0, $s2, 31, 8
	bstrpick.d	$a3, $s2, 31, 24
	bstrpick.d	$a4, $s2, 31, 16
	bstrpick.d	$a5, $a0, 55, 0
	move	$a0, $s0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	move	$a2, $s6
	move	$a6, $s7
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	addi.d	$a0, $s6, -1
	ori	$a1, $zero, 7
	bltu	$a1, $a0, .LBB91_9
# %bb.6:                                #   in Loop: Header=BB91_4 Depth=1
	slli.d	$a0, $a0, 2
	ldx.w	$a0, $s8, $a0
	add.d	$a0, $s8, $a0
	jr	$a0
.LBB91_7:                               # %.lr.ph.i44.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	sub.w	$s5, $s5, $s4
	.p2align	4, , 16
.LBB91_8:                               # %.lr.ph.i44
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bstrpick.d	$a0, $s5, 31, 0
	addi.d	$s5, $a0, 1
	slli.d	$a0, $s5, 31
	bgez	$a0, .LBB91_8
	b	.LBB91_3
.LBB91_9:                               # %.lr.ph.i56.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	sub.w	$s5, $s5, $s4
	.p2align	4, , 16
.LBB91_10:                              # %.lr.ph.i56
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bstrpick.d	$a0, $s5, 31, 0
	addi.d	$s5, $a0, 1
	slli.d	$a0, $s5, 31
	bgez	$a0, .LBB91_10
	b	.LBB91_3
.LBB91_11:                              # %.lr.ph.i52.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	sub.w	$s5, $s5, $s4
	.p2align	4, , 16
.LBB91_12:                              # %.lr.ph.i52
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bstrpick.d	$a0, $s5, 31, 0
	addi.d	$s5, $a0, 1
	slli.d	$a0, $s5, 31
	bgez	$a0, .LBB91_12
	b	.LBB91_3
.LBB91_13:                              # %.lr.ph.i.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	sub.w	$s5, $s5, $s4
	.p2align	4, , 16
.LBB91_14:                              # %.lr.ph.i
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bstrpick.d	$a0, $s5, 31, 0
	addi.d	$s5, $a0, 1
	slli.d	$a0, $s5, 31
	bgez	$a0, .LBB91_14
	b	.LBB91_3
.LBB91_15:                              # %.lr.ph.i48.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	sub.w	$s5, $s5, $s4
	.p2align	4, , 16
.LBB91_16:                              # %.lr.ph.i48
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$a1, $s0
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	bstrpick.d	$a0, $s5, 31, 0
	addi.d	$s5, $a0, 1
	slli.d	$a0, $s5, 31
	bgez	$a0, .LBB91_16
	b	.LBB91_3
.LBB91_17:                              # %._crit_edge
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.Lfunc_end91:
	.size	_Z6encodeP8_IO_FILES0_i, .Lfunc_end91-_Z6encodeP8_IO_FILES0_i
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI91_0:
	.word	.LBB91_13-.LJTI91_0
	.word	.LBB91_7-.LJTI91_0
	.word	.LBB91_7-.LJTI91_0
	.word	.LBB91_7-.LJTI91_0
	.word	.LBB91_9-.LJTI91_0
	.word	.LBB91_15-.LJTI91_0
	.word	.LBB91_11-.LJTI91_0
	.word	.LBB91_2-.LJTI91_0
                                        # -- End function
	.text
	.globl	_Z6decodeR7Encoder              # -- Begin function _Z6decodeR7Encoder
	.p2align	5
	.type	_Z6decodeR7Encoder,@function
_Z6decodeR7Encoder:                     # @_Z6decodeR7Encoder
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	pcalau12i	$s0, %pc_hi20(_ZZ6decodeR7EncoderE3len)
	ld.w	$a1, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	move	$fp, $a0
	pcalau12i	$s1, %pc_hi20(_ZZ6decodeR7EncoderE4type)
	bnez	$a1, .LBB92_3
# %bb.1:                                # %.lr.ph.preheader
	ori	$s2, $zero, 1
	.p2align	4, , 16
.LBB92_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	st.w	$a0, $s1, %pc_lo12(_ZZ6decodeR7EncoderE4type)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	slli.d	$a0, $a0, 24
	st.w	$a0, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	slli.d	$a0, $a0, 16
	or	$a0, $a1, $a0
	st.w	$a0, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	slli.d	$a0, $a0, 8
	or	$a0, $a1, $a0
	st.w	$a0, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder10decompressEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	or	$a0, $a1, $a0
	slti	$a1, $a0, 0
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s2, $a1
	or	$a1, $a1, $a0
	st.w	$a1, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	beqz	$a1, .LBB92_2
.LBB92_3:                               # %._crit_edge
	ld.w	$a0, $s1, %pc_lo12(_ZZ6decodeR7EncoderE4type)
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, -1
	ori	$a2, $zero, 7
	st.w	$a1, $s0, %pc_lo12(_ZZ6decodeR7EncoderE3len)
	bltu	$a2, $a0, .LBB92_5
# %bb.4:                                # %._crit_edge
	slli.d	$a0, $a0, 2
	pcalau12i	$a1, %pc_hi20(.LJTI92_0)
	addi.d	$a1, $a1, %pc_lo12(.LJTI92_0)
	ldx.w	$a0, $a1, $a0
	add.d	$a0, $a1, $a0
	jr	$a0
.LBB92_5:
	move	$a0, $fp
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	pcaddu18i	$t8, %call36(_ZN7Encoder10decompressEv)
	jr	$t8
.LBB92_6:
	move	$a0, $fp
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	pcaddu18i	$t8, %call36(_Z10decode_exeR7Encoder)
	jr	$t8
.Lfunc_end92:
	.size	_Z6decodeR7Encoder, .Lfunc_end92-_Z6decodeR7Encoder
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI92_0:
	.word	.LBB92_5-.LJTI92_0
	.word	.LBB92_5-.LJTI92_0
	.word	.LBB92_5-.LJTI92_0
	.word	.LBB92_5-.LJTI92_0
	.word	.LBB92_5-.LJTI92_0
	.word	.LBB92_5-.LJTI92_0
	.word	.LBB92_5-.LJTI92_0
	.word	.LBB92_6-.LJTI92_0
                                        # -- End function
	.text
	.globl	_Z11printStatusi                # -- Begin function _Z11printStatusi
	.p2align	5
	.type	_Z11printStatusi,@function
_Z11printStatusi:                       # @_Z11printStatusi
# %bb.0:
	blez	$a0, .LBB93_3
# %bb.1:
	move	$a1, $a0
	andi	$a0, $a0, 4095
	bnez	$a0, .LBB93_3
# %bb.2:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$a0, $a0, %pc_lo12(.L.str.20)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %got_pc_hi20(stdout)
	ld.d	$a0, $a0, %got_pc_lo12(stdout)
	ld.d	$a0, $a0, 0
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	pcaddu18i	$t8, %call36(fflush)
	jr	$t8
.LBB93_3:
	ret
.Lfunc_end93:
	.size	_Z11printStatusi, .Lfunc_end93-_Z11printStatusi
                                        # -- End function
	.globl	_Z8compressPKclR7Encoder        # -- Begin function _Z8compressPKclR7Encoder
	.p2align	5
	.type	_Z8compressPKclR7Encoder,@function
_Z8compressPKclR7Encoder:               # @_Z8compressPKclR7Encoder
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$fp, $a2
	move	$s7, $a1
	move	$s3, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.21)
	addi.d	$a1, $a0, %pc_lo12(.L.str.21)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(fopen)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB94_191
# %bb.1:
	move	$s1, $a0
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	ori	$a1, $zero, 47
	move	$a0, $s3
	pcaddu18i	$ra, %call36(strrchr)
	jirl	$ra, $ra, 0
	sltui	$a1, $a0, 1
	addi.d	$a0, $a0, 1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s3, $a1
	or	$a1, $a1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.22)
	addi.d	$a0, $a0, %pc_lo12(.L.str.22)
	move	$a2, $s7
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	blez	$s7, .LBB94_189
# %bb.2:                                # %.lr.ph252
	pcalau12i	$a0, %pc_hi20(level)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ld.wu	$a0, $a0, %pc_lo12(level)
	st.d	$zero, $sp, 80                  # 8-byte Folded Spill
	lu12i.w	$a1, 1024
	sll.w	$a0, $a1, $a0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$s0, $zero, 2048
	ori	$s3, $zero, 1
	st.d	$s1, $sp, 24                    # 8-byte Folded Spill
	b	.LBB94_4
	.p2align	4, , 16
.LBB94_3:                               # %.loopexit
                                        #   in Loop: Header=BB94_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	sub.d	$s7, $s7, $a0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(fclose)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$s7, .LBB94_189
.LBB94_4:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_7 Depth 2
                                        #     Child Loop BB94_17 Depth 2
                                        #       Child Loop BB94_26 Depth 3
                                        #       Child Loop BB94_36 Depth 3
                                        #       Child Loop BB94_46 Depth 3
                                        #       Child Loop BB94_56 Depth 3
                                        #       Child Loop BB94_66 Depth 3
                                        #       Child Loop BB94_76 Depth 3
                                        #       Child Loop BB94_86 Depth 3
                                        #       Child Loop BB94_96 Depth 3
                                        #     Child Loop BB94_105 Depth 2
                                        #       Child Loop BB94_114 Depth 3
                                        #       Child Loop BB94_124 Depth 3
                                        #       Child Loop BB94_134 Depth 3
                                        #       Child Loop BB94_144 Depth 3
                                        #       Child Loop BB94_154 Depth 3
                                        #       Child Loop BB94_164 Depth 3
                                        #       Child Loop BB94_174 Depth 3
                                        #       Child Loop BB94_184 Depth 3
	pcaddu18i	$ra, %call36(tmpfile)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB94_190
# %bb.5:                                # %.split
                                        #   in Loop: Header=BB94_4 Depth=1
	move	$s8, $a0
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	slt	$a0, $s7, $s2
	masknez	$a1, $s2, $a0
	maskeqz	$a0, $s7, $a0
	or	$s4, $a0, $a1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	move	$s5, $a0
	move	$a0, $s1
	move	$a1, $s8
	st.d	$s4, $sp, 64                    # 8-byte Folded Spill
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z6encodeP8_IO_FILES0_i)
	jirl	$ra, $ra, 0
	move	$a0, $s8
	pcaddu18i	$ra, %call36(rewind)
	jirl	$ra, $ra, 0
	st.d	$s8, $fp, 32
	move	$a0, $s1
	move	$a1, $s5
	move	$a2, $zero
	pcaddu18i	$ra, %call36(fseek)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(y)
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	blez	$s2, .LBB94_10
# %bb.6:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	move	$s2, $zero
	.p2align	4, , 16
.LBB94_7:                               # %.lr.ph
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
	move	$s6, $a0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	bne	$s6, $a0, .LBB94_11
# %bb.8:                                #   in Loop: Header=BB94_7 Depth=2
	addi.d	$s2, $s2, 1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	bne	$a0, $s2, .LBB94_7
# %bb.9:                                #   in Loop: Header=BB94_4 Depth=1
	ld.d	$s2, $sp, 64                    # 8-byte Folded Reload
	move	$s7, $s6
	b	.LBB94_12
	.p2align	4, , 16
.LBB94_10:                              #   in Loop: Header=BB94_4 Depth=1
	move	$s2, $zero
	move	$s6, $zero
	move	$s7, $zero
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	beq	$s2, $a0, .LBB94_12
	b	.LBB94_13
	.p2align	4, , 16
.LBB94_11:                              #   in Loop: Header=BB94_4 Depth=1
	move	$s7, $a0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	bne	$s2, $a0, .LBB94_13
.LBB94_12:                              # %._crit_edge.thread
                                        #   in Loop: Header=BB94_4 Depth=1
	move	$a0, $s8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	beq	$a0, $a1, .LBB94_101
.LBB94_13:                              #   in Loop: Header=BB94_4 Depth=1
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	addi.w	$s8, $s1, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	add.d	$a1, $s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.24)
	addi.d	$a0, $a0, %pc_lo12(.L.str.24)
	move	$a2, $s7
	move	$a3, $s6
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN7Encoder8compressEi)
	jirl	$ra, $ra, 0
	srai.d	$a1, $s8, 24
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder8compressEi)
	jirl	$ra, $ra, 0
	srai.d	$a1, $s8, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder8compressEi)
	jirl	$ra, $ra, 0
	srai.d	$a1, $s8, 8
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder8compressEi)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_ZN7Encoder8compressEi)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 24                    # 8-byte Folded Reload
	move	$a0, $s1
	move	$a1, $s5
	move	$a2, $zero
	pcaddu18i	$ra, %call36(fseek)
	jirl	$ra, $ra, 0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	blez	$a0, .LBB94_3
# %bb.14:                               # %.lr.ph243.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	move	$s6, $zero
	b	.LBB94_17
	.p2align	4, , 16
.LBB94_15:                              #   in Loop: Header=BB94_17 Depth=2
	ld.d	$a1, $fp, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
.LBB94_16:                              # %_ZN7Encoder8compressEi.exit
                                        #   in Loop: Header=BB94_17 Depth=2
	addi.w	$s6, $s6, 1
	beq	$s6, $s8, .LBB94_3
.LBB94_17:                              # %.lr.ph243
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_26 Depth 3
                                        #       Child Loop BB94_36 Depth 3
                                        #       Child Loop BB94_46 Depth 3
                                        #       Child Loop BB94_56 Depth 3
                                        #       Child Loop BB94_66 Depth 3
                                        #       Child Loop BB94_76 Depth 3
                                        #       Child Loop BB94_86 Depth 3
                                        #       Child Loop BB94_96 Depth 3
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	add.w	$a1, $s6, $a0
	blez	$a1, .LBB94_20
# %bb.18:                               # %.lr.ph243
                                        #   in Loop: Header=BB94_17 Depth=2
	andi	$a0, $s6, 4095
	bnez	$a0, .LBB94_20
# %bb.19:                               #   in Loop: Header=BB94_17 Depth=2
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$a0, $a0, %pc_lo12(.L.str.20)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %got_pc_hi20(stdout)
	ld.d	$a0, $a0, %got_pc_lo12(stdout)
	ld.d	$a0, $a0, 0
	pcaddu18i	$ra, %call36(fflush)
	jirl	$ra, $ra, 0
.LBB94_20:                              # %_Z11printStatusi.exit
                                        #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a1, %pc_lo12(level)
	move	$s5, $a0
	beqz	$a1, .LBB94_15
# %bb.21:                               # %.preheader.preheader.i
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrpick.d	$a3, $s5, 7, 7
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_23
# %bb.22:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_24
	.p2align	4, , 16
.LBB94_23:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_24:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_26
	.p2align	4, , 16
.LBB94_25:                              #   in Loop: Header=BB94_26 Depth=3
	xor	$a0, $a1, $a2
.LBB94_26:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_31
# %bb.27:                               # %.lr.ph.i151
                                        #   in Loop: Header=BB94_26 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_29
# %bb.28:                               #   in Loop: Header=BB94_26 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_29:                              #   in Loop: Header=BB94_26 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_25
# %bb.30:                               #   in Loop: Header=BB94_26 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_25
	.p2align	4, , 16
.LBB94_31:                              # %_ZN7Encoder4codeEi.exit157
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 6, 6
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_33
# %bb.32:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_34
	.p2align	4, , 16
.LBB94_33:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_34:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_36
	.p2align	4, , 16
.LBB94_35:                              #   in Loop: Header=BB94_36 Depth=3
	xor	$a0, $a1, $a2
.LBB94_36:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_41
# %bb.37:                               # %.lr.ph.i142
                                        #   in Loop: Header=BB94_36 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_39
# %bb.38:                               #   in Loop: Header=BB94_36 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_39:                              #   in Loop: Header=BB94_36 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_35
# %bb.40:                               #   in Loop: Header=BB94_36 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_35
	.p2align	4, , 16
.LBB94_41:                              # %_ZN7Encoder4codeEi.exit148
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 5, 5
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_43
# %bb.42:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_44
	.p2align	4, , 16
.LBB94_43:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_44:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_46
	.p2align	4, , 16
.LBB94_45:                              #   in Loop: Header=BB94_46 Depth=3
	xor	$a0, $a1, $a2
.LBB94_46:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_51
# %bb.47:                               # %.lr.ph.i133
                                        #   in Loop: Header=BB94_46 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_49
# %bb.48:                               #   in Loop: Header=BB94_46 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_49:                              #   in Loop: Header=BB94_46 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_45
# %bb.50:                               #   in Loop: Header=BB94_46 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_45
	.p2align	4, , 16
.LBB94_51:                              # %_ZN7Encoder4codeEi.exit139
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 4, 4
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_53
# %bb.52:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_54
	.p2align	4, , 16
.LBB94_53:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_54:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_56
	.p2align	4, , 16
.LBB94_55:                              #   in Loop: Header=BB94_56 Depth=3
	xor	$a0, $a1, $a2
.LBB94_56:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_61
# %bb.57:                               # %.lr.ph.i124
                                        #   in Loop: Header=BB94_56 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_59
# %bb.58:                               #   in Loop: Header=BB94_56 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_59:                              #   in Loop: Header=BB94_56 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_55
# %bb.60:                               #   in Loop: Header=BB94_56 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_55
	.p2align	4, , 16
.LBB94_61:                              # %_ZN7Encoder4codeEi.exit130
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 3, 3
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_63
# %bb.62:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_64
	.p2align	4, , 16
.LBB94_63:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_64:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_66
	.p2align	4, , 16
.LBB94_65:                              #   in Loop: Header=BB94_66 Depth=3
	xor	$a0, $a1, $a2
.LBB94_66:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_71
# %bb.67:                               # %.lr.ph.i115
                                        #   in Loop: Header=BB94_66 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_69
# %bb.68:                               #   in Loop: Header=BB94_66 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_69:                              #   in Loop: Header=BB94_66 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_65
# %bb.70:                               #   in Loop: Header=BB94_66 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_65
	.p2align	4, , 16
.LBB94_71:                              # %_ZN7Encoder4codeEi.exit121
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 2, 2
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_73
# %bb.72:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_74
	.p2align	4, , 16
.LBB94_73:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_74:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_76
	.p2align	4, , 16
.LBB94_75:                              #   in Loop: Header=BB94_76 Depth=3
	xor	$a0, $a1, $a2
.LBB94_76:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_81
# %bb.77:                               # %.lr.ph.i106
                                        #   in Loop: Header=BB94_76 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_79
# %bb.78:                               #   in Loop: Header=BB94_76 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_79:                              #   in Loop: Header=BB94_76 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_75
# %bb.80:                               #   in Loop: Header=BB94_76 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_75
	.p2align	4, , 16
.LBB94_81:                              # %_ZN7Encoder4codeEi.exit112
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 1, 1
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_83
# %bb.82:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_84
	.p2align	4, , 16
.LBB94_83:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_84:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_86
	.p2align	4, , 16
.LBB94_85:                              #   in Loop: Header=BB94_86 Depth=3
	xor	$a0, $a1, $a2
.LBB94_86:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_91
# %bb.87:                               # %.lr.ph.i97
                                        #   in Loop: Header=BB94_86 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_89
# %bb.88:                               #   in Loop: Header=BB94_86 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_89:                              #   in Loop: Header=BB94_86 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_85
# %bb.90:                               #   in Loop: Header=BB94_86 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_85
	.p2align	4, , 16
.LBB94_91:                              # %_ZN7Encoder4codeEi.exit103
                                        #   in Loop: Header=BB94_17 Depth=2
	ld.w	$a0, $fp, 0
	andi	$a3, $s5, 1
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_93
# %bb.92:                               #   in Loop: Header=BB94_17 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_94
	.p2align	4, , 16
.LBB94_93:                              #   in Loop: Header=BB94_17 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_94:                              #   in Loop: Header=BB94_17 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_96
	.p2align	4, , 16
.LBB94_95:                              #   in Loop: Header=BB94_96 Depth=3
	xor	$a0, $a1, $a2
.LBB94_96:                              #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_16
# %bb.97:                               # %.lr.ph.i
                                        #   in Loop: Header=BB94_96 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_99
# %bb.98:                               #   in Loop: Header=BB94_96 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_99:                              #   in Loop: Header=BB94_96 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_95
# %bb.100:                              #   in Loop: Header=BB94_96 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_95
	.p2align	4, , 16
.LBB94_101:                             #   in Loop: Header=BB94_4 Depth=1
	move	$a0, $s8
	pcaddu18i	$ra, %call36(rewind)
	jirl	$ra, $ra, 0
	move	$a0, $s8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$s5, $a0
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	beq	$s5, $a0, .LBB94_3
# %bb.102:                              # %.lr.ph247.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	move	$s6, $zero
	b	.LBB94_105
	.p2align	4, , 16
.LBB94_103:                             #   in Loop: Header=BB94_105 Depth=2
	ld.d	$a1, $fp, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
.LBB94_104:                             # %_ZN7Encoder8compressEi.exit93
                                        #   in Loop: Header=BB94_105 Depth=2
	addi.d	$s6, $s6, 1
	move	$a0, $s8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$s5, $a0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	beq	$s5, $a0, .LBB94_3
.LBB94_105:                             # %.lr.ph247
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_114 Depth 3
                                        #       Child Loop BB94_124 Depth 3
                                        #       Child Loop BB94_134 Depth 3
                                        #       Child Loop BB94_144 Depth 3
                                        #       Child Loop BB94_154 Depth 3
                                        #       Child Loop BB94_164 Depth 3
                                        #       Child Loop BB94_174 Depth 3
                                        #       Child Loop BB94_184 Depth 3
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	add.w	$a1, $s6, $a0
	blez	$a1, .LBB94_108
# %bb.106:                              # %.lr.ph247
                                        #   in Loop: Header=BB94_105 Depth=2
	andi	$a0, $s6, 4095
	bnez	$a0, .LBB94_108
# %bb.107:                              #   in Loop: Header=BB94_105 Depth=2
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$a0, $a0, %pc_lo12(.L.str.20)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %got_pc_hi20(stdout)
	ld.d	$a0, $a0, %got_pc_lo12(stdout)
	ld.d	$a0, $a0, 0
	pcaddu18i	$ra, %call36(fflush)
	jirl	$ra, $ra, 0
.LBB94_108:                             # %_Z11printStatusi.exit91
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(level)
	beqz	$a0, .LBB94_103
# %bb.109:                              # %.preheader.preheader.i92
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrpick.d	$a3, $s5, 7, 7
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	beqz	$a1, .LBB94_111
# %bb.110:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_112
	.p2align	4, , 16
.LBB94_111:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_112:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_114
	.p2align	4, , 16
.LBB94_113:                             #   in Loop: Header=BB94_114 Depth=3
	xor	$a0, $a1, $a2
.LBB94_114:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_119
# %bb.115:                              # %.lr.ph.i223
                                        #   in Loop: Header=BB94_114 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_117
# %bb.116:                              #   in Loop: Header=BB94_114 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_117:                             #   in Loop: Header=BB94_114 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_113
# %bb.118:                              #   in Loop: Header=BB94_114 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_113
	.p2align	4, , 16
.LBB94_119:                             # %_ZN7Encoder4codeEi.exit229
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 6, 6
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_121
# %bb.120:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_122
	.p2align	4, , 16
.LBB94_121:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_122:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_124
	.p2align	4, , 16
.LBB94_123:                             #   in Loop: Header=BB94_124 Depth=3
	xor	$a0, $a1, $a2
.LBB94_124:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_129
# %bb.125:                              # %.lr.ph.i214
                                        #   in Loop: Header=BB94_124 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_127
# %bb.126:                              #   in Loop: Header=BB94_124 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_127:                             #   in Loop: Header=BB94_124 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_123
# %bb.128:                              #   in Loop: Header=BB94_124 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_123
	.p2align	4, , 16
.LBB94_129:                             # %_ZN7Encoder4codeEi.exit220
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 5, 5
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_131
# %bb.130:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_132
	.p2align	4, , 16
.LBB94_131:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_132:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_134
	.p2align	4, , 16
.LBB94_133:                             #   in Loop: Header=BB94_134 Depth=3
	xor	$a0, $a1, $a2
.LBB94_134:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_139
# %bb.135:                              # %.lr.ph.i205
                                        #   in Loop: Header=BB94_134 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_137
# %bb.136:                              #   in Loop: Header=BB94_134 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_137:                             #   in Loop: Header=BB94_134 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_133
# %bb.138:                              #   in Loop: Header=BB94_134 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_133
	.p2align	4, , 16
.LBB94_139:                             # %_ZN7Encoder4codeEi.exit211
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 4, 4
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_141
# %bb.140:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_142
	.p2align	4, , 16
.LBB94_141:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_142:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_144
	.p2align	4, , 16
.LBB94_143:                             #   in Loop: Header=BB94_144 Depth=3
	xor	$a0, $a1, $a2
.LBB94_144:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_149
# %bb.145:                              # %.lr.ph.i196
                                        #   in Loop: Header=BB94_144 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_147
# %bb.146:                              #   in Loop: Header=BB94_144 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_147:                             #   in Loop: Header=BB94_144 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_143
# %bb.148:                              #   in Loop: Header=BB94_144 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_143
	.p2align	4, , 16
.LBB94_149:                             # %_ZN7Encoder4codeEi.exit202
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 3, 3
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_151
# %bb.150:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_152
	.p2align	4, , 16
.LBB94_151:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_152:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_154
	.p2align	4, , 16
.LBB94_153:                             #   in Loop: Header=BB94_154 Depth=3
	xor	$a0, $a1, $a2
.LBB94_154:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_159
# %bb.155:                              # %.lr.ph.i187
                                        #   in Loop: Header=BB94_154 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_157
# %bb.156:                              #   in Loop: Header=BB94_154 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_157:                             #   in Loop: Header=BB94_154 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_153
# %bb.158:                              #   in Loop: Header=BB94_154 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_153
	.p2align	4, , 16
.LBB94_159:                             # %_ZN7Encoder4codeEi.exit193
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 2, 2
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_161
# %bb.160:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_162
	.p2align	4, , 16
.LBB94_161:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_162:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_164
	.p2align	4, , 16
.LBB94_163:                             #   in Loop: Header=BB94_164 Depth=3
	xor	$a0, $a1, $a2
.LBB94_164:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_169
# %bb.165:                              # %.lr.ph.i178
                                        #   in Loop: Header=BB94_164 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_167
# %bb.166:                              #   in Loop: Header=BB94_164 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_167:                             #   in Loop: Header=BB94_164 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_163
# %bb.168:                              #   in Loop: Header=BB94_164 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_163
	.p2align	4, , 16
.LBB94_169:                             # %_ZN7Encoder4codeEi.exit184
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	bstrpick.d	$a3, $s5, 1, 1
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_171
# %bb.170:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_172
	.p2align	4, , 16
.LBB94_171:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_172:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_174
	.p2align	4, , 16
.LBB94_173:                             #   in Loop: Header=BB94_174 Depth=3
	xor	$a0, $a1, $a2
.LBB94_174:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_179
# %bb.175:                              # %.lr.ph.i169
                                        #   in Loop: Header=BB94_174 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_177
# %bb.176:                              #   in Loop: Header=BB94_174 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_177:                             #   in Loop: Header=BB94_174 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_173
# %bb.178:                              #   in Loop: Header=BB94_174 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_173
	.p2align	4, , 16
.LBB94_179:                             # %_ZN7Encoder4codeEi.exit175
                                        #   in Loop: Header=BB94_105 Depth=2
	ld.w	$a0, $fp, 0
	andi	$a3, $s5, 1
	slt	$a4, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a2, $a2, $a1
	bstrpick.d	$a4, $a2, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a1, $a4, $a1
	andi	$a2, $a2, 4095
	mul.d	$a0, $a2, $a0
	ld.w	$a2, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a1, $a0
	addi.d	$a1, $a2, -1
	sltui	$a1, $a1, 1
	sltu	$a2, $a0, $a4
	xori	$a2, $a2, 1
	maskeqz	$a2, $a2, $a1
	masknez	$a1, $a3, $a1
	or	$a1, $a2, $a1
	st.w	$a1, $s4, %pc_lo12(y)
	beqz	$a1, .LBB94_181
# %bb.180:                              #   in Loop: Header=BB94_105 Depth=2
	st.w	$a0, $fp, 20
	b	.LBB94_182
	.p2align	4, , 16
.LBB94_181:                             #   in Loop: Header=BB94_105 Depth=2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB94_182:                             #   in Loop: Header=BB94_105 Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	b	.LBB94_184
	.p2align	4, , 16
.LBB94_183:                             #   in Loop: Header=BB94_184 Depth=3
	xor	$a0, $a1, $a2
.LBB94_184:                             #   Parent Loop BB94_4 Depth=1
                                        #     Parent Loop BB94_105 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB94_104
# %bb.185:                              # %.lr.ph.i160
                                        #   in Loop: Header=BB94_184 Depth=3
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB94_187
# %bb.186:                              #   in Loop: Header=BB94_184 Depth=3
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB94_187:                             #   in Loop: Header=BB94_184 Depth=3
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s3, .LBB94_183
# %bb.188:                              #   in Loop: Header=BB94_184 Depth=3
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB94_183
.LBB94_189:                             # %._crit_edge253
	move	$a0, $s1
	pcaddu18i	$ra, %call36(fclose)
	jirl	$ra, $ra, 0
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	sub.d	$a1, $a0, $a1
	pcalau12i	$a0, %pc_hi20(.L.str.25)
	addi.d	$a0, $a0, %pc_lo12(.L.str.25)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	pcaddu18i	$t8, %call36(printf)
	jr	$t8
.LBB94_190:                             # %.split74
	pcalau12i	$a0, %pc_hi20(.L.str.23)
	addi.d	$a0, $a0, %pc_lo12(.L.str.23)
	pcaddu18i	$ra, %call36(perror)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.LBB94_191:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(perror)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end94:
	.size	_Z8compressPKclR7Encoder, .Lfunc_end94-_Z8compressPKclR7Encoder
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN7Encoder8compressEi,"axG",@progbits,_ZN7Encoder8compressEi,comdat
	.weak	_ZN7Encoder8compressEi          # -- Begin function _ZN7Encoder8compressEi
	.p2align	5
	.type	_ZN7Encoder8compressEi,@function
_ZN7Encoder8compressEi:                 # @_ZN7Encoder8compressEi
	.cfi_startproc
# %bb.0:
	pcalau12i	$a2, %pc_hi20(level)
	ld.w	$a2, $a2, %pc_lo12(level)
	beqz	$a2, .LBB95_2
# %bb.1:                                # %.preheader.preheader
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	bstrpick.d	$a2, $a1, 7, 7
	move	$fp, $a0
	move	$s0, $a1
	move	$a1, $a2
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s0, 6, 6
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s0, 5, 5
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s0, 4, 4
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s0, 3, 3
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s0, 2, 2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	bstrpick.d	$a1, $s0, 1, 1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN7Encoder4codeEi)
	jirl	$ra, $ra, 0
	andi	$a1, $s0, 1
	move	$a0, $fp
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_ZN7Encoder4codeEi)
	jr	$t8
.LBB95_2:
	ld.d	$a2, $a0, 8
	move	$a0, $a1
	move	$a1, $a2
	pcaddu18i	$t8, %call36(putc)
	jr	$t8
.Lfunc_end95:
	.size	_ZN7Encoder8compressEi, .Lfunc_end95-_ZN7Encoder8compressEi
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z7makedirPKc                   # -- Begin function _Z7makedirPKc
	.p2align	5
	.type	_Z7makedirPKc,@function
_Z7makedirPKc:                          # @_Z7makedirPKc
# %bb.0:
	move	$a0, $zero
	ret
.Lfunc_end96:
	.size	_Z7makedirPKc, .Lfunc_end96-_Z7makedirPKc
                                        # -- End function
	.globl	_Z10decompressPKclR7Encoder     # -- Begin function _Z10decompressPKclR7Encoder
	.p2align	5
	.type	_Z10decompressPKclR7Encoder,@function
_Z10decompressPKclR7Encoder:            # @_Z10decompressPKclR7Encoder
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a2
	move	$s0, $a1
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.21)
	addi.d	$a1, $a0, %pc_lo12(.L.str.21)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(fopen)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB97_8
# %bb.1:
	move	$s1, $a0
	ori	$a1, $zero, 47
	move	$a0, $s2
	pcaddu18i	$ra, %call36(strrchr)
	jirl	$ra, $ra, 0
	sltui	$a1, $a0, 1
	addi.d	$a0, $a0, 1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s2, $a1
	or	$a1, $a1, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.26)
	addi.d	$a0, $a0, %pc_lo12(.L.str.26)
	move	$a2, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	blez	$s0, .LBB97_6
# %bb.2:                                # %_Z11printStatusi.exit.peel
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$s2, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
	xor	$s3, $s2, $a0
	beq	$s2, $a0, .LBB97_4
# %bb.3:
	move	$a3, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.27)
	addi.d	$a0, $a0, %pc_lo12(.L.str.27)
	move	$a1, $zero
	move	$a2, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.LBB97_4:
	ori	$s2, $zero, 1
	sltu	$s4, $zero, $s3
	bne	$s0, $s2, .LBB97_22
.LBB97_5:                               # %._crit_edge
	bnez	$s4, .LBB97_7
.LBB97_6:                               # %.critedge92
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	addi.d	$a0, $a0, 1
	sltui	$a0, $a0, 1
	pcalau12i	$a1, %pc_hi20(.Lstr.2)
	addi.d	$a1, $a1, %pc_lo12(.Lstr.2)
	masknez	$a1, $a1, $a0
	pcalau12i	$a2, %pc_hi20(.Lstr.3)
	addi.d	$a2, $a2, %pc_lo12(.Lstr.3)
	maskeqz	$a0, $a2, $a0
	or	$a0, $a0, $a1
	pcaddu18i	$ra, %call36(puts)
	jirl	$ra, $ra, 0
.LBB97_7:                               # %.critedge
	move	$a0, $s1
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	pcaddu18i	$t8, %call36(fclose)
	jr	$t8
.LBB97_8:
	pcalau12i	$a0, %pc_hi20(.L.str.30)
	addi.d	$a1, $a0, %pc_lo12(.L.str.30)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(fopen)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	bnez	$a0, .LBB97_18
# %bb.9:
	addi.d	$a0, $sp, 16
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	ori	$a1, $zero, 47
	ori	$a2, $zero, 92
	b	.LBB97_12
	.p2align	4, , 16
.LBB97_10:                              #   in Loop: Header=BB97_12 Depth=1
	stx.b	$zero, $a4, $a0
	ld.d	$a4, $sp, 32
	stx.b	$a3, $a4, $a0
.LBB97_11:                              #   in Loop: Header=BB97_12 Depth=1
	addi.d	$a0, $a0, 1
.LBB97_12:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $sp, 32
	ldx.bu	$a3, $a4, $a0
	beq	$a3, $a1, .LBB97_10
# %bb.13:                               #   in Loop: Header=BB97_12 Depth=1
	beq	$a3, $a2, .LBB97_10
# %bb.14:                               #   in Loop: Header=BB97_12 Depth=1
	bnez	$a3, .LBB97_11
# %bb.15:
	pcalau12i	$a0, %pc_hi20(.L.str.30)
	addi.d	$a1, $a0, %pc_lo12(.L.str.30)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(fopen)
	jirl	$ra, $ra, 0
	ld.w	$a1, $sp, 16
	move	$s1, $a0
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$a0, $a0, %pc_lo12(programChecker)
	ld.w	$a2, $a0, 0
	ld.w	$a3, $a0, 4
	sub.w	$a1, $a2, $a1
	st.w	$a1, $a0, 0
	bge	$a3, $a1, .LBB97_17
# %bb.16:
	st.w	$a1, $a0, 4
.LBB97_17:
	ld.d	$a0, $sp, 24
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	beqz	$s1, .LBB97_35
.LBB97_18:                              # %.thread79
	pcalau12i	$a0, %pc_hi20(.L.str.32)
	addi.d	$a0, $a0, %pc_lo12(.L.str.32)
	move	$a1, $s2
	move	$a2, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	blez	$s0, .LBB97_20
# %bb.19:                               # %_Z11printStatusi.exit74.peel
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
	move	$a1, $s1
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ori	$s2, $zero, 1
	bne	$s0, $s2, .LBB97_31
.LBB97_20:                              # %._crit_edge87
	move	$a0, $s1
	pcaddu18i	$ra, %call36(fclose)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.Lstr.1)
	addi.d	$a0, $a0, %pc_lo12(.Lstr.1)
.LBB97_21:
	pcaddu18i	$ra, %call36(puts)
	jirl	$ra, $ra, 0
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB97_22:                              # %.lr.ph.preheader
	addi.d	$s5, $s0, -1
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$s0, $a0, %pc_lo12(.L.str.20)
	pcalau12i	$a0, %got_pc_hi20(stdout)
	ld.d	$s6, $a0, %got_pc_lo12(stdout)
	pcalau12i	$a0, %pc_hi20(.L.str.27)
	addi.d	$s3, $a0, %pc_lo12(.L.str.27)
	b	.LBB97_25
	.p2align	4, , 16
.LBB97_23:                              # %.thread
                                        #   in Loop: Header=BB97_25 Depth=1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
.LBB97_24:                              #   in Loop: Header=BB97_25 Depth=1
	ori	$s4, $zero, 1
	addi.d	$s5, $s5, -1
	addi.w	$s2, $s2, 1
	beqz	$s5, .LBB97_5
.LBB97_25:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	slli.d	$a0, $s2, 52
	beqz	$a0, .LBB97_27
# %bb.26:                               # %_Z11printStatusi.exit
                                        #   in Loop: Header=BB97_25 Depth=1
	andi	$a0, $s4, 1
	bnez	$a0, .LBB97_23
	b	.LBB97_28
	.p2align	4, , 16
.LBB97_27:                              #   in Loop: Header=BB97_25 Depth=1
	move	$a0, $s0
	move	$a1, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s6, 0
	pcaddu18i	$ra, %call36(fflush)
	jirl	$ra, $ra, 0
	andi	$a0, $s4, 1
	bnez	$a0, .LBB97_23
.LBB97_28:                              #   in Loop: Header=BB97_25 Depth=1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$s4, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
	bne	$s4, $a0, .LBB97_30
# %bb.29:                               #   in Loop: Header=BB97_25 Depth=1
	move	$s4, $zero
	addi.d	$s5, $s5, -1
	addi.w	$s2, $s2, 1
	bnez	$s5, .LBB97_25
	b	.LBB97_5
	.p2align	4, , 16
.LBB97_30:                              #   in Loop: Header=BB97_25 Depth=1
	move	$a3, $a0
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB97_24
.LBB97_31:                              # %.lr.ph86.preheader
	addi.d	$s3, $s0, -1
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$s0, $a0, %pc_lo12(.L.str.20)
	pcalau12i	$a0, %got_pc_hi20(stdout)
	ld.d	$s4, $a0, %got_pc_lo12(stdout)
	b	.LBB97_33
	.p2align	4, , 16
.LBB97_32:                              # %_Z11printStatusi.exit74
                                        #   in Loop: Header=BB97_33 Depth=1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
	move	$a1, $s1
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	addi.d	$s3, $s3, -1
	addi.w	$s2, $s2, 1
	beqz	$s3, .LBB97_20
.LBB97_33:                              # %.lr.ph86
                                        # =>This Inner Loop Header: Depth=1
	slli.d	$a0, $s2, 52
	bnez	$a0, .LBB97_32
# %bb.34:                               #   in Loop: Header=BB97_33 Depth=1
	move	$a0, $s0
	move	$a1, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s4, 0
	pcaddu18i	$ra, %call36(fflush)
	jirl	$ra, $ra, 0
	b	.LBB97_32
.LBB97_35:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(perror)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.34)
	addi.d	$a0, $a0, %pc_lo12(.L.str.34)
	move	$a1, $s2
	move	$a2, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	blez	$s0, .LBB97_37
# %bb.36:                               # %_Z11printStatusi.exit77.peel
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
	ori	$s1, $zero, 1
	bne	$s0, $s1, .LBB97_38
.LBB97_37:                              # %._crit_edge91
	pcalau12i	$a0, %pc_hi20(.Lstr)
	addi.d	$a0, $a0, %pc_lo12(.Lstr)
	b	.LBB97_21
.LBB97_38:                              # %.lr.ph90.preheader
	addi.d	$s2, $s0, -1
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$s0, $a0, %pc_lo12(.L.str.20)
	pcalau12i	$a0, %got_pc_hi20(stdout)
	ld.d	$s3, $a0, %got_pc_lo12(stdout)
	b	.LBB97_40
.LBB97_39:                              # %_Z11printStatusi.exit77
                                        #   in Loop: Header=BB97_40 Depth=1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z6decodeR7Encoder)
	jirl	$ra, $ra, 0
	addi.d	$s2, $s2, -1
	addi.w	$s1, $s1, 1
	beqz	$s2, .LBB97_37
.LBB97_40:                              # %.lr.ph90
                                        # =>This Inner Loop Header: Depth=1
	slli.d	$a0, $s1, 52
	bnez	$a0, .LBB97_39
# %bb.41:                               #   in Loop: Header=BB97_40 Depth=1
	move	$a0, $s0
	move	$a1, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s3, 0
	pcaddu18i	$ra, %call36(fflush)
	jirl	$ra, $ra, 0
	b	.LBB97_39
.Lfunc_end97:
	.size	_Z10decompressPKclR7Encoder, .Lfunc_end97-_Z10decompressPKclR7Encoder
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN6StringC2EPKc,"axG",@progbits,_ZN6StringC2EPKc,comdat
	.weak	_ZN6StringC2EPKc                # -- Begin function _ZN6StringC2EPKc
	.p2align	5
	.type	_ZN6StringC2EPKc,@function
_ZN6StringC2EPKc:                       # @_ZN6StringC2EPKc
.Lfunc_begin19:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception19
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	move	$s0, $a1
	move	$fp, $a0
	ori	$a0, $zero, 1
	lu32i.d	$a0, 1
	st.d	$a0, $fp, 0
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$a0, $a0, %pc_lo12(programChecker)
	ld.w	$a2, $a0, 0
	ld.w	$a3, $a0, 4
	addi.d	$a1, $a2, 1
	st.w	$a1, $a0, 0
	blt	$a2, $a3, .LBB98_2
# %bb.1:
	st.w	$a1, $a0, 4
.LBB98_2:                               # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a0, $zero, 1
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB98_13
# %bb.3:                                # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i
	st.d	$a0, $fp, 16
	st.w	$zero, $fp, 0
	ld.bu	$a0, $s0, 0
	beqz	$a0, .LBB98_11
# %bb.4:                                # %.lr.ph.i.preheader
	addi.d	$s0, $s0, 1
	ori	$s1, $zero, 1
	b	.LBB98_6
	.p2align	4, , 16
.LBB98_5:                               # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i
                                        #   in Loop: Header=BB98_6 Depth=1
	ld.d	$a1, $fp, 16
	addi.d	$a2, $s2, 1
	st.w	$a2, $fp, 0
	stx.b	$a0, $a1, $s2
	ld.bu	$a0, $s0, 0
	addi.d	$s0, $s0, 1
	beqz	$a0, .LBB98_9
.LBB98_6:                               # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$s2, $fp, 0
	ld.w	$a1, $fp, 4
	bne	$s2, $a1, .LBB98_5
# %bb.7:                                #   in Loop: Header=BB98_6 Depth=1
	slli.w	$a0, $s2, 1
	slt	$a1, $s1, $a0
	masknez	$a2, $s1, $a1
	maskeqz	$a0, $a0, $a1
	or	$a1, $a0, $a2
.Ltmp330:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.Ltmp331:                               # EH_LABEL
# %bb.8:                                # %.noexc
                                        #   in Loop: Header=BB98_6 Depth=1
	st.w	$s2, $fp, 0
	ld.bu	$a0, $s0, -1
	b	.LBB98_5
.LBB98_9:                               # %._crit_edge.i
	ld.w	$s0, $fp, 0
	ld.w	$a0, $fp, 4
	bne	$s0, $a0, .LBB98_12
# %bb.10:
	slli.w	$a0, $a0, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
.Ltmp333:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.Ltmp334:                               # EH_LABEL
	b	.LBB98_12
.LBB98_11:
	move	$s0, $zero
.LBB98_12:                              # %._crit_edge.i.thread
	ld.d	$a0, $fp, 16
	addi.d	$a1, $s0, 1
	st.w	$a1, $fp, 0
	stx.b	$zero, $a0, $s0
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB98_13:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.LBB98_14:                              # %.loopexit.split-lp
.Ltmp335:                               # EH_LABEL
	b	.LBB98_16
.LBB98_15:                              # %.loopexit
.Ltmp332:                               # EH_LABEL
.LBB98_16:
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EED2Ev)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end98:
	.size	_ZN6StringC2EPKc, .Lfunc_end98-_ZN6StringC2EPKc
	.cfi_endproc
	.section	.gcc_except_table._ZN6StringC2EPKc,"aG",@progbits,_ZN6StringC2EPKc,comdat
	.p2align	2, 0x0
GCC_except_table98:
.Lexception19:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end19-.Lcst_begin19
.Lcst_begin19:
	.uleb128 .Lfunc_begin19-.Lfunc_begin19  # >> Call Site 1 <<
	.uleb128 .Ltmp330-.Lfunc_begin19        #   Call between .Lfunc_begin19 and .Ltmp330
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp330-.Lfunc_begin19        # >> Call Site 2 <<
	.uleb128 .Ltmp331-.Ltmp330              #   Call between .Ltmp330 and .Ltmp331
	.uleb128 .Ltmp332-.Lfunc_begin19        #     jumps to .Ltmp332
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp333-.Lfunc_begin19        # >> Call Site 3 <<
	.uleb128 .Ltmp334-.Ltmp333              #   Call between .Ltmp333 and .Ltmp334
	.uleb128 .Ltmp335-.Lfunc_begin19        #     jumps to .Ltmp335
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp334-.Lfunc_begin19        # >> Call Site 4 <<
	.uleb128 .Lfunc_end98-.Ltmp334          #   Call between .Ltmp334 and .Lfunc_end98
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end19:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN5ArrayIcLi0EED2Ev,"axG",@progbits,_ZN5ArrayIcLi0EED2Ev,comdat
	.weak	_ZN5ArrayIcLi0EED2Ev            # -- Begin function _ZN5ArrayIcLi0EED2Ev
	.p2align	5
	.type	_ZN5ArrayIcLi0EED2Ev,@function
_ZN5ArrayIcLi0EED2Ev:                   # @_ZN5ArrayIcLi0EED2Ev
# %bb.0:
	ld.w	$a2, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$a1, $a1, %pc_lo12(programChecker)
	ld.w	$a3, $a1, 0
	ld.w	$a4, $a1, 4
	sub.w	$a2, $a3, $a2
	st.w	$a2, $a1, 0
	bge	$a4, $a2, .LBB99_2
# %bb.1:
	st.w	$a2, $a1, 4
.LBB99_2:                               # %_ZN14ProgramChecker5allocEi.exit
	ld.d	$a0, $a0, 8
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.Lfunc_end99:
	.size	_ZN5ArrayIcLi0EED2Ev, .Lfunc_end99-_ZN5ArrayIcLi0EED2Ev
                                        # -- End function
	.text
	.globl	_Z7getlineP8_IO_FILE            # -- Begin function _Z7getlineP8_IO_FILE
	.p2align	5
	.type	_Z7getlineP8_IO_FILE,@function
_Z7getlineP8_IO_FILE:                   # @_Z7getlineP8_IO_FILE
.Lfunc_begin20:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception20
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	pcalau12i	$a1, %pc_hi20(_ZGVZ7getlineP8_IO_FILEE1s)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZ7getlineP8_IO_FILEE1s)
	move	$fp, $a0
	dbar	20
	beqz	$a1, .LBB100_15
.LBB100_1:                              # %.preheader
	ori	$s4, $zero, 27
	pcalau12i	$a0, %pc_hi20(_ZZ7getlineP8_IO_FILEE1s)
	addi.d	$s0, $a0, %pc_lo12(_ZZ7getlineP8_IO_FILEE1s)
	move	$s3, $zero
	ori	$s5, $zero, 13
	ori	$s6, $zero, 1
	lu12i.w	$a0, 32768
	ori	$s7, $a0, 2049
.LBB100_2:                              # %.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_4 Depth 2
	slli.d	$a0, $s3, 1
	addi.w	$s2, $a0, 1
	b	.LBB100_4
	.p2align	4, , 16
.LBB100_3:                              #   in Loop: Header=BB100_4 Depth=2
	bne	$s1, $s5, .LBB100_8
.LBB100_4:                              #   Parent Loop BB100_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a0, $fp
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	addi.d	$a0, $a0, 1
	bltu	$s4, $a0, .LBB100_6
# %bb.5:                                #   in Loop: Header=BB100_4 Depth=2
	sll.d	$a0, $s6, $a0
	and	$a0, $a0, $s7
	bnez	$a0, .LBB100_9
.LBB100_6:                              #   in Loop: Header=BB100_4 Depth=2
	ld.w	$a0, $s0, 0
	blt	$s3, $a0, .LBB100_3
# %bb.7:                                #   in Loop: Header=BB100_4 Depth=2
	move	$a0, $s0
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
	b	.LBB100_3
	.p2align	4, , 16
.LBB100_8:                              #   in Loop: Header=BB100_2 Depth=1
	ld.d	$a0, $s0, 16
	addi.w	$a1, $s3, 1
	stx.b	$s1, $a0, $s3
	move	$s3, $a1
	b	.LBB100_2
.LBB100_9:                              # %.critedge
	ld.w	$a0, $s0, 0
	blt	$s3, $a0, .LBB100_11
# %bb.10:
	addi.w	$a1, $s3, 1
	pcalau12i	$a0, %pc_hi20(_ZZ7getlineP8_IO_FILEE1s)
	addi.d	$a0, $a0, %pc_lo12(_ZZ7getlineP8_IO_FILEE1s)
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB100_11:
	ld.d	$a1, $s0, 16
	move	$a0, $zero
	addi.w	$a2, $zero, -1
	stx.b	$zero, $a1, $s3
	beq	$s1, $a2, .LBB100_14
# %bb.12:
	ori	$a1, $zero, 26
	beq	$s1, $a1, .LBB100_14
# %bb.13:
	ld.d	$a0, $s0, 16
.LBB100_14:
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB100_15:
	pcalau12i	$a0, %pc_hi20(_ZGVZ7getlineP8_IO_FILEE1s)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ7getlineP8_IO_FILEE1s)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB100_1
# %bb.16:
.Ltmp336:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZ7getlineP8_IO_FILEE1s)
	addi.d	$a0, $a0, %pc_lo12(_ZZ7getlineP8_IO_FILEE1s)
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
.Ltmp337:                               # EH_LABEL
# %bb.17:
	pcalau12i	$a0, %pc_hi20(_ZN5ArrayIcLi0EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN5ArrayIcLi0EED2Ev)
	pcalau12i	$a1, %pc_hi20(_ZZ7getlineP8_IO_FILEE1s)
	addi.d	$a1, $a1, %pc_lo12(_ZZ7getlineP8_IO_FILEE1s)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZ7getlineP8_IO_FILEE1s)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ7getlineP8_IO_FILEE1s)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB100_1
.LBB100_18:
.Ltmp338:                               # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZ7getlineP8_IO_FILEE1s)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZ7getlineP8_IO_FILEE1s)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end100:
	.size	_Z7getlineP8_IO_FILE, .Lfunc_end100-_Z7getlineP8_IO_FILE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table100:
.Lexception20:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end20-.Lcst_begin20
.Lcst_begin20:
	.uleb128 .Lfunc_begin20-.Lfunc_begin20  # >> Call Site 1 <<
	.uleb128 .Ltmp336-.Lfunc_begin20        #   Call between .Lfunc_begin20 and .Ltmp336
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp336-.Lfunc_begin20        # >> Call Site 2 <<
	.uleb128 .Ltmp337-.Ltmp336              #   Call between .Ltmp336 and .Ltmp337
	.uleb128 .Ltmp338-.Lfunc_begin20        #     jumps to .Ltmp338
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp337-.Lfunc_begin20        # >> Call Site 3 <<
	.uleb128 .Lfunc_end100-.Ltmp337         #   Call between .Ltmp337 and .Lfunc_end100
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end20:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN5ArrayIcLi0EE6resizeEi,"axG",@progbits,_ZN5ArrayIcLi0EE6resizeEi,comdat
	.weak	_ZN5ArrayIcLi0EE6resizeEi       # -- Begin function _ZN5ArrayIcLi0EE6resizeEi
	.p2align	5
	.type	_ZN5ArrayIcLi0EE6resizeEi,@function
_ZN5ArrayIcLi0EE6resizeEi:              # @_ZN5ArrayIcLi0EE6resizeEi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	ld.w	$a2, $a0, 4
	move	$s0, $a1
	bge	$a2, $a1, .LBB101_6
# %bb.1:
	ld.d	$fp, $a0, 8
	ld.d	$s1, $a0, 16
	ld.w	$s3, $a0, 0
	addi.d	$s4, $a0, 8
	st.w	$s0, $a0, 4
	st.w	$s0, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$s2, $a1, %pc_lo12(programChecker)
	blez	$s0, .LBB101_8
# %bb.2:
	move	$s5, $a0
	ld.w	$a0, $s2, 0
	ld.w	$a1, $s2, 4
	add.w	$a0, $a0, $s0
	st.w	$a0, $s2, 0
	bge	$a1, $a0, .LBB101_4
# %bb.3:
	st.w	$a0, $s2, 4
.LBB101_4:                              # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, 0
	beqz	$a0, .LBB101_13
# %bb.5:
	st.d	$a0, $s5, 16
	bnez	$fp, .LBB101_9
	b	.LBB101_7
.LBB101_6:
	st.w	$s0, $a0, 0
.LBB101_7:
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB101_8:
	move	$a0, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $s4, 0
	beqz	$fp, .LBB101_7
.LBB101_9:
	beqz	$s1, .LBB101_12
# %bb.10:
	slt	$a1, $s0, $s3
	masknez	$a2, $s3, $a1
	maskeqz	$a1, $s0, $a1
	or	$a2, $a1, $a2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s2, 0
	ld.w	$a1, $s2, 4
	sub.w	$a0, $a0, $s0
	st.w	$a0, $s2, 0
	bge	$a1, $a0, .LBB101_12
# %bb.11:
	st.w	$a0, $s2, 4
.LBB101_12:                             # %_ZN14ProgramChecker5allocEi.exit
	move	$a0, $fp
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.LBB101_13:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end101:
	.size	_ZN5ArrayIcLi0EE6resizeEi, .Lfunc_end101-_ZN5ArrayIcLi0EE6resizeEi
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z7putsizeR6StringS0_PKci       # -- Begin function _Z7putsizeR6StringS0_PKci
	.p2align	5
	.type	_Z7putsizeR6StringS0_PKci,@function
_Z7putsizeR6StringS0_PKci:              # @_Z7putsizeR6StringS0_PKci
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$s3, $a3
	move	$s1, $a2
	move	$s0, $a1
	move	$s2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.21)
	addi.d	$a1, $a0, %pc_lo12(.L.str.21)
	move	$a0, $a2
	pcaddu18i	$ra, %call36(fopen)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB102_9
# %bb.1:
	move	$fp, $a0
	ori	$a2, $zero, 2
	move	$a1, $zero
	pcaddu18i	$ra, %call36(fseek)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	bltz	$a0, .LBB102_48
# %bb.2:
	move	$a2, $a0
	pcalau12i	$a0, %pc_hi20(_ZZ7putsizeR6StringS0_PKciE3blk)
	addi.d	$s4, $a0, %pc_lo12(_ZZ7putsizeR6StringS0_PKciE3blk)
	pcalau12i	$a0, %pc_hi20(.L.str.37)
	addi.d	$a1, $a0, %pc_lo12(.L.str.37)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(sprintf)
	jirl	$ra, $ra, 0
	ld.w	$s5, $s2, 0
	blez	$s5, .LBB102_4
# %bb.3:
	addi.w	$s5, $s5, -1
	st.w	$s5, $s2, 0
.LBB102_4:                              # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i
	ld.bu	$a0, $s4, 0
	beqz	$a0, .LBB102_11
# %bb.5:                                # %.lr.ph.i
	addi.d	$s4, $s4, 1
	ori	$s5, $zero, 1
	b	.LBB102_7
	.p2align	4, , 16
.LBB102_6:                              # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i
                                        #   in Loop: Header=BB102_7 Depth=1
	ld.d	$a1, $s2, 16
	addi.d	$a2, $s6, 1
	st.w	$a2, $s2, 0
	stx.b	$a0, $a1, $s6
	ld.bu	$a0, $s4, 0
	addi.d	$s4, $s4, 1
	beqz	$a0, .LBB102_10
.LBB102_7:                              # =>This Inner Loop Header: Depth=1
	ld.w	$s6, $s2, 0
	ld.w	$a1, $s2, 4
	bne	$s6, $a1, .LBB102_6
# %bb.8:                                #   in Loop: Header=BB102_7 Depth=1
	slli.w	$a0, $s6, 1
	slt	$a1, $s5, $a0
	masknez	$a2, $s5, $a1
	maskeqz	$a0, $a0, $a1
	or	$a1, $a0, $a2
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
	st.w	$s6, $s2, 0
	ld.bu	$a0, $s4, -1
	b	.LBB102_6
.LBB102_9:
	move	$s0, $zero
	b	.LBB102_50
.LBB102_10:                             # %._crit_edge.loopexit.i
	ld.w	$s5, $s2, 0
.LBB102_11:                             # %._crit_edge.i
	ld.w	$a0, $s2, 4
	bne	$s5, $a0, .LBB102_13
# %bb.12:
	slli.w	$a0, $s5, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_13:                             # %_ZN6StringpLEPKc.exit
	ld.d	$a0, $s2, 16
	addi.d	$a1, $s5, 1
	st.w	$a1, $s2, 0
	stx.b	$zero, $a0, $s5
	ld.w	$s4, $s2, 0
	blez	$s4, .LBB102_15
# %bb.14:
	addi.w	$s4, $s4, -1
	st.w	$s4, $s2, 0
.LBB102_15:                             # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i18
	ldx.bu	$a0, $s1, $s3
	beqz	$a0, .LBB102_21
# %bb.16:                               # %.lr.ph.i20.preheader
	add.d	$a1, $s3, $s1
	addi.d	$s3, $a1, 1
	ori	$s4, $zero, 1
	b	.LBB102_18
	.p2align	4, , 16
.LBB102_17:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i22
                                        #   in Loop: Header=BB102_18 Depth=1
	ld.d	$a1, $s2, 16
	addi.d	$a2, $s5, 1
	st.w	$a2, $s2, 0
	stx.b	$a0, $a1, $s5
	ld.bu	$a0, $s3, 0
	addi.d	$s3, $s3, 1
	beqz	$a0, .LBB102_20
.LBB102_18:                             # %.lr.ph.i20
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$s5, $s2, 0
	ld.w	$a1, $s2, 4
	bne	$s5, $a1, .LBB102_17
# %bb.19:                               #   in Loop: Header=BB102_18 Depth=1
	slli.w	$a0, $s5, 1
	slt	$a1, $s4, $a0
	masknez	$a2, $s4, $a1
	maskeqz	$a0, $a0, $a1
	or	$a1, $a0, $a2
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
	st.w	$s5, $s2, 0
	ld.bu	$a0, $s3, -1
	b	.LBB102_17
.LBB102_20:                             # %._crit_edge.loopexit.i24
	ld.w	$s4, $s2, 0
.LBB102_21:                             # %._crit_edge.i26
	ld.w	$a0, $s2, 4
	bne	$s4, $a0, .LBB102_23
# %bb.22:
	slli.w	$a0, $s4, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_23:                             # %_ZN6StringpLEPKc.exit28
	ld.d	$a0, $s2, 16
	addi.d	$a1, $s4, 1
	st.w	$a1, $s2, 0
	stx.b	$zero, $a0, $s4
	ld.w	$s3, $s2, 0
	blez	$s3, .LBB102_25
# %bb.24:
	addi.w	$s3, $s3, -1
	st.w	$s3, $s2, 0
.LBB102_25:                             # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i29
	ld.w	$a0, $s2, 4
	bne	$s3, $a0, .LBB102_27
# %bb.26:
	slli.w	$a0, $s3, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_27:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i32
	ld.d	$a0, $s2, 16
	addi.d	$a1, $s3, 1
	st.w	$a1, $s2, 0
	ori	$a1, $zero, 13
	stx.b	$a1, $a0, $s3
	ld.w	$s3, $s2, 0
	ld.w	$a0, $s2, 4
	bne	$s3, $a0, .LBB102_29
# %bb.28:
	slli.w	$a0, $s3, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_29:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i32.1
	ld.d	$a0, $s2, 16
	addi.d	$a1, $s3, 1
	st.w	$a1, $s2, 0
	ori	$a1, $zero, 10
	stx.b	$a1, $a0, $s3
	ld.w	$s3, $s2, 0
	ld.w	$a0, $s2, 4
	bne	$s3, $a0, .LBB102_31
# %bb.30:
	slli.w	$a0, $s3, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_31:                             # %_ZN6StringpLEPKc.exit38
	ld.d	$a0, $s2, 16
	addi.d	$a1, $s3, 1
	st.w	$a1, $s2, 0
	stx.b	$zero, $a0, $s3
	ld.w	$s2, $s0, 0
	blez	$s2, .LBB102_33
# %bb.32:
	addi.w	$s2, $s2, -1
	st.w	$s2, $s0, 0
.LBB102_33:                             # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i39
	ld.bu	$a0, $s1, 0
	beqz	$a0, .LBB102_39
# %bb.34:                               # %.lr.ph.i41
	addi.d	$s1, $s1, 1
	ori	$s2, $zero, 1
	b	.LBB102_36
	.p2align	4, , 16
.LBB102_35:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i43
                                        #   in Loop: Header=BB102_36 Depth=1
	ld.d	$a1, $s0, 16
	addi.d	$a2, $s3, 1
	st.w	$a2, $s0, 0
	stx.b	$a0, $a1, $s3
	ld.bu	$a0, $s1, 0
	addi.d	$s1, $s1, 1
	beqz	$a0, .LBB102_38
.LBB102_36:                             # =>This Inner Loop Header: Depth=1
	ld.w	$s3, $s0, 0
	ld.w	$a1, $s0, 4
	bne	$s3, $a1, .LBB102_35
# %bb.37:                               #   in Loop: Header=BB102_36 Depth=1
	slli.w	$a0, $s3, 1
	slt	$a1, $s2, $a0
	masknez	$a2, $s2, $a1
	maskeqz	$a0, $a0, $a1
	or	$a1, $a0, $a2
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
	st.w	$s3, $s0, 0
	ld.bu	$a0, $s1, -1
	b	.LBB102_35
.LBB102_38:                             # %._crit_edge.loopexit.i45
	ld.w	$s2, $s0, 0
.LBB102_39:                             # %._crit_edge.i47
	ld.w	$a0, $s0, 4
	bne	$s2, $a0, .LBB102_41
# %bb.40:
	slli.w	$a0, $s2, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_41:                             # %_ZN6StringpLEPKc.exit49
	ld.d	$a0, $s0, 16
	addi.d	$a1, $s2, 1
	st.w	$a1, $s0, 0
	stx.b	$zero, $a0, $s2
	ld.w	$s1, $s0, 0
	blez	$s1, .LBB102_43
# %bb.42:
	addi.w	$s1, $s1, -1
	st.w	$s1, $s0, 0
.LBB102_43:                             # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i50
	ld.w	$a0, $s0, 4
	bne	$s1, $a0, .LBB102_45
# %bb.44:
	slli.w	$a0, $s1, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_45:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i53
	ld.d	$a0, $s0, 16
	addi.d	$a1, $s1, 1
	st.w	$a1, $s0, 0
	ori	$a1, $zero, 10
	stx.b	$a1, $a0, $s1
	ld.w	$s1, $s0, 0
	ld.w	$a0, $s0, 4
	bne	$s1, $a0, .LBB102_47
# %bb.46:
	slli.w	$a0, $s1, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a1, $a0, $a1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN5ArrayIcLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.LBB102_47:                             # %_ZN6StringpLEPKc.exit59
	ld.d	$a0, $s0, 16
	addi.d	$a1, $s1, 1
	st.w	$a1, $s0, 0
	stx.b	$zero, $a0, $s1
	ori	$s0, $zero, 1
	b	.LBB102_49
.LBB102_48:
	move	$s0, $zero
.LBB102_49:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(fclose)
	jirl	$ra, $ra, 0
.LBB102_50:
	move	$a0, $s0
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end102:
	.size	_Z7putsizeR6StringS0_PKci, .Lfunc_end102-_Z7putsizeR6StringS0_PKci
	.cfi_endproc
                                        # -- End function
	.globl	_Z6expandR6StringS0_PKci        # -- Begin function _Z6expandR6StringS0_PKci
	.p2align	5
	.type	_Z6expandR6StringS0_PKci,@function
_Z6expandR6StringS0_PKci:               # @_Z6expandR6StringS0_PKci
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_Z7putsizeR6StringS0_PKci)
	jr	$t8
.Lfunc_end103:
	.size	_Z6expandR6StringS0_PKci, .Lfunc_end103-_Z6expandR6StringS0_PKci
	.cfi_endproc
                                        # -- End function
	.globl	_Z7paqmainiPPc                  # -- Begin function _Z7paqmainiPPc
	.p2align	5
	.type	_Z7paqmainiPPc,@function
_Z7paqmainiPPc:                         # @_Z7paqmainiPPc
.Lfunc_begin21:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception21
# %bb.0:
	addi.d	$sp, $sp, -336
	.cfi_def_cfa_offset 336
	st.d	$ra, $sp, 328                   # 8-byte Folded Spill
	st.d	$fp, $sp, 320                   # 8-byte Folded Spill
	st.d	$s0, $sp, 312                   # 8-byte Folded Spill
	st.d	$s1, $sp, 304                   # 8-byte Folded Spill
	st.d	$s2, $sp, 296                   # 8-byte Folded Spill
	st.d	$s3, $sp, 288                   # 8-byte Folded Spill
	st.d	$s4, $sp, 280                   # 8-byte Folded Spill
	st.d	$s5, $sp, 272                   # 8-byte Folded Spill
	st.d	$s6, $sp, 264                   # 8-byte Folded Spill
	st.d	$s7, $sp, 256                   # 8-byte Folded Spill
	st.d	$s8, $sp, 248                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s2, $a1
	ld.d	$s3, $a1, 0
	move	$s0, $a0
	ori	$a1, $zero, 47
	move	$a0, $s3
	pcaddu18i	$ra, %call36(strrchr)
	jirl	$ra, $ra, 0
	move	$s4, $a0
	ori	$a0, $zero, 2
	slti	$a3, $s0, 3
	blt	$s0, $a0, .LBB104_325
# %bb.1:
	ld.d	$a0, $s2, 8
	ld.bu	$a1, $a0, 0
	ori	$a2, $zero, 45
	pcalau12i	$a4, %pc_hi20(level)
	st.d	$a4, $sp, 72                    # 8-byte Folded Spill
	bne	$a1, $a2, .LBB104_4
# %bb.2:
	ld.bu	$a1, $a0, 1
	beqz	$a1, .LBB104_4
# %bb.3:
	ld.bu	$a0, $a0, 2
	beqz	$a0, .LBB104_31
.LBB104_4:
	st.d	$a3, $sp, 56                    # 8-byte Folded Spill
	move	$fp, $zero
.LBB104_5:                              # %.thread
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$s0, $a0, %pc_lo12(programChecker)
	ld.w	$s1, $s0, 0
	ld.w	$s5, $s0, 4
	addi.w	$a0, $s1, 8
	st.w	$a0, $s0, 0
	bge	$s5, $a0, .LBB104_7
# %bb.6:
	st.w	$a0, $s0, 4
	move	$s5, $a0
.LBB104_7:                              # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a0, $zero, 8
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB104_328
# %bb.8:                                # %_ZN5ArrayIPcLi0EEC2Ei.exit
	move	$s8, $a0
	addi.w	$a0, $s1, 16
	st.w	$a0, $s0, 0
	bge	$s5, $a0, .LBB104_10
# %bb.9:
	st.w	$a0, $s0, 4
.LBB104_10:                             # %_ZN14ProgramChecker5allocEi.exit.i.i277
	ori	$a0, $zero, 8
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	beqz	$a0, .LBB104_330
# %bb.11:                               # %_ZN5ArrayIlLi0EEC2Ei.exit
	ld.d	$s5, $s2, 8
	ori	$a1, $zero, 47
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strrchr)
	jirl	$ra, $ra, 0
	sltui	$a1, $a0, 1
	addi.d	$a0, $a0, 1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s5, $a1
	or	$a1, $a1, $a0
.Ltmp344:                               # EH_LABEL
	addi.d	$a0, $sp, 224
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
.Ltmp345:                               # EH_LABEL
# %bb.12:
	sltui	$a0, $s4, 1
	addi.d	$a1, $s4, 1
	masknez	$a1, $a1, $a0
	maskeqz	$a0, $s3, $a0
	or	$s3, $a0, $a1
	move	$a0, $s3
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	ld.d	$s4, $s2, 8
	move	$s5, $a0
	move	$a0, $s4
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a1, $a0, 0
	addi.w	$a2, $s5, 1
	bge	$a2, $a1, .LBB104_19
# %bb.13:
	nor	$a2, $s5, $zero
	add.w	$a0, $a0, $a2
	ldx.bu	$a0, $s4, $a0
	ori	$a2, $zero, 46
	bne	$a0, $a2, .LBB104_19
# %bb.14:
	add.d	$a0, $s4, $a1
	addi.w	$a1, $s5, 0
	sub.d	$a0, $a0, $a1
	move	$a1, $s3
	.p2align	4, , 16
.LBB104_15:                             # =>This Inner Loop Header: Depth=1
	ld.bu	$a3, $a1, 0
	ld.bu	$a2, $a0, 0
	beqz	$a3, .LBB104_21
# %bb.16:                               #   in Loop: Header=BB104_15 Depth=1
	beqz	$a2, .LBB104_21
# %bb.17:                               #   in Loop: Header=BB104_15 Depth=1
	ext.w.b	$a4, $a3
	addi.d	$a3, $a3, -65
	andi	$a3, $a3, 255
	sltui	$a3, $a3, 26
	ori	$a5, $a4, 32
	masknez	$a4, $a4, $a3
	maskeqz	$a3, $a5, $a3
	or	$a3, $a3, $a4
	ext.w.b	$a4, $a2
	addi.d	$a2, $a2, -65
	andi	$a2, $a2, 255
	sltui	$a2, $a2, 26
	ori	$a5, $a4, 32
	masknez	$a4, $a4, $a2
	maskeqz	$a2, $a5, $a2
	or	$a2, $a2, $a4
	addi.d	$a1, $a1, 1
	addi.d	$a0, $a0, 1
	beq	$a3, $a2, .LBB104_15
# %bb.18:
	move	$a0, $zero
	or	$a0, $fp, $a0
	bnez	$a0, .LBB104_20
	b	.LBB104_22
.LBB104_19:
	beqz	$fp, .LBB104_22
.LBB104_20:
	move	$fp, $zero
	ori	$a0, $zero, 1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	ori	$s1, $zero, 1
	b	.LBB104_73
.LBB104_21:                             # %.critedge.i
	xor	$a0, $a3, $a2
	sltui	$a0, $a0, 1
	or	$a0, $fp, $a0
	bnez	$a0, .LBB104_20
.LBB104_22:                             # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i
	ld.w	$a0, $sp, 224
	ld.w	$a1, $sp, 228
	ld.d	$s5, $sp, 240
	slt	$a2, $zero, $a0
	sub.w	$s4, $a0, $a2
	bne	$s4, $a1, .LBB104_36
# %bb.23:
	slli.w	$a0, $s4, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a0, $a0, $a1
	ld.d	$s6, $sp, 232
	ld.w	$fp, $s0, 0
	ld.w	$s1, $s0, 4
	st.w	$a0, $sp, 228
	st.w	$a0, $sp, 224
	add.w	$a1, $fp, $a0
	st.w	$a1, $s0, 0
	bge	$s1, $a1, .LBB104_25
# %bb.24:
	st.w	$a1, $s0, 4
	move	$s1, $a1
.LBB104_25:                             # %_ZN14ProgramChecker5allocEi.exit.i.i402
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 232
	beqz	$a0, .LBB104_323
# %bb.26:
	st.d	$a0, $sp, 240
	beqz	$s6, .LBB104_35
# %bb.27:
	beqz	$s5, .LBB104_30
# %bb.28:
	move	$a1, $s5
	move	$a2, $s4
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$fp, $s0, 0
	bge	$s1, $fp, .LBB104_30
# %bb.29:
	st.w	$fp, $s0, 4
.LBB104_30:                             # %_ZN14ProgramChecker5allocEi.exit.i407
	move	$a0, $s6
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s5, $sp, 240
	b	.LBB104_36
.LBB104_31:
	addi.d	$a0, $a1, -58
	andi	$a0, $a0, 255
	ori	$a2, $zero, 246
	bgeu	$a0, $a2, .LBB104_226
# %bb.32:
	ori	$a2, $zero, 100
	beq	$a1, $a2, .LBB104_227
# %bb.33:
.Ltmp339:                               # EH_LABEL
	st.d	$a3, $sp, 56                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.39)
	addi.d	$a0, $a0, %pc_lo12(.L.str.39)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp340:                               # EH_LABEL
# %bb.34:                               # %.unreachable561
.LBB104_35:
	move	$s5, $a0
.LBB104_36:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i
	addi.d	$a0, $s4, 1
	st.w	$a0, $sp, 224
	ori	$a0, $zero, 46
	stx.b	$a0, $s5, $s4
	ld.w	$s4, $sp, 224
	ld.w	$a0, $sp, 228
	ld.d	$s5, $sp, 240
	bne	$s4, $a0, .LBB104_46
# %bb.37:
	slli.w	$a0, $s4, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a0, $a0, $a1
	ld.d	$s6, $sp, 232
	ld.w	$fp, $s0, 0
	ld.w	$s1, $s0, 4
	st.w	$a0, $sp, 228
	st.w	$a0, $sp, 224
	add.w	$a1, $fp, $a0
	st.w	$a1, $s0, 0
	bge	$s1, $a1, .LBB104_39
# %bb.38:
	st.w	$a1, $s0, 4
	move	$s1, $a1
.LBB104_39:                             # %_ZN14ProgramChecker5allocEi.exit.i.i393
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 232
	beqz	$a0, .LBB104_323
# %bb.40:
	st.d	$a0, $sp, 240
	beqz	$s6, .LBB104_45
# %bb.41:
	beqz	$s5, .LBB104_44
# %bb.42:
	move	$a1, $s5
	move	$a2, $s4
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$fp, $s0, 0
	bge	$s1, $fp, .LBB104_44
# %bb.43:
	st.w	$fp, $s0, 4
.LBB104_44:                             # %_ZN14ProgramChecker5allocEi.exit.i398
	move	$a0, $s6
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s5, $sp, 240
	b	.LBB104_46
.LBB104_45:
	move	$s5, $a0
.LBB104_46:
	addi.d	$a0, $s4, 1
	st.w	$a0, $sp, 224
	stx.b	$zero, $s5, $s4
	ld.w	$fp, $sp, 224
	blez	$fp, .LBB104_48
# %bb.47:
	addi.w	$fp, $fp, -1
	st.w	$fp, $sp, 224
.LBB104_48:                             # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i286
	ld.bu	$a1, $s3, 0
	beqz	$a1, .LBB104_62
# %bb.49:                               # %.lr.ph.i.preheader
	addi.d	$fp, $s3, 1
	ori	$s1, $zero, 1
	b	.LBB104_53
	.p2align	4, , 16
.LBB104_50:                             # %_ZN14ProgramChecker5allocEi.exit.i425
                                        #   in Loop: Header=BB104_53 Depth=1
	move	$a0, $s5
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 240
.LBB104_51:                             # %.noexc293
                                        #   in Loop: Header=BB104_53 Depth=1
	ld.bu	$a1, $fp, -1
	move	$s4, $a0
.LBB104_52:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i288
                                        #   in Loop: Header=BB104_53 Depth=1
	addi.d	$a0, $s3, 1
	st.w	$a0, $sp, 224
	stx.b	$a1, $s4, $s3
	ld.bu	$a1, $fp, 0
	addi.d	$fp, $fp, 1
	beqz	$a1, .LBB104_61
.LBB104_53:                             # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$s3, $sp, 224
	ld.w	$a0, $sp, 228
	ld.d	$s4, $sp, 240
	bne	$s3, $a0, .LBB104_52
# %bb.54:                               #   in Loop: Header=BB104_53 Depth=1
	slli.w	$a0, $s3, 1
	slt	$a1, $s1, $a0
	masknez	$a2, $s1, $a1
	maskeqz	$a0, $a0, $a1
	or	$a0, $a0, $a2
	ld.d	$s5, $sp, 232
	ld.w	$s6, $s0, 0
	ld.w	$s7, $s0, 4
	st.w	$a0, $sp, 228
	st.w	$a0, $sp, 224
	add.w	$a1, $s6, $a0
	st.w	$a1, $s0, 0
	bge	$s7, $a1, .LBB104_56
# %bb.55:                               #   in Loop: Header=BB104_53 Depth=1
	st.w	$a1, $s0, 4
	move	$s7, $a1
.LBB104_56:                             # %_ZN14ProgramChecker5allocEi.exit.i.i420
                                        #   in Loop: Header=BB104_53 Depth=1
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 232
	beqz	$a0, .LBB104_323
# %bb.57:                               #   in Loop: Header=BB104_53 Depth=1
	st.d	$a0, $sp, 240
	beqz	$s5, .LBB104_51
# %bb.58:                               #   in Loop: Header=BB104_53 Depth=1
	beqz	$s4, .LBB104_50
# %bb.59:                               #   in Loop: Header=BB104_53 Depth=1
	move	$a1, $s4
	move	$a2, $s3
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s6, $s0, 0
	bge	$s7, $s6, .LBB104_50
# %bb.60:                               #   in Loop: Header=BB104_53 Depth=1
	st.w	$s6, $s0, 4
	b	.LBB104_50
.LBB104_61:                             # %._crit_edge.loopexit.i290
	ld.w	$fp, $sp, 224
.LBB104_62:                             # %._crit_edge.i
	ld.w	$a0, $sp, 228
	ld.d	$s3, $sp, 240
	bne	$fp, $a0, .LBB104_72
# %bb.63:
	slli.w	$a0, $fp, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$s5, $a0, $a1
	ld.d	$s4, $sp, 232
	ld.w	$s1, $s0, 0
	ld.w	$s6, $s0, 4
	st.w	$s5, $sp, 228
	st.w	$s5, $sp, 224
	add.w	$a0, $s1, $s5
	st.w	$a0, $s0, 0
	bge	$s6, $a0, .LBB104_65
# %bb.64:
	st.w	$a0, $s0, 4
	move	$s6, $a0
.LBB104_65:                             # %_ZN14ProgramChecker5allocEi.exit.i.i411
	ori	$a1, $zero, 1
	move	$a0, $s5
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 232
	beqz	$a0, .LBB104_323
# %bb.66:
	st.d	$a0, $sp, 240
	beqz	$s4, .LBB104_71
# %bb.67:
	beqz	$s3, .LBB104_70
# %bb.68:
	slt	$a1, $s5, $fp
	masknez	$a2, $fp, $a1
	maskeqz	$a1, $s5, $a1
	or	$a2, $a1, $a2
	move	$a1, $s3
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s1, $s0, 0
	bge	$s6, $s1, .LBB104_70
# %bb.69:
	st.w	$s1, $s0, 4
.LBB104_70:                             # %_ZN14ProgramChecker5allocEi.exit.i416
	move	$a0, $s4
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 240
	b	.LBB104_72
.LBB104_71:
	move	$s3, $a0
.LBB104_72:                             # %_ZN6StringpLEPKc.exit295
	st.d	$zero, $sp, 64                  # 8-byte Folded Spill
	move	$s1, $zero
	addi.d	$a0, $fp, 1
	st.w	$a0, $sp, 224
	stx.b	$zero, $s3, $fp
	ori	$fp, $zero, 1
.LBB104_73:
.Ltmp350:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	addi.d	$a0, $sp, 200
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
.Ltmp351:                               # EH_LABEL
# %bb.74:
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s1, $sp, 40                    # 8-byte Folded Spill
	beqz	$fp, .LBB104_102
# %bb.75:
.Ltmp353:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	addi.d	$a0, $sp, 136
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
.Ltmp354:                               # EH_LABEL
# %bb.76:                               # %.preheader570
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.43)
	addi.d	$a0, $a0, %pc_lo12(.L.str.43)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	ori	$fp, $zero, 2
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	blt	$a0, $fp, .LBB104_332
# %bb.77:                               # %.lr.ph592
	move	$s5, $zero
	ori	$s6, $zero, 1
	ori	$s7, $zero, 92
	ori	$s3, $zero, 47
	addi.d	$a0, $a0, -2
	sltui	$s8, $a0, 1
	ori	$s1, $zero, 1
	b	.LBB104_79
	.p2align	4, , 16
.LBB104_78:                             # %_ZN5ArrayIcLi0EED2Ev.exit297
                                        #   in Loop: Header=BB104_79 Depth=1
	ld.d	$a0, $sp, 184
	add.w	$s5, $s4, $s5
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	beq	$s1, $a0, .LBB104_110
.LBB104_79:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_83 Depth 2
                                        #     Child Loop BB104_87 Depth 2
                                        #     Child Loop BB104_91 Depth 2
	slli.d	$a0, $s1, 3
	ldx.d	$a1, $s2, $a0
.Ltmp356:                               # EH_LABEL
	addi.d	$a0, $sp, 176
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
.Ltmp357:                               # EH_LABEL
# %bb.80:                               #   in Loop: Header=BB104_79 Depth=1
	ld.w	$a1, $sp, 176
	addi.w	$a0, $a1, -1
	blez	$a1, .LBB104_90
# %bb.81:                               # %.lr.ph.preheader
                                        #   in Loop: Header=BB104_79 Depth=1
	move	$a2, $zero
	b	.LBB104_83
	.p2align	4, , 16
.LBB104_82:                             #   in Loop: Header=BB104_83 Depth=2
	addi.d	$a2, $a2, 1
	beq	$a1, $a2, .LBB104_85
.LBB104_83:                             # %.lr.ph
                                        #   Parent Loop BB104_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $sp, 192
	ldx.bu	$a4, $a3, $a2
	bne	$a4, $s7, .LBB104_82
# %bb.84:                               #   in Loop: Header=BB104_83 Depth=2
	stx.b	$s3, $a3, $a2
	b	.LBB104_82
	.p2align	4, , 16
.LBB104_85:                             # %.preheader569
                                        #   in Loop: Header=BB104_79 Depth=1
	beq	$a1, $s6, .LBB104_90
# %bb.86:                               # %.lr.ph587.preheader
                                        #   in Loop: Header=BB104_79 Depth=1
	bstrpick.d	$a1, $a0, 31, 0
	addi.d	$a1, $a1, -1
	.p2align	4, , 16
.LBB104_87:                             # %.lr.ph587
                                        #   Parent Loop BB104_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a2, $sp, 192
	ldx.bu	$a3, $a2, $a1
	bne	$a3, $s3, .LBB104_90
# %bb.88:                               #   in Loop: Header=BB104_87 Depth=2
	stx.b	$zero, $a2, $a1
	addi.d	$a2, $a1, 1
	addi.d	$a1, $a1, -1
	addi.w	$a0, $a0, -1
	bltu	$s6, $a2, .LBB104_87
# %bb.89:                               #   in Loop: Header=BB104_79 Depth=1
	move	$a0, $zero
	.p2align	4, , 16
.LBB104_90:                             # %.critedge
                                        #   in Loop: Header=BB104_79 Depth=1
	ld.d	$a2, $sp, 192
	bstrpick.d	$a1, $a0, 31, 0
	move	$a4, $a0
	.p2align	4, , 16
.LBB104_91:                             #   Parent Loop BB104_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	move	$a3, $a4
	blez	$a4, .LBB104_93
# %bb.92:                               #   in Loop: Header=BB104_91 Depth=2
	add.d	$a4, $a2, $a1
	ld.bu	$a5, $a4, -1
	addi.d	$a1, $a1, -1
	addi.w	$a4, $a3, -1
	bne	$a5, $s3, .LBB104_91
	b	.LBB104_96
	.p2align	4, , 16
.LBB104_93:                             # %.critedge2
                                        #   in Loop: Header=BB104_79 Depth=1
	blt	$a0, $fp, .LBB104_96
# %bb.94:                               # %.critedge2
                                        #   in Loop: Header=BB104_79 Depth=1
	bnez	$a1, .LBB104_96
# %bb.95:                               #   in Loop: Header=BB104_79 Depth=1
	ld.bu	$a0, $a2, 1
	addi.d	$a0, $a0, -58
	sltui	$a0, $a0, 1
	slli.w	$a3, $a0, 1
.LBB104_96:                             # %.critedge2.thread
                                        #   in Loop: Header=BB104_79 Depth=1
.Ltmp359:                               # EH_LABEL
	addi.d	$a0, $sp, 136
	addi.d	$a1, $sp, 200
	pcaddu18i	$ra, %call36(_Z7putsizeR6StringS0_PKci)
	jirl	$ra, $ra, 0
.Ltmp360:                               # EH_LABEL
# %bb.97:                               # %_Z6expandR6StringS0_PKci.exit
                                        #   in Loop: Header=BB104_79 Depth=1
	move	$s4, $a0
	bnez	$a0, .LBB104_100
# %bb.98:                               # %_Z6expandR6StringS0_PKci.exit
                                        #   in Loop: Header=BB104_79 Depth=1
	sltu	$a0, $s6, $s1
	or	$a0, $s8, $a0
	beqz	$a0, .LBB104_100
# %bb.99:                               #   in Loop: Header=BB104_79 Depth=1
	ld.d	$a1, $sp, 192
	pcalau12i	$a0, %pc_hi20(.L.str.42)
	addi.d	$a0, $a0, %pc_lo12(.L.str.42)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.LBB104_100:                            #   in Loop: Header=BB104_79 Depth=1
	ld.w	$a0, $sp, 176
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_78
# %bb.101:                              #   in Loop: Header=BB104_79 Depth=1
	st.w	$a0, $s0, 4
	b	.LBB104_78
.LBB104_102:
	st.d	$zero, $sp, 104                 # 8-byte Folded Spill
	st.d	$zero, $sp, 80                  # 8-byte Folded Spill
	ori	$s5, $zero, 1
	move	$s7, $s8
	ld.d	$s6, $sp, 96                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	beqz	$a0, .LBB104_140
.LBB104_103:
	ld.d	$a0, $sp, 240
	pcalau12i	$a1, %pc_hi20(.L.str.47)
	addi.d	$a1, $a1, %pc_lo12(.L.str.47)
	pcaddu18i	$ra, %call36(fopen)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB104_317
# %bb.104:
.Ltmp372:                               # EH_LABEL
	move	$s1, $a0
	pcaddu18i	$ra, %call36(_Z7getlineP8_IO_FILE)
	jirl	$ra, $ra, 0
.Ltmp373:                               # EH_LABEL
# %bb.105:
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.48)
	addi.d	$a1, $a0, %pc_lo12(.L.str.48)
	ori	$a2, $zero, 7
	move	$a0, $fp
	pcaddu18i	$ra, %call36(strncmp)
	jirl	$ra, $ra, 0
	bnez	$a0, .LBB104_333
# %bb.106:
	ld.b	$a0, $fp, 7
	addi.d	$a1, $a0, -48
	addi.d	$a0, $a0, -58
	andi	$a0, $a0, 255
	sltui	$a0, $a0, 246
	masknez	$a1, $a1, $a0
	ori	$a2, $zero, 5
	maskeqz	$a0, $a2, $a0
	or	$a0, $a0, $a1
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	st.w	$a0, $a1, %pc_lo12(level)
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	slli.d	$a0, $a0, 3
	sub.d	$fp, $zero, $a0
	.p2align	4, , 16
.LBB104_107:                            # =>This Inner Loop Header: Depth=1
.Ltmp377:                               # EH_LABEL
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z7getlineP8_IO_FILE)
	jirl	$ra, $ra, 0
.Ltmp378:                               # EH_LABEL
# %bb.108:                              #   in Loop: Header=BB104_107 Depth=1
	beqz	$a0, .LBB104_114
# %bb.109:                              #   in Loop: Header=BB104_107 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.w	$a0, $a0, 1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	addi.d	$fp, $fp, -8
	b	.LBB104_107
.LBB104_110:                            # %._crit_edge
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	beqz	$s5, .LBB104_315
# %bb.111:
	ld.d	$a0, $sp, 240
	pcalau12i	$a1, %pc_hi20(.L.str.44)
	addi.d	$a1, $a1, %pc_lo12(.L.str.44)
	pcaddu18i	$ra, %call36(fopen)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB104_314
# %bb.112:
	move	$a4, $a0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a2, $a0, %pc_lo12(level)
	ld.d	$a3, $sp, 152
	pcalau12i	$a0, %pc_hi20(.L.str.45)
	addi.d	$a1, $a0, %pc_lo12(.L.str.45)
	st.d	$a4, $sp, 80                    # 8-byte Folded Spill
	move	$a0, $a4
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.46)
	addi.d	$a0, $a0, %pc_lo12(.L.str.46)
	move	$a1, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a0, $zero, 1
	bne	$s5, $a0, .LBB104_120
# %bb.113:
	move	$s7, $s8
	ld.d	$s6, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 80                    # 8-byte Folded Reload
	b	.LBB104_131
.LBB104_114:
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a2, $a0, %pc_lo12(level)
	pcalau12i	$a0, %pc_hi20(.L.str.51)
	addi.d	$a0, $a0, %pc_lo12(.L.str.51)
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	move	$a0, $s1
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	ld.w	$a1, $sp, 204
	move	$s3, $a0
	addi.w	$s8, $a0, 4
	bge	$a1, $s8, .LBB104_141
# %bb.115:
	ld.d	$s4, $sp, 208
	ld.d	$s1, $sp, 216
	ld.w	$a4, $sp, 200
	st.w	$s8, $sp, 204
	st.w	$s8, $sp, 200
	blez	$s8, .LBB104_142
# %bb.116:
	st.d	$a4, $sp, 96                    # 8-byte Folded Spill
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	add.w	$a0, $a0, $s8
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_118
# %bb.117:
	st.w	$a0, $s0, 4
.LBB104_118:                            # %_ZN14ProgramChecker5allocEi.exit.i.i314
	ori	$a1, $zero, 1
	move	$a0, $s8
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 208
	beqz	$a0, .LBB104_341
# %bb.119:
	st.d	$a0, $sp, 216
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	bnez	$s4, .LBB104_143
	b	.LBB104_147
.LBB104_120:
	ld.w	$fp, $s0, 0
	ld.w	$s1, $s0, 4
	slli.w	$s4, $s5, 3
	alsl.w	$s3, $s5, $fp, 3
	alsl.d	$a0, $s5, $fp, 3
	st.w	$a0, $s0, 0
	bge	$s1, $s3, .LBB104_122
# %bb.121:
	st.w	$s3, $s0, 4
	move	$s1, $s3
.LBB104_122:                            # %_ZN14ProgramChecker5allocEi.exit.i.i299
	ori	$a1, $zero, 1
	ori	$s6, $zero, 1
	move	$a0, $s4
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB104_337
# %bb.123:                              # %_ZN5ArrayIPcLi0EE6createEi.exit.i
	move	$s7, $a0
	st.d	$zero, $a0, 0
	st.w	$fp, $s0, 0
	bge	$s1, $fp, .LBB104_125
# %bb.124:
	st.w	$fp, $s0, 4
	move	$s1, $fp
.LBB104_125:
	move	$a0, $s8
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	st.w	$s3, $s0, 0
	bge	$s1, $s3, .LBB104_127
# %bb.126:
	st.w	$s3, $s0, 4
	move	$s1, $s3
.LBB104_127:                            # %_ZN14ProgramChecker5allocEi.exit.i.i303
	ori	$a1, $zero, 1
	move	$a0, $s4
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	move	$s6, $a0
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 80                    # 8-byte Folded Reload
	beqz	$s6, .LBB104_339
# %bb.128:                              # %_ZN5ArrayIlLi0EE6createEi.exit.i
	st.d	$zero, $s6, 0
	st.w	$fp, $s0, 0
	bge	$s1, $fp, .LBB104_130
# %bb.129:
	st.w	$fp, $s0, 4
.LBB104_130:                            # %_ZN14ProgramChecker5allocEi.exit.i307
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_131:                            # %_ZN5ArrayIlLi0EE6resizeEi.exit
	ld.d	$fp, $sp, 216
	move	$a0, $s4
	pcaddu18i	$ra, %call36(rewind)
	jirl	$ra, $ra, 0
.Ltmp366:                               # EH_LABEL
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Z7getlineP8_IO_FILE)
	jirl	$ra, $ra, 0
.Ltmp367:                               # EH_LABEL
# %bb.132:                              # %.preheader568.preheader
	move	$s1, $zero
	ori	$s3, $zero, 10
	.p2align	4, , 16
.LBB104_133:                            # %.preheader568
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_135 Depth 2
.Ltmp369:                               # EH_LABEL
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_Z7getlineP8_IO_FILE)
	jirl	$ra, $ra, 0
.Ltmp370:                               # EH_LABEL
# %bb.134:                              #   in Loop: Header=BB104_133 Depth=1
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	slli.d	$a1, $s1, 3
	stx.d	$a0, $s6, $a1
	stx.d	$fp, $s7, $a1
	.p2align	4, , 16
.LBB104_135:                            #   Parent Loop BB104_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a0, $fp, 0
	addi.d	$fp, $fp, 1
	bne	$a0, $s3, .LBB104_135
# %bb.136:                              #   in Loop: Header=BB104_133 Depth=1
	addi.d	$s1, $s1, 1
	st.b	$zero, $fp, -1
	bne	$s1, $s5, .LBB104_133
# %bb.137:
	ori	$a2, $zero, 2
	move	$a0, $s4
	move	$a1, $zero
	pcaddu18i	$ra, %call36(fseek)
	jirl	$ra, $ra, 0
	ld.w	$a0, $sp, 136
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_139
# %bb.138:
	st.w	$a0, $s0, 4
.LBB104_139:                            # %_ZN5ArrayIcLi0EED2Ev.exit310
	ld.d	$a0, $sp, 144
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	st.d	$s5, $sp, 104                   # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	bnez	$a0, .LBB104_103
.LBB104_140:
	move	$s8, $s7
	move	$fp, $s5
	st.d	$s6, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(level)
	ori	$a1, $zero, 12
	bgeu	$a1, $a0, .LBB104_181
	b	.LBB104_182
.LBB104_141:
	st.w	$s8, $sp, 200
	b	.LBB104_147
.LBB104_142:
	move	$a0, $zero
	addi.d	$a2, $sp, 208
	vrepli.b	$vr0, 0
	vst	$vr0, $a2, 0
	beqz	$s4, .LBB104_147
.LBB104_143:
	beqz	$s1, .LBB104_146
# %bb.144:
	slt	$a3, $s8, $a4
	masknez	$a2, $a4, $a3
	maskeqz	$a3, $s8, $a3
	or	$a2, $a3, $a2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	sub.w	$a0, $a0, $s8
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_146
# %bb.145:
	st.w	$a0, $s0, 4
.LBB104_146:                            # %_ZN14ProgramChecker5allocEi.exit.i318
	move	$a0, $s4
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_147:                            # %_ZN5ArrayIcLi0EE6resizeEi.exit
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	move	$a0, $s1
	pcaddu18i	$ra, %call36(rewind)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 216
	ori	$a1, $zero, 1
	move	$a2, $s3
	move	$a3, $s1
	pcaddu18i	$ra, %call36(fread)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB104_154
# %bb.148:
	ld.w	$s1, $s0, 0
	ld.w	$s8, $s0, 4
	blez	$a0, .LBB104_155
# %bb.149:
	sub.w	$a0, $zero, $fp
	sub.w	$s1, $s1, $fp
	st.w	$s1, $s0, 0
	bge	$s8, $s1, .LBB104_151
# %bb.150:
	st.w	$s1, $s0, 4
	move	$s8, $s1
.LBB104_151:                            # %_ZN14ProgramChecker5allocEi.exit.i.i321
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	bnez	$a0, .LBB104_156
# %bb.152:
.Ltmp382:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	move	$s7, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp383:                               # EH_LABEL
# %bb.153:                              # %.noexc327
.LBB104_154:
	move	$s8, $s7
	st.d	$s6, $sp, 96                    # 8-byte Folded Spill
	move	$s7, $a0
	b	.LBB104_168
.LBB104_155:
	move	$a0, $zero
.LBB104_156:                            # %_ZN5ArrayIPcLi0EE6createEi.exit.i323
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	slt	$a2, $a3, $s5
	masknez	$a1, $s5, $a2
	maskeqz	$a2, $a3, $a2
	or	$a1, $a2, $a1
	slli.d	$s5, $a1, 3
	move	$s4, $a0
	move	$a1, $s7
	move	$a2, $s5
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	add.w	$a0, $s1, $fp
	st.w	$a0, $s0, 0
	bge	$s8, $a0, .LBB104_158
# %bb.157:
	st.w	$a0, $s0, 4
.LBB104_158:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$s1, $s0, 0
	ld.w	$s3, $s0, 4
	ld.d	$s7, $sp, 104                   # 8-byte Folded Reload
	blez	$s7, .LBB104_164
# %bb.159:
	sub.w	$a0, $zero, $fp
	sub.w	$s1, $s1, $fp
	st.w	$s1, $s0, 0
	move	$s8, $s4
	bge	$s3, $s1, .LBB104_161
# %bb.160:
	st.w	$s1, $s0, 4
	move	$s3, $s1
.LBB104_161:                            # %_ZN14ProgramChecker5allocEi.exit.i.i330
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	bnez	$a0, .LBB104_165
# %bb.162:
.Ltmp385:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp386:                               # EH_LABEL
# %bb.163:                              # %.noexc336
.LBB104_164:
	move	$a0, $zero
	move	$s8, $s4
.LBB104_165:                            # %_ZN5ArrayIlLi0EE6createEi.exit.i332
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	move	$a1, $s6
	move	$a2, $s5
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	add.w	$a0, $s1, $fp
	st.w	$a0, $s0, 0
	bge	$s3, $a0, .LBB104_167
# %bb.166:
	st.w	$a0, $s0, 4
.LBB104_167:                            # %_ZN14ProgramChecker5allocEi.exit.i335
	move	$a0, $s6
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_168:                            # %_ZN5ArrayIlLi0EE6resizeEi.exit337
	ld.d	$fp, $sp, 216
	ori	$a0, $zero, 13
	ld.bu	$a1, $fp, 0
	beqz	$a1, .LBB104_171
	.p2align	4, , 16
.LBB104_169:                            # =>This Inner Loop Header: Depth=1
	beq	$a1, $a0, .LBB104_171
# %bb.170:                              #   in Loop: Header=BB104_169 Depth=1
	addi.d	$fp, $fp, 1
	ld.bu	$a1, $fp, 0
	bnez	$a1, .LBB104_169
.LBB104_171:                            # %.critedge9
	blez	$s7, .LBB104_180
# %bb.172:                              # %.lr.ph598.preheader
	move	$s1, $zero
	ori	$s5, $zero, 13
	ori	$s6, $zero, 9
	b	.LBB104_174
	.p2align	4, , 16
.LBB104_173:                            #   in Loop: Header=BB104_174 Depth=1
	addi.d	$s1, $s1, 1
	st.b	$zero, $fp, 0
	beq	$s1, $s7, .LBB104_180
.LBB104_174:                            # %.lr.ph598
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_175 Depth 2
                                        #     Child Loop BB104_178 Depth 2
	addi.d	$a0, $fp, 2
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	slli.d	$a1, $s1, 3
	addi.d	$a3, $fp, 1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	stx.d	$a0, $a2, $a1
	move	$a2, $a3
	.p2align	4, , 16
.LBB104_175:                            #   Parent Loop BB104_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	move	$a0, $a3
	addi.d	$a2, $a2, 1
	beqz	$a4, .LBB104_177
# %bb.176:                              #   in Loop: Header=BB104_175 Depth=2
	addi.d	$a3, $a0, 1
	bne	$a4, $s6, .LBB104_175
.LBB104_177:                            # %.critedge11
                                        #   in Loop: Header=BB104_174 Depth=1
	stx.d	$a2, $s8, $a1
	addi.d	$fp, $a2, -1
	ld.bu	$a1, $fp, 0
	beq	$a1, $s5, .LBB104_173
	.p2align	4, , 16
.LBB104_178:                            #   Parent Loop BB104_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	beqz	$a1, .LBB104_319
# %bb.179:                              #   in Loop: Header=BB104_178 Depth=2
	addi.d	$fp, $fp, 1
	addi.d	$a0, $a0, 1
	ld.bu	$a1, $fp, 0
	bne	$a1, $s5, .LBB104_178
	b	.LBB104_173
.LBB104_180:
	move	$fp, $s7
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(level)
	ori	$a1, $zero, 12
	bltu	$a1, $a0, .LBB104_182
.LBB104_181:
	lu12i.w	$a1, 128
	sll.w	$a1, $a1, $a0
.Ltmp388:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a0, $a0, %pc_lo12(buf)
	move	$s7, $s8
	move	$s5, $fp
	ld.d	$s6, $sp, 96                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN5ArrayIhLi0EE6resizeEi)
	jirl	$ra, $ra, 0
.Ltmp389:                               # EH_LABEL
.LBB104_182:                            # %_ZN3Buf7setsizeEi.exit
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	vrepli.b	$vr4, 0
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	blez	$s4, .LBB104_185
# %bb.183:                              # %.lr.ph601.preheader
	ori	$a0, $zero, 4
	bgeu	$s4, $a0, .LBB104_186
# %bb.184:
	move	$a0, $zero
	move	$s5, $zero
	b	.LBB104_189
.LBB104_185:
	move	$s5, $zero
	b	.LBB104_191
.LBB104_186:                            # %vector.ph
	bstrpick.d	$a0, $s4, 30, 2
	slli.d	$a0, $a0, 2
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a1, $a1, 16
	move	$a2, $a0
	vori.b	$vr0, $vr4, 0
	vori.b	$vr1, $vr4, 0
	.p2align	4, , 16
.LBB104_187:                            # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr2, $a1, -16
	vld	$vr3, $a1, 0
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a1, $a1, 32
	bnez	$a2, .LBB104_187
# %bb.188:                              # %middle.block
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$s5, $vr0, 0
	beq	$a0, $s4, .LBB104_191
.LBB104_189:                            # %.lr.ph601.preheader863
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a1, $a0, $a1, 3
	sub.d	$a0, $s4, $a0
	.p2align	4, , 16
.LBB104_190:                            # %.lr.ph601
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a1, 0
	add.d	$s5, $a2, $s5
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB104_190
.LBB104_191:                            # %._crit_edge602
	ori	$a0, $zero, 2048
	st.w	$a0, $sp, 136
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	st.w	$a0, $sp, 140
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	st.d	$a0, $sp, 144
	ori	$a0, $zero, 0
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a1, %pc_lo12(level)
	lu32i.d	$a0, -1
	st.d	$a0, $sp, 152
	st.w	$zero, $sp, 160
	slti	$a0, $a1, 1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	xori	$a1, $a1, 1
	or	$a0, $a1, $a0
	st.d	$zero, $sp, 168
	vst	$vr4, $sp, 16                   # 16-byte Folded Spill
	bnez	$a0, .LBB104_193
# %bb.192:                              # %.preheader.preheader.i
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 144
	andi	$fp, $a0, 255
	st.w	$fp, $sp, 160
	move	$a0, $a1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 144
	move	$s6, $a0
	bstrins.d	$s6, $fp, 63, 8
	st.w	$s6, $sp, 160
	move	$a0, $a1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 144
	move	$s7, $a0
	bstrins.d	$s7, $s6, 63, 8
	st.w	$s7, $sp, 160
	move	$a0, $a1
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	vld	$vr4, $sp, 16                   # 16-byte Folded Reload
	bstrins.d	$a0, $s7, 63, 8
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	st.w	$a0, $sp, 160
.LBB104_193:                            # %vector.body856.preheader
	lu12i.w	$a0, 16
	lu32i.d	$a0, 196610
	vreplgr2vr.d	$vr0, $a0
	lu12i.w	$a0, -1
	lu12i.w	$a1, 4
	pcalau12i	$a2, %pc_hi20(_ZL2dt)
	addi.d	$a2, $a2, %pc_lo12(_ZL2dt)
	lu12i.w	$a3, 1
	ori	$a4, $a3, 16
	.p2align	4, , 16
.LBB104_194:                            # %vector.body856
                                        # =>This Inner Loop Header: Depth=1
	vslli.h	$vr1, $vr0, 1
	vaddi.hu	$vr2, $vr1, 3
	vaddi.hu	$vr1, $vr1, 11
	vpickve2gr.h	$a5, $vr2, 1
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vpickve2gr.h	$a6, $vr2, 0
	bstrpick.d	$a6, $a6, 15, 0
	div.du	$a6, $a1, $a6
	vinsgr2vr.h	$vr3, $a6, 0
	vinsgr2vr.h	$vr3, $a5, 1
	vpickve2gr.h	$a5, $vr2, 2
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr3, $a5, 2
	vpickve2gr.h	$a5, $vr2, 3
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr3, $a5, 3
	vpickve2gr.h	$a5, $vr1, 1
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vpickve2gr.h	$a6, $vr1, 0
	bstrpick.d	$a6, $a6, 15, 0
	div.du	$a6, $a1, $a6
	vinsgr2vr.h	$vr2, $a6, 0
	vinsgr2vr.h	$vr2, $a5, 1
	vpickve2gr.h	$a5, $vr1, 2
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr2, $a5, 2
	vpickve2gr.h	$a5, $vr1, 3
	bstrpick.d	$a5, $a5, 15, 0
	div.du	$a5, $a1, $a5
	vinsgr2vr.h	$vr2, $a5, 3
	vilvl.h	$vr1, $vr4, $vr3
	vilvl.h	$vr2, $vr4, $vr2
	add.d	$a5, $a2, $a0
	vstx	$vr1, $a5, $a3
	vstx	$vr2, $a5, $a4
	addi.d	$a0, $a0, 32
	vaddi.hu	$vr0, $vr0, 8
	bnez	$a0, .LBB104_194
# %bb.195:                              # %_ZN7EncoderC2E4ModeP8_IO_FILE.exit
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	beqz	$a0, .LBB104_203
# %bb.196:                              # %.preheader
	blez	$s4, .LBB104_200
# %bb.197:                              # %.lr.ph616.preheader
	move	$fp, $s8
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB104_198:                            # %.lr.ph616
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 0
	ld.d	$a1, $s1, 0
.Ltmp408:                               # EH_LABEL
	addi.d	$a2, $sp, 136
	pcaddu18i	$ra, %call36(_Z8compressPKclR7Encoder)
	jirl	$ra, $ra, 0
.Ltmp409:                               # EH_LABEL
# %bb.199:                              #   in Loop: Header=BB104_198 Depth=1
	addi.d	$s1, $s1, 8
	addi.d	$s4, $s4, -1
	addi.d	$fp, $fp, 8
	bnez	$s4, .LBB104_198
.LBB104_200:                            # %._crit_edge617
	ld.w	$a0, $sp, 140
	ld.d	$a1, $sp, 144
	bnez	$a0, .LBB104_223
# %bb.201:                              # %._crit_edge617
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(level)
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	blez	$a0, .LBB104_224
# %bb.202:
	ld.bu	$a0, $sp, 155
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 144
	b	.LBB104_224
.LBB104_203:
	ori	$fp, $zero, 2
	ld.d	$s1, $sp, 88                    # 8-byte Folded Reload
	slt	$a0, $fp, $s1
	ori	$a1, $zero, 8
	masknez	$a1, $a1, $a0
	ori	$a2, $zero, 16
	maskeqz	$a0, $a2, $a0
	or	$a0, $a0, $a1
	ldx.d	$a1, $s2, $a0
.Ltmp390:                               # EH_LABEL
	addi.d	$a0, $sp, 176
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
.Ltmp391:                               # EH_LABEL
# %bb.204:
	bne	$s1, $fp, .LBB104_231
# %bb.205:
	ld.w	$fp, $sp, 176
	ori	$a0, $zero, 2
	addi.w	$a6, $fp, -2
	blt	$fp, $a0, .LBB104_213
# %bb.206:                              # %.lr.ph608
	ld.d	$a0, $sp, 192
	ori	$a1, $zero, 92
	ori	$a2, $zero, 47
	ori	$a3, $zero, 1
	ori	$a4, $zero, 58
	b	.LBB104_208
	.p2align	4, , 16
.LBB104_207:                            #   in Loop: Header=BB104_208 Depth=1
	addi.d	$a6, $a5, -1
	blez	$a5, .LBB104_214
.LBB104_208:                            # =>This Inner Loop Header: Depth=1
	move	$a5, $a6
	ldx.bu	$a6, $a0, $a6
	beq	$a6, $a1, .LBB104_225
# %bb.209:                              #   in Loop: Header=BB104_208 Depth=1
	beq	$a6, $a2, .LBB104_225
# %bb.210:                              #   in Loop: Header=BB104_208 Depth=1
	bne	$a5, $a3, .LBB104_207
# %bb.211:                              #   in Loop: Header=BB104_208 Depth=1
	ld.bu	$a6, $a0, 1
	bne	$a6, $a4, .LBB104_207
# %bb.212:
	st.b	$zero, $a0, 2
	b	.LBB104_231
.LBB104_213:                            # %._crit_edge609
	addi.w	$a0, $zero, -1
	bne	$a6, $a0, .LBB104_231
.LBB104_214:                            # %._crit_edge609.thread
	ld.w	$a1, $sp, 180
	ori	$a0, $zero, 2
	bge	$a1, $a0, .LBB104_229
# %bb.215:
	ld.d	$s1, $sp, 184
	ld.d	$s2, $sp, 192
	ld.w	$s5, $s0, 0
	ld.w	$s3, $s0, 4
	lu32i.d	$a0, 2
	st.d	$a0, $sp, 176
	addi.w	$a0, $s5, 2
	st.w	$a0, $s0, 0
	bge	$s3, $a0, .LBB104_217
# %bb.216:
	st.w	$a0, $s0, 4
	move	$s3, $a0
.LBB104_217:                            # %_ZN14ProgramChecker5allocEi.exit.i.i429
	ori	$a0, $zero, 2
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 184
	beqz	$a0, .LBB104_343
# %bb.218:                              # %_ZN5ArrayIcLi0EE6createEi.exit.i431
	st.d	$a0, $sp, 192
	beqz	$s1, .LBB104_230
# %bb.219:
	beqz	$s2, .LBB104_222
# %bb.220:
	slti	$a1, $fp, 2
	ori	$a2, $zero, 2
	masknez	$a2, $a2, $a1
	maskeqz	$a1, $fp, $a1
	or	$a2, $a1, $a2
	move	$a1, $s2
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s5, $s0, 0
	bge	$s3, $s5, .LBB104_222
# %bb.221:
	st.w	$s5, $s0, 4
.LBB104_222:                            # %_ZN14ProgramChecker5allocEi.exit.i434
	move	$a0, $s1
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	b	.LBB104_230
.LBB104_223:
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
.LBB104_224:
	move	$a0, $a1
	pcaddu18i	$ra, %call36(ftell)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.53)
	addi.d	$a0, $a0, %pc_lo12(.L.str.53)
	move	$a1, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	b	.LBB104_303
.LBB104_225:
	stx.b	$zero, $a0, $a5
	b	.LBB104_231
.LBB104_226:
	addi.d	$a1, $a1, -48
	andi	$a1, $a1, 255
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	st.w	$a1, $a2, %pc_lo12(level)
.LBB104_227:
	ori	$a1, $zero, 2
	st.d	$zero, $sp, 56                  # 8-byte Folded Spill
	beq	$s0, $a1, .LBB104_326
# %bb.228:
	addi.d	$s2, $s2, 8
	sltui	$fp, $a0, 246
	addi.w	$s0, $s0, -1
	b	.LBB104_5
.LBB104_229:
	st.w	$a0, $sp, 176
.LBB104_230:                            # %_ZN6StringaSEPKc.exit
	ld.d	$a0, $sp, 192
	ori	$a1, $zero, 46
	st.h	$a1, $a0, 0
.LBB104_231:                            # %.thread555
	ld.d	$s1, $sp, 192
	move	$a0, $s1
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	ld.w	$a1, $sp, 180
	addi.w	$s5, $a0, 1
	bge	$a1, $s5, .LBB104_234
# %bb.232:
	addi.w	$a0, $a0, 0
	ld.d	$s2, $sp, 184
	ld.w	$fp, $sp, 176
	st.w	$s5, $sp, 180
	lu12i.w	$a1, 524287
	ori	$a1, $a1, 4095
	st.w	$s5, $sp, 176
	bltu	$a0, $a1, .LBB104_235
# %bb.233:
	move	$a0, $zero
	addi.d	$a1, $sp, 184
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	vst	$vr0, $a1, 0
	bnez	$s2, .LBB104_239
	b	.LBB104_242
.LBB104_234:
	st.w	$s5, $sp, 176
	move	$a0, $s1
	b	.LBB104_242
.LBB104_235:
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	add.w	$a0, $a0, $s5
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_237
# %bb.236:
	st.w	$a0, $s0, 4
.LBB104_237:                            # %_ZN14ProgramChecker5allocEi.exit.i.i438
	ori	$a1, $zero, 1
	move	$a0, $s5
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 184
	beqz	$a0, .LBB104_335
# %bb.238:
	st.d	$a0, $sp, 192
	beqz	$s2, .LBB104_242
.LBB104_239:
	slt	$a1, $s5, $fp
	masknez	$a2, $fp, $a1
	maskeqz	$a1, $s5, $a1
	or	$a2, $a1, $a2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	sub.w	$a0, $a0, $s5
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_241
# %bb.240:
	st.w	$a0, $s0, 4
.LBB104_241:                            # %_ZN14ProgramChecker5allocEi.exit.i443
	move	$a0, $s2
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 192
.LBB104_242:
	move	$a1, $s1
	pcaddu18i	$ra, %call36(strcpy)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 192
	ld.bu	$a0, $s2, 0
	beqz	$a0, .LBB104_267
# %bb.243:
	ld.w	$s1, $sp, 176
	ori	$a0, $zero, 3
	bne	$s1, $a0, .LBB104_245
# %bb.244:
	ld.bu	$a0, $s2, 1
	ori	$a1, $zero, 58
	bne	$a0, $a1, .LBB104_246
	b	.LBB104_267
.LBB104_245:
	blez	$s1, .LBB104_247
.LBB104_246:                            # %.thread556
	addi.w	$s1, $s1, -1
.LBB104_247:                            # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i345
	ld.w	$a0, $sp, 180
	bne	$s1, $a0, .LBB104_256
# %bb.248:
	slli.w	$a0, $s1, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a0, $a0, $a1
	ld.d	$s5, $sp, 184
	ld.w	$fp, $s0, 0
	ld.w	$s3, $s0, 4
	st.w	$a0, $sp, 180
	st.w	$a0, $sp, 176
	add.w	$a1, $fp, $a0
	st.w	$a1, $s0, 0
	bge	$s3, $a1, .LBB104_250
# %bb.249:
	st.w	$a1, $s0, 4
	move	$s3, $a1
.LBB104_250:                            # %_ZN14ProgramChecker5allocEi.exit.i.i456
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 184
	beqz	$a0, .LBB104_335
# %bb.251:
	st.d	$a0, $sp, 192
	beqz	$s5, .LBB104_255
# %bb.252:
	move	$a1, $s2
	move	$a2, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$fp, $s0, 0
	bge	$s3, $fp, .LBB104_254
# %bb.253:
	st.w	$fp, $s0, 4
.LBB104_254:                            # %_ZN14ProgramChecker5allocEi.exit.i461
	move	$a0, $s5
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 192
	b	.LBB104_256
.LBB104_255:
	move	$s2, $a0
.LBB104_256:                            # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i348
	addi.d	$a0, $s1, 1
	st.w	$a0, $sp, 176
	ori	$a0, $zero, 47
	stx.b	$a0, $s2, $s1
	ld.w	$s1, $sp, 176
	ld.w	$a0, $sp, 180
	ld.d	$s2, $sp, 192
	bne	$s1, $a0, .LBB104_266
# %bb.257:
	slli.w	$a0, $s1, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a0, $a0, $a1
	ld.d	$s5, $sp, 184
	ld.w	$fp, $s0, 0
	ld.w	$s3, $s0, 4
	st.w	$a0, $sp, 180
	st.w	$a0, $sp, 176
	add.w	$a1, $fp, $a0
	st.w	$a1, $s0, 0
	bge	$s3, $a1, .LBB104_259
# %bb.258:
	st.w	$a1, $s0, 4
	move	$s3, $a1
.LBB104_259:                            # %_ZN14ProgramChecker5allocEi.exit.i.i447
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 184
	beqz	$a0, .LBB104_335
# %bb.260:
	st.d	$a0, $sp, 192
	beqz	$s5, .LBB104_265
# %bb.261:
	beqz	$s2, .LBB104_264
# %bb.262:
	move	$a1, $s2
	move	$a2, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$fp, $s0, 0
	bge	$s3, $fp, .LBB104_264
# %bb.263:
	st.w	$fp, $s0, 4
.LBB104_264:                            # %_ZN14ProgramChecker5allocEi.exit.i452
	move	$a0, $s5
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 192
	b	.LBB104_266
.LBB104_265:
	move	$s2, $a0
.LBB104_266:                            # %_ZN6StringpLEPKc.exit356
	addi.d	$a0, $s1, 1
	st.w	$a0, $sp, 176
	stx.b	$zero, $s2, $s1
.LBB104_267:
	blez	$s4, .LBB104_300
# %bb.268:                              # %.lr.ph613
	move	$fp, $zero
	ori	$s6, $zero, 1
	b	.LBB104_270
	.p2align	4, , 16
.LBB104_269:                            # %_ZN5ArrayIcLi0EED2Ev.exit373
                                        #   in Loop: Header=BB104_270 Depth=1
	ld.d	$a0, $sp, 120
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	addi.d	$fp, $fp, 1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	beq	$fp, $a0, .LBB104_300
.LBB104_270:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_278 Depth 2
	move	$s7, $s8
	ld.d	$a1, $sp, 192
.Ltmp399:                               # EH_LABEL
	addi.d	$a0, $sp, 112
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
.Ltmp400:                               # EH_LABEL
# %bb.271:                              #   in Loop: Header=BB104_270 Depth=1
	slli.d	$a1, $fp, 3
	ld.w	$s8, $sp, 112
	ldx.d	$a0, $s7, $a1
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	blez	$s8, .LBB104_273
# %bb.272:                              #   in Loop: Header=BB104_270 Depth=1
	addi.w	$s8, $s8, -1
	st.w	$s8, $sp, 112
.LBB104_273:                            # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i359
                                        #   in Loop: Header=BB104_270 Depth=1
	ld.bu	$a1, $a0, 0
	beqz	$a1, .LBB104_287
# %bb.274:                              # %.lr.ph.i361.preheader
                                        #   in Loop: Header=BB104_270 Depth=1
	addi.d	$s8, $a0, 1
	b	.LBB104_278
	.p2align	4, , 16
.LBB104_275:                            # %_ZN14ProgramChecker5allocEi.exit.i479
                                        #   in Loop: Header=BB104_278 Depth=2
	move	$a0, $s5
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 128
.LBB104_276:                            # %.noexc369
                                        #   in Loop: Header=BB104_278 Depth=2
	st.w	$s1, $sp, 112
	ld.bu	$a1, $s8, -1
	move	$s2, $a0
.LBB104_277:                            # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i363
                                        #   in Loop: Header=BB104_278 Depth=2
	addi.d	$a0, $s1, 1
	st.w	$a0, $sp, 112
	stx.b	$a1, $s2, $s1
	ld.bu	$a1, $s8, 0
	addi.d	$s8, $s8, 1
	beqz	$a1, .LBB104_286
.LBB104_278:                            # %.lr.ph.i361
                                        #   Parent Loop BB104_270 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$s1, $sp, 112
	ld.w	$a0, $sp, 116
	ld.d	$s2, $sp, 128
	bne	$s1, $a0, .LBB104_277
# %bb.279:                              #   in Loop: Header=BB104_278 Depth=2
	slli.w	$a0, $s1, 1
	slt	$a1, $s6, $a0
	masknez	$a2, $s6, $a1
	maskeqz	$a0, $a0, $a1
	or	$a0, $a0, $a2
	ld.d	$s5, $sp, 120
	ld.w	$s3, $s0, 0
	ld.w	$s4, $s0, 4
	st.w	$a0, $sp, 116
	st.w	$a0, $sp, 112
	add.w	$a1, $s3, $a0
	st.w	$a1, $s0, 0
	bge	$s4, $a1, .LBB104_281
# %bb.280:                              #   in Loop: Header=BB104_278 Depth=2
	st.w	$a1, $s0, 4
	move	$s4, $a1
.LBB104_281:                            # %_ZN14ProgramChecker5allocEi.exit.i.i474
                                        #   in Loop: Header=BB104_278 Depth=2
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 120
	beqz	$a0, .LBB104_321
# %bb.282:                              #   in Loop: Header=BB104_278 Depth=2
	st.d	$a0, $sp, 128
	beqz	$s5, .LBB104_276
# %bb.283:                              #   in Loop: Header=BB104_278 Depth=2
	beqz	$s2, .LBB104_275
# %bb.284:                              #   in Loop: Header=BB104_278 Depth=2
	move	$a1, $s2
	move	$a2, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s3, $s0, 0
	bge	$s4, $s3, .LBB104_275
# %bb.285:                              #   in Loop: Header=BB104_278 Depth=2
	st.w	$s3, $s0, 4
	b	.LBB104_275
	.p2align	4, , 16
.LBB104_286:                            # %._crit_edge.loopexit.i365
                                        #   in Loop: Header=BB104_270 Depth=1
	ld.w	$s8, $sp, 112
.LBB104_287:                            # %._crit_edge.i367
                                        #   in Loop: Header=BB104_270 Depth=1
	ld.w	$a0, $sp, 116
	ld.d	$s1, $sp, 128
	bne	$s8, $a0, .LBB104_297
# %bb.288:                              #   in Loop: Header=BB104_270 Depth=1
	slli.w	$a0, $s8, 1
	slt	$a1, $s6, $a0
	masknez	$a2, $s6, $a1
	maskeqz	$a0, $a0, $a1
	or	$s5, $a0, $a2
	ld.d	$s2, $sp, 120
	ld.w	$s3, $s0, 0
	ld.w	$s4, $s0, 4
	st.w	$s5, $sp, 116
	st.w	$s5, $sp, 112
	add.w	$a0, $s3, $s5
	st.w	$a0, $s0, 0
	bge	$s4, $a0, .LBB104_290
# %bb.289:                              #   in Loop: Header=BB104_270 Depth=1
	st.w	$a0, $s0, 4
	move	$s4, $a0
.LBB104_290:                            # %_ZN14ProgramChecker5allocEi.exit.i.i465
                                        #   in Loop: Header=BB104_270 Depth=1
	ori	$a1, $zero, 1
	move	$a0, $s5
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 120
	beqz	$a0, .LBB104_321
# %bb.291:                              #   in Loop: Header=BB104_270 Depth=1
	st.d	$a0, $sp, 128
	beqz	$s2, .LBB104_296
# %bb.292:                              #   in Loop: Header=BB104_270 Depth=1
	beqz	$s1, .LBB104_295
# %bb.293:                              #   in Loop: Header=BB104_270 Depth=1
	slt	$a1, $s5, $s8
	masknez	$a2, $s8, $a1
	maskeqz	$a1, $s5, $a1
	or	$a2, $a1, $a2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s3, $s0, 0
	bge	$s4, $s3, .LBB104_295
# %bb.294:                              #   in Loop: Header=BB104_270 Depth=1
	st.w	$s3, $s0, 4
.LBB104_295:                            # %_ZN14ProgramChecker5allocEi.exit.i470
                                        #   in Loop: Header=BB104_270 Depth=1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s1, $sp, 128
	b	.LBB104_297
.LBB104_296:                            #   in Loop: Header=BB104_270 Depth=1
	move	$s1, $a0
	.p2align	4, , 16
.LBB104_297:                            #   in Loop: Header=BB104_270 Depth=1
	addi.d	$a0, $s8, 1
	st.w	$a0, $sp, 112
	stx.b	$zero, $s1, $s8
	ld.d	$a0, $sp, 128
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	ldx.d	$a1, $a1, $a2
.Ltmp402:                               # EH_LABEL
	addi.d	$a2, $sp, 136
	pcaddu18i	$ra, %call36(_Z10decompressPKclR7Encoder)
	jirl	$ra, $ra, 0
.Ltmp403:                               # EH_LABEL
# %bb.298:                              #   in Loop: Header=BB104_270 Depth=1
	ld.w	$a0, $sp, 112
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	move	$s8, $s7
	bge	$a2, $a0, .LBB104_269
# %bb.299:                              #   in Loop: Header=BB104_270 Depth=1
	st.w	$a0, $s0, 4
	b	.LBB104_269
.LBB104_300:                            # %._crit_edge614
	ld.w	$a0, $sp, 176
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_302
# %bb.301:
	st.w	$a0, $s0, 4
.LBB104_302:                            # %_ZN5ArrayIcLi0EED2Ev.exit358
	ld.d	$a0, $sp, 184
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
.LBB104_303:
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(fclose)
	jirl	$ra, $ra, 0
	ld.w	$a0, $sp, 200
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_305
# %bb.304:
	st.w	$a0, $s0, 4
.LBB104_305:                            # %_ZN5ArrayIcLi0EED2Ev.exit379
	ld.d	$a0, $sp, 208
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $sp, 224
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_307
# %bb.306:
	st.w	$a0, $s0, 4
.LBB104_307:                            # %_ZN5ArrayIcLi0EED2Ev.exit381
	ld.d	$a0, $sp, 232
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	slli.d	$fp, $fp, 3
	sub.w	$a0, $a0, $fp
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_309
# %bb.308:
	st.w	$a0, $s0, 4
.LBB104_309:                            # %_ZN5ArrayIlLi0EED2Ev.exit
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	sub.w	$a0, $a0, $fp
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_311
# %bb.310:
	st.w	$a0, $s0, 4
.LBB104_311:
	move	$a0, $s8
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	beqz	$a0, .LBB104_313
.LBB104_312:
	pcalau12i	$a0, %pc_hi20(.Lstr.4)
	addi.d	$a0, $a0, %pc_lo12(.Lstr.4)
	pcaddu18i	$ra, %call36(puts)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %got_pc_hi20(stdin)
	ld.d	$a0, $a0, %got_pc_lo12(stdin)
	ld.d	$a0, $a0, 0
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
.LBB104_313:
	move	$a0, $zero
	ld.d	$s8, $sp, 248                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 256                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 264                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 272                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 280                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 288                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 296                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 304                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 312                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 320                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 328                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 336
	ret
.LBB104_314:
	ld.d	$a0, $sp, 240
	pcaddu18i	$ra, %call36(perror)
	jirl	$ra, $ra, 0
	st.d	$zero, $sp, 80                  # 8-byte Folded Spill
.LBB104_315:                            # %.invoke831
	ori	$s5, $zero, 1
.Ltmp417:                               # EH_LABEL
	ori	$s6, $zero, 1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp418:                               # EH_LABEL
# %bb.316:                              # %.cont832
.LBB104_317:
	ld.d	$a0, $sp, 240
	pcaddu18i	$ra, %call36(perror)
	jirl	$ra, $ra, 0
.Ltmp414:                               # EH_LABEL
	move	$a0, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp415:                               # EH_LABEL
# %bb.318:                              # %.unreachable558
.LBB104_319:
	ld.d	$a2, $sp, 216
	ld.d	$a1, $sp, 240
	sub.d	$a2, $a0, $a2
	pcalau12i	$a0, %pc_hi20(.L.str.52)
	addi.d	$a0, $a0, %pc_lo12(.L.str.52)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.Ltmp411:                               # EH_LABEL
	move	$a0, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp412:                               # EH_LABEL
# %bb.320:                              # %.unreachable557
.LBB104_321:                            # %.invoke835
.Ltmp405:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp406:                               # EH_LABEL
# %bb.322:                              # %.cont836
.LBB104_323:                            # %.invoke
.Ltmp347:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp348:                               # EH_LABEL
# %bb.324:                              # %.cont
.LBB104_325:
	st.d	$a3, $sp, 56                    # 8-byte Folded Spill
.LBB104_326:                            # %.thread535
	pcalau12i	$a0, %pc_hi20(.L.str.40)
	addi.d	$a0, $a0, %pc_lo12(.L.str.40)
	ori	$a1, $zero, 5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.Ltmp341:                               # EH_LABEL
	move	$a0, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp342:                               # EH_LABEL
# %bb.327:                              # %.thread.unreachable
.LBB104_328:
.Ltmp423:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp424:                               # EH_LABEL
# %bb.329:                              # %.noexc
.LBB104_330:
.Ltmp420:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp421:                               # EH_LABEL
# %bb.331:                              # %.noexc279
.LBB104_332:
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	b	.LBB104_315
.LBB104_333:
	ld.d	$a1, $sp, 240
	pcalau12i	$a0, %pc_hi20(.L.str.49)
	addi.d	$a0, $a0, %pc_lo12(.L.str.49)
	pcalau12i	$a2, %pc_hi20(.L.str.50)
	addi.d	$a2, $a2, %pc_lo12(.L.str.50)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.Ltmp374:                               # EH_LABEL
	move	$a0, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp375:                               # EH_LABEL
# %bb.334:                              # %.unreachable
.LBB104_335:                            # %.invoke833
.Ltmp396:                               # EH_LABEL
	move	$s7, $s8
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp397:                               # EH_LABEL
# %bb.336:                              # %.cont834
.LBB104_337:
.Ltmp364:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	move	$s8, $zero
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp365:                               # EH_LABEL
# %bb.338:                              # %.noexc301
.LBB104_339:
.Ltmp362:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	st.d	$zero, $sp, 96                  # 8-byte Folded Spill
	move	$s8, $s7
	move	$s6, $s5
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp363:                               # EH_LABEL
# %bb.340:                              # %.noexc308
.LBB104_341:
.Ltmp380:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	st.d	$s5, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp381:                               # EH_LABEL
# %bb.342:                              # %.noexc319
.LBB104_343:
.Ltmp393:                               # EH_LABEL
	move	$s7, $s8
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp394:                               # EH_LABEL
# %bb.344:                              # %.noexc435
.LBB104_345:
.Ltmp395:                               # EH_LABEL
	b	.LBB104_362
.LBB104_346:
.Ltmp387:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	st.d	$zero, $sp, 96                  # 8-byte Folded Spill
	ld.d	$s5, $sp, 104                   # 8-byte Folded Reload
	move	$fp, $s5
	move	$s8, $s4
	b	.LBB104_389
.LBB104_347:
.Ltmp384:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	move	$s8, $s7
	ld.d	$fp, $sp, 104                   # 8-byte Folded Reload
	st.d	$s6, $sp, 96                    # 8-byte Folded Spill
	b	.LBB104_389
.LBB104_348:
.Ltmp398:                               # EH_LABEL
	b	.LBB104_362
.LBB104_349:
.Ltmp368:                               # EH_LABEL
	b	.LBB104_368
.LBB104_350:
.Ltmp392:                               # EH_LABEL
	b	.LBB104_365
.LBB104_351:
.Ltmp355:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	ori	$fp, $zero, 1
	ori	$s5, $zero, 1
	b	.LBB104_389
.LBB104_352:                            # %.loopexit.split-lp564
.Ltmp376:                               # EH_LABEL
	b	.LBB104_384
.LBB104_353:
.Ltmp352:                               # EH_LABEL
	b	.LBB104_360
.LBB104_354:
.Ltmp346:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	ori	$fp, $zero, 8
	ori	$s3, $zero, 8
	b	.LBB104_395
.LBB104_355:
.Ltmp422:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	ori	$fp, $zero, 8
	b	.LBB104_398
.LBB104_356:
.Ltmp425:                               # EH_LABEL
	b	.LBB104_358
.LBB104_357:
.Ltmp343:                               # EH_LABEL
.LBB104_358:
	move	$s1, $a1
	move	$s2, $a0
	b	.LBB104_401
.LBB104_359:
.Ltmp349:                               # EH_LABEL
.LBB104_360:
	move	$s1, $a1
	move	$s2, $a0
	ori	$fp, $zero, 8
	ori	$s3, $zero, 8
	b	.LBB104_392
.LBB104_361:
.Ltmp401:                               # EH_LABEL
.LBB104_362:
	move	$s1, $a1
	move	$s2, $a0
	b	.LBB104_378
.LBB104_363:                            # %.loopexit
.Ltmp404:                               # EH_LABEL
	b	.LBB104_375
.LBB104_364:
.Ltmp410:                               # EH_LABEL
.LBB104_365:
	move	$s1, $a1
	move	$s2, $a0
	b	.LBB104_381
.LBB104_366:                            # %.loopexit563
.Ltmp379:                               # EH_LABEL
	b	.LBB104_384
.LBB104_367:
.Ltmp371:                               # EH_LABEL
.LBB104_368:
	move	$s1, $a1
	move	$s2, $a0
	move	$s8, $s7
	move	$fp, $s5
	st.d	$s6, $sp, 96                    # 8-byte Folded Spill
	b	.LBB104_386
.LBB104_369:
.Ltmp358:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	b	.LBB104_373
.LBB104_370:
.Ltmp361:                               # EH_LABEL
	ld.w	$a2, $sp, 176
	ld.w	$a3, $s0, 0
	ld.w	$a4, $s0, 4
	move	$s1, $a1
	move	$s2, $a0
	sub.w	$a0, $a3, $a2
	st.w	$a0, $s0, 0
	bge	$a4, $a0, .LBB104_372
# %bb.371:
	st.w	$a0, $s0, 4
.LBB104_372:                            # %_ZN5ArrayIcLi0EED2Ev.exit
	ld.d	$a0, $sp, 184
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_373:
	ori	$fp, $zero, 1
	ori	$s5, $zero, 1
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	b	.LBB104_386
.LBB104_374:                            # %.loopexit.split-lp
.Ltmp407:                               # EH_LABEL
.LBB104_375:
	move	$s1, $a1
	move	$s2, $a0
	ld.w	$a0, $sp, 112
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_377
# %bb.376:
	st.w	$a0, $s0, 4
.LBB104_377:                            # %_ZN5ArrayIcLi0EED2Ev.exit375
	ld.d	$a0, $sp, 120
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_378:
	ld.w	$a0, $sp, 176
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_380
# %bb.379:
	st.w	$a0, $s0, 4
.LBB104_380:                            # %_ZN5ArrayIcLi0EED2Ev.exit377
	ld.d	$a0, $sp, 184
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	move	$s8, $s7
.LBB104_381:
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	move	$s5, $fp
	b	.LBB104_389
.LBB104_382:
.Ltmp413:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	move	$fp, $s7
	move	$s5, $s7
	b	.LBB104_389
.LBB104_383:
.Ltmp416:                               # EH_LABEL
.LBB104_384:
	move	$s1, $a1
	move	$s2, $a0
	move	$s8, $s7
	move	$fp, $s5
	st.d	$s6, $sp, 96                    # 8-byte Folded Spill
	b	.LBB104_389
.LBB104_385:
.Ltmp419:                               # EH_LABEL
	move	$s1, $a1
	move	$s2, $a0
	move	$fp, $s5
	move	$s5, $s6
.LBB104_386:
	ld.w	$a0, $sp, 136
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_388
# %bb.387:
	st.w	$a0, $s0, 4
.LBB104_388:                            # %_ZN5ArrayIcLi0EED2Ev.exit312
	ld.d	$a0, $sp, 144
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_389:
	ld.w	$a0, $sp, 200
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_391
# %bb.390:
	st.w	$a0, $s0, 4
.LBB104_391:                            # %_ZN5ArrayIcLi0EED2Ev.exit385
	ld.d	$a0, $sp, 208
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	slli.d	$s3, $s5, 3
	slli.d	$fp, $fp, 3
.LBB104_392:
	ld.w	$a0, $sp, 224
	ld.w	$a1, $s0, 0
	ld.w	$a2, $s0, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s0, 0
	bge	$a2, $a0, .LBB104_394
# %bb.393:
	st.w	$a0, $s0, 4
.LBB104_394:                            # %_ZN5ArrayIcLi0EED2Ev.exit387
	ld.d	$a0, $sp, 232
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_395:
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	sub.w	$a0, $a0, $s3
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_397
# %bb.396:
	st.w	$a0, $s0, 4
.LBB104_397:                            # %_ZN5ArrayIlLi0EED2Ev.exit389
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_398:
	ld.w	$a0, $s0, 0
	ld.w	$a1, $s0, 4
	sub.w	$a0, $a0, $fp
	st.w	$a0, $s0, 0
	bge	$a1, $a0, .LBB104_400
# %bb.399:
	st.w	$a0, $s0, 4
.LBB104_400:                            # %_ZN5ArrayIPcLi0EED2Ev.exit391
	move	$a0, $s8
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
.LBB104_401:
	ld.d	$fp, $sp, 56                    # 8-byte Folded Reload
	addi.w	$a0, $s1, 0
	ori	$a1, $zero, 1
	bne	$a0, $a1, .LBB104_405
# %bb.402:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB104_404
# %bb.403:
	pcaddu18i	$ra, %call36(puts)
	jirl	$ra, $ra, 0
.LBB104_404:
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	bnez	$fp, .LBB104_312
	b	.LBB104_313
.LBB104_405:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end104:
	.size	_Z7paqmainiPPc, .Lfunc_end104-_Z7paqmainiPPc
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table104:
.Lexception21:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase0-.Lttbaseref0
.Lttbaseref0:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end21-.Lcst_begin21
.Lcst_begin21:
	.uleb128 .Lfunc_begin21-.Lfunc_begin21  # >> Call Site 1 <<
	.uleb128 .Ltmp344-.Lfunc_begin21        #   Call between .Lfunc_begin21 and .Ltmp344
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp344-.Lfunc_begin21        # >> Call Site 2 <<
	.uleb128 .Ltmp345-.Ltmp344              #   Call between .Ltmp344 and .Ltmp345
	.uleb128 .Ltmp346-.Lfunc_begin21        #     jumps to .Ltmp346
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp345-.Lfunc_begin21        # >> Call Site 3 <<
	.uleb128 .Ltmp339-.Ltmp345              #   Call between .Ltmp345 and .Ltmp339
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp339-.Lfunc_begin21        # >> Call Site 4 <<
	.uleb128 .Ltmp340-.Ltmp339              #   Call between .Ltmp339 and .Ltmp340
	.uleb128 .Ltmp343-.Lfunc_begin21        #     jumps to .Ltmp343
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp340-.Lfunc_begin21        # >> Call Site 5 <<
	.uleb128 .Ltmp350-.Ltmp340              #   Call between .Ltmp340 and .Ltmp350
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp350-.Lfunc_begin21        # >> Call Site 6 <<
	.uleb128 .Ltmp351-.Ltmp350              #   Call between .Ltmp350 and .Ltmp351
	.uleb128 .Ltmp352-.Lfunc_begin21        #     jumps to .Ltmp352
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp353-.Lfunc_begin21        # >> Call Site 7 <<
	.uleb128 .Ltmp354-.Ltmp353              #   Call between .Ltmp353 and .Ltmp354
	.uleb128 .Ltmp355-.Lfunc_begin21        #     jumps to .Ltmp355
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp354-.Lfunc_begin21        # >> Call Site 8 <<
	.uleb128 .Ltmp356-.Ltmp354              #   Call between .Ltmp354 and .Ltmp356
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp356-.Lfunc_begin21        # >> Call Site 9 <<
	.uleb128 .Ltmp357-.Ltmp356              #   Call between .Ltmp356 and .Ltmp357
	.uleb128 .Ltmp358-.Lfunc_begin21        #     jumps to .Ltmp358
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp359-.Lfunc_begin21        # >> Call Site 10 <<
	.uleb128 .Ltmp360-.Ltmp359              #   Call between .Ltmp359 and .Ltmp360
	.uleb128 .Ltmp361-.Lfunc_begin21        #     jumps to .Ltmp361
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp360-.Lfunc_begin21        # >> Call Site 11 <<
	.uleb128 .Ltmp372-.Ltmp360              #   Call between .Ltmp360 and .Ltmp372
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp372-.Lfunc_begin21        # >> Call Site 12 <<
	.uleb128 .Ltmp373-.Ltmp372              #   Call between .Ltmp372 and .Ltmp373
	.uleb128 .Ltmp376-.Lfunc_begin21        #     jumps to .Ltmp376
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp373-.Lfunc_begin21        # >> Call Site 13 <<
	.uleb128 .Ltmp377-.Ltmp373              #   Call between .Ltmp373 and .Ltmp377
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp377-.Lfunc_begin21        # >> Call Site 14 <<
	.uleb128 .Ltmp378-.Ltmp377              #   Call between .Ltmp377 and .Ltmp378
	.uleb128 .Ltmp379-.Lfunc_begin21        #     jumps to .Ltmp379
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp378-.Lfunc_begin21        # >> Call Site 15 <<
	.uleb128 .Ltmp366-.Ltmp378              #   Call between .Ltmp378 and .Ltmp366
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp366-.Lfunc_begin21        # >> Call Site 16 <<
	.uleb128 .Ltmp367-.Ltmp366              #   Call between .Ltmp366 and .Ltmp367
	.uleb128 .Ltmp368-.Lfunc_begin21        #     jumps to .Ltmp368
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp369-.Lfunc_begin21        # >> Call Site 17 <<
	.uleb128 .Ltmp370-.Ltmp369              #   Call between .Ltmp369 and .Ltmp370
	.uleb128 .Ltmp371-.Lfunc_begin21        #     jumps to .Ltmp371
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp370-.Lfunc_begin21        # >> Call Site 18 <<
	.uleb128 .Ltmp382-.Ltmp370              #   Call between .Ltmp370 and .Ltmp382
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp382-.Lfunc_begin21        # >> Call Site 19 <<
	.uleb128 .Ltmp383-.Ltmp382              #   Call between .Ltmp382 and .Ltmp383
	.uleb128 .Ltmp384-.Lfunc_begin21        #     jumps to .Ltmp384
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp383-.Lfunc_begin21        # >> Call Site 20 <<
	.uleb128 .Ltmp385-.Ltmp383              #   Call between .Ltmp383 and .Ltmp385
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp385-.Lfunc_begin21        # >> Call Site 21 <<
	.uleb128 .Ltmp386-.Ltmp385              #   Call between .Ltmp385 and .Ltmp386
	.uleb128 .Ltmp387-.Lfunc_begin21        #     jumps to .Ltmp387
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp386-.Lfunc_begin21        # >> Call Site 22 <<
	.uleb128 .Ltmp388-.Ltmp386              #   Call between .Ltmp386 and .Ltmp388
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp388-.Lfunc_begin21        # >> Call Site 23 <<
	.uleb128 .Ltmp389-.Ltmp388              #   Call between .Ltmp388 and .Ltmp389
	.uleb128 .Ltmp416-.Lfunc_begin21        #     jumps to .Ltmp416
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp389-.Lfunc_begin21        # >> Call Site 24 <<
	.uleb128 .Ltmp408-.Ltmp389              #   Call between .Ltmp389 and .Ltmp408
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp408-.Lfunc_begin21        # >> Call Site 25 <<
	.uleb128 .Ltmp409-.Ltmp408              #   Call between .Ltmp408 and .Ltmp409
	.uleb128 .Ltmp410-.Lfunc_begin21        #     jumps to .Ltmp410
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp409-.Lfunc_begin21        # >> Call Site 26 <<
	.uleb128 .Ltmp390-.Ltmp409              #   Call between .Ltmp409 and .Ltmp390
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp390-.Lfunc_begin21        # >> Call Site 27 <<
	.uleb128 .Ltmp391-.Ltmp390              #   Call between .Ltmp390 and .Ltmp391
	.uleb128 .Ltmp392-.Lfunc_begin21        #     jumps to .Ltmp392
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp391-.Lfunc_begin21        # >> Call Site 28 <<
	.uleb128 .Ltmp399-.Ltmp391              #   Call between .Ltmp391 and .Ltmp399
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp399-.Lfunc_begin21        # >> Call Site 29 <<
	.uleb128 .Ltmp400-.Ltmp399              #   Call between .Ltmp399 and .Ltmp400
	.uleb128 .Ltmp401-.Lfunc_begin21        #     jumps to .Ltmp401
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp400-.Lfunc_begin21        # >> Call Site 30 <<
	.uleb128 .Ltmp402-.Ltmp400              #   Call between .Ltmp400 and .Ltmp402
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp402-.Lfunc_begin21        # >> Call Site 31 <<
	.uleb128 .Ltmp403-.Ltmp402              #   Call between .Ltmp402 and .Ltmp403
	.uleb128 .Ltmp404-.Lfunc_begin21        #     jumps to .Ltmp404
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp403-.Lfunc_begin21        # >> Call Site 32 <<
	.uleb128 .Ltmp417-.Ltmp403              #   Call between .Ltmp403 and .Ltmp417
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp417-.Lfunc_begin21        # >> Call Site 33 <<
	.uleb128 .Ltmp418-.Ltmp417              #   Call between .Ltmp417 and .Ltmp418
	.uleb128 .Ltmp419-.Lfunc_begin21        #     jumps to .Ltmp419
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp418-.Lfunc_begin21        # >> Call Site 34 <<
	.uleb128 .Ltmp414-.Ltmp418              #   Call between .Ltmp418 and .Ltmp414
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp414-.Lfunc_begin21        # >> Call Site 35 <<
	.uleb128 .Ltmp415-.Ltmp414              #   Call between .Ltmp414 and .Ltmp415
	.uleb128 .Ltmp416-.Lfunc_begin21        #     jumps to .Ltmp416
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp415-.Lfunc_begin21        # >> Call Site 36 <<
	.uleb128 .Ltmp411-.Ltmp415              #   Call between .Ltmp415 and .Ltmp411
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp411-.Lfunc_begin21        # >> Call Site 37 <<
	.uleb128 .Ltmp412-.Ltmp411              #   Call between .Ltmp411 and .Ltmp412
	.uleb128 .Ltmp413-.Lfunc_begin21        #     jumps to .Ltmp413
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp405-.Lfunc_begin21        # >> Call Site 38 <<
	.uleb128 .Ltmp406-.Ltmp405              #   Call between .Ltmp405 and .Ltmp406
	.uleb128 .Ltmp407-.Lfunc_begin21        #     jumps to .Ltmp407
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp347-.Lfunc_begin21        # >> Call Site 39 <<
	.uleb128 .Ltmp348-.Ltmp347              #   Call between .Ltmp347 and .Ltmp348
	.uleb128 .Ltmp349-.Lfunc_begin21        #     jumps to .Ltmp349
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp348-.Lfunc_begin21        # >> Call Site 40 <<
	.uleb128 .Ltmp341-.Ltmp348              #   Call between .Ltmp348 and .Ltmp341
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp341-.Lfunc_begin21        # >> Call Site 41 <<
	.uleb128 .Ltmp342-.Ltmp341              #   Call between .Ltmp341 and .Ltmp342
	.uleb128 .Ltmp343-.Lfunc_begin21        #     jumps to .Ltmp343
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp423-.Lfunc_begin21        # >> Call Site 42 <<
	.uleb128 .Ltmp424-.Ltmp423              #   Call between .Ltmp423 and .Ltmp424
	.uleb128 .Ltmp425-.Lfunc_begin21        #     jumps to .Ltmp425
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp420-.Lfunc_begin21        # >> Call Site 43 <<
	.uleb128 .Ltmp421-.Ltmp420              #   Call between .Ltmp420 and .Ltmp421
	.uleb128 .Ltmp422-.Lfunc_begin21        #     jumps to .Ltmp422
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp421-.Lfunc_begin21        # >> Call Site 44 <<
	.uleb128 .Ltmp374-.Ltmp421              #   Call between .Ltmp421 and .Ltmp374
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp374-.Lfunc_begin21        # >> Call Site 45 <<
	.uleb128 .Ltmp375-.Ltmp374              #   Call between .Ltmp374 and .Ltmp375
	.uleb128 .Ltmp376-.Lfunc_begin21        #     jumps to .Ltmp376
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp396-.Lfunc_begin21        # >> Call Site 46 <<
	.uleb128 .Ltmp397-.Ltmp396              #   Call between .Ltmp396 and .Ltmp397
	.uleb128 .Ltmp398-.Lfunc_begin21        #     jumps to .Ltmp398
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp364-.Lfunc_begin21        # >> Call Site 47 <<
	.uleb128 .Ltmp363-.Ltmp364              #   Call between .Ltmp364 and .Ltmp363
	.uleb128 .Ltmp419-.Lfunc_begin21        #     jumps to .Ltmp419
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp380-.Lfunc_begin21        # >> Call Site 48 <<
	.uleb128 .Ltmp381-.Ltmp380              #   Call between .Ltmp380 and .Ltmp381
	.uleb128 .Ltmp384-.Lfunc_begin21        #     jumps to .Ltmp384
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp393-.Lfunc_begin21        # >> Call Site 49 <<
	.uleb128 .Ltmp394-.Ltmp393              #   Call between .Ltmp393 and .Ltmp394
	.uleb128 .Ltmp395-.Lfunc_begin21        #     jumps to .Ltmp395
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp394-.Lfunc_begin21        # >> Call Site 50 <<
	.uleb128 .Lfunc_end104-.Ltmp394         #   Call between .Ltmp394 and .Lfunc_end104
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end21:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp426:                               # TypeInfo 1
	.word	.L_ZTIPKc.DW.stub-.Ltmp426
.Lttbase0:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	main                            # -- Begin function main
	.p2align	5
	.type	main,@function
main:                                   # @main
.Lfunc_begin22:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception22
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$s2, $a1
	move	$s1, $a0
	ori	$a0, $zero, 1
	st.w	$a0, $sp, 60
	pcaddu18i	$ra, %call36(fork)
	jirl	$ra, $ra, 0
	addi.w	$a1, $zero, -1
	beq	$a0, $a1, .LBB105_59
# %bb.1:
	beqz	$a0, .LBB105_60
# %bb.2:
	addi.d	$a0, $sp, 60
	pcaddu18i	$ra, %call36(wait)
	jirl	$ra, $ra, 0
	ld.w	$a0, $sp, 60
	bnez	$a0, .LBB105_56
# %bb.3:
	ld.d	$s0, $s2, 0
	st.d	$s0, $sp, 32
	pcalau12i	$a0, %pc_hi20(.L.str.58)
	addi.d	$a0, $a0, %pc_lo12(.L.str.58)
	pcaddu18i	$ra, %call36(strdup)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	st.d	$a0, $sp, 40
	addi.d	$a0, $s2, 8
	ori	$a2, $zero, 45
	.p2align	4, , 16
.LBB105_4:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $a0, 0
	addi.w	$s1, $s1, -1
	beqz	$s1, .LBB105_6
# %bb.5:                                #   in Loop: Header=BB105_4 Depth=1
	ld.bu	$a3, $a1, 0
	addi.d	$a0, $a0, 8
	beq	$a3, $a2, .LBB105_4
.LBB105_6:                              # %.critedge
	addi.d	$a0, $sp, 8
	pcaddu18i	$ra, %call36(_ZN6StringC2EPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $sp, 8
	ld.w	$a1, $sp, 12
	ld.d	$s2, $sp, 24
	slt	$a2, $zero, $a0
	sub.w	$s1, $a0, $a2
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$s4, $a0, %pc_lo12(programChecker)
	bne	$s1, $a1, .LBB105_16
# %bb.7:
	slli.w	$a0, $s1, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a0, $a0, $a1
	ld.d	$s3, $sp, 16
	ld.w	$s5, $s4, 0
	ld.w	$s6, $s4, 4
	st.w	$a0, $sp, 12
	st.w	$a0, $sp, 8
	add.w	$a1, $s5, $a0
	st.w	$a1, $s4, 0
	bge	$s6, $a1, .LBB105_9
# %bb.8:
	st.w	$a1, $s4, 4
	move	$s6, $a1
.LBB105_9:                              # %_ZN14ProgramChecker5allocEi.exit.i.i35
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16
	beqz	$a0, .LBB105_57
# %bb.10:
	st.d	$a0, $sp, 24
	beqz	$s3, .LBB105_15
# %bb.11:
	beqz	$s2, .LBB105_14
# %bb.12:
	move	$a1, $s2
	move	$a2, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s5, $s4, 0
	bge	$s6, $s5, .LBB105_14
# %bb.13:
	st.w	$s5, $s4, 4
.LBB105_14:                             # %_ZN14ProgramChecker5allocEi.exit.i39
	move	$a0, $s3
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 24
	b	.LBB105_16
.LBB105_15:
	move	$s2, $a0
.LBB105_16:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i
	addi.d	$a0, $s1, 1
	st.w	$a0, $sp, 8
	ori	$a0, $zero, 46
	stx.b	$a0, $s2, $s1
	ld.w	$s1, $sp, 8
	ld.w	$a0, $sp, 12
	ld.d	$s2, $sp, 24
	bne	$s1, $a0, .LBB105_26
# %bb.17:
	slli.w	$a0, $s1, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$a0, $a0, $a1
	ld.d	$s3, $sp, 16
	ld.w	$s5, $s4, 0
	ld.w	$s6, $s4, 4
	st.w	$a0, $sp, 12
	st.w	$a0, $sp, 8
	add.w	$a1, $s5, $a0
	st.w	$a1, $s4, 0
	bge	$s6, $a1, .LBB105_19
# %bb.18:
	st.w	$a1, $s4, 4
	move	$s6, $a1
.LBB105_19:                             # %_ZN14ProgramChecker5allocEi.exit.i.i
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16
	beqz	$a0, .LBB105_57
# %bb.20:
	st.d	$a0, $sp, 24
	beqz	$s3, .LBB105_25
# %bb.21:
	beqz	$s2, .LBB105_24
# %bb.22:
	move	$a1, $s2
	move	$a2, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s5, $s4, 0
	bge	$s6, $s5, .LBB105_24
# %bb.23:
	st.w	$s5, $s4, 4
.LBB105_24:                             # %_ZN14ProgramChecker5allocEi.exit.i
	move	$a0, $s3
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s2, $sp, 24
	b	.LBB105_26
.LBB105_25:
	move	$s2, $a0
.LBB105_26:
	addi.d	$a0, $s1, 1
	st.w	$a0, $sp, 8
	stx.b	$zero, $s2, $s1
	ori	$a1, $zero, 47
	move	$a0, $s0
	pcaddu18i	$ra, %call36(strrchr)
	jirl	$ra, $ra, 0
	sltui	$a1, $a0, 1
	ld.w	$s3, $sp, 8
	addi.d	$a0, $a0, 1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s0, $a1
	or	$a0, $a1, $a0
	blez	$s3, .LBB105_28
# %bb.27:
	addi.w	$s3, $s3, -1
	st.w	$s3, $sp, 8
.LBB105_28:                             # %_ZN5ArrayIcLi0EE8pop_backEv.exit.i21
	ld.bu	$a1, $a0, 0
	beqz	$a1, .LBB105_42
# %bb.29:                               # %.lr.ph.i.preheader
	addi.d	$s3, $a0, 1
	ori	$s5, $zero, 1
	b	.LBB105_33
	.p2align	4, , 16
.LBB105_30:                             # %_ZN14ProgramChecker5allocEi.exit.i55
                                        #   in Loop: Header=BB105_33 Depth=1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
.LBB105_31:                             # %.noexc28
                                        #   in Loop: Header=BB105_33 Depth=1
	st.w	$s0, $sp, 8
	ld.bu	$a1, $s3, -1
	move	$s1, $a0
.LBB105_32:                             # %_ZN5ArrayIcLi0EE9push_backERKc.exit.i23
                                        #   in Loop: Header=BB105_33 Depth=1
	addi.d	$a0, $s0, 1
	st.w	$a0, $sp, 8
	stx.b	$a1, $s1, $s0
	ld.bu	$a1, $s3, 0
	addi.d	$s3, $s3, 1
	beqz	$a1, .LBB105_41
.LBB105_33:                             # %.lr.ph.i
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$s0, $sp, 8
	ld.w	$a0, $sp, 12
	ld.d	$s1, $sp, 24
	bne	$s0, $a0, .LBB105_32
# %bb.34:                               #   in Loop: Header=BB105_33 Depth=1
	slli.w	$a0, $s0, 1
	slt	$a1, $s5, $a0
	masknez	$a2, $s5, $a1
	maskeqz	$a0, $a0, $a1
	or	$a0, $a0, $a2
	ld.d	$s2, $sp, 16
	ld.w	$s6, $s4, 0
	ld.w	$s7, $s4, 4
	st.w	$a0, $sp, 12
	st.w	$a0, $sp, 8
	add.w	$a1, $s6, $a0
	st.w	$a1, $s4, 0
	bge	$s7, $a1, .LBB105_36
# %bb.35:                               #   in Loop: Header=BB105_33 Depth=1
	st.w	$a1, $s4, 4
	move	$s7, $a1
.LBB105_36:                             # %_ZN14ProgramChecker5allocEi.exit.i.i51
                                        #   in Loop: Header=BB105_33 Depth=1
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16
	beqz	$a0, .LBB105_57
# %bb.37:                               #   in Loop: Header=BB105_33 Depth=1
	st.d	$a0, $sp, 24
	beqz	$s2, .LBB105_31
# %bb.38:                               #   in Loop: Header=BB105_33 Depth=1
	beqz	$s1, .LBB105_30
# %bb.39:                               #   in Loop: Header=BB105_33 Depth=1
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s6, $s4, 0
	bge	$s7, $s6, .LBB105_30
# %bb.40:                               #   in Loop: Header=BB105_33 Depth=1
	st.w	$s6, $s4, 4
	b	.LBB105_30
.LBB105_41:                             # %._crit_edge.loopexit.i25
	ld.w	$s3, $sp, 8
.LBB105_42:                             # %._crit_edge.i
	ld.w	$a0, $sp, 12
	ld.d	$s0, $sp, 24
	bne	$s3, $a0, .LBB105_52
# %bb.43:
	slli.w	$a0, $s3, 1
	ori	$a1, $zero, 1
	slt	$a2, $a1, $a0
	masknez	$a1, $a1, $a2
	maskeqz	$a0, $a0, $a2
	or	$s2, $a0, $a1
	ld.d	$s1, $sp, 16
	ld.w	$s5, $s4, 0
	ld.w	$s6, $s4, 4
	st.w	$s2, $sp, 12
	st.w	$s2, $sp, 8
	add.w	$a0, $s5, $s2
	st.w	$a0, $s4, 0
	bge	$s6, $a0, .LBB105_45
# %bb.44:
	st.w	$a0, $s4, 4
	move	$s6, $a0
.LBB105_45:                             # %_ZN14ProgramChecker5allocEi.exit.i.i43
	ori	$a1, $zero, 1
	move	$a0, $s2
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $sp, 16
	beqz	$a0, .LBB105_57
# %bb.46:
	st.d	$a0, $sp, 24
	beqz	$s1, .LBB105_51
# %bb.47:
	beqz	$s0, .LBB105_50
# %bb.48:
	slt	$a1, $s2, $s3
	masknez	$a2, $s3, $a1
	maskeqz	$a1, $s2, $a1
	or	$a2, $a1, $a2
	move	$a1, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.w	$s5, $s4, 0
	bge	$s6, $s5, .LBB105_50
# %bb.49:
	st.w	$s5, $s4, 4
.LBB105_50:                             # %_ZN14ProgramChecker5allocEi.exit.i47
	move	$a0, $s1
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.d	$s0, $sp, 24
	b	.LBB105_52
.LBB105_51:
	move	$s0, $a0
.LBB105_52:
	addi.d	$a0, $s3, 1
	st.w	$a0, $sp, 8
	stx.b	$zero, $s0, $s3
	ld.d	$a0, $sp, 24
	pcaddu18i	$ra, %call36(strdup)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	st.d	$a0, $sp, 48
.Ltmp427:                               # EH_LABEL
	ori	$a0, $zero, 3
	addi.d	$a1, $sp, 32
	pcaddu18i	$ra, %call36(_Z7paqmainiPPc)
	jirl	$ra, $ra, 0
.Ltmp428:                               # EH_LABEL
# %bb.53:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(unlink)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	ld.w	$a0, $sp, 8
	ld.w	$a1, $s4, 0
	ld.w	$a2, $s4, 4
	sub.w	$a0, $a1, $a0
	st.w	$a0, $s4, 0
	bge	$a2, $a0, .LBB105_55
# %bb.54:
	st.w	$a0, $s4, 4
.LBB105_55:                             # %_ZN5ArrayIcLi0EED2Ev.exit31
	ld.d	$a0, $sp, 16
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	move	$a0, $zero
.LBB105_56:
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB105_57:                             # %.invoke
.Ltmp429:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Ltmp430:                               # EH_LABEL
# %bb.58:                               # %.cont
.LBB105_59:
	pcalau12i	$a0, %pc_hi20(.L.str.57)
	addi.d	$a0, $a0, %pc_lo12(.L.str.57)
	pcaddu18i	$ra, %call36(perror)
	jirl	$ra, $ra, 0
	ori	$a0, $zero, 1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB105_60:
	move	$a0, $s1
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_Z7paqmainiPPc)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.LBB105_61:
.Ltmp431:                               # EH_LABEL
	ld.w	$a1, $sp, 8
	ld.w	$a2, $s4, 0
	ld.w	$a3, $s4, 4
	move	$fp, $a0
	sub.w	$a0, $a2, $a1
	st.w	$a0, $s4, 0
	bge	$a3, $a0, .LBB105_63
# %bb.62:
	st.w	$a0, $s4, 4
.LBB105_63:                             # %_ZN5ArrayIcLi0EED2Ev.exit
	ld.d	$a0, $sp, 16
	pcaddu18i	$ra, %call36(free)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end105:
	.size	main, .Lfunc_end105-main
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table105:
.Lexception22:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end22-.Lcst_begin22
.Lcst_begin22:
	.uleb128 .Lfunc_begin22-.Lfunc_begin22  # >> Call Site 1 <<
	.uleb128 .Ltmp427-.Lfunc_begin22        #   Call between .Lfunc_begin22 and .Ltmp427
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp427-.Lfunc_begin22        # >> Call Site 2 <<
	.uleb128 .Ltmp428-.Ltmp427              #   Call between .Ltmp427 and .Ltmp428
	.uleb128 .Ltmp431-.Lfunc_begin22        #     jumps to .Ltmp431
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp428-.Lfunc_begin22        # >> Call Site 3 <<
	.uleb128 .Ltmp429-.Ltmp428              #   Call between .Ltmp428 and .Ltmp429
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp429-.Lfunc_begin22        # >> Call Site 4 <<
	.uleb128 .Ltmp430-.Ltmp429              #   Call between .Ltmp429 and .Ltmp430
	.uleb128 .Ltmp431-.Lfunc_begin22        #     jumps to .Ltmp431
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp430-.Lfunc_begin22        # >> Call Site 5 <<
	.uleb128 .Lfunc_end105-.Ltmp430         #   Call between .Ltmp430 and .Lfunc_end105
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end22:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN2BHILi4EEixEj,"axG",@progbits,_ZN2BHILi4EEixEj,comdat
	.weak	_ZN2BHILi4EEixEj                # -- Begin function _ZN2BHILi4EEixEj
	.p2align	5
	.type	_ZN2BHILi4EEixEj,@function
_ZN2BHILi4EEixEj:                       # @_ZN2BHILi4EEixEj
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	ld.w	$a3, $a0, 24
	move	$a2, $a1
	ld.d	$a4, $a0, 16
	slli.d	$a1, $a1, 3
	and	$a1, $a3, $a1
	slli.w	$fp, $a1, 2
	add.d	$a1, $a4, $fp
	ld.bu	$a5, $a1, 2
	bstrpick.d	$a3, $a2, 31, 16
	bstrpick.d	$a2, $a2, 15, 0
	xor	$a3, $a3, $a2
	beqz	$a5, .LBB106_17
# %bb.1:
	ld.hu	$a2, $a1, 0
	addi.w	$a5, $a3, 0
	beq	$a5, $a2, .LBB106_28
# %bb.2:
	add.d	$a6, $a4, $fp
	ld.bu	$a2, $a6, 6
	addi.d	$a4, $a6, 4
	pcalau12i	$s0, %pc_hi20(_ZZN2BHILi4EEixEjE3tmp)
	beqz	$a2, .LBB106_18
# %bb.3:
	ld.hu	$a7, $a4, 0
	ori	$a2, $zero, 4
	beq	$a5, $a7, .LBB106_26
# %bb.4:
	ld.bu	$a2, $a6, 10
	addi.d	$a4, $a6, 8
	beqz	$a2, .LBB106_19
# %bb.5:
	ld.hu	$a7, $a4, 0
	ori	$a2, $zero, 8
	beq	$a5, $a7, .LBB106_26
# %bb.6:
	ld.bu	$a2, $a6, 14
	addi.d	$a4, $a6, 12
	beqz	$a2, .LBB106_20
# %bb.7:
	ld.hu	$a7, $a4, 0
	ori	$a2, $zero, 12
	beq	$a5, $a7, .LBB106_26
# %bb.8:
	ld.bu	$a2, $a6, 18
	addi.d	$a4, $a6, 16
	beqz	$a2, .LBB106_21
# %bb.9:
	ld.hu	$a7, $a4, 0
	ori	$a2, $zero, 16
	beq	$a5, $a7, .LBB106_26
# %bb.10:
	ld.bu	$a2, $a6, 22
	addi.d	$a4, $a6, 20
	beqz	$a2, .LBB106_22
# %bb.11:
	ld.hu	$a7, $a4, 0
	ori	$a2, $zero, 20
	beq	$a5, $a7, .LBB106_26
# %bb.12:
	ld.bu	$a2, $a6, 26
	addi.d	$a4, $a6, 24
	beqz	$a2, .LBB106_23
# %bb.13:
	ld.hu	$a7, $a4, 0
	ori	$a2, $zero, 24
	beq	$a5, $a7, .LBB106_26
# %bb.14:
	ld.bu	$a2, $a6, 30
	addi.d	$a4, $a6, 28
	beqz	$a2, .LBB106_24
# %bb.15:
	ld.hu	$a6, $a4, 0
	ori	$a2, $zero, 28
	beq	$a5, $a6, .LBB106_26
# %bb.16:
	move	$s1, $a0
	st.w	$zero, $s0, %pc_lo12(_ZZN2BHILi4EEixEjE3tmp)
	st.h	$a3, $s0, %pc_lo12(_ZZN2BHILi4EEixEjE3tmp)
	ld.bu	$a0, $a1, 30
	ld.bu	$a2, $a1, 26
	sltu	$a0, $a2, $a0
	ori	$a2, $zero, 28
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 24
	maskeqz	$a0, $a3, $a0
	or	$a2, $a0, $a2
	b	.LBB106_27
.LBB106_17:                             # %.loopexit
	st.h	$a3, $a1, 0
	b	.LBB106_28
.LBB106_18:
	ori	$a2, $zero, 4
	b	.LBB106_25
.LBB106_19:
	ori	$a2, $zero, 8
	b	.LBB106_25
.LBB106_20:
	ori	$a2, $zero, 12
	b	.LBB106_25
.LBB106_21:
	ori	$a2, $zero, 16
	b	.LBB106_25
.LBB106_22:
	ori	$a2, $zero, 20
	b	.LBB106_25
.LBB106_23:
	ori	$a2, $zero, 24
	b	.LBB106_25
.LBB106_24:
	ori	$a2, $zero, 28
.LBB106_25:                             # %.loopexit.thread
	st.h	$a3, $a4, 0
.LBB106_26:                             # %.loopexit.thread
	move	$s1, $a0
	ld.w	$a0, $a4, 0
	st.w	$a0, $s0, %pc_lo12(_ZZN2BHILi4EEixEjE3tmp)
.LBB106_27:
	addi.d	$a0, $a1, 4
	pcaddu18i	$ra, %call36(memmove)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s1, 16
	ld.w	$a1, $s0, %pc_lo12(_ZZN2BHILi4EEixEjE3tmp)
	stx.w	$a1, $a0, $fp
	ld.d	$a0, $s1, 16
	add.d	$a1, $a0, $fp
.LBB106_28:                             # %.loopexit.thread42
	addi.d	$a0, $a1, 1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end106:
	.size	_ZN2BHILi4EEixEj, .Lfunc_end106-_ZN2BHILi4EEixEj
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN7Encoder4codeEi,"axG",@progbits,_ZN7Encoder4codeEi,comdat
	.weak	_ZN7Encoder4codeEi              # -- Begin function _ZN7Encoder4codeEi
	.p2align	5
	.type	_ZN7Encoder4codeEi,@function
_ZN7Encoder4codeEi:                     # @_ZN7Encoder4codeEi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	move	$fp, $a0
	ld.w	$a0, $a0, 0
	ld.w	$a2, $fp, 16
	ld.w	$a3, $fp, 20
	ori	$a4, $zero, 2048
	slt	$a4, $a0, $a4
	add.d	$a0, $a0, $a4
	sub.d	$a3, $a3, $a2
	bstrpick.d	$a4, $a3, 31, 12
	mul.d	$a4, $a4, $a0
	add.d	$a2, $a4, $a2
	andi	$a3, $a3, 4095
	mul.d	$a0, $a3, $a0
	ld.w	$a3, $fp, 4
	bstrpick.d	$a0, $a0, 31, 12
	ld.w	$a4, $fp, 24
	add.w	$a0, $a2, $a0
	addi.d	$a2, $a3, -1
	sltui	$a2, $a2, 1
	sltu	$a3, $a0, $a4
	xori	$a3, $a3, 1
	maskeqz	$a3, $a3, $a2
	masknez	$a1, $a1, $a2
	or	$a1, $a3, $a1
	pcalau12i	$s0, %pc_hi20(y)
	st.w	$a1, $s0, %pc_lo12(y)
	beqz	$a1, .LBB107_2
# %bb.1:
	st.w	$a0, $fp, 20
	b	.LBB107_3
.LBB107_2:
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 16
.LBB107_3:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN9Predictor6updateEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	xor	$a0, $a2, $a1
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB107_10
# %bb.4:                                # %.lr.ph
	ori	$s1, $zero, 1
	b	.LBB107_6
	.p2align	4, , 16
.LBB107_5:                              #   in Loop: Header=BB107_6 Depth=1
	xor	$a0, $a2, $a1
	bstrpick.d	$a0, $a0, 31, 24
	bnez	$a0, .LBB107_10
.LBB107_6:                              # =>This Inner Loop Header: Depth=1
	ld.w	$a0, $fp, 4
	bnez	$a0, .LBB107_8
# %bb.7:                                #   in Loop: Header=BB107_6 Depth=1
	ld.d	$a1, $fp, 8
	bstrpick.d	$a0, $a2, 31, 24
	pcaddu18i	$ra, %call36(putc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	ld.w	$a0, $fp, 4
.LBB107_8:                              #   in Loop: Header=BB107_6 Depth=1
	slli.d	$a1, $a1, 8
	st.w	$a1, $fp, 16
	slli.d	$a2, $a2, 8
	addi.d	$a2, $a2, 255
	st.w	$a2, $fp, 20
	bne	$a0, $s1, .LBB107_5
# %bb.9:                                #   in Loop: Header=BB107_6 Depth=1
	ld.w	$s2, $fp, 24
	ld.d	$a0, $fp, 8
	pcaddu18i	$ra, %call36(getc)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 16
	ld.w	$a2, $fp, 20
	bstrins.d	$a0, $s2, 63, 8
	st.w	$a0, $fp, 24
	b	.LBB107_5
.LBB107_10:                             # %._crit_edge
	ld.w	$a0, $s0, %pc_lo12(y)
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end107:
	.size	_ZN7Encoder4codeEi, .Lfunc_end107-_ZN7Encoder4codeEi
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN5ArrayIhLi0EE6resizeEi,"axG",@progbits,_ZN5ArrayIhLi0EE6resizeEi,comdat
	.weak	_ZN5ArrayIhLi0EE6resizeEi       # -- Begin function _ZN5ArrayIhLi0EE6resizeEi
	.p2align	5
	.type	_ZN5ArrayIhLi0EE6resizeEi,@function
_ZN5ArrayIhLi0EE6resizeEi:              # @_ZN5ArrayIhLi0EE6resizeEi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	ld.w	$a2, $a0, 4
	move	$s0, $a1
	bge	$a2, $a1, .LBB108_6
# %bb.1:
	ld.d	$fp, $a0, 8
	ld.d	$s1, $a0, 16
	ld.w	$s3, $a0, 0
	addi.d	$s4, $a0, 8
	st.w	$s0, $a0, 4
	st.w	$s0, $a0, 0
	pcalau12i	$a1, %pc_hi20(programChecker)
	addi.d	$s2, $a1, %pc_lo12(programChecker)
	blez	$s0, .LBB108_8
# %bb.2:
	move	$s5, $a0
	ld.w	$a0, $s2, 0
	ld.w	$a1, $s2, 4
	add.w	$a0, $a0, $s0
	st.w	$a0, $s2, 0
	bge	$a1, $a0, .LBB108_4
# %bb.3:
	st.w	$a0, $s2, 4
.LBB108_4:                              # %_ZN14ProgramChecker5allocEi.exit.i
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, 0
	beqz	$a0, .LBB108_13
# %bb.5:
	st.d	$a0, $s5, 16
	bnez	$fp, .LBB108_9
	b	.LBB108_7
.LBB108_6:
	st.w	$s0, $a0, 0
.LBB108_7:
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB108_8:
	move	$a0, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $s4, 0
	beqz	$fp, .LBB108_7
.LBB108_9:
	beqz	$s1, .LBB108_12
# %bb.10:
	slt	$a1, $s0, $s3
	masknez	$a2, $s3, $a1
	maskeqz	$a1, $s0, $a1
	or	$a2, $a1, $a2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s2, 0
	ld.w	$a1, $s2, 4
	sub.w	$a0, $a0, $s0
	st.w	$a0, $s2, 0
	bge	$a1, $a0, .LBB108_12
# %bb.11:
	st.w	$a0, $s2, 4
.LBB108_12:                             # %_ZN14ProgramChecker5allocEi.exit
	move	$a0, $fp
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	pcaddu18i	$t8, %call36(free)
	jr	$t8
.LBB108_13:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end108:
	.size	_ZN5ArrayIhLi0EE6resizeEi, .Lfunc_end108-_ZN5ArrayIhLi0EE6resizeEi
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	5                               # -- Begin function _GLOBAL__sub_I_paq8p.cpp
	.type	_GLOBAL__sub_I_paq8p.cpp,@function
_GLOBAL__sub_I_paq8p.cpp:               # @_GLOBAL__sub_I_paq8p.cpp
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	pcalau12i	$a0, %pc_hi20(programChecker)
	addi.d	$s1, $a0, %pc_lo12(programChecker)
	st.d	$zero, $s1, 0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	st.d	$a0, $s1, 8
	pcalau12i	$a0, %pc_hi20(rnd)
	addi.d	$fp, $a0, %pc_lo12(rnd)
	ori	$a0, $zero, 64
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	lu32i.d	$a0, 64
	st.d	$a0, $fp, 0
	addi.w	$a0, $a1, 256
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB109_2
# %bb.1:
	st.w	$a0, $s1, 4
.LBB109_2:                              # %_ZN14ProgramChecker5allocEi.exit.i.i.i.i
	ori	$a0, $zero, 256
	ori	$a1, $zero, 1
	ori	$s0, $zero, 256
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB109_32
# %bb.3:                                # %_ZN5ArrayIjLi0EEC2Ei.exit.i.i
	lu12i.w	$a1, 30140
	ori	$a3, $a1, 3349
	st.d	$a0, $fp, 16
	move	$a1, $a3
	lu32i.d	$a1, -104271
	lu52i.d	$a1, $a1, 941
	st.d	$a1, $a0, 0
	ori	$a1, $zero, 8
	lu12i.w	$a2, 241126
	ori	$a4, $a2, 2225
	ori	$a2, $zero, 23
	.p2align	4, , 16
.LBB109_4:                              # =>This Inner Loop Header: Depth=1
	mul.d	$a3, $a3, $a2
	move	$a5, $a4
	alsl.d	$a4, $a4, $a4, 2
	alsl.d	$a4, $a4, $a5, 1
	bstrpick.d	$a3, $a3, 31, 4
	add.w	$a4, $a4, $a3
	stx.w	$a4, $a0, $a1
	addi.d	$a1, $a1, 4
	move	$a3, $a5
	bne	$a1, $s0, .LBB109_4
# %bb.5:                                # %__cxx_global_var_init.1.exit
	st.w	$zero, $fp, 24
	pcalau12i	$a0, %pc_hi20(_ZN6RandomD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN6RandomD2Ev)
	pcalau12i	$a1, %pc_hi20(__dso_handle)
	addi.d	$s0, $a1, %pc_lo12(__dso_handle)
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(buf)
	addi.d	$a1, $a0, %pc_lo12(buf)
	st.d	$zero, $a1, 0
	vrepli.b	$vr0, 0
	vst	$vr0, $a1, 8
	pcalau12i	$a0, %pc_hi20(_ZN3BufD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN3BufD2Ev)
	move	$a2, $s0
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(ilog)
	addi.d	$fp, $a0, %pc_lo12(ilog)
	lu12i.w	$a0, 16
	ld.w	$a1, $s1, 0
	lu32i.d	$a0, 65536
	ld.w	$a2, $s1, 4
	st.d	$a0, $fp, 0
	addu16i.d	$a1, $a1, 1
	addi.w	$a0, $a1, 0
	st.w	$a1, $s1, 0
	bge	$a2, $a0, .LBB109_7
# %bb.6:
	st.w	$a0, $s1, 4
.LBB109_7:                              # %_ZN14ProgramChecker5allocEi.exit.i.i.i.i1
	lu12i.w	$a0, 16
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 8
	beqz	$a0, .LBB109_32
# %bb.8:                                # %_ZN5ArrayIhLi0EEC2Ei.exit.i.i
	move	$a1, $zero
	st.d	$a0, $fp, 16
	lu12i.w	$a0, 3456
	ori	$a2, $zero, 3
	lu12i.w	$a3, 189096
	ori	$a3, $a3, 3786
	lu12i.w	$a4, 15
	ori	$a4, $a4, 4094
	.p2align	4, , 16
.LBB109_9:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $fp, 16
	div.wu	$a6, $a3, $a2
	add.d	$a0, $a6, $a0
	srli.d	$a6, $a0, 24
	add.d	$a5, $a5, $a1
	st.b	$a6, $a5, 2
	addi.d	$a1, $a1, 1
	addi.w	$a2, $a2, 2
	bne	$a1, $a4, .LBB109_9
# %bb.10:                               # %__cxx_global_var_init.3.exit
	pcalau12i	$a0, %pc_hi20(_ZN4IlogD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN4IlogD2Ev)
	pcalau12i	$a1, %pc_hi20(ilog)
	addi.d	$a1, $a1, %pc_lo12(ilog)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	pcaddu18i	$ra, %call36(__cxa_atexit)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(stretch)
	addi.d	$s0, $a0, %pc_lo12(stretch)
	lu12i.w	$fp, 1
	move	$a0, $fp
	lu32i.d	$a0, 4096
	ld.w	$a1, $s1, 0
	ld.w	$a2, $s1, 4
	st.d	$a0, $s0, 0
	lu12i.w	$a0, 2
	add.w	$a0, $a1, $a0
	st.w	$a0, $s1, 0
	bge	$a2, $a0, .LBB109_12
# %bb.11:
	st.w	$a0, $s1, 4
.LBB109_12:                             # %_ZN14ProgramChecker5allocEi.exit.i.i.i.i6
	lu12i.w	$a0, 2
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(calloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s0, 8
	beqz	$a0, .LBB109_32
# %bb.13:                               # %_ZN5ArrayIsLi0EEC2Ei.exit.i.i
	st.d	$a0, $s0, 16
	addi.d	$a1, $a0, 16
	addi.w	$a2, $zero, -2047
	pcalau12i	$a3, %pc_hi20(_ZZ6squashiE1t)
	addi.d	$a3, $a3, %pc_lo12(_ZZ6squashiE1t)
	move	$t2, $zero
	ori	$a4, $zero, 128
	ori	$a5, $zero, 2048
	ori	$a6, $zero, 8
	ori	$a7, $zero, 16
	b	.LBB109_16
	.p2align	4, , 16
.LBB109_14:                             # %_Z6squashi.exit.._crit_edge_crit_edge.i.i
                                        #   in Loop: Header=BB109_16 Depth=1
	addi.w	$t0, $t1, 1
.LBB109_15:                             # %._crit_edge.i.i
                                        #   in Loop: Header=BB109_16 Depth=1
	addi.w	$a2, $a2, 1
	move	$t2, $t0
	beq	$a2, $a5, .LBB109_31
.LBB109_16:                             # %_Z6squashi.exit.i.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_25 Depth 2
                                        #     Child Loop BB109_22 Depth 2
                                        #     Child Loop BB109_30 Depth 2
	srai.d	$t0, $a2, 7
	alsl.d	$t0, $t0, $a3, 2
	ld.w	$t1, $t0, 64
	ld.w	$t0, $t0, 68
	andi	$t3, $a2, 127
	sub.d	$t4, $a4, $t3
	mul.d	$t1, $t4, $t1
	mul.d	$t0, $t0, $t3
	add.d	$t0, $t1, $t0
	addi.w	$t0, $t0, 64
	srai.d	$t1, $t0, 7
	blt	$t1, $t2, .LBB109_14
# %bb.17:                               # %iter.check
                                        #   in Loop: Header=BB109_16 Depth=1
	addi.w	$t0, $t1, 1
	sub.w	$t3, $t0, $t2
	bgeu	$t3, $a6, .LBB109_19
# %bb.18:                               #   in Loop: Header=BB109_16 Depth=1
	move	$t5, $t2
	b	.LBB109_29
	.p2align	4, , 16
.LBB109_19:                             # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB109_16 Depth=1
	vreplgr2vr.h	$vr0, $a2
	bgeu	$t3, $a7, .LBB109_24
# %bb.20:                               #   in Loop: Header=BB109_16 Depth=1
	move	$t4, $zero
.LBB109_21:                             # %vec.epilog.ph
                                        #   in Loop: Header=BB109_16 Depth=1
	bstrpick.d	$t5, $t3, 30, 3
	slli.d	$t6, $t5, 3
	alsl.d	$t5, $t5, $t2, 3
	slli.d	$t7, $t4, 1
	alsl.d	$t2, $t2, $t7, 1
	add.d	$t2, $a0, $t2
	sub.d	$t4, $t4, $t6
	.p2align	4, , 16
.LBB109_22:                             # %vec.epilog.vector.body
                                        #   Parent Loop BB109_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vst	$vr0, $t2, 0
	addi.d	$t4, $t4, 8
	addi.d	$t2, $t2, 16
	bnez	$t4, .LBB109_22
# %bb.23:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB109_16 Depth=1
	beq	$t6, $t3, .LBB109_15
	b	.LBB109_29
.LBB109_24:                             # %vector.ph
                                        #   in Loop: Header=BB109_16 Depth=1
	andi	$t5, $t3, 8
	bstrpick.d	$t4, $t3, 30, 4
	slli.d	$t4, $t4, 4
	alsl.d	$t6, $t2, $a1, 1
	move	$t7, $t4
	.p2align	4, , 16
.LBB109_25:                             # %vector.body
                                        #   Parent Loop BB109_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vst	$vr0, $t6, -16
	vst	$vr0, $t6, 0
	addi.d	$t7, $t7, -16
	addi.d	$t6, $t6, 32
	bnez	$t7, .LBB109_25
# %bb.26:                               # %middle.block
                                        #   in Loop: Header=BB109_16 Depth=1
	beq	$t4, $t3, .LBB109_15
# %bb.27:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB109_16 Depth=1
	bnez	$t5, .LBB109_21
# %bb.28:                               #   in Loop: Header=BB109_16 Depth=1
	add.d	$t5, $t4, $t2
	.p2align	4, , 16
.LBB109_29:                             # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB109_16 Depth=1
	sub.d	$t1, $t1, $t5
	addi.d	$t1, $t1, 1
	alsl.d	$t2, $t5, $a0, 1
	.p2align	4, , 16
.LBB109_30:                             # %vec.epilog.scalar.ph
                                        #   Parent Loop BB109_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	st.h	$a2, $t2, 0
	addi.d	$t1, $t1, -1
	addi.d	$t2, $t2, 2
	bnez	$t1, .LBB109_30
	b	.LBB109_15
.LBB109_31:                             # %__cxx_global_var_init.4.exit
	ori	$a1, $fp, 4094
	ori	$a2, $zero, 2047
	stx.h	$a2, $a0, $a1
	pcalau12i	$a0, %pc_hi20(_ZN7StretchD2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZN7StretchD2Ev)
	pcalau12i	$a1, %pc_hi20(stretch)
	addi.d	$a1, $a1, %pc_lo12(stretch)
	pcalau12i	$a2, %pc_hi20(__dso_handle)
	addi.d	$a2, $a2, %pc_lo12(__dso_handle)
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(__cxa_atexit)
	jr	$t8
.LBB109_32:
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a0, $a0, %pc_lo12(.L.str.59)
	pcaddu18i	$ra, %call36(_Z4quitPKc)
	jirl	$ra, $ra, 0
.Lfunc_end109:
	.size	_GLOBAL__sub_I_paq8p.cpp, .Lfunc_end109-_GLOBAL__sub_I_paq8p.cpp
	.cfi_endproc
                                        # -- End function
	.type	programChecker,@object          # @programChecker
	.bss
	.globl	programChecker
	.p2align	3, 0x0
programChecker:
	.space	16
	.size	programChecker, 16

	.type	rnd,@object                     # @rnd
	.globl	rnd
	.p2align	3, 0x0
rnd:
	.space	32
	.size	rnd, 32

	.hidden	__dso_handle
	.type	pos,@object                     # @pos
	.globl	pos
	.p2align	2, 0x0
pos:
	.word	0                               # 0x0
	.size	pos, 4

	.type	level,@object                   # @level
	.data
	.globl	level
	.p2align	2, 0x0
level:
	.word	5                               # 0x5
	.size	level, 4

	.type	y,@object                       # @y
	.bss
	.globl	y
	.p2align	2, 0x0
y:
	.word	0                               # 0x0
	.size	y, 4

	.type	c0,@object                      # @c0
	.data
	.globl	c0
	.p2align	2, 0x0
c0:
	.word	1                               # 0x1
	.size	c0, 4

	.type	c4,@object                      # @c4
	.bss
	.globl	c4
	.p2align	2, 0x0
c4:
	.word	0                               # 0x0
	.size	c4, 4

	.type	bpos,@object                    # @bpos
	.globl	bpos
	.p2align	2, 0x0
bpos:
	.word	0                               # 0x0
	.size	bpos, 4

	.type	buf,@object                     # @buf
	.globl	buf
	.p2align	3, 0x0
buf:
	.space	24
	.size	buf, 24

	.type	ilog,@object                    # @ilog
	.globl	ilog
	.p2align	3, 0x0
ilog:
	.space	24
	.size	ilog, 24

	.type	_ZZ6squashiE1t,@object          # @_ZZ6squashiE1t
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
_ZZ6squashiE1t:
	.word	1                               # 0x1
	.word	2                               # 0x2
	.word	3                               # 0x3
	.word	6                               # 0x6
	.word	10                              # 0xa
	.word	16                              # 0x10
	.word	27                              # 0x1b
	.word	45                              # 0x2d
	.word	73                              # 0x49
	.word	120                             # 0x78
	.word	194                             # 0xc2
	.word	310                             # 0x136
	.word	488                             # 0x1e8
	.word	747                             # 0x2eb
	.word	1101                            # 0x44d
	.word	1546                            # 0x60a
	.word	2047                            # 0x7ff
	.word	2549                            # 0x9f5
	.word	2994                            # 0xbb2
	.word	3348                            # 0xd14
	.word	3607                            # 0xe17
	.word	3785                            # 0xec9
	.word	3901                            # 0xf3d
	.word	3975                            # 0xf87
	.word	4022                            # 0xfb6
	.word	4050                            # 0xfd2
	.word	4068                            # 0xfe4
	.word	4079                            # 0xfef
	.word	4085                            # 0xff5
	.word	4089                            # 0xff9
	.word	4092                            # 0xffc
	.word	4093                            # 0xffd
	.word	4094                            # 0xffe
	.size	_ZZ6squashiE1t, 132

	.type	stretch,@object                 # @stretch
	.bss
	.globl	stretch
	.p2align	3, 0x0
stretch:
	.space	24
	.size	stretch, 24

	.type	_ZL11State_table,@object        # @_ZL11State_table
	.section	.rodata,"a",@progbits
_ZL11State_table:
	.asciz	"\001\002\000"
	.asciz	"\003\005\001"
	.ascii	"\004\006\000\001"
	.asciz	"\007\n\002"
	.ascii	"\b\f\001\001"
	.ascii	"\t\r\001\001"
	.ascii	"\013\016\000\002"
	.asciz	"\017\023\003"
	.ascii	"\020\027\002\001"
	.ascii	"\021\030\002\001"
	.ascii	"\022\031\002\001"
	.ascii	"\024\033\001\002"
	.ascii	"\025\034\001\002"
	.ascii	"\026\035\001\002"
	.ascii	"\032\036\000\003"
	.asciz	"\037!\004"
	.ascii	" #\003\001"
	.ascii	" #\003\001"
	.ascii	" #\003\001"
	.ascii	" #\003\001"
	.ascii	"\"%\002\002"
	.ascii	"\"%\002\002"
	.ascii	"\"%\002\002"
	.ascii	"\"%\002\002"
	.ascii	"\"%\002\002"
	.ascii	"\"%\002\002"
	.ascii	"$'\001\003"
	.ascii	"$'\001\003"
	.ascii	"$'\001\003"
	.ascii	"$'\001\003"
	.ascii	"&(\000\004"
	.asciz	")+\005"
	.ascii	"*-\004\001"
	.ascii	"*-\004\001"
	.ascii	",/\003\002"
	.ascii	",/\003\002"
	.ascii	".1\002\003"
	.ascii	".1\002\003"
	.ascii	"03\001\004"
	.ascii	"03\001\004"
	.ascii	"24\000\005"
	.asciz	"5+\006"
	.ascii	"69\005\001"
	.ascii	"69\005\001"
	.ascii	"8;\004\002"
	.ascii	"8;\004\002"
	.ascii	":=\003\003"
	.ascii	":=\003\003"
	.ascii	"<?\002\004"
	.ascii	"<?\002\004"
	.ascii	">A\001\005"
	.ascii	">A\001\005"
	.ascii	"2B\000\006"
	.asciz	"C7\007"
	.ascii	"D9\006\001"
	.ascii	"D9\006\001"
	.ascii	"FI\005\002"
	.ascii	"FI\005\002"
	.ascii	"HK\004\003"
	.ascii	"HK\004\003"
	.ascii	"JM\003\004"
	.ascii	"JM\003\004"
	.ascii	"LO\002\005"
	.ascii	"LO\002\005"
	.ascii	">Q\001\006"
	.ascii	">Q\001\006"
	.ascii	"@R\000\007"
	.asciz	"SE\b"
	.ascii	"TG\007\001"
	.ascii	"TG\007\001"
	.ascii	"VI\006\002"
	.ascii	"VI\006\002"
	.ascii	",;\005\003"
	.ascii	",;\005\003"
	.ascii	":=\004\004"
	.ascii	":=\004\004"
	.ascii	"<1\003\005"
	.ascii	"<1\003\005"
	.ascii	"LY\002\006"
	.ascii	"LY\002\006"
	.ascii	"N[\001\007"
	.ascii	"N[\001\007"
	.ascii	"P\\\000\b"
	.asciz	"]E\t"
	.ascii	"^W\b\001"
	.ascii	"^W\b\001"
	.ascii	"`-\007\002"
	.ascii	"`-\007\002"
	.ascii	"0c\002\007"
	.ascii	"0c\002\007"
	.ascii	"Xe\001\b"
	.ascii	"Xe\001\b"
	.ascii	"Pf\000\t"
	.asciz	"gE\n"
	.ascii	"hW\t\001"
	.ascii	"hW\t\001"
	.ascii	"j9\b\002"
	.ascii	"j9\b\002"
	.ascii	">m\002\b"
	.ascii	">m\002\b"
	.ascii	"Xo\001\t"
	.ascii	"Xo\001\t"
	.ascii	"Pp\000\n"
	.asciz	"qU\013"
	.ascii	"rW\n\001"
	.ascii	"rW\n\001"
	.ascii	"t9\t\002"
	.ascii	"t9\t\002"
	.ascii	">w\002\t"
	.ascii	">w\002\t"
	.ascii	"Xy\001\n"
	.ascii	"Xy\001\n"
	.ascii	"Zz\000\013"
	.asciz	"{U\f"
	.ascii	"|a\013\001"
	.ascii	"|a\013\001"
	.ascii	"~9\n\002"
	.ascii	"~9\n\002"
	.ascii	">\201\002\n"
	.ascii	">\201\002\n"
	.ascii	"b\203\001\013"
	.ascii	"b\203\001\013"
	.ascii	"Z\204\000\f"
	.asciz	"\205U\r"
	.ascii	"\206a\f\001"
	.ascii	"\206a\f\001"
	.ascii	"\2109\013\002"
	.ascii	"\2109\013\002"
	.ascii	">\213\002\013"
	.ascii	">\213\002\013"
	.ascii	"b\215\001\f"
	.ascii	"b\215\001\f"
	.ascii	"Z\216\000\r"
	.asciz	"\217_\016"
	.ascii	"\220a\r\001"
	.ascii	"\220a\r\001"
	.ascii	"D9\f\002"
	.ascii	"D9\f\002"
	.ascii	">Q\002\f"
	.ascii	">Q\002\f"
	.ascii	"b\223\001\r"
	.ascii	"b\223\001\r"
	.ascii	"d\224\000\016"
	.asciz	"\225_\017"
	.ascii	"\226k\016\001"
	.ascii	"\226k\016\001"
	.ascii	"l\227\001\016"
	.ascii	"l\227\001\016"
	.ascii	"d\230\000\017"
	.asciz	"\231_\020"
	.ascii	"\232k\017\001"
	.ascii	"l\233\001\017"
	.ascii	"d\234\000\020"
	.asciz	"\235_\021"
	.ascii	"\236k\020\001"
	.ascii	"l\237\001\020"
	.ascii	"d\240\000\021"
	.asciz	"\241i\022"
	.ascii	"\242k\021\001"
	.ascii	"l\243\001\021"
	.ascii	"n\244\000\022"
	.asciz	"\245i\023"
	.ascii	"\246u\022\001"
	.ascii	"v\247\001\022"
	.ascii	"n\250\000\023"
	.asciz	"\251i\024"
	.ascii	"\252u\023\001"
	.ascii	"v\253\001\023"
	.ascii	"n\254\000\024"
	.asciz	"\255i\025"
	.ascii	"\256u\024\001"
	.ascii	"v\257\001\024"
	.ascii	"n\260\000\025"
	.asciz	"\261i\026"
	.ascii	"\262u\025\001"
	.ascii	"v\263\001\025"
	.ascii	"n\264\000\026"
	.asciz	"\265s\027"
	.ascii	"\266u\026\001"
	.ascii	"v\267\001\026"
	.ascii	"x\270\000\027"
	.asciz	"\271s\030"
	.ascii	"\272\177\027\001"
	.ascii	"\200\273\001\027"
	.ascii	"x\274\000\030"
	.asciz	"\275s\031"
	.ascii	"\276\177\030\001"
	.ascii	"\200\277\001\030"
	.ascii	"x\300\000\031"
	.asciz	"\301s\032"
	.ascii	"\302\177\031\001"
	.ascii	"\200\303\001\031"
	.ascii	"x\304\000\032"
	.asciz	"\305s\033"
	.ascii	"\306\177\032\001"
	.ascii	"\200\307\001\032"
	.ascii	"x\310\000\033"
	.asciz	"\311s\034"
	.ascii	"\312\177\033\001"
	.ascii	"\200\313\001\033"
	.ascii	"x\314\000\034"
	.asciz	"\315s\035"
	.ascii	"\316\177\034\001"
	.ascii	"\200\317\001\034"
	.ascii	"x\320\000\035"
	.asciz	"\321}\036"
	.ascii	"\322\177\035\001"
	.ascii	"\200\323\001\035"
	.ascii	"\202\324\000\036"
	.asciz	"\325}\037"
	.ascii	"\326\211\036\001"
	.ascii	"\212\327\001\036"
	.ascii	"\202\330\000\037"
	.asciz	"\331} "
	.ascii	"\332\211\037\001"
	.ascii	"\212\333\001\037"
	.ascii	"\202\334\000 "
	.asciz	"\335}!"
	.ascii	"\336\211 \001"
	.ascii	"\212\337\001 "
	.ascii	"\202\340\000!"
	.asciz	"\341}\""
	.ascii	"\342\211!\001"
	.ascii	"\212\343\001!"
	.ascii	"\202\344\000\""
	.asciz	"\345}#"
	.ascii	"\346\211\"\001"
	.ascii	"\212\347\001\""
	.ascii	"\202\350\000#"
	.asciz	"\351}$"
	.ascii	"\352\211#\001"
	.ascii	"\212\353\001#"
	.ascii	"\202\354\000$"
	.asciz	"\355}%"
	.ascii	"\356\211$\001"
	.ascii	"\212\357\001$"
	.ascii	"\202\360\000%"
	.asciz	"\361}&"
	.ascii	"\362\211%\001"
	.ascii	"\212\363\001%"
	.ascii	"\202\364\000&"
	.asciz	"\365\207'"
	.ascii	"\366\211&\001"
	.ascii	"\212\367\001&"
	.ascii	"\214\370\000'"
	.asciz	"\371\207("
	.ascii	"\372E'\001"
	.ascii	"P\373\001'"
	.ascii	"\214\374\000("
	.asciz	"\371\207)"
	.ascii	"\372E(\001"
	.ascii	"P\373\001("
	.ascii	"\214\374\000)"
	.space	4
	.space	4
	.space	4
	.size	_ZL11State_table, 1024

	.type	_ZZ10matchModelR5MixerE1t,@object # @_ZZ10matchModelR5MixerE1t
	.local	_ZZ10matchModelR5MixerE1t
	.comm	_ZZ10matchModelR5MixerE1t,24,8
	.type	_ZGVZ10matchModelR5MixerE1t,@object # @_ZGVZ10matchModelR5MixerE1t
	.local	_ZGVZ10matchModelR5MixerE1t
	.comm	_ZGVZ10matchModelR5MixerE1t,8,8
	.type	_ZZ10matchModelR5MixerE1h,@object # @_ZZ10matchModelR5MixerE1h
	.local	_ZZ10matchModelR5MixerE1h
	.comm	_ZZ10matchModelR5MixerE1h,4,4
	.type	_ZZ10matchModelR5MixerE3ptr,@object # @_ZZ10matchModelR5MixerE3ptr
	.local	_ZZ10matchModelR5MixerE3ptr
	.comm	_ZZ10matchModelR5MixerE3ptr,4,4
	.type	_ZZ10matchModelR5MixerE3len,@object # @_ZZ10matchModelR5MixerE3len
	.local	_ZZ10matchModelR5MixerE3len
	.comm	_ZZ10matchModelR5MixerE3len,4,4
	.type	_ZZ10matchModelR5MixerE6result,@object # @_ZZ10matchModelR5MixerE6result
	.local	_ZZ10matchModelR5MixerE6result
	.comm	_ZZ10matchModelR5MixerE6result,4,4
	.type	_ZZ10matchModelR5MixerE4scm1,@object # @_ZZ10matchModelR5MixerE4scm1
	.local	_ZZ10matchModelR5MixerE4scm1
	.comm	_ZZ10matchModelR5MixerE4scm1,40,8
	.type	_ZGVZ10matchModelR5MixerE4scm1,@object # @_ZGVZ10matchModelR5MixerE4scm1
	.local	_ZGVZ10matchModelR5MixerE4scm1
	.comm	_ZGVZ10matchModelR5MixerE4scm1,8,8
	.type	_ZZ8picModelR5MixerE2r0,@object # @_ZZ8picModelR5MixerE2r0
	.local	_ZZ8picModelR5MixerE2r0
	.comm	_ZZ8picModelR5MixerE2r0,4,4
	.type	_ZZ8picModelR5MixerE2r1,@object # @_ZZ8picModelR5MixerE2r1
	.local	_ZZ8picModelR5MixerE2r1
	.comm	_ZZ8picModelR5MixerE2r1,4,4
	.type	_ZZ8picModelR5MixerE2r2,@object # @_ZZ8picModelR5MixerE2r2
	.local	_ZZ8picModelR5MixerE2r2
	.comm	_ZZ8picModelR5MixerE2r2,4,4
	.type	_ZZ8picModelR5MixerE2r3,@object # @_ZZ8picModelR5MixerE2r3
	.local	_ZZ8picModelR5MixerE2r3
	.comm	_ZZ8picModelR5MixerE2r3,4,4
	.type	_ZZ8picModelR5MixerE1t,@object  # @_ZZ8picModelR5MixerE1t
	.local	_ZZ8picModelR5MixerE1t
	.comm	_ZZ8picModelR5MixerE1t,24,8
	.type	_ZGVZ8picModelR5MixerE1t,@object # @_ZGVZ8picModelR5MixerE1t
	.local	_ZGVZ8picModelR5MixerE1t
	.comm	_ZGVZ8picModelR5MixerE1t,8,8
	.type	_ZZ8picModelR5MixerE3cxt.0,@object # @_ZZ8picModelR5MixerE3cxt.0
	.local	_ZZ8picModelR5MixerE3cxt.0
	.comm	_ZZ8picModelR5MixerE3cxt.0,4,4
	.type	_ZZ8picModelR5MixerE3cxt.1,@object # @_ZZ8picModelR5MixerE3cxt.1
	.local	_ZZ8picModelR5MixerE3cxt.1
	.comm	_ZZ8picModelR5MixerE3cxt.1,4,4
	.type	_ZZ8picModelR5MixerE3cxt.2,@object # @_ZZ8picModelR5MixerE3cxt.2
	.local	_ZZ8picModelR5MixerE3cxt.2
	.comm	_ZZ8picModelR5MixerE3cxt.2,4,4
	.type	_ZZ8picModelR5MixerE2sm,@object # @_ZZ8picModelR5MixerE2sm
	.local	_ZZ8picModelR5MixerE2sm
	.comm	_ZZ8picModelR5MixerE2sm,96,8
	.type	_ZGVZ8picModelR5MixerE2sm,@object # @_ZGVZ8picModelR5MixerE2sm
	.local	_ZGVZ8picModelR5MixerE2sm
	.comm	_ZGVZ8picModelR5MixerE2sm,8,8
	.type	_ZZ9wordModelR5MixerE5word0,@object # @_ZZ9wordModelR5MixerE5word0
	.local	_ZZ9wordModelR5MixerE5word0
	.comm	_ZZ9wordModelR5MixerE5word0,4,4
	.type	_ZZ9wordModelR5MixerE5word1,@object # @_ZZ9wordModelR5MixerE5word1
	.local	_ZZ9wordModelR5MixerE5word1
	.comm	_ZZ9wordModelR5MixerE5word1,4,4
	.type	_ZZ9wordModelR5MixerE5word2,@object # @_ZZ9wordModelR5MixerE5word2
	.local	_ZZ9wordModelR5MixerE5word2
	.comm	_ZZ9wordModelR5MixerE5word2,4,4
	.type	_ZZ9wordModelR5MixerE5word3,@object # @_ZZ9wordModelR5MixerE5word3
	.local	_ZZ9wordModelR5MixerE5word3
	.comm	_ZZ9wordModelR5MixerE5word3,4,4
	.type	_ZZ9wordModelR5MixerE5word4,@object # @_ZZ9wordModelR5MixerE5word4
	.local	_ZZ9wordModelR5MixerE5word4
	.comm	_ZZ9wordModelR5MixerE5word4,4,4
	.type	_ZZ9wordModelR5MixerE5word5,@object # @_ZZ9wordModelR5MixerE5word5
	.local	_ZZ9wordModelR5MixerE5word5
	.comm	_ZZ9wordModelR5MixerE5word5,4,4
	.type	_ZZ9wordModelR5MixerE5text0,@object # @_ZZ9wordModelR5MixerE5text0
	.local	_ZZ9wordModelR5MixerE5text0
	.comm	_ZZ9wordModelR5MixerE5text0,4,4
	.type	_ZZ9wordModelR5MixerE2cm,@object # @_ZZ9wordModelR5MixerE2cm
	.local	_ZZ9wordModelR5MixerE2cm
	.comm	_ZZ9wordModelR5MixerE2cm,144,8
	.type	_ZGVZ9wordModelR5MixerE2cm,@object # @_ZGVZ9wordModelR5MixerE2cm
	.local	_ZGVZ9wordModelR5MixerE2cm
	.comm	_ZGVZ9wordModelR5MixerE2cm,8,8
	.type	_ZZ9wordModelR5MixerE3nl1,@object # @_ZZ9wordModelR5MixerE3nl1
	.data
	.p2align	2, 0x0
_ZZ9wordModelR5MixerE3nl1:
	.word	4294967293                      # 0xfffffffd
	.size	_ZZ9wordModelR5MixerE3nl1, 4

	.type	_ZZ9wordModelR5MixerE2nl,@object # @_ZZ9wordModelR5MixerE2nl
	.p2align	2, 0x0
_ZZ9wordModelR5MixerE2nl:
	.word	4294967294                      # 0xfffffffe
	.size	_ZZ9wordModelR5MixerE2nl, 4

	.type	_ZZ11recordModelR5MixerE5cpos1,@object # @_ZZ11recordModelR5MixerE5cpos1
	.local	_ZZ11recordModelR5MixerE5cpos1
	.comm	_ZZ11recordModelR5MixerE5cpos1,1024,4
	.type	_ZZ11recordModelR5MixerE5cpos2,@object # @_ZZ11recordModelR5MixerE5cpos2
	.local	_ZZ11recordModelR5MixerE5cpos2
	.comm	_ZZ11recordModelR5MixerE5cpos2,1024,4
	.type	_ZZ11recordModelR5MixerE5cpos3,@object # @_ZZ11recordModelR5MixerE5cpos3
	.local	_ZZ11recordModelR5MixerE5cpos3
	.comm	_ZZ11recordModelR5MixerE5cpos3,1024,4
	.type	_ZZ11recordModelR5MixerE5cpos4,@object # @_ZZ11recordModelR5MixerE5cpos4
	.local	_ZZ11recordModelR5MixerE5cpos4
	.comm	_ZZ11recordModelR5MixerE5cpos4,1024,4
	.type	_ZZ11recordModelR5MixerE5wpos1,@object # @_ZZ11recordModelR5MixerE5wpos1
	.local	_ZZ11recordModelR5MixerE5wpos1
	.comm	_ZZ11recordModelR5MixerE5wpos1,262144,4
	.type	_ZZ11recordModelR5MixerE4rlen,@object # @_ZZ11recordModelR5MixerE4rlen
	.p2align	2, 0x0
_ZZ11recordModelR5MixerE4rlen:
	.word	2                               # 0x2
	.size	_ZZ11recordModelR5MixerE4rlen, 4

	.type	_ZZ11recordModelR5MixerE5rlen1,@object # @_ZZ11recordModelR5MixerE5rlen1
	.p2align	2, 0x0
_ZZ11recordModelR5MixerE5rlen1:
	.word	3                               # 0x3
	.size	_ZZ11recordModelR5MixerE5rlen1, 4

	.type	_ZZ11recordModelR5MixerE5rlen2,@object # @_ZZ11recordModelR5MixerE5rlen2
	.p2align	2, 0x0
_ZZ11recordModelR5MixerE5rlen2:
	.word	4                               # 0x4
	.size	_ZZ11recordModelR5MixerE5rlen2, 4

	.type	_ZZ11recordModelR5MixerE7rcount1,@object # @_ZZ11recordModelR5MixerE7rcount1
	.local	_ZZ11recordModelR5MixerE7rcount1
	.comm	_ZZ11recordModelR5MixerE7rcount1,4,4
	.type	_ZZ11recordModelR5MixerE7rcount2,@object # @_ZZ11recordModelR5MixerE7rcount2
	.local	_ZZ11recordModelR5MixerE7rcount2
	.comm	_ZZ11recordModelR5MixerE7rcount2,4,4
	.type	_ZZ11recordModelR5MixerE2cm,@object # @_ZZ11recordModelR5MixerE2cm
	.local	_ZZ11recordModelR5MixerE2cm
	.comm	_ZZ11recordModelR5MixerE2cm,144,8
	.type	_ZGVZ11recordModelR5MixerE2cm,@object # @_ZGVZ11recordModelR5MixerE2cm
	.local	_ZGVZ11recordModelR5MixerE2cm
	.comm	_ZGVZ11recordModelR5MixerE2cm,8,8
	.type	_ZZ11recordModelR5MixerE2cn,@object # @_ZZ11recordModelR5MixerE2cn
	.local	_ZZ11recordModelR5MixerE2cn
	.comm	_ZZ11recordModelR5MixerE2cn,144,8
	.type	_ZGVZ11recordModelR5MixerE2cn,@object # @_ZGVZ11recordModelR5MixerE2cn
	.local	_ZGVZ11recordModelR5MixerE2cn
	.comm	_ZGVZ11recordModelR5MixerE2cn,8,8
	.type	_ZZ11recordModelR5MixerE2co,@object # @_ZZ11recordModelR5MixerE2co
	.local	_ZZ11recordModelR5MixerE2co
	.comm	_ZZ11recordModelR5MixerE2co,144,8
	.type	_ZGVZ11recordModelR5MixerE2co,@object # @_ZGVZ11recordModelR5MixerE2co
	.local	_ZGVZ11recordModelR5MixerE2co
	.comm	_ZGVZ11recordModelR5MixerE2co,8,8
	.type	_ZZ11recordModelR5MixerE2cp,@object # @_ZZ11recordModelR5MixerE2cp
	.local	_ZZ11recordModelR5MixerE2cp
	.comm	_ZZ11recordModelR5MixerE2cp,144,8
	.type	_ZGVZ11recordModelR5MixerE2cp,@object # @_ZGVZ11recordModelR5MixerE2cp
	.local	_ZGVZ11recordModelR5MixerE2cp
	.comm	_ZGVZ11recordModelR5MixerE2cp,8,8
	.type	_ZZ11sparseModelR5MixeriiE2cm,@object # @_ZZ11sparseModelR5MixeriiE2cm
	.local	_ZZ11sparseModelR5MixeriiE2cm
	.comm	_ZZ11sparseModelR5MixeriiE2cm,144,8
	.type	_ZGVZ11sparseModelR5MixeriiE2cm,@object # @_ZGVZ11sparseModelR5MixeriiE2cm
	.local	_ZGVZ11sparseModelR5MixeriiE2cm
	.comm	_ZGVZ11sparseModelR5MixeriiE2cm,8,8
	.type	_ZZ11sparseModelR5MixeriiE4mask,@object # @_ZZ11sparseModelR5MixeriiE4mask
	.local	_ZZ11sparseModelR5MixeriiE4mask
	.comm	_ZZ11sparseModelR5MixeriiE4mask,4,4
	.type	_ZZ13distanceModelR5MixerE2cr,@object # @_ZZ13distanceModelR5MixerE2cr
	.local	_ZZ13distanceModelR5MixerE2cr
	.comm	_ZZ13distanceModelR5MixerE2cr,144,8
	.type	_ZGVZ13distanceModelR5MixerE2cr,@object # @_ZGVZ13distanceModelR5MixerE2cr
	.local	_ZGVZ13distanceModelR5MixerE2cr
	.comm	_ZGVZ13distanceModelR5MixerE2cr,8,8
	.type	_ZZ13distanceModelR5MixerE5pos00,@object # @_ZZ13distanceModelR5MixerE5pos00
	.local	_ZZ13distanceModelR5MixerE5pos00
	.comm	_ZZ13distanceModelR5MixerE5pos00,4,4
	.type	_ZZ13distanceModelR5MixerE5pos20,@object # @_ZZ13distanceModelR5MixerE5pos20
	.local	_ZZ13distanceModelR5MixerE5pos20
	.comm	_ZZ13distanceModelR5MixerE5pos20,4,4
	.type	_ZZ13distanceModelR5MixerE5posnl,@object # @_ZZ13distanceModelR5MixerE5posnl
	.local	_ZZ13distanceModelR5MixerE5posnl
	.comm	_ZZ13distanceModelR5MixerE5posnl,4,4
	.type	_ZZ8bmpModelR5MixerE1w,@object  # @_ZZ8bmpModelR5MixerE1w
	.local	_ZZ8bmpModelR5MixerE1w
	.comm	_ZZ8bmpModelR5MixerE1w,4,4
	.type	_ZZ8bmpModelR5MixerE3eoi,@object # @_ZZ8bmpModelR5MixerE3eoi
	.local	_ZZ8bmpModelR5MixerE3eoi
	.comm	_ZZ8bmpModelR5MixerE3eoi,4,4
	.type	_ZZ8bmpModelR5MixerE4tiff,@object # @_ZZ8bmpModelR5MixerE4tiff
	.local	_ZZ8bmpModelR5MixerE4tiff
	.comm	_ZZ8bmpModelR5MixerE4tiff,4,4
	.type	_ZZ8bmpModelR5MixerE4scm1,@object # @_ZZ8bmpModelR5MixerE4scm1
	.local	_ZZ8bmpModelR5MixerE4scm1
	.comm	_ZZ8bmpModelR5MixerE4scm1,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm1,@object # @_ZGVZ8bmpModelR5MixerE4scm1
	.local	_ZGVZ8bmpModelR5MixerE4scm1
	.comm	_ZGVZ8bmpModelR5MixerE4scm1,8,8
	.type	_ZZ8bmpModelR5MixerE4scm2,@object # @_ZZ8bmpModelR5MixerE4scm2
	.local	_ZZ8bmpModelR5MixerE4scm2
	.comm	_ZZ8bmpModelR5MixerE4scm2,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm2,@object # @_ZGVZ8bmpModelR5MixerE4scm2
	.local	_ZGVZ8bmpModelR5MixerE4scm2
	.comm	_ZGVZ8bmpModelR5MixerE4scm2,8,8
	.type	_ZZ8bmpModelR5MixerE4scm3,@object # @_ZZ8bmpModelR5MixerE4scm3
	.local	_ZZ8bmpModelR5MixerE4scm3
	.comm	_ZZ8bmpModelR5MixerE4scm3,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm3,@object # @_ZGVZ8bmpModelR5MixerE4scm3
	.local	_ZGVZ8bmpModelR5MixerE4scm3
	.comm	_ZGVZ8bmpModelR5MixerE4scm3,8,8
	.type	_ZZ8bmpModelR5MixerE4scm4,@object # @_ZZ8bmpModelR5MixerE4scm4
	.local	_ZZ8bmpModelR5MixerE4scm4
	.comm	_ZZ8bmpModelR5MixerE4scm4,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm4,@object # @_ZGVZ8bmpModelR5MixerE4scm4
	.local	_ZGVZ8bmpModelR5MixerE4scm4
	.comm	_ZGVZ8bmpModelR5MixerE4scm4,8,8
	.type	_ZZ8bmpModelR5MixerE4scm5,@object # @_ZZ8bmpModelR5MixerE4scm5
	.local	_ZZ8bmpModelR5MixerE4scm5
	.comm	_ZZ8bmpModelR5MixerE4scm5,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm5,@object # @_ZGVZ8bmpModelR5MixerE4scm5
	.local	_ZGVZ8bmpModelR5MixerE4scm5
	.comm	_ZGVZ8bmpModelR5MixerE4scm5,8,8
	.type	_ZZ8bmpModelR5MixerE4scm6,@object # @_ZZ8bmpModelR5MixerE4scm6
	.local	_ZZ8bmpModelR5MixerE4scm6
	.comm	_ZZ8bmpModelR5MixerE4scm6,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm6,@object # @_ZGVZ8bmpModelR5MixerE4scm6
	.local	_ZGVZ8bmpModelR5MixerE4scm6
	.comm	_ZGVZ8bmpModelR5MixerE4scm6,8,8
	.type	_ZZ8bmpModelR5MixerE4scm7,@object # @_ZZ8bmpModelR5MixerE4scm7
	.local	_ZZ8bmpModelR5MixerE4scm7
	.comm	_ZZ8bmpModelR5MixerE4scm7,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm7,@object # @_ZGVZ8bmpModelR5MixerE4scm7
	.local	_ZGVZ8bmpModelR5MixerE4scm7
	.comm	_ZGVZ8bmpModelR5MixerE4scm7,8,8
	.type	_ZZ8bmpModelR5MixerE4scm8,@object # @_ZZ8bmpModelR5MixerE4scm8
	.local	_ZZ8bmpModelR5MixerE4scm8
	.comm	_ZZ8bmpModelR5MixerE4scm8,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm8,@object # @_ZGVZ8bmpModelR5MixerE4scm8
	.local	_ZGVZ8bmpModelR5MixerE4scm8
	.comm	_ZGVZ8bmpModelR5MixerE4scm8,8,8
	.type	_ZZ8bmpModelR5MixerE4scm9,@object # @_ZZ8bmpModelR5MixerE4scm9
	.local	_ZZ8bmpModelR5MixerE4scm9
	.comm	_ZZ8bmpModelR5MixerE4scm9,40,8
	.type	_ZGVZ8bmpModelR5MixerE4scm9,@object # @_ZGVZ8bmpModelR5MixerE4scm9
	.local	_ZGVZ8bmpModelR5MixerE4scm9
	.comm	_ZGVZ8bmpModelR5MixerE4scm9,8,8
	.type	_ZZ8bmpModelR5MixerE5scm10,@object # @_ZZ8bmpModelR5MixerE5scm10
	.local	_ZZ8bmpModelR5MixerE5scm10
	.comm	_ZZ8bmpModelR5MixerE5scm10,40,8
	.type	_ZGVZ8bmpModelR5MixerE5scm10,@object # @_ZGVZ8bmpModelR5MixerE5scm10
	.local	_ZGVZ8bmpModelR5MixerE5scm10
	.comm	_ZGVZ8bmpModelR5MixerE5scm10,8,8
	.type	_ZZ8bmpModelR5MixerE2cm,@object # @_ZZ8bmpModelR5MixerE2cm
	.local	_ZZ8bmpModelR5MixerE2cm
	.comm	_ZZ8bmpModelR5MixerE2cm,144,8
	.type	_ZGVZ8bmpModelR5MixerE2cm,@object # @_ZGVZ8bmpModelR5MixerE2cm
	.local	_ZGVZ8bmpModelR5MixerE2cm
	.comm	_ZGVZ8bmpModelR5MixerE2cm,8,8
	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"BMP %dx%d "
	.size	.L.str, 11

	.type	.L.str.5,@object                # @.str.5
.L.str.5:
	.asciz	"TIFF %dx%dx%d "
	.size	.L.str.5, 15

	.type	_ZZ9model8bitR5MixeriE4scm1,@object # @_ZZ9model8bitR5MixeriE4scm1
	.local	_ZZ9model8bitR5MixeriE4scm1
	.comm	_ZZ9model8bitR5MixeriE4scm1,40,8
	.type	_ZGVZ9model8bitR5MixeriE4scm1,@object # @_ZGVZ9model8bitR5MixeriE4scm1
	.local	_ZGVZ9model8bitR5MixeriE4scm1
	.comm	_ZGVZ9model8bitR5MixeriE4scm1,8,8
	.type	_ZZ9model8bitR5MixeriE4scm2,@object # @_ZZ9model8bitR5MixeriE4scm2
	.local	_ZZ9model8bitR5MixeriE4scm2
	.comm	_ZZ9model8bitR5MixeriE4scm2,40,8
	.type	_ZGVZ9model8bitR5MixeriE4scm2,@object # @_ZGVZ9model8bitR5MixeriE4scm2
	.local	_ZGVZ9model8bitR5MixeriE4scm2
	.comm	_ZGVZ9model8bitR5MixeriE4scm2,8,8
	.type	_ZZ9model8bitR5MixeriE4scm3,@object # @_ZZ9model8bitR5MixeriE4scm3
	.local	_ZZ9model8bitR5MixeriE4scm3
	.comm	_ZZ9model8bitR5MixeriE4scm3,40,8
	.type	_ZGVZ9model8bitR5MixeriE4scm3,@object # @_ZGVZ9model8bitR5MixeriE4scm3
	.local	_ZGVZ9model8bitR5MixeriE4scm3
	.comm	_ZGVZ9model8bitR5MixeriE4scm3,8,8
	.type	_ZZ9model8bitR5MixeriE4scm4,@object # @_ZZ9model8bitR5MixeriE4scm4
	.local	_ZZ9model8bitR5MixeriE4scm4
	.comm	_ZZ9model8bitR5MixeriE4scm4,40,8
	.type	_ZGVZ9model8bitR5MixeriE4scm4,@object # @_ZGVZ9model8bitR5MixeriE4scm4
	.local	_ZGVZ9model8bitR5MixeriE4scm4
	.comm	_ZGVZ9model8bitR5MixeriE4scm4,8,8
	.type	_ZZ9model8bitR5MixeriE4scm5,@object # @_ZZ9model8bitR5MixeriE4scm5
	.local	_ZZ9model8bitR5MixeriE4scm5
	.comm	_ZZ9model8bitR5MixeriE4scm5,40,8
	.type	_ZGVZ9model8bitR5MixeriE4scm5,@object # @_ZGVZ9model8bitR5MixeriE4scm5
	.local	_ZGVZ9model8bitR5MixeriE4scm5
	.comm	_ZGVZ9model8bitR5MixeriE4scm5,8,8
	.type	_ZZ9model8bitR5MixeriE4scm6,@object # @_ZZ9model8bitR5MixeriE4scm6
	.local	_ZZ9model8bitR5MixeriE4scm6
	.comm	_ZZ9model8bitR5MixeriE4scm6,40,8
	.type	_ZGVZ9model8bitR5MixeriE4scm6,@object # @_ZGVZ9model8bitR5MixeriE4scm6
	.local	_ZGVZ9model8bitR5MixeriE4scm6
	.comm	_ZGVZ9model8bitR5MixeriE4scm6,8,8
	.type	_ZZ9model8bitR5MixeriE4scm7,@object # @_ZZ9model8bitR5MixeriE4scm7
	.local	_ZZ9model8bitR5MixeriE4scm7
	.comm	_ZZ9model8bitR5MixeriE4scm7,40,8
	.type	_ZGVZ9model8bitR5MixeriE4scm7,@object # @_ZGVZ9model8bitR5MixeriE4scm7
	.local	_ZGVZ9model8bitR5MixeriE4scm7
	.comm	_ZGVZ9model8bitR5MixeriE4scm7,8,8
	.type	_ZZ9model8bitR5MixeriE2cm,@object # @_ZZ9model8bitR5MixeriE2cm
	.local	_ZZ9model8bitR5MixeriE2cm
	.comm	_ZZ9model8bitR5MixeriE2cm,144,8
	.type	_ZGVZ9model8bitR5MixeriE2cm,@object # @_ZGVZ9model8bitR5MixeriE2cm
	.local	_ZGVZ9model8bitR5MixeriE2cm
	.comm	_ZGVZ9model8bitR5MixeriE2cm,8,8
	.type	_ZZ8pgmModelR5MixerE1w,@object  # @_ZZ8pgmModelR5MixerE1w
	.local	_ZZ8pgmModelR5MixerE1w
	.comm	_ZZ8pgmModelR5MixerE1w,4,4
	.type	_ZZ8pgmModelR5MixerE3eoi,@object # @_ZZ8pgmModelR5MixerE3eoi
	.local	_ZZ8pgmModelR5MixerE3eoi
	.comm	_ZZ8pgmModelR5MixerE3eoi,4,4
	.type	_ZZ8pgmModelR5MixerE3pgm,@object # @_ZZ8pgmModelR5MixerE3pgm
	.local	_ZZ8pgmModelR5MixerE3pgm
	.comm	_ZZ8pgmModelR5MixerE3pgm,4,4
	.type	_ZZ8pgmModelR5MixerE7pgm_hdr,@object # @_ZZ8pgmModelR5MixerE7pgm_hdr
	.local	_ZZ8pgmModelR5MixerE7pgm_hdr
	.comm	_ZZ8pgmModelR5MixerE7pgm_hdr,12,4
	.type	_ZZ8pgmModelR5MixerE7pgm_ptr,@object # @_ZZ8pgmModelR5MixerE7pgm_ptr
	.local	_ZZ8pgmModelR5MixerE7pgm_ptr
	.comm	_ZZ8pgmModelR5MixerE7pgm_ptr,4,4
	.type	.L.str.6,@object                # @.str.6
.L.str.6:
	.asciz	"PGM %dx%d"
	.size	.L.str.6, 10

	.type	_ZZ8pgmModelR5MixerE3col,@object # @_ZZ8pgmModelR5MixerE3col
	.local	_ZZ8pgmModelR5MixerE3col
	.comm	_ZZ8pgmModelR5MixerE3col,4,4
	.type	_ZZ9bmpModel8R5MixerE1h,@object # @_ZZ9bmpModel8R5MixerE1h
	.local	_ZZ9bmpModel8R5MixerE1h
	.comm	_ZZ9bmpModel8R5MixerE1h,4,4
	.type	_ZZ9bmpModel8R5MixerE1w,@object # @_ZZ9bmpModel8R5MixerE1w
	.local	_ZZ9bmpModel8R5MixerE1w
	.comm	_ZZ9bmpModel8R5MixerE1w,4,4
	.type	_ZZ9bmpModel8R5MixerE3eoi,@object # @_ZZ9bmpModel8R5MixerE3eoi
	.local	_ZZ9bmpModel8R5MixerE3eoi
	.comm	_ZZ9bmpModel8R5MixerE3eoi,4,4
	.type	_ZZ9bmpModel8R5MixerE3col,@object # @_ZZ9bmpModel8R5MixerE3col
	.local	_ZZ9bmpModel8R5MixerE3col
	.comm	_ZZ9bmpModel8R5MixerE3col,4,4
	.type	_ZZ9bmpModel8R5MixerE4ibmp,@object # @_ZZ9bmpModel8R5MixerE4ibmp
	.local	_ZZ9bmpModel8R5MixerE4ibmp
	.comm	_ZZ9bmpModel8R5MixerE4ibmp,4,4
	.type	_ZZ9bmpModel8R5MixerE2w1,@object # @_ZZ9bmpModel8R5MixerE2w1
	.local	_ZZ9bmpModel8R5MixerE2w1
	.comm	_ZZ9bmpModel8R5MixerE2w1,4,4
	.type	.L.str.7,@object                # @.str.7
.L.str.7:
	.asciz	"BMP(8-bit) %dx%d"
	.size	.L.str.7, 17

	.type	_ZZ9rgbModel8R5MixerE1w,@object # @_ZZ9rgbModel8R5MixerE1w
	.local	_ZZ9rgbModel8R5MixerE1w
	.comm	_ZZ9rgbModel8R5MixerE1w,4,4
	.type	_ZZ9rgbModel8R5MixerE3eoi,@object # @_ZZ9rgbModel8R5MixerE3eoi
	.local	_ZZ9rgbModel8R5MixerE3eoi
	.comm	_ZZ9rgbModel8R5MixerE3eoi,4,4
	.type	_ZZ9rgbModel8R5MixerE3col,@object # @_ZZ9rgbModel8R5MixerE3col
	.local	_ZZ9rgbModel8R5MixerE3col
	.comm	_ZZ9rgbModel8R5MixerE3col,4,4
	.type	.L.str.8,@object                # @.str.8
.L.str.8:
	.asciz	"RGB(8-bit) %dx%d"
	.size	.L.str.8, 17

	.type	.L.str.9,@object                # @.str.9
.L.str.9:
	.asciz	"%s:"
	.size	.L.str.9, 4

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	" %02X"
	.size	.L.str.10, 6

	.type	_ZZ9jpegModelR5MixerE4jpeg,@object # @_ZZ9jpegModelR5MixerE4jpeg
	.local	_ZZ9jpegModelR5MixerE4jpeg
	.comm	_ZZ9jpegModelR5MixerE4jpeg,4,4
	.type	_ZZ9jpegModelR5MixerE9next_jpeg,@object # @_ZZ9jpegModelR5MixerE9next_jpeg
	.local	_ZZ9jpegModelR5MixerE9next_jpeg
	.comm	_ZZ9jpegModelR5MixerE9next_jpeg,4,4
	.type	_ZZ9jpegModelR5MixerE3app,@object # @_ZZ9jpegModelR5MixerE3app
	.local	_ZZ9jpegModelR5MixerE3app
	.comm	_ZZ9jpegModelR5MixerE3app,4,4
	.type	_ZZ9jpegModelR5MixerE3sof,@object # @_ZZ9jpegModelR5MixerE3sof
	.local	_ZZ9jpegModelR5MixerE3sof
	.comm	_ZZ9jpegModelR5MixerE3sof,4,4
	.type	_ZZ9jpegModelR5MixerE3sos,@object # @_ZZ9jpegModelR5MixerE3sos
	.local	_ZZ9jpegModelR5MixerE3sos
	.comm	_ZZ9jpegModelR5MixerE3sos,4,4
	.type	_ZZ9jpegModelR5MixerE4data,@object # @_ZZ9jpegModelR5MixerE4data
	.local	_ZZ9jpegModelR5MixerE4data
	.comm	_ZZ9jpegModelR5MixerE4data,4,4
	.type	_ZZ9jpegModelR5MixerE2ht,@object # @_ZZ9jpegModelR5MixerE2ht
	.local	_ZZ9jpegModelR5MixerE2ht
	.comm	_ZZ9jpegModelR5MixerE2ht,24,8
	.type	_ZGVZ9jpegModelR5MixerE2ht,@object # @_ZGVZ9jpegModelR5MixerE2ht
	.local	_ZGVZ9jpegModelR5MixerE2ht
	.comm	_ZGVZ9jpegModelR5MixerE2ht,8,8
	.type	_ZZ9jpegModelR5MixerE6htsize,@object # @_ZZ9jpegModelR5MixerE6htsize
	.local	_ZZ9jpegModelR5MixerE6htsize
	.comm	_ZZ9jpegModelR5MixerE6htsize,4,4
	.type	_ZZ9jpegModelR5MixerE8huffcode,@object # @_ZZ9jpegModelR5MixerE8huffcode
	.local	_ZZ9jpegModelR5MixerE8huffcode
	.comm	_ZZ9jpegModelR5MixerE8huffcode,4,4
	.type	_ZZ9jpegModelR5MixerE8huffbits,@object # @_ZZ9jpegModelR5MixerE8huffbits
	.local	_ZZ9jpegModelR5MixerE8huffbits
	.comm	_ZZ9jpegModelR5MixerE8huffbits,4,4
	.type	_ZZ9jpegModelR5MixerE8huffsize,@object # @_ZZ9jpegModelR5MixerE8huffsize
	.local	_ZZ9jpegModelR5MixerE8huffsize
	.comm	_ZZ9jpegModelR5MixerE8huffsize,4,4
	.type	_ZZ9jpegModelR5MixerE2rs,@object # @_ZZ9jpegModelR5MixerE2rs
	.data
	.p2align	2, 0x0
_ZZ9jpegModelR5MixerE2rs:
	.word	4294967295                      # 0xffffffff
	.size	_ZZ9jpegModelR5MixerE2rs, 4

	.type	_ZZ9jpegModelR5MixerE6mcupos,@object # @_ZZ9jpegModelR5MixerE6mcupos
	.local	_ZZ9jpegModelR5MixerE6mcupos
	.comm	_ZZ9jpegModelR5MixerE6mcupos,4,4
	.type	_ZZ9jpegModelR5MixerE3huf,@object # @_ZZ9jpegModelR5MixerE3huf
	.local	_ZZ9jpegModelR5MixerE3huf
	.comm	_ZZ9jpegModelR5MixerE3huf,24,8
	.type	_ZGVZ9jpegModelR5MixerE3huf,@object # @_ZGVZ9jpegModelR5MixerE3huf
	.local	_ZGVZ9jpegModelR5MixerE3huf
	.comm	_ZGVZ9jpegModelR5MixerE3huf,8,8
	.type	_ZZ9jpegModelR5MixerE7mcusize,@object # @_ZZ9jpegModelR5MixerE7mcusize
	.local	_ZZ9jpegModelR5MixerE7mcusize
	.comm	_ZZ9jpegModelR5MixerE7mcusize,4,4
	.type	_ZZ9jpegModelR5MixerE6hufsel,@object # @_ZZ9jpegModelR5MixerE6hufsel
	.local	_ZZ9jpegModelR5MixerE6hufsel
	.comm	_ZZ9jpegModelR5MixerE6hufsel,80,4
	.type	_ZZ9jpegModelR5MixerE4hbuf,@object # @_ZZ9jpegModelR5MixerE4hbuf
	.local	_ZZ9jpegModelR5MixerE4hbuf
	.comm	_ZZ9jpegModelR5MixerE4hbuf,24,8
	.type	_ZGVZ9jpegModelR5MixerE4hbuf,@object # @_ZGVZ9jpegModelR5MixerE4hbuf
	.local	_ZGVZ9jpegModelR5MixerE4hbuf
	.comm	_ZGVZ9jpegModelR5MixerE4hbuf,8,8
	.type	_ZZ9jpegModelR5MixerE5color,@object # @_ZZ9jpegModelR5MixerE5color
	.local	_ZZ9jpegModelR5MixerE5color
	.comm	_ZZ9jpegModelR5MixerE5color,24,8
	.type	_ZGVZ9jpegModelR5MixerE5color,@object # @_ZGVZ9jpegModelR5MixerE5color
	.local	_ZGVZ9jpegModelR5MixerE5color
	.comm	_ZGVZ9jpegModelR5MixerE5color,8,8
	.type	_ZZ9jpegModelR5MixerE4pred,@object # @_ZZ9jpegModelR5MixerE4pred
	.local	_ZZ9jpegModelR5MixerE4pred
	.comm	_ZZ9jpegModelR5MixerE4pred,24,8
	.type	_ZGVZ9jpegModelR5MixerE4pred,@object # @_ZGVZ9jpegModelR5MixerE4pred
	.local	_ZGVZ9jpegModelR5MixerE4pred
	.comm	_ZGVZ9jpegModelR5MixerE4pred,8,8
	.type	_ZZ9jpegModelR5MixerE5width,@object # @_ZZ9jpegModelR5MixerE5width
	.local	_ZZ9jpegModelR5MixerE5width
	.comm	_ZZ9jpegModelR5MixerE5width,4,4
	.type	_ZZ9jpegModelR5MixerE3row,@object # @_ZZ9jpegModelR5MixerE3row
	.local	_ZZ9jpegModelR5MixerE3row
	.comm	_ZZ9jpegModelR5MixerE3row,4,4
	.type	_ZZ9jpegModelR5MixerE6column,@object # @_ZZ9jpegModelR5MixerE6column
	.local	_ZZ9jpegModelR5MixerE6column
	.comm	_ZZ9jpegModelR5MixerE6column,4,4
	.type	_ZZ9jpegModelR5MixerE4cbuf,@object # @_ZZ9jpegModelR5MixerE4cbuf
	.local	_ZZ9jpegModelR5MixerE4cbuf
	.comm	_ZZ9jpegModelR5MixerE4cbuf,24,8
	.type	_ZGVZ9jpegModelR5MixerE4cbuf,@object # @_ZGVZ9jpegModelR5MixerE4cbuf
	.local	_ZGVZ9jpegModelR5MixerE4cbuf
	.comm	_ZGVZ9jpegModelR5MixerE4cbuf,8,8
	.type	_ZZ9jpegModelR5MixerE4cpos,@object # @_ZZ9jpegModelR5MixerE4cpos
	.local	_ZZ9jpegModelR5MixerE4cpos
	.comm	_ZZ9jpegModelR5MixerE4cpos,4,4
	.type	_ZZ9jpegModelR5MixerE3rs1,@object # @_ZZ9jpegModelR5MixerE3rs1
	.local	_ZZ9jpegModelR5MixerE3rs1
	.comm	_ZZ9jpegModelR5MixerE3rs1,4,4
	.type	_ZZ9jpegModelR5MixerE4ssum,@object # @_ZZ9jpegModelR5MixerE4ssum
	.local	_ZZ9jpegModelR5MixerE4ssum
	.comm	_ZZ9jpegModelR5MixerE4ssum,4,4
	.type	_ZZ9jpegModelR5MixerE5ssum1,@object # @_ZZ9jpegModelR5MixerE5ssum1
	.local	_ZZ9jpegModelR5MixerE5ssum1
	.comm	_ZZ9jpegModelR5MixerE5ssum1,4,4
	.type	_ZZ9jpegModelR5MixerE5ssum2,@object # @_ZZ9jpegModelR5MixerE5ssum2
	.local	_ZZ9jpegModelR5MixerE5ssum2
	.comm	_ZZ9jpegModelR5MixerE5ssum2,4,4
	.type	_ZZ9jpegModelR5MixerE5ssum3,@object # @_ZZ9jpegModelR5MixerE5ssum3
	.local	_ZZ9jpegModelR5MixerE5ssum3
	.comm	_ZZ9jpegModelR5MixerE5ssum3,4,4
	.type	_ZZ9jpegModelR5MixerE5cbuf2,@object # @_ZZ9jpegModelR5MixerE5cbuf2
	.local	_ZZ9jpegModelR5MixerE5cbuf2
	.comm	_ZZ9jpegModelR5MixerE5cbuf2,24,8
	.type	_ZGVZ9jpegModelR5MixerE5cbuf2,@object # @_ZGVZ9jpegModelR5MixerE5cbuf2
	.local	_ZGVZ9jpegModelR5MixerE5cbuf2
	.comm	_ZGVZ9jpegModelR5MixerE5cbuf2,8,8
	.type	_ZZ9jpegModelR5MixerE8adv_pred,@object # @_ZZ9jpegModelR5MixerE8adv_pred
	.local	_ZZ9jpegModelR5MixerE8adv_pred
	.comm	_ZZ9jpegModelR5MixerE8adv_pred,24,8
	.type	_ZGVZ9jpegModelR5MixerE8adv_pred,@object # @_ZGVZ9jpegModelR5MixerE8adv_pred
	.local	_ZGVZ9jpegModelR5MixerE8adv_pred
	.comm	_ZGVZ9jpegModelR5MixerE8adv_pred,8,8
	.type	_ZZ9jpegModelR5MixerE4sumu,@object # @_ZZ9jpegModelR5MixerE4sumu
	.local	_ZZ9jpegModelR5MixerE4sumu
	.comm	_ZZ9jpegModelR5MixerE4sumu,24,8
	.type	_ZGVZ9jpegModelR5MixerE4sumu,@object # @_ZGVZ9jpegModelR5MixerE4sumu
	.local	_ZGVZ9jpegModelR5MixerE4sumu
	.comm	_ZGVZ9jpegModelR5MixerE4sumu,8,8
	.type	_ZZ9jpegModelR5MixerE4sumv,@object # @_ZZ9jpegModelR5MixerE4sumv
	.local	_ZZ9jpegModelR5MixerE4sumv
	.comm	_ZZ9jpegModelR5MixerE4sumv,24,8
	.type	_ZGVZ9jpegModelR5MixerE4sumv,@object # @_ZGVZ9jpegModelR5MixerE4sumv
	.local	_ZGVZ9jpegModelR5MixerE4sumv
	.comm	_ZGVZ9jpegModelR5MixerE4sumv,8,8
	.type	_ZZ9jpegModelR5MixerE2ls,@object # @_ZZ9jpegModelR5MixerE2ls
	.local	_ZZ9jpegModelR5MixerE2ls
	.comm	_ZZ9jpegModelR5MixerE2ls,24,8
	.type	_ZGVZ9jpegModelR5MixerE2ls,@object # @_ZGVZ9jpegModelR5MixerE2ls
	.local	_ZGVZ9jpegModelR5MixerE2ls
	.comm	_ZGVZ9jpegModelR5MixerE2ls,8,8
	.type	_ZZ9jpegModelR5MixerE3lcp,@object # @_ZZ9jpegModelR5MixerE3lcp
	.local	_ZZ9jpegModelR5MixerE3lcp
	.comm	_ZZ9jpegModelR5MixerE3lcp,24,8
	.type	_ZGVZ9jpegModelR5MixerE3lcp,@object # @_ZGVZ9jpegModelR5MixerE3lcp
	.local	_ZGVZ9jpegModelR5MixerE3lcp
	.comm	_ZGVZ9jpegModelR5MixerE3lcp,8,8
	.type	_ZZ9jpegModelR5MixerE4zpos,@object # @_ZZ9jpegModelR5MixerE4zpos
	.local	_ZZ9jpegModelR5MixerE4zpos
	.comm	_ZZ9jpegModelR5MixerE4zpos,24,8
	.type	_ZGVZ9jpegModelR5MixerE4zpos,@object # @_ZGVZ9jpegModelR5MixerE4zpos
	.local	_ZGVZ9jpegModelR5MixerE4zpos
	.comm	_ZGVZ9jpegModelR5MixerE4zpos,8,8
	.type	_ZZ9jpegModelR5MixerE9dqt_state,@object # @_ZZ9jpegModelR5MixerE9dqt_state
	.p2align	2, 0x0
_ZZ9jpegModelR5MixerE9dqt_state:
	.word	4294967295                      # 0xffffffff
	.size	_ZZ9jpegModelR5MixerE9dqt_state, 4

	.type	_ZZ9jpegModelR5MixerE7dqt_end,@object # @_ZZ9jpegModelR5MixerE7dqt_end
	.local	_ZZ9jpegModelR5MixerE7dqt_end
	.comm	_ZZ9jpegModelR5MixerE7dqt_end,4,4
	.type	_ZZ9jpegModelR5MixerE4qnum,@object # @_ZZ9jpegModelR5MixerE4qnum
	.local	_ZZ9jpegModelR5MixerE4qnum
	.comm	_ZZ9jpegModelR5MixerE4qnum,4,4
	.type	_ZZ9jpegModelR5MixerE4qtab,@object # @_ZZ9jpegModelR5MixerE4qtab
	.local	_ZZ9jpegModelR5MixerE4qtab
	.comm	_ZZ9jpegModelR5MixerE4qtab,24,8
	.type	_ZGVZ9jpegModelR5MixerE4qtab,@object # @_ZGVZ9jpegModelR5MixerE4qtab
	.local	_ZGVZ9jpegModelR5MixerE4qtab
	.comm	_ZGVZ9jpegModelR5MixerE4qtab,8,8
	.type	_ZZ9jpegModelR5MixerE4qmap,@object # @_ZZ9jpegModelR5MixerE4qmap
	.local	_ZZ9jpegModelR5MixerE4qmap
	.comm	_ZZ9jpegModelR5MixerE4qmap,24,8
	.type	_ZGVZ9jpegModelR5MixerE4qmap,@object # @_ZGVZ9jpegModelR5MixerE4qmap
	.local	_ZGVZ9jpegModelR5MixerE4qmap
	.comm	_ZGVZ9jpegModelR5MixerE4qmap,8,8
	.type	_ZZ9jpegModelR5MixerE3zzu,@object # @_ZZ9jpegModelR5MixerE3zzu
	.section	.rodata,"a",@progbits
_ZZ9jpegModelR5MixerE3zzu:
	.ascii	"\000\001\000\000\001\002\003\002\001\000\000\001\002\003\004\005\004\003\002\001\000\000\001\002\003\004\005\006\007\006\005\004\003\002\001\000\001\002\003\004\005\006\007\007\006\005\004\003\002\003\004\005\006\007\007\006\005\004\005\006\007\007\006\007"
	.size	_ZZ9jpegModelR5MixerE3zzu, 64

	.type	_ZZ9jpegModelR5MixerE3zzv,@object # @_ZZ9jpegModelR5MixerE3zzv
_ZZ9jpegModelR5MixerE3zzv:
	.ascii	"\000\000\001\002\001\000\000\001\002\003\004\003\002\001\000\000\001\002\003\004\005\006\005\004\003\002\001\000\000\001\002\003\004\005\006\007\007\006\005\004\003\002\001\002\003\004\005\006\007\007\006\005\004\003\004\005\006\007\007\006\005\006\007\007"
	.size	_ZZ9jpegModelR5MixerE3zzv, 64

	.type	.L.str.12,@object               # @.str.12
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.12:
	.asciz	"JPEG %dx%d "
	.size	.L.str.12, 12

	.type	_ZZ9jpegModelR5MixerE2we,@object # @_ZZ9jpegModelR5MixerE2we
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	2, 0x0
_ZZ9jpegModelR5MixerE2we:
	.word	181                             # 0xb5
	.word	282                             # 0x11a
	.word	353                             # 0x161
	.word	456                             # 0x1c8
	.word	568                             # 0x238
	.word	671                             # 0x29f
	.word	742                             # 0x2e6
	.word	767                             # 0x2ff
	.size	_ZZ9jpegModelR5MixerE2we, 32

	.type	_ZZ9jpegModelR5MixerE5sumu2,@object # @_ZZ9jpegModelR5MixerE5sumu2
	.local	_ZZ9jpegModelR5MixerE5sumu2
	.comm	_ZZ9jpegModelR5MixerE5sumu2,32,16
	.type	_ZZ9jpegModelR5MixerE5sumv2,@object # @_ZZ9jpegModelR5MixerE5sumv2
	.local	_ZZ9jpegModelR5MixerE5sumv2
	.comm	_ZZ9jpegModelR5MixerE5sumv2,32,16
	.type	_ZZ9jpegModelR5MixerE5sumu3,@object # @_ZZ9jpegModelR5MixerE5sumu3
	.local	_ZZ9jpegModelR5MixerE5sumu3
	.comm	_ZZ9jpegModelR5MixerE5sumu3,32,16
	.type	_ZZ9jpegModelR5MixerE5sumv3,@object # @_ZZ9jpegModelR5MixerE5sumv3
	.local	_ZZ9jpegModelR5MixerE5sumv3
	.comm	_ZZ9jpegModelR5MixerE5sumv3,32,16
	.type	_ZZ9jpegModelR5MixerE2kx,@object # @_ZZ9jpegModelR5MixerE2kx
	.local	_ZZ9jpegModelR5MixerE2kx
	.comm	_ZZ9jpegModelR5MixerE2kx,128,4
	.type	_ZZ9jpegModelR5MixerE1t,@object # @_ZZ9jpegModelR5MixerE1t
	.local	_ZZ9jpegModelR5MixerE1t
	.comm	_ZZ9jpegModelR5MixerE1t,32,8
	.type	_ZGVZ9jpegModelR5MixerE1t,@object # @_ZGVZ9jpegModelR5MixerE1t
	.local	_ZGVZ9jpegModelR5MixerE1t
	.comm	_ZGVZ9jpegModelR5MixerE1t,8,8
	.type	_ZZ9jpegModelR5MixerE3cxt,@object # @_ZZ9jpegModelR5MixerE3cxt
	.local	_ZZ9jpegModelR5MixerE3cxt
	.comm	_ZZ9jpegModelR5MixerE3cxt,24,8
	.type	_ZGVZ9jpegModelR5MixerE3cxt,@object # @_ZGVZ9jpegModelR5MixerE3cxt
	.local	_ZGVZ9jpegModelR5MixerE3cxt
	.comm	_ZGVZ9jpegModelR5MixerE3cxt,8,8
	.type	_ZZ9jpegModelR5MixerE2cp,@object # @_ZZ9jpegModelR5MixerE2cp
	.local	_ZZ9jpegModelR5MixerE2cp
	.comm	_ZZ9jpegModelR5MixerE2cp,24,8
	.type	_ZGVZ9jpegModelR5MixerE2cp,@object # @_ZGVZ9jpegModelR5MixerE2cp
	.local	_ZGVZ9jpegModelR5MixerE2cp
	.comm	_ZGVZ9jpegModelR5MixerE2cp,8,8
	.type	_ZZ9jpegModelR5MixerE2sm,@object # @_ZZ9jpegModelR5MixerE2sm
	.local	_ZZ9jpegModelR5MixerE2sm
	.comm	_ZZ9jpegModelR5MixerE2sm,896,8
	.type	_ZGVZ9jpegModelR5MixerE2sm,@object # @_ZGVZ9jpegModelR5MixerE2sm
	.local	_ZGVZ9jpegModelR5MixerE2sm
	.comm	_ZGVZ9jpegModelR5MixerE2sm,8,8
	.type	_ZZ9jpegModelR5MixerE2m1,@object # @_ZZ9jpegModelR5MixerE2m1
	.local	_ZZ9jpegModelR5MixerE2m1
	.comm	_ZZ9jpegModelR5MixerE2m1,136,8
	.type	_ZGVZ9jpegModelR5MixerE2m1,@object # @_ZGVZ9jpegModelR5MixerE2m1
	.local	_ZGVZ9jpegModelR5MixerE2m1
	.comm	_ZGVZ9jpegModelR5MixerE2m1,8,8
	.type	_ZZ9jpegModelR5MixerE2a1,@object # @_ZZ9jpegModelR5MixerE2a1
	.local	_ZZ9jpegModelR5MixerE2a1
	.comm	_ZZ9jpegModelR5MixerE2a1,32,8
	.type	_ZGVZ9jpegModelR5MixerE2a1,@object # @_ZGVZ9jpegModelR5MixerE2a1
	.local	_ZGVZ9jpegModelR5MixerE2a1
	.comm	_ZGVZ9jpegModelR5MixerE2a1,8,8
	.type	_ZZ9jpegModelR5MixerE2a2,@object # @_ZZ9jpegModelR5MixerE2a2
	.local	_ZZ9jpegModelR5MixerE2a2
	.comm	_ZZ9jpegModelR5MixerE2a2,32,8
	.type	_ZGVZ9jpegModelR5MixerE2a2,@object # @_ZGVZ9jpegModelR5MixerE2a2
	.local	_ZGVZ9jpegModelR5MixerE2a2
	.comm	_ZGVZ9jpegModelR5MixerE2a2,8,8
	.type	_ZZ9jpegModelR5MixerE7hbcount,@object # @_ZZ9jpegModelR5MixerE7hbcount
	.data
	.p2align	2, 0x0
_ZZ9jpegModelR5MixerE7hbcount:
	.word	2                               # 0x2
	.size	_ZZ9jpegModelR5MixerE7hbcount, 4

	.type	_ZZ8wavModelR5MixerE8channels,@object # @_ZZ8wavModelR5MixerE8channels
	.local	_ZZ8wavModelR5MixerE8channels
	.comm	_ZZ8wavModelR5MixerE8channels,4,4
	.type	_ZZ8wavModelR5MixerE4bits,@object # @_ZZ8wavModelR5MixerE4bits
	.local	_ZZ8wavModelR5MixerE4bits
	.comm	_ZZ8wavModelR5MixerE4bits,4,4
	.type	_ZZ8wavModelR5MixerE5bytes,@object # @_ZZ8wavModelR5MixerE5bytes
	.local	_ZZ8wavModelR5MixerE5bytes
	.comm	_ZZ8wavModelR5MixerE5bytes,4,4
	.type	_ZZ8wavModelR5MixerE3eof,@object # @_ZZ8wavModelR5MixerE3eof
	.local	_ZZ8wavModelR5MixerE3eof
	.comm	_ZZ8wavModelR5MixerE3eof,4,4
	.type	_ZZ8wavModelR5MixerE1s,@object  # @_ZZ8wavModelR5MixerE1s
	.local	_ZZ8wavModelR5MixerE1s
	.comm	_ZZ8wavModelR5MixerE1s,4,4
	.type	_ZZ8wavModelR5MixerE1w,@object  # @_ZZ8wavModelR5MixerE1w
	.local	_ZZ8wavModelR5MixerE1w
	.comm	_ZZ8wavModelR5MixerE1w,4,4
	.type	_ZZ8wavModelR5MixerE1K,@object  # @_ZZ8wavModelR5MixerE1K
	.local	_ZZ8wavModelR5MixerE1K
	.comm	_ZZ8wavModelR5MixerE1K,4,4
	.type	_ZGVZ8wavModelR5MixerE1K,@object # @_ZGVZ8wavModelR5MixerE1K
	.local	_ZGVZ8wavModelR5MixerE1K
	.comm	_ZGVZ8wavModelR5MixerE1K,8,8
	.type	_ZZ8wavModelR5MixerE2pr,@object # @_ZZ8wavModelR5MixerE2pr
	.local	_ZZ8wavModelR5MixerE2pr
	.comm	_ZZ8wavModelR5MixerE2pr,32,4
	.type	_ZZ8wavModelR5MixerE1n,@object  # @_ZZ8wavModelR5MixerE1n
	.local	_ZZ8wavModelR5MixerE1n
	.comm	_ZZ8wavModelR5MixerE1n,8,8
	.type	_ZZ8wavModelR5MixerE7counter,@object # @_ZZ8wavModelR5MixerE7counter
	.local	_ZZ8wavModelR5MixerE7counter
	.comm	_ZZ8wavModelR5MixerE7counter,8,8
	.type	_ZZ8wavModelR5MixerE4scm1,@object # @_ZZ8wavModelR5MixerE4scm1
	.local	_ZZ8wavModelR5MixerE4scm1
	.comm	_ZZ8wavModelR5MixerE4scm1,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm1,@object # @_ZGVZ8wavModelR5MixerE4scm1
	.local	_ZGVZ8wavModelR5MixerE4scm1
	.comm	_ZGVZ8wavModelR5MixerE4scm1,8,8
	.type	_ZZ8wavModelR5MixerE4scm2,@object # @_ZZ8wavModelR5MixerE4scm2
	.local	_ZZ8wavModelR5MixerE4scm2
	.comm	_ZZ8wavModelR5MixerE4scm2,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm2,@object # @_ZGVZ8wavModelR5MixerE4scm2
	.local	_ZGVZ8wavModelR5MixerE4scm2
	.comm	_ZGVZ8wavModelR5MixerE4scm2,8,8
	.type	_ZZ8wavModelR5MixerE4scm3,@object # @_ZZ8wavModelR5MixerE4scm3
	.local	_ZZ8wavModelR5MixerE4scm3
	.comm	_ZZ8wavModelR5MixerE4scm3,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm3,@object # @_ZGVZ8wavModelR5MixerE4scm3
	.local	_ZGVZ8wavModelR5MixerE4scm3
	.comm	_ZGVZ8wavModelR5MixerE4scm3,8,8
	.type	_ZZ8wavModelR5MixerE4scm4,@object # @_ZZ8wavModelR5MixerE4scm4
	.local	_ZZ8wavModelR5MixerE4scm4
	.comm	_ZZ8wavModelR5MixerE4scm4,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm4,@object # @_ZGVZ8wavModelR5MixerE4scm4
	.local	_ZGVZ8wavModelR5MixerE4scm4
	.comm	_ZGVZ8wavModelR5MixerE4scm4,8,8
	.type	_ZZ8wavModelR5MixerE4scm5,@object # @_ZZ8wavModelR5MixerE4scm5
	.local	_ZZ8wavModelR5MixerE4scm5
	.comm	_ZZ8wavModelR5MixerE4scm5,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm5,@object # @_ZGVZ8wavModelR5MixerE4scm5
	.local	_ZGVZ8wavModelR5MixerE4scm5
	.comm	_ZGVZ8wavModelR5MixerE4scm5,8,8
	.type	_ZZ8wavModelR5MixerE4scm6,@object # @_ZZ8wavModelR5MixerE4scm6
	.local	_ZZ8wavModelR5MixerE4scm6
	.comm	_ZZ8wavModelR5MixerE4scm6,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm6,@object # @_ZGVZ8wavModelR5MixerE4scm6
	.local	_ZGVZ8wavModelR5MixerE4scm6
	.comm	_ZGVZ8wavModelR5MixerE4scm6,8,8
	.type	_ZZ8wavModelR5MixerE4scm7,@object # @_ZZ8wavModelR5MixerE4scm7
	.local	_ZZ8wavModelR5MixerE4scm7
	.comm	_ZZ8wavModelR5MixerE4scm7,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm7,@object # @_ZGVZ8wavModelR5MixerE4scm7
	.local	_ZGVZ8wavModelR5MixerE4scm7
	.comm	_ZGVZ8wavModelR5MixerE4scm7,8,8
	.type	_ZZ8wavModelR5MixerE4scm8,@object # @_ZZ8wavModelR5MixerE4scm8
	.local	_ZZ8wavModelR5MixerE4scm8
	.comm	_ZZ8wavModelR5MixerE4scm8,40,8
	.type	_ZGVZ8wavModelR5MixerE4scm8,@object # @_ZGVZ8wavModelR5MixerE4scm8
	.local	_ZGVZ8wavModelR5MixerE4scm8
	.comm	_ZGVZ8wavModelR5MixerE4scm8,8,8
	.type	_ZZ8wavModelR5MixerE2cm,@object # @_ZZ8wavModelR5MixerE2cm
	.local	_ZZ8wavModelR5MixerE2cm
	.comm	_ZZ8wavModelR5MixerE2cm,144,8
	.type	_ZGVZ8wavModelR5MixerE2cm,@object # @_ZGVZ8wavModelR5MixerE2cm
	.local	_ZGVZ8wavModelR5MixerE2cm
	.comm	_ZGVZ8wavModelR5MixerE2cm,8,8
	.type	_ZL1S,@object                   # @_ZL1S
	.local	_ZL1S
	.comm	_ZL1S,4,4
	.type	_ZL1D,@object                   # @_ZL1D
	.local	_ZL1D
	.comm	_ZL1D,1,4
	.type	_ZL5wmode,@object               # @_ZL5wmode
	.local	_ZL5wmode
	.comm	_ZL5wmode,4,4
	.type	.L.str.14,@object               # @.str.14
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.14:
	.asciz	"WAV %ibits/"
	.size	.L.str.14, 12

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	"mono "
	.size	.L.str.15, 6

	.type	.L.str.16,@object               # @.str.16
.L.str.16:
	.asciz	"stereo "
	.size	.L.str.16, 8

	.type	_ZZ8exeModelR5MixerE2cm,@object # @_ZZ8exeModelR5MixerE2cm
	.local	_ZZ8exeModelR5MixerE2cm
	.comm	_ZZ8exeModelR5MixerE2cm,144,8
	.type	_ZGVZ8exeModelR5MixerE2cm,@object # @_ZGVZ8exeModelR5MixerE2cm
	.local	_ZGVZ8exeModelR5MixerE2cm
	.comm	_ZGVZ8exeModelR5MixerE2cm,8,8
	.type	_ZZ13indirectModelR5MixerE2cm,@object # @_ZZ13indirectModelR5MixerE2cm
	.local	_ZZ13indirectModelR5MixerE2cm
	.comm	_ZZ13indirectModelR5MixerE2cm,144,8
	.type	_ZGVZ13indirectModelR5MixerE2cm,@object # @_ZGVZ13indirectModelR5MixerE2cm
	.local	_ZGVZ13indirectModelR5MixerE2cm
	.comm	_ZGVZ13indirectModelR5MixerE2cm,8,8
	.type	_ZZ13indirectModelR5MixerE2t1,@object # @_ZZ13indirectModelR5MixerE2t1
	.local	_ZZ13indirectModelR5MixerE2t1
	.comm	_ZZ13indirectModelR5MixerE2t1,1024,4
	.type	_ZZ13indirectModelR5MixerE2t2,@object # @_ZZ13indirectModelR5MixerE2t2
	.local	_ZZ13indirectModelR5MixerE2t2
	.comm	_ZZ13indirectModelR5MixerE2t2,131072,2
	.type	_ZZ8dmcModelR5MixerE3top,@object # @_ZZ8dmcModelR5MixerE3top
	.local	_ZZ8dmcModelR5MixerE3top
	.comm	_ZZ8dmcModelR5MixerE3top,4,4
	.type	_ZZ8dmcModelR5MixerE4curr,@object # @_ZZ8dmcModelR5MixerE4curr
	.local	_ZZ8dmcModelR5MixerE4curr
	.comm	_ZZ8dmcModelR5MixerE4curr,4,4
	.type	_ZZ8dmcModelR5MixerE1t,@object  # @_ZZ8dmcModelR5MixerE1t
	.local	_ZZ8dmcModelR5MixerE1t
	.comm	_ZZ8dmcModelR5MixerE1t,24,8
	.type	_ZGVZ8dmcModelR5MixerE1t,@object # @_ZGVZ8dmcModelR5MixerE1t
	.local	_ZGVZ8dmcModelR5MixerE1t
	.comm	_ZGVZ8dmcModelR5MixerE1t,8,8
	.type	_ZZ8dmcModelR5MixerE2sm,@object # @_ZZ8dmcModelR5MixerE2sm
	.local	_ZZ8dmcModelR5MixerE2sm
	.comm	_ZZ8dmcModelR5MixerE2sm,32,8
	.type	_ZGVZ8dmcModelR5MixerE2sm,@object # @_ZGVZ8dmcModelR5MixerE2sm
	.local	_ZGVZ8dmcModelR5MixerE2sm
	.comm	_ZGVZ8dmcModelR5MixerE2sm,8,8
	.type	_ZZ8dmcModelR5MixerE9threshold,@object # @_ZZ8dmcModelR5MixerE9threshold
	.data
	.p2align	2, 0x0
_ZZ8dmcModelR5MixerE9threshold:
	.word	256                             # 0x100
	.size	_ZZ8dmcModelR5MixerE9threshold, 4

	.type	_ZZ13contextModel2vE2cm,@object # @_ZZ13contextModel2vE2cm
	.local	_ZZ13contextModel2vE2cm
	.comm	_ZZ13contextModel2vE2cm,144,8
	.type	_ZGVZ13contextModel2vE2cm,@object # @_ZGVZ13contextModel2vE2cm
	.local	_ZGVZ13contextModel2vE2cm
	.comm	_ZGVZ13contextModel2vE2cm,8,8
	.type	_ZZ13contextModel2vE4rcm7,@object # @_ZZ13contextModel2vE4rcm7
	.local	_ZZ13contextModel2vE4rcm7
	.comm	_ZZ13contextModel2vE4rcm7,40,8
	.type	_ZGVZ13contextModel2vE4rcm7,@object # @_ZGVZ13contextModel2vE4rcm7
	.local	_ZGVZ13contextModel2vE4rcm7
	.comm	_ZGVZ13contextModel2vE4rcm7,8,8
	.type	_ZZ13contextModel2vE4rcm9,@object # @_ZZ13contextModel2vE4rcm9
	.local	_ZZ13contextModel2vE4rcm9
	.comm	_ZZ13contextModel2vE4rcm9,40,8
	.type	_ZGVZ13contextModel2vE4rcm9,@object # @_ZGVZ13contextModel2vE4rcm9
	.local	_ZGVZ13contextModel2vE4rcm9
	.comm	_ZGVZ13contextModel2vE4rcm9,8,8
	.type	_ZZ13contextModel2vE5rcm10,@object # @_ZZ13contextModel2vE5rcm10
	.local	_ZZ13contextModel2vE5rcm10
	.comm	_ZZ13contextModel2vE5rcm10,40,8
	.type	_ZGVZ13contextModel2vE5rcm10,@object # @_ZGVZ13contextModel2vE5rcm10
	.local	_ZGVZ13contextModel2vE5rcm10
	.comm	_ZGVZ13contextModel2vE5rcm10,8,8
	.type	_ZZ13contextModel2vE1m,@object  # @_ZZ13contextModel2vE1m
	.local	_ZZ13contextModel2vE1m
	.comm	_ZZ13contextModel2vE1m,136,8
	.type	_ZGVZ13contextModel2vE1m,@object # @_ZGVZ13contextModel2vE1m
	.local	_ZGVZ13contextModel2vE1m
	.comm	_ZGVZ13contextModel2vE1m,8,8
	.type	_ZZ13contextModel2vE3cxt.1,@object # @_ZZ13contextModel2vE3cxt.1
	.local	_ZZ13contextModel2vE3cxt.1
	.comm	_ZZ13contextModel2vE3cxt.1,4,4
	.type	_ZZ13contextModel2vE3cxt.2,@object # @_ZZ13contextModel2vE3cxt.2
	.local	_ZZ13contextModel2vE3cxt.2
	.comm	_ZZ13contextModel2vE3cxt.2,4,4
	.type	_ZZ13contextModel2vE3cxt.3,@object # @_ZZ13contextModel2vE3cxt.3
	.local	_ZZ13contextModel2vE3cxt.3
	.comm	_ZZ13contextModel2vE3cxt.3,4,4
	.type	_ZZ13contextModel2vE3cxt.4,@object # @_ZZ13contextModel2vE3cxt.4
	.local	_ZZ13contextModel2vE3cxt.4
	.comm	_ZZ13contextModel2vE3cxt.4,4,4
	.type	_ZZ13contextModel2vE3cxt.5,@object # @_ZZ13contextModel2vE3cxt.5
	.local	_ZZ13contextModel2vE3cxt.5
	.comm	_ZZ13contextModel2vE3cxt.5,4,4
	.type	_ZZ13contextModel2vE3cxt.6,@object # @_ZZ13contextModel2vE3cxt.6
	.local	_ZZ13contextModel2vE3cxt.6
	.comm	_ZZ13contextModel2vE3cxt.6,4,4
	.type	_ZZ13contextModel2vE3cxt.7,@object # @_ZZ13contextModel2vE3cxt.7
	.local	_ZZ13contextModel2vE3cxt.7
	.comm	_ZZ13contextModel2vE3cxt.7,4,4
	.type	_ZZ13contextModel2vE3cxt.8,@object # @_ZZ13contextModel2vE3cxt.8
	.local	_ZZ13contextModel2vE3cxt.8
	.comm	_ZZ13contextModel2vE3cxt.8,4,4
	.type	_ZZ13contextModel2vE3cxt.9,@object # @_ZZ13contextModel2vE3cxt.9
	.local	_ZZ13contextModel2vE3cxt.9
	.comm	_ZZ13contextModel2vE3cxt.9,4,4
	.type	_ZZ13contextModel2vE3cxt.10,@object # @_ZZ13contextModel2vE3cxt.10
	.local	_ZZ13contextModel2vE3cxt.10
	.comm	_ZZ13contextModel2vE3cxt.10,4,4
	.type	_ZZ13contextModel2vE3cxt.11,@object # @_ZZ13contextModel2vE3cxt.11
	.local	_ZZ13contextModel2vE3cxt.11
	.comm	_ZZ13contextModel2vE3cxt.11,4,4
	.type	_ZZ13contextModel2vE3cxt.12,@object # @_ZZ13contextModel2vE3cxt.12
	.local	_ZZ13contextModel2vE3cxt.12
	.comm	_ZZ13contextModel2vE3cxt.12,4,4
	.type	_ZZ13contextModel2vE3cxt.13,@object # @_ZZ13contextModel2vE3cxt.13
	.local	_ZZ13contextModel2vE3cxt.13
	.comm	_ZZ13contextModel2vE3cxt.13,4,4
	.type	_ZZ13contextModel2vE3cxt.14,@object # @_ZZ13contextModel2vE3cxt.14
	.local	_ZZ13contextModel2vE3cxt.14
	.comm	_ZZ13contextModel2vE3cxt.14,4,4
	.type	_ZZ13contextModel2vE8filetype,@object # @_ZZ13contextModel2vE8filetype
	.local	_ZZ13contextModel2vE8filetype
	.comm	_ZZ13contextModel2vE8filetype,4,4
	.type	_ZZ13contextModel2vE4size,@object # @_ZZ13contextModel2vE4size
	.local	_ZZ13contextModel2vE4size
	.comm	_ZZ13contextModel2vE4size,4,4
	.type	_ZZ13contextModel2vE3col,@object # @_ZZ13contextModel2vE3col
	.local	_ZZ13contextModel2vE3col
	.comm	_ZZ13contextModel2vE3col,4,4
	.type	_ZZ13contextModel2vE3col_0,@object # @_ZZ13contextModel2vE3col_0
	.local	_ZZ13contextModel2vE3col_0
	.comm	_ZZ13contextModel2vE3col_0,4,4
	.type	_ZZN9Predictor6updateEvE1a,@object # @_ZZN9Predictor6updateEvE1a
	.local	_ZZN9Predictor6updateEvE1a
	.comm	_ZZN9Predictor6updateEvE1a,32,8
	.type	_ZGVZN9Predictor6updateEvE1a,@object # @_ZGVZN9Predictor6updateEvE1a
	.local	_ZGVZN9Predictor6updateEvE1a
	.comm	_ZGVZN9Predictor6updateEvE1a,8,8
	.type	_ZZN9Predictor6updateEvE2a1,@object # @_ZZN9Predictor6updateEvE2a1
	.local	_ZZN9Predictor6updateEvE2a1
	.comm	_ZZN9Predictor6updateEvE2a1,32,8
	.type	_ZGVZN9Predictor6updateEvE2a1,@object # @_ZGVZN9Predictor6updateEvE2a1
	.local	_ZGVZN9Predictor6updateEvE2a1
	.comm	_ZGVZN9Predictor6updateEvE2a1,8,8
	.type	_ZZN9Predictor6updateEvE2a2,@object # @_ZZN9Predictor6updateEvE2a2
	.local	_ZZN9Predictor6updateEvE2a2
	.comm	_ZZN9Predictor6updateEvE2a2,32,8
	.type	_ZGVZN9Predictor6updateEvE2a2,@object # @_ZGVZN9Predictor6updateEvE2a2
	.local	_ZGVZN9Predictor6updateEvE2a2
	.comm	_ZGVZN9Predictor6updateEvE2a2,8,8
	.type	_ZZN9Predictor6updateEvE2a3,@object # @_ZZN9Predictor6updateEvE2a3
	.local	_ZZN9Predictor6updateEvE2a3
	.comm	_ZZN9Predictor6updateEvE2a3,32,8
	.type	_ZGVZN9Predictor6updateEvE2a3,@object # @_ZGVZN9Predictor6updateEvE2a3
	.local	_ZGVZN9Predictor6updateEvE2a3
	.comm	_ZGVZN9Predictor6updateEvE2a3,8,8
	.type	_ZZN9Predictor6updateEvE2a4,@object # @_ZZN9Predictor6updateEvE2a4
	.local	_ZZN9Predictor6updateEvE2a4
	.comm	_ZZN9Predictor6updateEvE2a4,32,8
	.type	_ZGVZN9Predictor6updateEvE2a4,@object # @_ZGVZN9Predictor6updateEvE2a4
	.local	_ZGVZN9Predictor6updateEvE2a4
	.comm	_ZGVZN9Predictor6updateEvE2a4,8,8
	.type	_ZZN9Predictor6updateEvE2a5,@object # @_ZZN9Predictor6updateEvE2a5
	.local	_ZZN9Predictor6updateEvE2a5
	.comm	_ZZN9Predictor6updateEvE2a5,32,8
	.type	_ZGVZN9Predictor6updateEvE2a5,@object # @_ZGVZN9Predictor6updateEvE2a5
	.local	_ZGVZN9Predictor6updateEvE2a5
	.comm	_ZGVZN9Predictor6updateEvE2a5,8,8
	.type	_ZZN9Predictor6updateEvE2a6,@object # @_ZZN9Predictor6updateEvE2a6
	.local	_ZZN9Predictor6updateEvE2a6
	.comm	_ZZN9Predictor6updateEvE2a6,32,8
	.type	_ZGVZN9Predictor6updateEvE2a6,@object # @_ZGVZN9Predictor6updateEvE2a6
	.local	_ZGVZN9Predictor6updateEvE2a6
	.comm	_ZGVZN9Predictor6updateEvE2a6,8,8
	.type	_ZL2dt,@object                  # @_ZL2dt
	.local	_ZL2dt
	.comm	_ZL2dt,4096,4
	.type	.L.str.17,@object               # @.str.17
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.17:
	.asciz	"%c%c%c%c"
	.size	.L.str.17, 9

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"encode_exe read error"
	.size	.L.str.18, 22

	.type	_ZZ10decode_exeR7EncoderE6offset,@object # @_ZZ10decode_exeR7EncoderE6offset
	.local	_ZZ10decode_exeR7EncoderE6offset
	.comm	_ZZ10decode_exeR7EncoderE6offset,4,4
	.type	_ZZ10decode_exeR7EncoderE1q,@object # @_ZZ10decode_exeR7EncoderE1q
	.local	_ZZ10decode_exeR7EncoderE1q
	.comm	_ZZ10decode_exeR7EncoderE1q,4,4
	.type	_ZZ10decode_exeR7EncoderE4size,@object # @_ZZ10decode_exeR7EncoderE4size
	.local	_ZZ10decode_exeR7EncoderE4size
	.comm	_ZZ10decode_exeR7EncoderE4size,4,4
	.type	_ZZ10decode_exeR7EncoderE5begin,@object # @_ZZ10decode_exeR7EncoderE5begin
	.local	_ZZ10decode_exeR7EncoderE5begin
	.comm	_ZZ10decode_exeR7EncoderE5begin,4,4
	.type	_ZZ10decode_exeR7EncoderE1c,@object # @_ZZ10decode_exeR7EncoderE1c
	.local	_ZZ10decode_exeR7EncoderE1c
	.comm	_ZZ10decode_exeR7EncoderE1c,5,4
	.type	.L.str.19,@object               # @.str.19
.L.str.19:
	.asciz	"%c%c%c%c%c"
	.size	.L.str.19, 11

	.type	_ZZ6decodeR7EncoderE4type,@object # @_ZZ6decodeR7EncoderE4type
	.local	_ZZ6decodeR7EncoderE4type
	.comm	_ZZ6decodeR7EncoderE4type,4,4
	.type	_ZZ6decodeR7EncoderE3len,@object # @_ZZ6decodeR7EncoderE3len
	.local	_ZZ6decodeR7EncoderE3len
	.comm	_ZZ6decodeR7EncoderE3len,4,4
	.type	.L.str.20,@object               # @.str.20
.L.str.20:
	.asciz	"%12d\b\b\b\b\b\b\b\b\b\b\b\b"
	.size	.L.str.20, 17

	.type	.L.str.21,@object               # @.str.21
.L.str.21:
	.asciz	"rb"
	.size	.L.str.21, 3

	.type	.L.str.22,@object               # @.str.22
.L.str.22:
	.asciz	"%s %ld -> "
	.size	.L.str.22, 11

	.type	.L.str.23,@object               # @.str.23
.L.str.23:
	.asciz	"tmpfile"
	.size	.L.str.23, 8

	.type	.L.str.24,@object               # @.str.24
.L.str.24:
	.asciz	"Transform fails at %ld, input=%d decoded=%d, skipping...\n"
	.size	.L.str.24, 58

	.type	.L.str.25,@object               # @.str.25
.L.str.25:
	.asciz	"%-12ld\n"
	.size	.L.str.25, 8

	.type	.L.str.26,@object               # @.str.26
.L.str.26:
	.asciz	"Comparing %s %ld -> "
	.size	.L.str.26, 21

	.type	.L.str.27,@object               # @.str.27
.L.str.27:
	.asciz	"differ at %d: file=%d archive=%d\n"
	.size	.L.str.27, 34

	.type	.L.str.30,@object               # @.str.30
.L.str.30:
	.asciz	"wb"
	.size	.L.str.30, 3

	.type	.L.str.32,@object               # @.str.32
.L.str.32:
	.asciz	"Extracting %s %ld -> "
	.size	.L.str.32, 22

	.type	.L.str.34,@object               # @.str.34
.L.str.34:
	.asciz	"Skipping %s %ld -> "
	.size	.L.str.34, 20

	.type	_ZZ7getlineP8_IO_FILEE1s,@object # @_ZZ7getlineP8_IO_FILEE1s
	.local	_ZZ7getlineP8_IO_FILEE1s
	.comm	_ZZ7getlineP8_IO_FILEE1s,24,8
	.type	_ZGVZ7getlineP8_IO_FILEE1s,@object # @_ZGVZ7getlineP8_IO_FILEE1s
	.local	_ZGVZ7getlineP8_IO_FILEE1s
	.comm	_ZGVZ7getlineP8_IO_FILEE1s,8,8
	.type	.L.str.36,@object               # @.str.36
.L.str.36:
	.space	1
	.size	.L.str.36, 1

	.type	_ZZ7putsizeR6StringS0_PKciE3blk,@object # @_ZZ7putsizeR6StringS0_PKciE3blk
	.local	_ZZ7putsizeR6StringS0_PKciE3blk
	.comm	_ZZ7putsizeR6StringS0_PKciE3blk,24,1
	.type	.L.str.37,@object               # @.str.37
.L.str.37:
	.asciz	"%ld\t"
	.size	.L.str.37, 5

	.type	.L.str.39,@object               # @.str.39
.L.str.39:
	.asciz	"Valid options are -0 through -9 or -d\n"
	.size	.L.str.39, 39

	.type	.L.str.40,@object               # @.str.40
.L.str.40:
	.asciz	"paq8p archiver (C) 2008, Matt Mahoney et al.\nFree under GPL, http://www.gnu.org/licenses/gpl.txt\n\nTo compress:\n  paq8p -level file               (compresses to file.paq8p)\n  paq8p -level archive files...   (creates archive.paq8p)\n  paq8p file                      (level -%d, pause when done)\nlevel: -0 = store, -1 -2 -3 = faster (uses 35, 48, 59 MB)\n-4 -5 -6 -7 -8 = smaller (uses 133, 233, 435, 837, 1643 MB)\n\nTo extract or compare:\n  paq8p -d dir1/archive.paq8p      (extract to dir1)\n  paq8p -d dir1/archive.paq8p dir2 (extract to dir2)\n  paq8p archive.paq8p              (extract, pause when done)\n\nTo view contents: more < archive.paq8p\n\n"
	.size	.L.str.40, 645

	.type	.L.str.42,@object               # @.str.42
.L.str.42:
	.asciz	"%s: not found, skipping...\n"
	.size	.L.str.42, 28

	.type	.L.str.43,@object               # @.str.43
.L.str.43:
	.asciz	"Nothing to compress\n"
	.size	.L.str.43, 21

	.type	.L.str.44,@object               # @.str.44
.L.str.44:
	.asciz	"wb+"
	.size	.L.str.44, 4

	.type	.L.str.45,@object               # @.str.45
.L.str.45:
	.asciz	"paq8p -%d\r\n%s\032"
	.size	.L.str.45, 15

	.type	.L.str.46,@object               # @.str.46
.L.str.46:
	.asciz	"Creating archive with %d file(s)...\n"
	.size	.L.str.46, 37

	.type	.L.str.47,@object               # @.str.47
.L.str.47:
	.asciz	"rb+"
	.size	.L.str.47, 4

	.type	.L.str.48,@object               # @.str.48
.L.str.48:
	.asciz	"paq8p -"
	.size	.L.str.48, 8

	.type	.L.str.49,@object               # @.str.49
.L.str.49:
	.asciz	"%s: not a %s file\n"
	.size	.L.str.49, 19

	.type	.L.str.50,@object               # @.str.50
.L.str.50:
	.asciz	"paq8p"
	.size	.L.str.50, 6

	.type	.L.str.51,@object               # @.str.51
.L.str.51:
	.asciz	"Extracting %d file(s) from archive -%d\n"
	.size	.L.str.51, 40

	.type	.L.str.52,@object               # @.str.52
.L.str.52:
	.asciz	"%s: header corrupted at %ld\n"
	.size	.L.str.52, 29

	.type	.L.str.53,@object               # @.str.53
.L.str.53:
	.asciz	"%ld -> %ld\n"
	.size	.L.str.53, 12

	.type	.L.str.57,@object               # @.str.57
.L.str.57:
	.asciz	"fork() failed"
	.size	.L.str.57, 14

	.type	.L.str.58,@object               # @.str.58
.L.str.58:
	.asciz	"-d"
	.size	.L.str.58, 3

	.type	.L.str.59,@object               # @.str.59
.L.str.59:
	.asciz	"Out of memory"
	.size	.L.str.59, 14

	.type	_ZZN2BHILi4EEixEjE3tmp,@object  # @_ZZN2BHILi4EEixEjE3tmp
	.section	.bss._ZZN2BHILi4EEixEjE3tmp,"awG",@nobits,_ZZN2BHILi4EEixEjE3tmp,comdat
	.weak	_ZZN2BHILi4EEixEjE3tmp
_ZZN2BHILi4EEixEjE3tmp:
	.space	4
	.size	_ZZN2BHILi4EEixEjE3tmp, 4

	.type	_ZZN2BHILi9EEixEjE3tmp,@object  # @_ZZN2BHILi9EEixEjE3tmp
	.section	.bss._ZZN2BHILi9EEixEjE3tmp,"awG",@nobits,_ZZN2BHILi9EEixEjE3tmp,comdat
	.weak	_ZZN2BHILi9EEixEjE3tmp
_ZZN2BHILi9EEixEjE3tmp:
	.space	9
	.size	_ZZN2BHILi9EEixEjE3tmp, 9

	.section	.init_array,"aw",@init_array
	.p2align	3, 0x0
	.dword	_GLOBAL__sub_I_paq8p.cpp
	.type	.Lstr,@object                   # @str
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lstr:
	.asciz	"not extracted"
	.size	.Lstr, 14

	.type	.Lstr.1,@object                 # @str.1
.Lstr.1:
	.asciz	"done        "
	.size	.Lstr.1, 13

	.type	.Lstr.2,@object                 # @str.2
.Lstr.2:
	.asciz	"file is longer"
	.size	.Lstr.2, 15

	.type	.Lstr.3,@object                 # @str.3
.Lstr.3:
	.asciz	"identical   "
	.size	.Lstr.3, 13

	.type	.Lstr.4,@object                 # @str.4
.Lstr.4:
	.asciz	"\nClose this window or press ENTER to continue..."
	.size	.Lstr.4, 49

	.data
	.p2align	3, 0x0
.L_ZTIPKc.DW.stub:
	.dword	_ZTIPKc
	.globl	_ZN4IlogC1Ev
	.type	_ZN4IlogC1Ev,@function
_ZN4IlogC1Ev = _ZN4IlogC2Ev
	.globl	_ZN7StretchC1Ev
	.type	_ZN7StretchC1Ev,@function
_ZN7StretchC1Ev = _ZN7StretchC2Ev
	.globl	_ZN5MixerD1Ev
	.type	_ZN5MixerD1Ev,@function
_ZN5MixerD1Ev = _ZN5MixerD2Ev
	.globl	_ZN5MixerC1Eiiii
	.type	_ZN5MixerC1Eiiii,@function
_ZN5MixerC1Eiiii = _ZN5MixerC2Eiiii
	.globl	_ZN4APM1C1Ei
	.type	_ZN4APM1C1Ei,@function
_ZN4APM1C1Ei = _ZN4APM1C2Ei
	.globl	_ZN8StateMapC1Ei
	.type	_ZN8StateMapC1Ei,@function
_ZN8StateMapC1Ei = _ZN8StateMapC2Ei
	.globl	_ZN3APMC1Ei
	.type	_ZN3APMC1Ei,@function
_ZN3APMC1Ei = _ZN3APMC2Ei
	.globl	_ZN10ContextMapC1Eii
	.type	_ZN10ContextMapC1Eii,@function
_ZN10ContextMapC1Eii = _ZN10ContextMapC2Eii
	.globl	_ZN10ContextMapD1Ev
	.type	_ZN10ContextMapD1Ev,@function
_ZN10ContextMapD1Ev = _ZN10ContextMapD2Ev
	.globl	_ZN9PredictorC1Ev
	.type	_ZN9PredictorC1Ev,@function
_ZN9PredictorC1Ev = _ZN9PredictorC2Ev
	.globl	_ZN7EncoderC1E4ModeP8_IO_FILE
	.type	_ZN7EncoderC1E4ModeP8_IO_FILE,@function
_ZN7EncoderC1E4ModeP8_IO_FILE = _ZN7EncoderC2E4ModeP8_IO_FILE
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.data.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.p2align	3, 0x0
	.type	DW.ref.__gxx_personality_v0,@object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.dword	__gxx_personality_v0
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym __gxx_personality_v0
	.addrsig_sym __cxx_global_array_dtor
	.addrsig_sym __cxx_global_array_dtor.13
	.addrsig_sym _GLOBAL__sub_I_paq8p.cpp
	.addrsig_sym _Unwind_Resume
	.addrsig_sym _ZTIPKc
	.addrsig_sym rnd
	.addrsig_sym __dso_handle
	.addrsig_sym buf
	.addrsig_sym ilog
	.addrsig_sym stretch
	.addrsig_sym _ZZ10matchModelR5MixerE1t
	.addrsig_sym _ZGVZ10matchModelR5MixerE1t
	.addrsig_sym _ZZ10matchModelR5MixerE4scm1
	.addrsig_sym _ZGVZ10matchModelR5MixerE4scm1
	.addrsig_sym _ZZ8picModelR5MixerE1t
	.addrsig_sym _ZGVZ8picModelR5MixerE1t
	.addrsig_sym _ZZ8picModelR5MixerE2sm
	.addrsig_sym _ZGVZ8picModelR5MixerE2sm
	.addrsig_sym _ZZ9wordModelR5MixerE2cm
	.addrsig_sym _ZGVZ9wordModelR5MixerE2cm
	.addrsig_sym _ZZ11recordModelR5MixerE2cm
	.addrsig_sym _ZGVZ11recordModelR5MixerE2cm
	.addrsig_sym _ZZ11recordModelR5MixerE2cn
	.addrsig_sym _ZGVZ11recordModelR5MixerE2cn
	.addrsig_sym _ZZ11recordModelR5MixerE2co
	.addrsig_sym _ZGVZ11recordModelR5MixerE2co
	.addrsig_sym _ZZ11recordModelR5MixerE2cp
	.addrsig_sym _ZGVZ11recordModelR5MixerE2cp
	.addrsig_sym _ZZ11sparseModelR5MixeriiE2cm
	.addrsig_sym _ZGVZ11sparseModelR5MixeriiE2cm
	.addrsig_sym _ZZ13distanceModelR5MixerE2cr
	.addrsig_sym _ZGVZ13distanceModelR5MixerE2cr
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm1
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm1
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm2
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm2
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm3
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm3
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm4
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm4
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm5
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm5
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm6
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm6
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm7
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm7
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm8
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm8
	.addrsig_sym _ZZ8bmpModelR5MixerE4scm9
	.addrsig_sym _ZGVZ8bmpModelR5MixerE4scm9
	.addrsig_sym _ZZ8bmpModelR5MixerE5scm10
	.addrsig_sym _ZGVZ8bmpModelR5MixerE5scm10
	.addrsig_sym _ZZ8bmpModelR5MixerE2cm
	.addrsig_sym _ZGVZ8bmpModelR5MixerE2cm
	.addrsig_sym _ZZ9model8bitR5MixeriE4scm1
	.addrsig_sym _ZGVZ9model8bitR5MixeriE4scm1
	.addrsig_sym _ZZ9model8bitR5MixeriE4scm2
	.addrsig_sym _ZGVZ9model8bitR5MixeriE4scm2
	.addrsig_sym _ZZ9model8bitR5MixeriE4scm3
	.addrsig_sym _ZGVZ9model8bitR5MixeriE4scm3
	.addrsig_sym _ZZ9model8bitR5MixeriE4scm4
	.addrsig_sym _ZGVZ9model8bitR5MixeriE4scm4
	.addrsig_sym _ZZ9model8bitR5MixeriE4scm5
	.addrsig_sym _ZGVZ9model8bitR5MixeriE4scm5
	.addrsig_sym _ZZ9model8bitR5MixeriE4scm6
	.addrsig_sym _ZGVZ9model8bitR5MixeriE4scm6
	.addrsig_sym _ZZ9model8bitR5MixeriE4scm7
	.addrsig_sym _ZGVZ9model8bitR5MixeriE4scm7
	.addrsig_sym _ZZ9model8bitR5MixeriE2cm
	.addrsig_sym _ZGVZ9model8bitR5MixeriE2cm
	.addrsig_sym _ZZ9jpegModelR5MixerE2ht
	.addrsig_sym _ZGVZ9jpegModelR5MixerE2ht
	.addrsig_sym _ZZ9jpegModelR5MixerE3huf
	.addrsig_sym _ZGVZ9jpegModelR5MixerE3huf
	.addrsig_sym _ZZ9jpegModelR5MixerE4hbuf
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4hbuf
	.addrsig_sym _ZZ9jpegModelR5MixerE5color
	.addrsig_sym _ZGVZ9jpegModelR5MixerE5color
	.addrsig_sym _ZZ9jpegModelR5MixerE4pred
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4pred
	.addrsig_sym _ZZ9jpegModelR5MixerE4cbuf
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4cbuf
	.addrsig_sym _ZZ9jpegModelR5MixerE5cbuf2
	.addrsig_sym _ZGVZ9jpegModelR5MixerE5cbuf2
	.addrsig_sym _ZZ9jpegModelR5MixerE8adv_pred
	.addrsig_sym _ZGVZ9jpegModelR5MixerE8adv_pred
	.addrsig_sym _ZZ9jpegModelR5MixerE4sumu
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4sumu
	.addrsig_sym _ZZ9jpegModelR5MixerE4sumv
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4sumv
	.addrsig_sym _ZZ9jpegModelR5MixerE2ls
	.addrsig_sym _ZGVZ9jpegModelR5MixerE2ls
	.addrsig_sym _ZZ9jpegModelR5MixerE3lcp
	.addrsig_sym _ZGVZ9jpegModelR5MixerE3lcp
	.addrsig_sym _ZZ9jpegModelR5MixerE4zpos
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4zpos
	.addrsig_sym _ZZ9jpegModelR5MixerE4qtab
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4qtab
	.addrsig_sym _ZZ9jpegModelR5MixerE4qmap
	.addrsig_sym _ZGVZ9jpegModelR5MixerE4qmap
	.addrsig_sym _ZZ9jpegModelR5MixerE2kx
	.addrsig_sym _ZZ9jpegModelR5MixerE1t
	.addrsig_sym _ZGVZ9jpegModelR5MixerE1t
	.addrsig_sym _ZZ9jpegModelR5MixerE3cxt
	.addrsig_sym _ZGVZ9jpegModelR5MixerE3cxt
	.addrsig_sym _ZZ9jpegModelR5MixerE2cp
	.addrsig_sym _ZGVZ9jpegModelR5MixerE2cp
	.addrsig_sym _ZZ9jpegModelR5MixerE2sm
	.addrsig_sym _ZGVZ9jpegModelR5MixerE2sm
	.addrsig_sym _ZZ9jpegModelR5MixerE2m1
	.addrsig_sym _ZGVZ9jpegModelR5MixerE2m1
	.addrsig_sym _ZZ9jpegModelR5MixerE2a1
	.addrsig_sym _ZGVZ9jpegModelR5MixerE2a1
	.addrsig_sym _ZZ9jpegModelR5MixerE2a2
	.addrsig_sym _ZGVZ9jpegModelR5MixerE2a2
	.addrsig_sym _ZGVZ8wavModelR5MixerE1K
	.addrsig_sym _ZZ8wavModelR5MixerE4scm1
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm1
	.addrsig_sym _ZZ8wavModelR5MixerE4scm2
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm2
	.addrsig_sym _ZZ8wavModelR5MixerE4scm3
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm3
	.addrsig_sym _ZZ8wavModelR5MixerE4scm4
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm4
	.addrsig_sym _ZZ8wavModelR5MixerE4scm5
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm5
	.addrsig_sym _ZZ8wavModelR5MixerE4scm6
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm6
	.addrsig_sym _ZZ8wavModelR5MixerE4scm7
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm7
	.addrsig_sym _ZZ8wavModelR5MixerE4scm8
	.addrsig_sym _ZGVZ8wavModelR5MixerE4scm8
	.addrsig_sym _ZZ8wavModelR5MixerE2cm
	.addrsig_sym _ZGVZ8wavModelR5MixerE2cm
	.addrsig_sym _ZZ8exeModelR5MixerE2cm
	.addrsig_sym _ZGVZ8exeModelR5MixerE2cm
	.addrsig_sym _ZZ13indirectModelR5MixerE2cm
	.addrsig_sym _ZGVZ13indirectModelR5MixerE2cm
	.addrsig_sym _ZZ8dmcModelR5MixerE1t
	.addrsig_sym _ZGVZ8dmcModelR5MixerE1t
	.addrsig_sym _ZZ8dmcModelR5MixerE2sm
	.addrsig_sym _ZGVZ8dmcModelR5MixerE2sm
	.addrsig_sym _ZZ13contextModel2vE2cm
	.addrsig_sym _ZGVZ13contextModel2vE2cm
	.addrsig_sym _ZZ13contextModel2vE4rcm7
	.addrsig_sym _ZGVZ13contextModel2vE4rcm7
	.addrsig_sym _ZZ13contextModel2vE4rcm9
	.addrsig_sym _ZGVZ13contextModel2vE4rcm9
	.addrsig_sym _ZZ13contextModel2vE5rcm10
	.addrsig_sym _ZGVZ13contextModel2vE5rcm10
	.addrsig_sym _ZZ13contextModel2vE1m
	.addrsig_sym _ZGVZ13contextModel2vE1m
	.addrsig_sym _ZZN9Predictor6updateEvE1a
	.addrsig_sym _ZGVZN9Predictor6updateEvE1a
	.addrsig_sym _ZZN9Predictor6updateEvE2a1
	.addrsig_sym _ZGVZN9Predictor6updateEvE2a1
	.addrsig_sym _ZZN9Predictor6updateEvE2a2
	.addrsig_sym _ZGVZN9Predictor6updateEvE2a2
	.addrsig_sym _ZZN9Predictor6updateEvE2a3
	.addrsig_sym _ZGVZN9Predictor6updateEvE2a3
	.addrsig_sym _ZZN9Predictor6updateEvE2a4
	.addrsig_sym _ZGVZN9Predictor6updateEvE2a4
	.addrsig_sym _ZZN9Predictor6updateEvE2a5
	.addrsig_sym _ZGVZN9Predictor6updateEvE2a5
	.addrsig_sym _ZZN9Predictor6updateEvE2a6
	.addrsig_sym _ZGVZN9Predictor6updateEvE2a6
	.addrsig_sym _ZZ7getlineP8_IO_FILEE1s
	.addrsig_sym _ZGVZ7getlineP8_IO_FILEE1s
	.addrsig_sym _ZZ7putsizeR6StringS0_PKciE3blk
