	.file	"frame_layout.cpp"
                                        # Start of file scope inline assembly
	.globl	_ZSt21ios_base_library_initv

                                        # End of file scope inline assembly
	.text
	.globl	_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi # -- Begin function _Z11check_tracePKcS0_PK13trace_elementdjbjjbbi
	.p2align	5
	.type	_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi,@function
_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi: # @_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -336
	.cfi_def_cfa_offset 336
	st.d	$ra, $sp, 328                   # 8-byte Folded Spill
	st.d	$fp, $sp, 320                   # 8-byte Folded Spill
	st.d	$s0, $sp, 312                   # 8-byte Folded Spill
	st.d	$s1, $sp, 304                   # 8-byte Folded Spill
	st.d	$s2, $sp, 296                   # 8-byte Folded Spill
	st.d	$s3, $sp, 288                   # 8-byte Folded Spill
	st.d	$s4, $sp, 280                   # 8-byte Folded Spill
	st.d	$s5, $sp, 272                   # 8-byte Folded Spill
	st.d	$s6, $sp, 264                   # 8-byte Folded Spill
	st.d	$s7, $sp, 256                   # 8-byte Folded Spill
	st.d	$s8, $sp, 248                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 240                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 232                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 224                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 216                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 208                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 200                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 192                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 184                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	move	$s0, $a2
	fld.d	$fa1, $a2, 0
	move	$s1, $a7
	move	$s2, $a6
	move	$s4, $a4
	move	$s5, $a3
	fmov.d	$fa2, $fa0
	move	$s3, $a1
	move	$s8, $a0
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a1, $a0, %pc_lo12(.L.str)
	move	$a0, $s8
	move	$a2, $zero
	move	$a3, $zero
	fmov.d	$fa0, $fa1
	fmov.d	$fa1, $fa2
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	ld.w	$a4, $s0, 8
	ld.d	$a3, $s0, 16
	fld.d	$fs0, $s0, 24
	ld.d	$s6, $s0, 32
	ld.b	$a5, $s3, 0
	move	$s7, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.1)
	addi.d	$a1, $a0, %pc_lo12(.L.str.1)
	move	$a0, $s8
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	ld.b	$a1, $s3, 1
	or	$fp, $s7, $a0
	movgr2fr.w	$fa0, $a1
	ffint.d.w	$fa1, $fa0
	pcalau12i	$a0, %pc_hi20(.L.str.2)
	addi.d	$a1, $a0, %pc_lo12(.L.str.2)
	move	$a0, $s8
	move	$a2, $s5
	move	$a3, $s6
	fmov.d	$fa0, $fs0
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	beqz	$s4, .LBB0_2
# %bb.1:
	ld.b	$a5, $s3, 2
	ld.b	$s4, $s3, 3
	ld.b	$a4, $s0, 40
	ld.d	$a3, $s0, 48
	ld.b	$s5, $s0, 56
	ld.d	$s6, $s0, 64
	addi.d	$s3, $s3, 4
	addi.d	$s7, $s0, 72
	pcalau12i	$a0, %pc_hi20(.L.str.3)
	addi.d	$a1, $a0, %pc_lo12(.L.str.3)
	move	$a0, $s8
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.4)
	addi.d	$a1, $a0, %pc_lo12(.L.str.4)
	ori	$a2, $zero, 1
	move	$a0, $s8
	move	$a3, $s6
	move	$a4, $s5
	move	$a5, $s4
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	or	$a0, $s0, $a0
	or	$fp, $fp, $a0
	ld.d	$a4, $sp, 344
	ld.d	$a0, $sp, 336
	bnez	$s1, .LBB0_3
	b	.LBB0_4
.LBB0_2:
	addi.d	$s7, $s0, 40
	addi.d	$s3, $s3, 2
	ld.d	$a4, $sp, 344
	ld.d	$a0, $sp, 336
	beqz	$s1, .LBB0_4
.LBB0_3:
	st.d	$a0, $sp, 160                   # 8-byte Folded Spill
	ld.b	$a0, $s3, 1
	ld.b	$a5, $s3, 0
	movgr2fr.w	$fa0, $a0
	vinsgr2vr.b	$vr1, $a5, 0
	vinsgr2vr.b	$vr1, $a5, 2
	vslli.h	$vr1, $vr1, 8
	vsrai.h	$vr2, $vr1, 8
	lu12i.w	$a0, 32
	ori	$a0, $a0, 39
	vreplgr2vr.w	$vr1, $a0
	vmul.h	$vr1, $vr2, $vr1
	lu12i.w	$a0, 48
	ori	$a0, $a0, 38
	vreplgr2vr.w	$vr3, $a0
	vmul.h	$vr3, $vr2, $vr3
	lu12i.w	$a0, 64
	ori	$a0, $a0, 37
	vreplgr2vr.w	$vr4, $a0
	vmul.h	$vr4, $vr2, $vr4
	lu12i.w	$a0, 80
	ori	$a0, $a0, 36
	vreplgr2vr.w	$vr5, $a0
	vmul.h	$vr8, $vr2, $vr5
	lu12i.w	$a0, 96
	ori	$a0, $a0, 35
	vreplgr2vr.w	$vr5, $a0
	vmul.h	$vr9, $vr2, $vr5
	lu12i.w	$a0, 112
	ori	$a0, $a0, 34
	vreplgr2vr.w	$vr5, $a0
	vmul.h	$vr10, $vr2, $vr5
	lu12i.w	$a0, 128
	ori	$a0, $a0, 33
	vreplgr2vr.w	$vr5, $a0
	vmul.h	$vr7, $vr2, $vr5
	lu12i.w	$a0, 144
	ori	$a0, $a0, 32
	vreplgr2vr.w	$vr5, $a0
	vmul.h	$vr5, $vr2, $vr5
	lu12i.w	$a0, 160
	ori	$a0, $a0, 31
	vreplgr2vr.w	$vr6, $a0
	vinsgr2vr.h	$vr11, $a5, 0
	vinsgr2vr.h	$vr11, $a5, 1
	vmul.h	$vr6, $vr11, $vr6
	vpickve2gr.h	$a0, $vr1, 1
	ext.w.h	$a0, $a0
	st.d	$a0, $sp, 152                   # 8-byte Folded Spill
	div.d	$a0, $a5, $a0
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a1, $vr3, 1
	ext.w.h	$a1, $a1
	st.d	$a1, $sp, 136                   # 8-byte Folded Spill
	div.d	$a0, $a0, $a1
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a1, $vr3, 0
	ext.w.h	$a2, $a1
	st.d	$a2, $sp, 120                   # 8-byte Folded Spill
	vpickve2gr.h	$a1, $vr1, 0
	ext.w.h	$a1, $a1
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr4, 0
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr4, 1
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 104                   # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr8, 1
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 96                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr8, 0
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr9, 0
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr9, 1
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr10, 1
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr10, 0
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	lu12i.w	$a2, 320
	ori	$a2, $a2, 21
	vreplgr2vr.w	$vr1, $a2
	vmul.h	$vr1, $vr11, $vr1
	lu12i.w	$a2, 352
	ori	$a2, $a2, 19
	vreplgr2vr.w	$vr3, $a2
	vmul.h	$vr3, $vr2, $vr3
	lu12i.w	$a2, 368
	ori	$a2, $a2, 18
	vreplgr2vr.w	$vr4, $a2
	vmul.h	$vr4, $vr2, $vr4
	lu12i.w	$a2, 384
	ori	$a2, $a2, 17
	vreplgr2vr.w	$vr8, $a2
	vmul.h	$vr8, $vr2, $vr8
	lu12i.w	$a2, 400
	ori	$a2, $a2, 16
	vreplgr2vr.w	$vr9, $a2
	vmul.h	$vr9, $vr2, $vr9
	lu12i.w	$a2, 416
	ori	$a2, $a2, 15
	vreplgr2vr.w	$vr10, $a2
	vmul.h	$vr10, $vr2, $vr10
	lu12i.w	$a2, 432
	ori	$a2, $a2, 14
	vreplgr2vr.w	$vr11, $a2
	vmul.h	$vr11, $vr2, $vr11
	lu12i.w	$a2, 448
	ori	$a2, $a2, 13
	vreplgr2vr.w	$vr12, $a2
	vmul.h	$vr12, $vr2, $vr12
	lu12i.w	$a2, 464
	ori	$a2, $a2, 12
	vreplgr2vr.w	$vr13, $a2
	vmul.h	$vr13, $vr2, $vr13
	lu12i.w	$a2, 480
	ori	$a2, $a2, 11
	vreplgr2vr.w	$vr14, $a2
	vmul.h	$vr2, $vr2, $vr14
	vpickve2gr.h	$a2, $vr7, 0
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr7, 1
	ext.w.h	$a2, $a2
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr5, 1
	ext.w.h	$t7, $a2
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr5, 0
	ext.w.h	$t8, $a2
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr6, 0
	ext.w.h	$s1, $a2
	div.d	$a1, $a1, $s1
	vpickve2gr.h	$a2, $vr6, 1
	ext.w.h	$s3, $a2
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr2, 0
	ext.w.h	$s4, $a2
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr2, 1
	ext.w.h	$s5, $a2
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr13, 1
	ext.w.h	$s6, $a2
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr13, 0
	ext.w.h	$ra, $a2
	div.d	$a0, $a0, $ra
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr12, 0
	st.d	$s8, $sp, 176                   # 8-byte Folded Spill
	ext.w.h	$s8, $a2
	div.d	$a0, $a0, $s8
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr12, 1
	ext.w.h	$s0, $a2
	div.d	$a1, $a1, $s0
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr11, 1
	ext.w.h	$s2, $a2
	div.d	$a1, $a1, $s2
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr11, 0
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	ext.w.h	$s7, $a2
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr10, 0
	move	$t6, $fp
	ext.w.h	$fp, $a2
	div.d	$a0, $a0, $fp
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a2, $vr10, 1
	st.d	$a4, $sp, 168                   # 8-byte Folded Spill
	ext.w.h	$a4, $a2
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr9, 1
	ext.w.h	$a3, $a2
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	vpickve2gr.h	$a2, $vr9, 0
	ext.w.h	$a2, $a2
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a6, $vr8, 0
	ext.w.h	$a6, $a6
	div.d	$a0, $a0, $a6
	ext.w.h	$a0, $a0
	vpickve2gr.h	$a7, $vr8, 1
	ext.w.h	$a7, $a7
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	vpickve2gr.h	$t0, $vr4, 1
	ext.w.h	$t0, $t0
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	vpickve2gr.h	$t1, $vr4, 0
	ext.w.h	$t1, $t1
	div.d	$a0, $a0, $t1
	ext.w.h	$a0, $a0
	vpickve2gr.h	$t2, $vr3, 0
	ext.w.h	$t2, $t2
	div.d	$a0, $a0, $t2
	vpickve2gr.h	$t3, $vr3, 1
	ext.w.h	$t3, $t3
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	vpickve2gr.h	$t4, $vr1, 0
	ext.w.h	$t4, $t4
	div.d	$a1, $a1, $t4
	ext.w.h	$a0, $a0
	vpickve2gr.h	$t5, $vr1, 1
	ext.w.h	$t5, $t5
	div.d	$a0, $a0, $t5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $fp
	move	$fp, $t6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s8
	ld.d	$s8, $sp, 176                   # 8-byte Folded Reload
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $ra
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 80                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 88                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 136                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 120                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 128                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 152                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ffint.d.w	$fa0, $fa0
	fadd.d	$fa1, $fa0, $fa0
	fst.d	$fa1, $sp, 152                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 136                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 128                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 104                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$ft1, $fa1, $fa0
	fadd.d	$ft2, $ft1, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$ft13, $ft6, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$ft0, $ft14, $fa0
	fst.d	$ft14, $sp, 16                  # 8-byte Folded Spill
	fadd.d	$fa6, $ft0, $fa0
	fst.d	$ft0, $sp, 24                   # 8-byte Folded Spill
	fadd.d	$fa5, $fa6, $fa0
	fst.d	$fa6, $sp, 32                   # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $sp, 40                   # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $sp, 48                   # 8-byte Folded Spill
	fadd.d	$fa2, $fa3, $fa0
	fst.d	$fa3, $sp, 64                   # 8-byte Folded Spill
	fadd.d	$ft15, $fa2, $fa0
	fst.d	$fa2, $sp, 72                   # 8-byte Folded Spill
	fadd.d	$fs0, $ft15, $fa0
	fadd.d	$fs1, $fs0, $fa0
	fadd.d	$fs2, $fs1, $fa0
	fadd.d	$fs3, $fs2, $fa0
	fadd.d	$fs4, $fs3, $fa0
	fadd.d	$fs5, $fs4, $fa0
	fadd.d	$fs6, $fs5, $fa0
	ext.w.h	$a0, $a0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	div.d	$a0, $a0, $a5
	vinsgr2vr.h	$vr1, $a0, 0
	vpickve2gr.b	$a0, $vr1, 0
	vinsgr2vr.h	$vr1, $a1, 1
	vpickve2gr.b	$a1, $vr1, 2
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$ft12, $fs7, $fa0
	fadd.d	$ft7, $ft12, $fa0
	fadd.d	$ft8, $ft7, $fa0
	fadd.d	$ft9, $ft8, $fa0
	fadd.d	$ft10, $ft9, $fa0
	fadd.d	$ft11, $ft10, $fa0
	fadd.d	$fa1, $ft11, $fa0
	fst.d	$fa1, $sp, 112                  # 8-byte Folded Spill
	fdiv.d	$fa7, $fa1, $ft11
	fdiv.d	$fa7, $fa7, $ft10
	fdiv.d	$fa7, $fa7, $ft9
	fdiv.d	$fa7, $fa7, $ft8
	fdiv.d	$fa7, $fa7, $ft7
	fdiv.d	$fa7, $fa7, $ft12
	fdiv.d	$fa7, $fa7, $fs7
	fdiv.d	$fa7, $fa7, $fs6
	fdiv.d	$fa7, $fa7, $fs5
	fdiv.d	$fa7, $fa7, $fs4
	fdiv.d	$fa7, $fa7, $fs3
	fdiv.d	$fa7, $fa7, $fs2
	fdiv.d	$fa7, $fa7, $fs1
	fdiv.d	$fa7, $fa7, $fs0
	fdiv.d	$fa7, $fa7, $ft15
	fdiv.d	$fa7, $fa7, $fa2
	fdiv.d	$fa7, $fa7, $fa3
	fdiv.d	$fa7, $fa7, $fa4
	fdiv.d	$fa7, $fa7, $fa5
	fdiv.d	$fa7, $fa7, $fa6
	fdiv.d	$fa7, $fa7, $ft0
	fdiv.d	$fa7, $fa7, $ft14
	fdiv.d	$fa7, $fa7, $ft13
	fmov.d	$ft14, $ft13
	fdiv.d	$fa7, $fa7, $ft6
	fmov.d	$ft13, $ft6
	fdiv.d	$fa7, $fa7, $ft5
	fmov.d	$ft6, $ft5
	fdiv.d	$fa7, $fa7, $ft4
	fmov.d	$ft5, $ft4
	fdiv.d	$fa7, $fa7, $ft3
	fmov.d	$ft4, $ft3
	fdiv.d	$fa7, $fa7, $ft2
	fmov.d	$ft3, $ft2
	fmov.d	$ft2, $ft1
	fdiv.d	$fa7, $fa7, $ft1
	fld.d	$ft1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $ft1
	fld.d	$ft0, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $ft0
	fld.d	$fa6, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa6
	fld.d	$fa5, $sp, 104                  # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa5
	fld.d	$fa4, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa4
	fld.d	$fa3, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa3
	fld.d	$fa2, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa2
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fst.d	$fa7, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa7, $fa0, $fa1
	fdiv.d	$fa7, $fa7, $fa2
	fdiv.d	$fa7, $fa7, $fa3
	fdiv.d	$fa7, $fa7, $fa4
	fdiv.d	$fa7, $fa7, $fa5
	fdiv.d	$fa7, $fa7, $fa6
	fdiv.d	$fa7, $fa7, $ft0
	fdiv.d	$fa7, $fa7, $ft1
	fdiv.d	$fa7, $fa7, $ft2
	fdiv.d	$fa7, $fa7, $ft3
	fdiv.d	$fa7, $fa7, $ft4
	fdiv.d	$fa7, $fa7, $ft5
	fdiv.d	$fa7, $fa7, $ft6
	fdiv.d	$fa7, $fa7, $ft13
	fdiv.d	$fa7, $fa7, $ft14
	fld.d	$fa1, $sp, 16                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fld.d	$fa1, $sp, 24                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa7, $fa7, $fa1
	fdiv.d	$fa7, $fa7, $ft15
	fdiv.d	$fa7, $fa7, $fs0
	fdiv.d	$fa7, $fa7, $fs1
	fdiv.d	$fa7, $fa7, $fs2
	fdiv.d	$fa7, $fa7, $fs3
	fdiv.d	$fa7, $fa7, $fs4
	fdiv.d	$fa7, $fa7, $fs5
	fdiv.d	$fa7, $fa7, $fs6
	fdiv.d	$fa7, $fa7, $fs7
	fdiv.d	$fa1, $fa7, $ft12
	fdiv.d	$fa1, $fa1, $ft7
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft11
	fld.d	$fa2, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa2, $fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	ld.d	$s0, $sp, 144                   # 8-byte Folded Reload
	ld.b	$a4, $s0, 0
	fmul.d	$fs0, $fa0, $fa2
	mul.d	$a0, $a0, $a1
	ext.w.b	$a5, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$a1, $a0, %pc_lo12(.L.str.5)
	ori	$a2, $zero, 1
	move	$a0, $s8
	move	$a3, $zero
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s0, 8
	move	$s1, $a0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	ftintrz.l.d	$fa0, $fs0
	movfr2gr.d	$a5, $fa0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a1, $a0, %pc_lo12(.L.str.6)
	ori	$a2, $zero, 1
	move	$a0, $s8
	move	$a3, $zero
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	ld.d	$a4, $sp, 168                   # 8-byte Folded Reload
	or	$a0, $s1, $a0
	or	$fp, $fp, $a0
	ld.d	$a0, $sp, 160                   # 8-byte Folded Reload
.LBB0_4:
	addi.d	$a0, $a0, -1
	ori	$a5, $a0, 42
	pcalau12i	$a0, %pc_hi20(.L.str.7)
	addi.d	$a1, $a0, %pc_lo12(.L.str.7)
	ori	$a2, $zero, 1
	move	$a0, $s8
	move	$a3, $zero
	pcaddu18i	$ra, %call36(_ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_)
	jirl	$ra, $ra, 0
	or	$a0, $fp, $a0
	fld.d	$fs7, $sp, 184                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 192                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 200                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 208                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 216                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 224                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 232                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 240                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 248                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 256                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 264                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 272                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 280                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 288                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 296                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 304                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 312                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 320                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 328                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 336
	ret
.Lfunc_end0:
	.size	_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi, .Lfunc_end0-_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_
	.type	_ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_,@function
_ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_: # @_ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 56, -56
	.cfi_offset 57, -64
	fmov.d	$fs0, $fa1
	fmov.d	$fs1, $fa0
	move	$s0, $a3
	move	$s1, $a1
	bstrpick.d	$fp, $a2, 31, 0
	addi.d	$s3, $fp, -1
	beqz	$a0, .LBB1_2
# %bb.1:
	move	$s2, $a0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB1_3
.LBB1_2:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, -24
	add.d	$a0, $a0, $a1
	ld.w	$a1, $a0, 32
	ori	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate)
	jirl	$ra, $ra, 0
.LBB1_3:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	and	$s3, $s3, $s0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s2, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.27)
	addi.d	$a1, $a0, %pc_lo12(.L.str.27)
	ori	$a2, $zero, 2
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	beqz	$s1, .LBB1_5
# %bb.4:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB1_6
.LBB1_5:
	ld.d	$a0, $s2, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s2, $a0
	ld.w	$a1, $a0, 32
	ori	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate)
	jirl	$ra, $ra, 0
.LBB1_6:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	fcmp.cune.d	$fcc0, $fs1, $fs0
	movcf2gr	$a0, $fcc0
	st.d	$a0, $sp, 24
	sltu	$s2, $zero, $s3
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s1, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.28)
	addi.d	$a1, $a0, %pc_lo12(.L.str.28)
	ori	$a2, $zero, 13
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 24
	movgr2cf	$fcc0, $a0
	movcf2gr	$a0, $fcc0
	or	$fp, $s2, $a0
	beqz	$fp, .LBB1_11
# %bb.7:
	beqz	$s3, .LBB1_9
# %bb.8:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s2, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.30)
	addi.d	$a1, $a0, %pc_lo12(.L.str.30)
	ori	$a2, $zero, 28
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertIPKvEERSoT_)
	jirl	$ra, $ra, 0
.LBB1_9:
	fcmp.ceq.d	$fcc0, $fs1, $fs0
	bcnez	$fcc0, .LBB1_12
# %bb.10:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s0, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.31)
	addi.d	$a1, $a0, %pc_lo12(.L.str.31)
	ori	$a2, $zero, 26
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	fmov.d	$fa0, $fs1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertIdEERSoT_)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.32)
	addi.d	$a1, $a0, %pc_lo12(.L.str.32)
	ori	$a2, $zero, 12
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	fmov.d	$fa0, $fs0
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertIdEERSoT_)
	jirl	$ra, $ra, 0
	b	.LBB1_12
.LBB1_11:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a1, %pc_hi20(.L.str.29)
	addi.d	$a1, $a1, %pc_lo12(.L.str.29)
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.LBB1_12:
	ld.d	$a0, $s1, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s1, $a0
	ld.d	$s0, $a0, 240
	beqz	$s0, .LBB1_17
# %bb.13:                               # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
	ld.bu	$a0, $s0, 56
	beqz	$a0, .LBB1_15
# %bb.14:
	ld.bu	$a0, $s0, 67
	b	.LBB1_16
.LBB1_15:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNKSt5ctypeIcE13_M_widen_initEv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s0, 0
	ld.d	$a2, $a0, 48
	ori	$a1, $zero, 10
	move	$a0, $s0
	jirl	$ra, $a2, 0
.LBB1_16:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit
	ext.w.b	$a1, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	pcaddu18i	$ra, %call36(_ZNSo3putEc)
	jirl	$ra, $ra, 0
	pcaddu18i	$ra, %call36(_ZNSo5flushEv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB1_17:
	pcaddu18i	$ra, %call36(_ZSt16__throw_bad_castv)
	jirl	$ra, $ra, 0
.Lfunc_end1:
	.size	_ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_, .Lfunc_end1-_ZL35check_and_print_value_and_alignmentIdEbPKcS1_jPKvT_S4_
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_
	.type	_ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_,@function
_ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_: # @_ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	st.d	$s6, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a5
	move	$s0, $a4
	move	$s2, $a3
	move	$s3, $a1
	bstrpick.d	$s1, $a2, 31, 0
	addi.d	$s5, $s1, -1
	beqz	$a0, .LBB2_2
# %bb.1:
	move	$s4, $a0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB2_3
.LBB2_2:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, -24
	add.d	$a0, $a0, $a1
	ld.w	$a1, $a0, 32
	ori	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate)
	jirl	$ra, $ra, 0
.LBB2_3:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	and	$s5, $s5, $s2
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s4, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.27)
	addi.d	$a1, $a0, %pc_lo12(.L.str.27)
	ori	$a2, $zero, 2
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	beqz	$s3, .LBB2_5
# %bb.4:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB2_6
.LBB2_5:
	ld.d	$a0, $s4, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s4, $a0
	ld.w	$a1, $a0, 32
	ori	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate)
	jirl	$ra, $ra, 0
.LBB2_6:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit18
	xor	$a0, $s0, $fp
	sltu	$s4, $zero, $a0
	sltu	$s6, $zero, $s5
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s3, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.28)
	addi.d	$a1, $a0, %pc_lo12(.L.str.28)
	ori	$a2, $zero, 13
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
	or	$s1, $s6, $s4
	beqz	$s1, .LBB2_11
# %bb.7:
	beqz	$s5, .LBB2_9
# %bb.8:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s4, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.30)
	addi.d	$a1, $a0, %pc_lo12(.L.str.30)
	ori	$a2, $zero, 28
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertIPKvEERSoT_)
	jirl	$ra, $ra, 0
.LBB2_9:
	beq	$s0, $fp, .LBB2_12
# %bb.10:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s2, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.31)
	addi.d	$a1, $a0, %pc_lo12(.L.str.31)
	ori	$a2, $zero, 26
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSolsEi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.32)
	addi.d	$a1, $a0, %pc_lo12(.L.str.32)
	ori	$a2, $zero, 12
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSolsEi)
	jirl	$ra, $ra, 0
	b	.LBB2_12
.LBB2_11:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a1, %pc_hi20(.L.str.29)
	addi.d	$a1, $a1, %pc_lo12(.L.str.29)
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
.LBB2_12:
	ld.d	$a0, $s3, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s3, $a0
	ld.d	$fp, $a0, 240
	beqz	$fp, .LBB2_17
# %bb.13:                               # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
	ld.bu	$a0, $fp, 56
	beqz	$a0, .LBB2_15
# %bb.14:
	ld.bu	$a0, $fp, 67
	b	.LBB2_16
.LBB2_15:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZNKSt5ctypeIcE13_M_widen_initEv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $fp, 0
	ld.d	$a2, $a0, 48
	ori	$a1, $zero, 10
	move	$a0, $fp
	jirl	$ra, $a2, 0
.LBB2_16:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit
	ext.w.b	$a1, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	pcaddu18i	$ra, %call36(_ZNSo3putEc)
	jirl	$ra, $ra, 0
	pcaddu18i	$ra, %call36(_ZNSo5flushEv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.LBB2_17:
	pcaddu18i	$ra, %call36(_ZSt16__throw_bad_castv)
	jirl	$ra, $ra, 0
.Lfunc_end2:
	.size	_ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_, .Lfunc_end2-_ZL35check_and_print_value_and_alignmentIiEbPKcS1_jPKvT_S4_
	.cfi_endproc
                                        # -- End function
	.p2align	5                               # -- Begin function _ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_
	.type	_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_,@function
_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_: # @_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	move	$fp, $a5
	move	$s1, $a4
	move	$s3, $a3
	move	$s2, $a1
	bstrpick.d	$s0, $a2, 31, 0
	addi.d	$s5, $s0, -1
	beqz	$a0, .LBB3_2
# %bb.1:
	move	$s4, $a0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	move	$a1, $s4
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB3_3
.LBB3_2:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, -24
	add.d	$a0, $a0, $a1
	ld.w	$a1, $a0, 32
	ori	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate)
	jirl	$ra, $ra, 0
.LBB3_3:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
	and	$s5, $s5, $s3
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s4, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.27)
	addi.d	$a1, $a0, %pc_lo12(.L.str.27)
	ori	$a2, $zero, 2
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	beqz	$s2, .LBB3_5
# %bb.4:
	move	$a0, $s2
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB3_6
.LBB3_5:
	ld.d	$a0, $s4, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s4, $a0
	ld.w	$a1, $a0, 32
	ori	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate)
	jirl	$ra, $ra, 0
.LBB3_6:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit17
	xor	$a0, $s1, $fp
	sltu	$s4, $zero, $a0
	sltu	$s6, $zero, $s5
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s2, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.28)
	addi.d	$a1, $a0, %pc_lo12(.L.str.28)
	ori	$a2, $zero, 13
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertImEERSoT_)
	jirl	$ra, $ra, 0
	or	$s0, $s6, $s4
	beqz	$s0, .LBB3_12
# %bb.7:
	beqz	$s5, .LBB3_9
# %bb.8:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$s4, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a0, %pc_hi20(.L.str.30)
	addi.d	$a1, $a0, %pc_lo12(.L.str.30)
	ori	$a2, $zero, 28
	move	$a0, $s4
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$a0, $s4
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZNSo9_M_insertIPKvEERSoT_)
	jirl	$ra, $ra, 0
.LBB3_9:
	beq	$s1, $fp, .LBB3_17
# %bb.10:
	pcalau12i	$a0, %pc_hi20(.L.str.31)
	addi.d	$a1, $a0, %pc_lo12(.L.str.31)
	ori	$a2, $zero, 26
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s2, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s2, $a0
	ld.d	$a0, $a0, 16
	st.b	$s1, $sp, 22
	beqz	$a0, .LBB3_13
# %bb.11:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	addi.d	$a1, $sp, 22
	ori	$a2, $zero, 1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	b	.LBB3_14
.LBB3_12:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	pcalau12i	$a1, %pc_hi20(.L.str.29)
	addi.d	$a1, $a1, %pc_lo12(.L.str.29)
	ori	$a2, $zero, 3
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB3_17
.LBB3_13:
	move	$a0, $s2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_ZNSo3putEc)
	jirl	$ra, $ra, 0
	move	$s1, $s2
.LBB3_14:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c.exit
	pcalau12i	$a0, %pc_hi20(.L.str.32)
	addi.d	$a1, $a0, %pc_lo12(.L.str.32)
	ori	$a2, $zero, 12
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s1, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s1, $a0
	ld.d	$a0, $a0, 16
	st.b	$fp, $sp, 23
	beqz	$a0, .LBB3_16
# %bb.15:
	addi.d	$a1, $sp, 23
	ori	$a2, $zero, 1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB3_17
.LBB3_16:
	move	$a0, $s1
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNSo3putEc)
	jirl	$ra, $ra, 0
.LBB3_17:
	ld.d	$a0, $s2, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $s2, $a0
	ld.d	$fp, $a0, 240
	beqz	$fp, .LBB3_22
# %bb.18:                               # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
	ld.bu	$a0, $fp, 56
	beqz	$a0, .LBB3_20
# %bb.19:
	ld.bu	$a0, $fp, 67
	b	.LBB3_21
.LBB3_20:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZNKSt5ctypeIcE13_M_widen_initEv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $fp, 0
	ld.d	$a2, $a0, 48
	ori	$a1, $zero, 10
	move	$a0, $fp
	jirl	$ra, $a2, 0
.LBB3_21:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit
	ext.w.b	$a1, $a0
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$a0, $a0, %got_pc_lo12(_ZSt4cout)
	pcaddu18i	$ra, %call36(_ZNSo3putEc)
	jirl	$ra, $ra, 0
	pcaddu18i	$ra, %call36(_ZNSo5flushEv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.LBB3_22:
	pcaddu18i	$ra, %call36(_ZSt16__throw_bad_castv)
	jirl	$ra, $ra, 0
.Lfunc_end3:
	.size	_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_, .Lfunc_end3-_ZL35check_and_print_value_and_alignmentIcEbPKcS1_jPKvT_S4_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt6vectorIPKcSaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorIPKcSaIS1_EED2Ev,comdat
	.weak	_ZNSt6vectorIPKcSaIS1_EED2Ev    # -- Begin function _ZNSt6vectorIPKcSaIS1_EED2Ev
	.p2align	5
	.type	_ZNSt6vectorIPKcSaIS1_EED2Ev,@function
_ZNSt6vectorIPKcSaIS1_EED2Ev:           # @_ZNSt6vectorIPKcSaIS1_EED2Ev
	.cfi_startproc
# %bb.0:
	ld.d	$a0, $a0, 0
	beqz	$a0, .LBB4_2
# %bb.1:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.LBB4_2:                                # %_ZNSt12_Vector_baseIPKcSaIS1_EED2Ev.exit
	ret
.Lfunc_end4:
	.size	_ZNSt6vectorIPKcSaIS1_EED2Ev, .Lfunc_end4-_ZNSt6vectorIPKcSaIS1_EED2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z24getTestDescriptionStringB5cxx11bbbbb # -- Begin function _Z24getTestDescriptionStringB5cxx11bbbbb
	.p2align	5
	.type	_Z24getTestDescriptionStringB5cxx11bbbbb,@function
_Z24getTestDescriptionStringB5cxx11bbbbb: # @_Z24getTestDescriptionStringB5cxx11bbbbb
.Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception0
# %bb.0:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
	addi.d	$sp, $sp, -256
	.cfi_def_cfa_offset 256
	st.d	$ra, $sp, 248                   # 8-byte Folded Spill
	st.d	$fp, $sp, 240                   # 8-byte Folded Spill
	st.d	$s0, $sp, 232                   # 8-byte Folded Spill
	st.d	$s1, $sp, 224                   # 8-byte Folded Spill
	st.d	$s2, $sp, 216                   # 8-byte Folded Spill
	st.d	$s3, $sp, 208                   # 8-byte Folded Spill
	st.d	$s4, $sp, 200                   # 8-byte Folded Spill
	st.d	$s5, $sp, 192                   # 8-byte Folded Spill
	st.d	$s6, $sp, 184                   # 8-byte Folded Spill
	st.d	$s7, $sp, 176                   # 8-byte Folded Spill
	st.d	$s8, $sp, 168                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s0, $a2
	move	$s1, $a0
	addi.d	$a0, $sp, 24
	st.d	$a0, $sp, 8
	st.d	$zero, $sp, 16
	st.b	$zero, $sp, 24
	pcalau12i	$a0, %pc_hi20(.L.str.26)
	addi.d	$s7, $a0, %pc_lo12(.L.str.26)
	masknez	$a0, $s7, $a1
	pcalau12i	$a2, %pc_hi20(.L.str.25)
	addi.d	$s8, $a2, %pc_lo12(.L.str.25)
	maskeqz	$a1, $s8, $a1
	or	$a1, $a1, $a0
.Ltmp0:                                 # EH_LABEL
	addi.d	$a0, $sp, 8
	ori	$a2, $zero, 1
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm)
	jirl	$ra, $ra, 0
.Ltmp1:                                 # EH_LABEL
# %bb.1:                                # %.noexc21
	addi.d	$a3, $sp, 56
	st.d	$a3, $sp, 40
	ld.d	$a1, $a0, 0
	addi.d	$s5, $a0, 16
	beq	$a1, $s5, .LBB5_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	ld.d	$a2, $a0, 16
	st.d	$a2, $sp, 56
	ld.d	$s6, $a0, 8
	st.d	$a1, $sp, 40
	b	.LBB5_4
.LBB5_3:                                # %_ZNSt11char_traitsIcE4copyEPcPKcm.exit.i.i
	ld.d	$s6, $a0, 8
	addi.d	$a2, $s6, 1
	move	$fp, $a0
	move	$a0, $a3
	move	$a1, $s5
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB5_4:
	st.d	$s6, $sp, 48
	st.d	$zero, $a0, 8
	ld.d	$a1, $sp, 48
	st.d	$s5, $a0, 0
	addi.w	$a2, $zero, -2
	lu52i.d	$s6, $a2, 2047
	st.b	$zero, $a0, 16
	beq	$a1, $s6, .LBB5_35
# %bb.5:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i22
	masknez	$a0, $s7, $s0
	maskeqz	$a1, $s8, $s0
	or	$a1, $a1, $a0
.Ltmp3:                                 # EH_LABEL
	addi.d	$a0, $sp, 40
	ori	$a2, $zero, 1
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm)
	jirl	$ra, $ra, 0
.Ltmp4:                                 # EH_LABEL
# %bb.6:                                # %.noexc28
	addi.d	$a3, $sp, 88
	st.d	$a3, $sp, 72
	ld.d	$a1, $a0, 0
	addi.d	$s5, $a0, 16
	beq	$a1, $s5, .LBB5_8
# %bb.7:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i23
	ld.d	$a2, $a0, 16
	st.d	$a2, $sp, 88
	ld.d	$fp, $a0, 8
	st.d	$a1, $sp, 72
	b	.LBB5_9
.LBB5_8:                                # %_ZNSt11char_traitsIcE4copyEPcPKcm.exit.i.i26
	ld.d	$fp, $a0, 8
	addi.d	$a2, $fp, 1
	move	$s0, $a0
	move	$a0, $a3
	move	$a1, $s5
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	move	$a0, $s0
.LBB5_9:
	st.d	$fp, $sp, 80
	st.d	$zero, $a0, 8
	ld.d	$a1, $sp, 80
	st.d	$s5, $a0, 0
	st.b	$zero, $a0, 16
	beq	$a1, $s6, .LBB5_37
# %bb.10:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i30
	masknez	$a0, $s7, $s3
	maskeqz	$a1, $s8, $s3
	or	$a1, $a1, $a0
.Ltmp5:                                 # EH_LABEL
	addi.d	$a0, $sp, 72
	ori	$a2, $zero, 1
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm)
	jirl	$ra, $ra, 0
.Ltmp6:                                 # EH_LABEL
# %bb.11:                               # %.noexc36
	addi.d	$s3, $sp, 120
	st.d	$s3, $sp, 104
	ld.d	$a1, $a0, 0
	addi.d	$s5, $a0, 16
	beq	$a1, $s5, .LBB5_13
# %bb.12:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i31
	ld.d	$a2, $a0, 16
	st.d	$a2, $sp, 120
	ld.d	$fp, $a0, 8
	st.d	$a1, $sp, 104
	b	.LBB5_14
.LBB5_13:                               # %_ZNSt11char_traitsIcE4copyEPcPKcm.exit.i.i34
	ld.d	$fp, $a0, 8
	addi.d	$a2, $fp, 1
	move	$s0, $a0
	move	$a0, $s3
	move	$a1, $s5
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	move	$a0, $s0
.LBB5_14:
	st.d	$fp, $sp, 112
	st.d	$zero, $a0, 8
	ld.d	$a1, $sp, 112
	st.d	$s5, $a0, 0
	st.b	$zero, $a0, 16
	beq	$a1, $s6, .LBB5_39
# %bb.15:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i38
	masknez	$a0, $s7, $s4
	maskeqz	$a1, $s8, $s4
	or	$a1, $a1, $a0
.Ltmp7:                                 # EH_LABEL
	addi.d	$a0, $sp, 104
	ori	$a2, $zero, 1
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm)
	jirl	$ra, $ra, 0
.Ltmp8:                                 # EH_LABEL
# %bb.16:                               # %.noexc44
	addi.d	$s4, $sp, 152
	st.d	$s4, $sp, 136
	ld.d	$a1, $a0, 0
	addi.d	$s5, $a0, 16
	beq	$a1, $s5, .LBB5_18
# %bb.17:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i39
	ld.d	$a2, $a0, 16
	st.d	$a2, $sp, 152
	ld.d	$fp, $a0, 8
	st.d	$a1, $sp, 136
	b	.LBB5_19
.LBB5_18:                               # %_ZNSt11char_traitsIcE4copyEPcPKcm.exit.i.i42
	ld.d	$fp, $a0, 8
	addi.d	$a2, $fp, 1
	move	$s0, $a0
	move	$a0, $s4
	move	$a1, $s5
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	move	$a0, $s0
.LBB5_19:
	st.d	$fp, $sp, 144
	st.d	$zero, $a0, 8
	ld.d	$a1, $sp, 144
	st.d	$s5, $a0, 0
	st.b	$zero, $a0, 16
	beq	$a1, $s6, .LBB5_41
# %bb.20:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i46
	masknez	$a0, $s7, $s2
	maskeqz	$a1, $s8, $s2
	or	$a1, $a1, $a0
.Ltmp9:                                 # EH_LABEL
	addi.d	$a0, $sp, 136
	ori	$a2, $zero, 1
	pcaddu18i	$ra, %call36(_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm)
	jirl	$ra, $ra, 0
.Ltmp10:                                # EH_LABEL
# %bb.21:                               # %.noexc52
	addi.d	$a1, $s1, 16
	st.d	$a1, $s1, 0
	ld.d	$a2, $a0, 0
	addi.d	$s2, $a0, 16
	beq	$a2, $s2, .LBB5_23
# %bb.22:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i47
	st.d	$a2, $s1, 0
	ld.d	$a1, $a0, 16
	st.d	$a1, $s1, 16
	ld.d	$s5, $a0, 8
	b	.LBB5_24
.LBB5_23:                               # %_ZNSt11char_traitsIcE4copyEPcPKcm.exit.i.i50
	ld.d	$s5, $a0, 8
	addi.d	$a2, $s5, 1
	move	$fp, $a0
	move	$a0, $a1
	move	$a1, $s2
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB5_24:
	st.d	$s2, $a0, 0
	ld.d	$a1, $sp, 136
	st.d	$s5, $s1, 8
	st.d	$zero, $a0, 8
	st.b	$zero, $a0, 16
	beq	$a1, $s4, .LBB5_26
# %bb.25:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i54
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB5_26:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	ld.d	$a0, $sp, 104
	addi.d	$fp, $sp, 56
	addi.d	$s0, $sp, 88
	beq	$a0, $s3, .LBB5_28
# %bb.27:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i55
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB5_28:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit57
	ld.d	$a0, $sp, 72
	beq	$a0, $s0, .LBB5_30
# %bb.29:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i58
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB5_30:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit60
	ld.d	$a0, $sp, 40
	beq	$a0, $fp, .LBB5_32
# %bb.31:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i61
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB5_32:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit63
	ld.d	$a0, $sp, 8
	addi.d	$a1, $sp, 24
	beq	$a0, $a1, .LBB5_34
# %bb.33:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i64
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB5_34:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit66
	ld.d	$s8, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 232                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 240                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 248                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 256
	ret
.LBB5_35:
.Ltmp20:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.35)
	addi.d	$a0, $a0, %pc_lo12(.L.str.35)
	pcaddu18i	$ra, %call36(_ZSt20__throw_length_errorPKc)
	jirl	$ra, $ra, 0
.Ltmp21:                                # EH_LABEL
# %bb.36:                               # %.noexc27
.LBB5_37:
.Ltmp17:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.35)
	addi.d	$a0, $a0, %pc_lo12(.L.str.35)
	pcaddu18i	$ra, %call36(_ZSt20__throw_length_errorPKc)
	jirl	$ra, $ra, 0
.Ltmp18:                                # EH_LABEL
# %bb.38:                               # %.noexc35
.LBB5_39:
.Ltmp14:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.35)
	addi.d	$a0, $a0, %pc_lo12(.L.str.35)
	pcaddu18i	$ra, %call36(_ZSt20__throw_length_errorPKc)
	jirl	$ra, $ra, 0
.Ltmp15:                                # EH_LABEL
# %bb.40:                               # %.noexc43
.LBB5_41:
.Ltmp11:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.35)
	addi.d	$a0, $a0, %pc_lo12(.L.str.35)
	pcaddu18i	$ra, %call36(_ZSt20__throw_length_errorPKc)
	jirl	$ra, $ra, 0
.Ltmp12:                                # EH_LABEL
# %bb.42:                               # %.noexc51
.LBB5_43:
.Ltmp2:                                 # EH_LABEL
	move	$s1, $a0
	ld.d	$a0, $sp, 8
	addi.d	$a1, $sp, 24
	beq	$a0, $a1, .LBB5_49
	b	.LBB5_57
.LBB5_44:
.Ltmp13:                                # EH_LABEL
	ld.d	$a1, $sp, 136
	move	$s1, $a0
	bne	$a1, $s4, .LBB5_50
# %bb.45:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit69
	ld.d	$a0, $sp, 104
	bne	$a0, $s3, .LBB5_52
.LBB5_46:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit72
	ld.d	$a0, $sp, 72
	addi.d	$a1, $sp, 88
	bne	$a0, $a1, .LBB5_54
.LBB5_47:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit75
	ld.d	$a0, $sp, 40
	addi.d	$a1, $sp, 56
	bne	$a0, $a1, .LBB5_56
.LBB5_48:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit78
	ld.d	$a0, $sp, 8
	addi.d	$a1, $sp, 24
	bne	$a0, $a1, .LBB5_57
.LBB5_49:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit81
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB5_50:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i67
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 104
	beq	$a0, $s3, .LBB5_46
	b	.LBB5_52
.LBB5_51:
.Ltmp16:                                # EH_LABEL
	move	$s1, $a0
	ld.d	$a0, $sp, 104
	beq	$a0, $s3, .LBB5_46
.LBB5_52:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i70
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72
	addi.d	$a1, $sp, 88
	beq	$a0, $a1, .LBB5_47
	b	.LBB5_54
.LBB5_53:
.Ltmp19:                                # EH_LABEL
	move	$s1, $a0
	ld.d	$a0, $sp, 72
	addi.d	$a1, $sp, 88
	beq	$a0, $a1, .LBB5_47
.LBB5_54:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i73
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 40
	addi.d	$a1, $sp, 56
	beq	$a0, $a1, .LBB5_48
	b	.LBB5_56
.LBB5_55:
.Ltmp22:                                # EH_LABEL
	move	$s1, $a0
	ld.d	$a0, $sp, 40
	addi.d	$a1, $sp, 56
	beq	$a0, $a1, .LBB5_48
.LBB5_56:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i76
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8
	addi.d	$a1, $sp, 24
	beq	$a0, $a1, .LBB5_49
.LBB5_57:                               # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i79
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end5:
	.size	_Z24getTestDescriptionStringB5cxx11bbbbb, .Lfunc_end5-_Z24getTestDescriptionStringB5cxx11bbbbb
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table5:
.Lexception0:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end0-.Lcst_begin0
.Lcst_begin0:
	.uleb128 .Ltmp0-.Lfunc_begin0           # >> Call Site 1 <<
	.uleb128 .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.uleb128 .Ltmp2-.Lfunc_begin0           #     jumps to .Ltmp2
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp1-.Lfunc_begin0           # >> Call Site 2 <<
	.uleb128 .Ltmp3-.Ltmp1                  #   Call between .Ltmp1 and .Ltmp3
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp3-.Lfunc_begin0           # >> Call Site 3 <<
	.uleb128 .Ltmp4-.Ltmp3                  #   Call between .Ltmp3 and .Ltmp4
	.uleb128 .Ltmp22-.Lfunc_begin0          #     jumps to .Ltmp22
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp4-.Lfunc_begin0           # >> Call Site 4 <<
	.uleb128 .Ltmp5-.Ltmp4                  #   Call between .Ltmp4 and .Ltmp5
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp5-.Lfunc_begin0           # >> Call Site 5 <<
	.uleb128 .Ltmp6-.Ltmp5                  #   Call between .Ltmp5 and .Ltmp6
	.uleb128 .Ltmp19-.Lfunc_begin0          #     jumps to .Ltmp19
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp6-.Lfunc_begin0           # >> Call Site 6 <<
	.uleb128 .Ltmp7-.Ltmp6                  #   Call between .Ltmp6 and .Ltmp7
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp7-.Lfunc_begin0           # >> Call Site 7 <<
	.uleb128 .Ltmp8-.Ltmp7                  #   Call between .Ltmp7 and .Ltmp8
	.uleb128 .Ltmp16-.Lfunc_begin0          #     jumps to .Ltmp16
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp8-.Lfunc_begin0           # >> Call Site 8 <<
	.uleb128 .Ltmp9-.Ltmp8                  #   Call between .Ltmp8 and .Ltmp9
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp9-.Lfunc_begin0           # >> Call Site 9 <<
	.uleb128 .Ltmp10-.Ltmp9                 #   Call between .Ltmp9 and .Ltmp10
	.uleb128 .Ltmp13-.Lfunc_begin0          #     jumps to .Ltmp13
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp10-.Lfunc_begin0          # >> Call Site 10 <<
	.uleb128 .Ltmp20-.Ltmp10                #   Call between .Ltmp10 and .Ltmp20
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp20-.Lfunc_begin0          # >> Call Site 11 <<
	.uleb128 .Ltmp21-.Ltmp20                #   Call between .Ltmp20 and .Ltmp21
	.uleb128 .Ltmp22-.Lfunc_begin0          #     jumps to .Ltmp22
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp17-.Lfunc_begin0          # >> Call Site 12 <<
	.uleb128 .Ltmp18-.Ltmp17                #   Call between .Ltmp17 and .Ltmp18
	.uleb128 .Ltmp19-.Lfunc_begin0          #     jumps to .Ltmp19
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp14-.Lfunc_begin0          # >> Call Site 13 <<
	.uleb128 .Ltmp15-.Ltmp14                #   Call between .Ltmp14 and .Ltmp15
	.uleb128 .Ltmp16-.Lfunc_begin0          #     jumps to .Ltmp16
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp11-.Lfunc_begin0          # >> Call Site 14 <<
	.uleb128 .Ltmp12-.Ltmp11                #   Call between .Ltmp11 and .Ltmp12
	.uleb128 .Ltmp13-.Lfunc_begin0          #     jumps to .Ltmp13
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp12-.Lfunc_begin0          # >> Call Site 15 <<
	.uleb128 .Lfunc_end5-.Ltmp12            #   Call between .Ltmp12 and .Lfunc_end5
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end0:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	main                            # -- Begin function main
	.p2align	5
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	pcalau12i	$a0, %pc_hi20(_ZL21testDescriptionHeader)
	addi.d	$a0, $a0, %pc_lo12(_ZL21testDescriptionHeader)
	ld.d	$s1, $a0, 0
	ld.d	$s2, $a0, 8
	beq	$s1, $s2, .LBB6_10
# %bb.1:
	pcalau12i	$a0, %got_pc_hi20(_ZSt4cout)
	ld.d	$fp, $a0, %got_pc_lo12(_ZSt4cout)
	b	.LBB6_4
	.p2align	4, , 16
.LBB6_2:                                #   in Loop: Header=BB6_4 Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNKSt5ctypeIcE13_M_widen_initEv)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s0, 0
	ld.d	$a2, $a0, 48
	ori	$a1, $zero, 10
	move	$a0, $s0
	jirl	$ra, $a2, 0
.LBB6_3:                                # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit
                                        #   in Loop: Header=BB6_4 Depth=1
	ext.w.b	$a1, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZNSo3putEc)
	jirl	$ra, $ra, 0
	pcaddu18i	$ra, %call36(_ZNSo5flushEv)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 8
	beq	$s1, $s2, .LBB6_10
.LBB6_4:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$s0, $s1, 0
	beqz	$s0, .LBB6_6
# %bb.5:                                #   in Loop: Header=BB6_4 Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	move	$a2, $a0
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l)
	jirl	$ra, $ra, 0
	b	.LBB6_7
	.p2align	4, , 16
.LBB6_6:                                #   in Loop: Header=BB6_4 Depth=1
	ld.d	$a0, $fp, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $fp, $a0
	ld.w	$a1, $a0, 32
	ori	$a1, $a1, 1
	pcaddu18i	$ra, %call36(_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate)
	jirl	$ra, $ra, 0
.LBB6_7:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit
                                        #   in Loop: Header=BB6_4 Depth=1
	ld.d	$a0, $fp, 0
	ld.d	$a0, $a0, -24
	add.d	$a0, $fp, $a0
	ld.d	$s0, $a0, 240
	beqz	$s0, .LBB6_11
# %bb.8:                                # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
                                        #   in Loop: Header=BB6_4 Depth=1
	ld.bu	$a0, $s0, 56
	beqz	$a0, .LBB6_2
# %bb.9:                                #   in Loop: Header=BB6_4 Depth=1
	ld.bu	$a0, $s0, 67
	b	.LBB6_3
.LBB6_10:                               # %._crit_edge
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	move	$fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$fp, $fp, $a0
	ori	$a0, $zero, 42
	addi.d	$a1, $sp, 4
	pcaddu18i	$ra, %call36(_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi)
	jirl	$ra, $ra, 0
	or	$a0, $fp, $a0
	andi	$a0, $a0, 1
	sub.d	$a0, $zero, $a0
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB6_11:
	pcaddu18i	$ra, %call36(_ZSt16__throw_bad_castv)
	jirl	$ra, $ra, 0
.Lfunc_end6:
	.size	main, .Lfunc_end6-main
	.cfi_endproc
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi
.Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception1
# %bb.0:
	addi.d	$sp, $sp, -1568
	.cfi_def_cfa_offset 1568
	st.d	$ra, $sp, 1560                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1552                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1544                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1536                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1528                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1520                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1512                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1504                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1496                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1480                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1472                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1464                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1456                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1448                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1440                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1432                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1424                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1416                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 576                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 584
	ori	$a1, $zero, 1
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 104                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 72                   # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 184                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 336                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 344                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 360                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 376                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 416                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 432                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 448                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 464                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 472                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 488                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 496                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 512                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 504                  # 8-byte Folded Spill
	alsl.w	$s6, $s0, $s0, 1
	alsl.w	$s4, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 144                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 168                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 200                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 232                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 248                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 264                   # 8-byte Folded Spill
	st.d	$s3, $sp, 152                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 312                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 368                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 384                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 400                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 424                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 440                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 480                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 520                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 544                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 536                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 560                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 568                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 160                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 456                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s6, $s6, 3
	st.d	$a1, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s6, $s0, 3
	st.d	$a1, $sp, 280                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	alsl.w	$a1, $s4, $s0, 2
	st.d	$a1, $sp, 208                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	alsl.w	$a1, $a2, $s0, 1
	st.d	$a1, $sp, 176                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a1, $s6, $s0, 2
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	slli.w	$s2, $s0, 3
	alsl.w	$a1, $s0, $s2, 2
	st.d	$a1, $sp, 48                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	alsl.w	$a1, $s4, $s0, 1
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $s4
	div.w	$a0, $a0, $a1
	alsl.w	$fp, $s0, $s2, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	sub.w	$s8, $s2, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s7, $s0, 2
	alsl.w	$s1, $s0, $s7, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s6
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	st.d	$a1, $sp, 288                   # 8-byte Folded Spill
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 616
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s2
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $fp
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 512                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 520                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 536                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 560                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 144                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 152                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 160                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 168                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 176                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 208                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 232                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 248                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 264                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 280                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 456                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 136                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 128                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 584
.Ltmp23:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 616
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 296                  # 8-byte Folded Reload
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp24:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	beq	$a1, $a2, .LBB7_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB7_3:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1416                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1424                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1432                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1440                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1448                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1456                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1464                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1472                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1496                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1504                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1512                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1520                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1528                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1536                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1544                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1552                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1560                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1568
	ret
.LBB7_4:
.Ltmp25:                                # EH_LABEL
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	move	$fp, $a0
	beq	$a1, $a2, .LBB7_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB7_6:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end7:
	.size	_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi, .Lfunc_end7-_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table7:
.Lexception1:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end1-.Lcst_begin1
.Lcst_begin1:
	.uleb128 .Lfunc_begin1-.Lfunc_begin1    # >> Call Site 1 <<
	.uleb128 .Ltmp23-.Lfunc_begin1          #   Call between .Lfunc_begin1 and .Ltmp23
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp23-.Lfunc_begin1          # >> Call Site 2 <<
	.uleb128 .Ltmp24-.Ltmp23                #   Call between .Ltmp23 and .Ltmp24
	.uleb128 .Ltmp25-.Lfunc_begin1          #     jumps to .Ltmp25
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp24-.Lfunc_begin1          # >> Call Site 3 <<
	.uleb128 .Lfunc_end7-.Ltmp24            #   Call between .Ltmp24 and .Lfunc_end7
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end1:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi
.Lfunc_begin2:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception2
# %bb.0:
	addi.d	$sp, $sp, -1568
	.cfi_def_cfa_offset 1568
	st.d	$ra, $sp, 1560                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1552                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1544                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1536                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1528                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1520                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1512                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1504                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1496                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1480                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1472                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1464                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1456                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1448                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1440                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1432                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1424                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1416                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 576                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 584
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 104                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 72                   # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 184                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 336                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 344                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 360                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 376                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 416                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 432                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 448                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 464                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 472                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 488                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 496                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 512                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 504                  # 8-byte Folded Spill
	alsl.w	$s6, $s0, $s0, 1
	alsl.w	$s4, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 144                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 168                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 200                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 232                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 248                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 264                   # 8-byte Folded Spill
	st.d	$s3, $sp, 152                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 312                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 368                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 384                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 400                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 424                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 440                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 480                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 520                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 544                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 536                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 560                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 568                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 160                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 456                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s6, $s6, 3
	st.d	$a1, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s6, $s0, 3
	st.d	$a1, $sp, 280                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	alsl.w	$a1, $s4, $s0, 2
	st.d	$a1, $sp, 208                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	alsl.w	$a1, $a2, $s0, 1
	st.d	$a1, $sp, 176                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a1, $s6, $s0, 2
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	slli.w	$s2, $s0, 3
	alsl.w	$a1, $s0, $s2, 2
	st.d	$a1, $sp, 48                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	alsl.w	$a1, $s4, $s0, 1
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $s4
	div.w	$a0, $a0, $a1
	alsl.w	$fp, $s0, $s2, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	sub.w	$s8, $s2, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s7, $s0, 2
	alsl.w	$s1, $s0, $s7, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s6
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	st.d	$a1, $sp, 288                   # 8-byte Folded Spill
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 616
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s2
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $fp
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 512                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 520                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 536                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 560                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 144                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 152                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 160                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 168                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 176                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 208                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 232                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 248                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 264                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 280                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 456                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 136                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 128                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 584
.Ltmp26:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	addi.d	$a2, $sp, 616
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 296                  # 8-byte Folded Reload
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp27:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	beq	$a1, $a2, .LBB8_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB8_3:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1416                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1424                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1432                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1440                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1448                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1456                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1464                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1472                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1496                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1504                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1512                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1520                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1528                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1536                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1544                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1552                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1560                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1568
	ret
.LBB8_4:
.Ltmp28:                                # EH_LABEL
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	move	$fp, $a0
	beq	$a1, $a2, .LBB8_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB8_6:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end8:
	.size	_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi, .Lfunc_end8-_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table8:
.Lexception2:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end2-.Lcst_begin2
.Lcst_begin2:
	.uleb128 .Lfunc_begin2-.Lfunc_begin2    # >> Call Site 1 <<
	.uleb128 .Ltmp26-.Lfunc_begin2          #   Call between .Lfunc_begin2 and .Ltmp26
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp26-.Lfunc_begin2          # >> Call Site 2 <<
	.uleb128 .Ltmp27-.Ltmp26                #   Call between .Ltmp26 and .Ltmp27
	.uleb128 .Ltmp28-.Lfunc_begin2          #     jumps to .Ltmp28
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp27-.Lfunc_begin2          # >> Call Site 3 <<
	.uleb128 .Lfunc_end8-.Ltmp27            #   Call between .Ltmp27 and .Lfunc_end8
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end2:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi
.Lfunc_begin3:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception3
# %bb.0:
	addi.d	$sp, $sp, -1568
	.cfi_def_cfa_offset 1568
	st.d	$ra, $sp, 1560                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1552                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1544                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1536                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1528                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1520                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1512                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1504                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1496                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1480                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1472                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1464                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1456                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1448                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1440                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1432                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1424                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1416                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 576                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 584
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 104                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 72                   # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 184                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 336                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 344                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 360                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 376                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 416                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 432                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 448                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 464                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 472                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 488                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 496                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 512                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 504                  # 8-byte Folded Spill
	alsl.w	$s6, $s0, $s0, 1
	alsl.w	$s4, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 144                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 168                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 200                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 232                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 248                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 264                   # 8-byte Folded Spill
	st.d	$s3, $sp, 152                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 312                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 368                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 384                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 400                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 424                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 440                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 480                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 520                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 544                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 536                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 560                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 568                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 160                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 456                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s6, $s6, 3
	st.d	$a1, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s6, $s0, 3
	st.d	$a1, $sp, 280                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	alsl.w	$a1, $s4, $s0, 2
	st.d	$a1, $sp, 208                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	alsl.w	$a1, $a2, $s0, 1
	st.d	$a1, $sp, 176                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a1, $s6, $s0, 2
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	slli.w	$s2, $s0, 3
	alsl.w	$a1, $s0, $s2, 2
	st.d	$a1, $sp, 48                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	alsl.w	$a1, $s4, $s0, 1
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $s4
	div.w	$a0, $a0, $a1
	alsl.w	$fp, $s0, $s2, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	sub.w	$s8, $s2, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s7, $s0, 2
	alsl.w	$s1, $s0, $s7, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s6
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	st.d	$a1, $sp, 288                   # 8-byte Folded Spill
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 616
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s2
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $fp
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 512                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 520                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 536                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 560                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 144                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 152                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 160                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 168                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 176                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 208                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 232                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 248                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 264                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 280                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 456                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 136                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 128                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 584
.Ltmp29:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 616
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 296                  # 8-byte Folded Reload
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp30:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	beq	$a1, $a2, .LBB9_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB9_3:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1416                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1424                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1432                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1440                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1448                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1456                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1464                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1472                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1496                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1504                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1512                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1520                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1528                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1536                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1544                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1552                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1560                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1568
	ret
.LBB9_4:
.Ltmp31:                                # EH_LABEL
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	move	$fp, $a0
	beq	$a1, $a2, .LBB9_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB9_6:                                # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end9:
	.size	_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi, .Lfunc_end9-_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table9:
.Lexception3:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end3-.Lcst_begin3
.Lcst_begin3:
	.uleb128 .Lfunc_begin3-.Lfunc_begin3    # >> Call Site 1 <<
	.uleb128 .Ltmp29-.Lfunc_begin3          #   Call between .Lfunc_begin3 and .Ltmp29
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp29-.Lfunc_begin3          # >> Call Site 2 <<
	.uleb128 .Ltmp30-.Ltmp29                #   Call between .Ltmp29 and .Ltmp30
	.uleb128 .Ltmp31-.Lfunc_begin3          #     jumps to .Ltmp31
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp30-.Lfunc_begin3          # >> Call Site 3 <<
	.uleb128 .Lfunc_end9-.Ltmp30            #   Call between .Ltmp30 and .Lfunc_end9
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end3:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi
.Lfunc_begin4:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception4
# %bb.0:
	addi.d	$sp, $sp, -1568
	.cfi_def_cfa_offset 1568
	st.d	$ra, $sp, 1560                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1552                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1544                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1536                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1528                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1520                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1512                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1504                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1496                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1480                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1472                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1464                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1456                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1448                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1440                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1432                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1424                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1416                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 576                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 584
	ori	$a2, $zero, 1
	move	$a1, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 104                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 72                   # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 184                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 336                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 344                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 360                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 376                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 416                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 432                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 448                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 464                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 472                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 488                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 496                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 512                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 504                  # 8-byte Folded Spill
	alsl.w	$s6, $s0, $s0, 1
	alsl.w	$s4, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 144                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 168                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 200                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 232                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 248                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 264                   # 8-byte Folded Spill
	st.d	$s3, $sp, 152                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 312                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 368                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 384                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 400                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 424                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 440                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 480                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 520                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 544                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 536                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 560                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 568                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 160                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 456                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s6, $s6, 3
	st.d	$a1, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s6, $s0, 3
	st.d	$a1, $sp, 280                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	alsl.w	$a1, $s4, $s0, 2
	st.d	$a1, $sp, 208                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	alsl.w	$a1, $a2, $s0, 1
	st.d	$a1, $sp, 176                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a1, $s6, $s0, 2
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	slli.w	$s2, $s0, 3
	alsl.w	$a1, $s0, $s2, 2
	st.d	$a1, $sp, 48                    # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	alsl.w	$a1, $s4, $s0, 1
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $s4
	div.w	$a0, $a0, $a1
	alsl.w	$fp, $s0, $s2, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	sub.w	$s8, $s2, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s7, $s0, 2
	alsl.w	$s1, $s0, $s7, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s6
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	st.d	$a1, $sp, 288                   # 8-byte Folded Spill
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 616
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s2
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $fp
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 512                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 520                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 536                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 560                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 144                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 152                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 160                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 168                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 176                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 200                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 208                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 232                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 248                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 264                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 280                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 456                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 136                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 128                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 584
.Ltmp32:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	addi.d	$a2, $sp, 616
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 296                  # 8-byte Folded Reload
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp33:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	beq	$a1, $a2, .LBB10_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB10_3:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1416                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1424                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1432                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1440                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1448                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1456                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1464                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1472                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1496                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1504                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1512                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1520                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1528                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1536                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1544                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1552                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1560                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1568
	ret
.LBB10_4:
.Ltmp34:                                # EH_LABEL
	ld.d	$a1, $sp, 584
	addi.d	$a2, $sp, 600
	move	$fp, $a0
	beq	$a1, $a2, .LBB10_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB10_6:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end10:
	.size	_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi, .Lfunc_end10-_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table10:
.Lexception4:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end4-.Lcst_begin4
.Lcst_begin4:
	.uleb128 .Lfunc_begin4-.Lfunc_begin4    # >> Call Site 1 <<
	.uleb128 .Ltmp32-.Lfunc_begin4          #   Call between .Lfunc_begin4 and .Ltmp32
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp32-.Lfunc_begin4          # >> Call Site 2 <<
	.uleb128 .Ltmp33-.Ltmp32                #   Call between .Ltmp32 and .Ltmp33
	.uleb128 .Ltmp34-.Lfunc_begin4          #     jumps to .Ltmp34
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp33-.Lfunc_begin4          # >> Call Site 3 <<
	.uleb128 .Lfunc_end10-.Ltmp33           #   Call between .Ltmp33 and .Lfunc_end10
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end4:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi
.Lfunc_begin5:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception5
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a1, $zero, 1
	ori	$a3, $zero, 1
	move	$a2, $zero
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp35:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp36:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB11_2:
	ld.d	$a0, $sp, 520
.Ltmp38:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 552
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp39:                                # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB11_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB11_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB11_6:
.Ltmp40:                                # EH_LABEL
	move	$fp, $a0
.LBB11_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB11_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB11_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB11_10:
.Ltmp37:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB11_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB11_2
.Lfunc_end11:
	.size	_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi, .Lfunc_end11-_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table11:
.Lexception5:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase0-.Lttbaseref0
.Lttbaseref0:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end5-.Lcst_begin5
.Lcst_begin5:
	.uleb128 .Lfunc_begin5-.Lfunc_begin5    # >> Call Site 1 <<
	.uleb128 .Ltmp35-.Lfunc_begin5          #   Call between .Lfunc_begin5 and .Ltmp35
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp35-.Lfunc_begin5          # >> Call Site 2 <<
	.uleb128 .Ltmp36-.Ltmp35                #   Call between .Ltmp35 and .Ltmp36
	.uleb128 .Ltmp37-.Lfunc_begin5          #     jumps to .Ltmp37
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp38-.Lfunc_begin5          # >> Call Site 3 <<
	.uleb128 .Ltmp39-.Ltmp38                #   Call between .Ltmp38 and .Ltmp39
	.uleb128 .Ltmp40-.Lfunc_begin5          #     jumps to .Ltmp40
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp39-.Lfunc_begin5          # >> Call Site 4 <<
	.uleb128 .Lfunc_end11-.Ltmp39           #   Call between .Ltmp39 and .Lfunc_end11
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end5:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp41:                                # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp41
.Lttbase0:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi
.Lfunc_begin6:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception6
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a3, $zero, 1
	move	$a1, $zero
	move	$a2, $zero
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp42:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp43:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB12_2:
	ld.d	$a0, $sp, 520
.Ltmp45:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 552
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp46:                                # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB12_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB12_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB12_6:
.Ltmp47:                                # EH_LABEL
	move	$fp, $a0
.LBB12_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB12_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB12_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB12_10:
.Ltmp44:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB12_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB12_2
.Lfunc_end12:
	.size	_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi, .Lfunc_end12-_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table12:
.Lexception6:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase1-.Lttbaseref1
.Lttbaseref1:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end6-.Lcst_begin6
.Lcst_begin6:
	.uleb128 .Lfunc_begin6-.Lfunc_begin6    # >> Call Site 1 <<
	.uleb128 .Ltmp42-.Lfunc_begin6          #   Call between .Lfunc_begin6 and .Ltmp42
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp42-.Lfunc_begin6          # >> Call Site 2 <<
	.uleb128 .Ltmp43-.Ltmp42                #   Call between .Ltmp42 and .Ltmp43
	.uleb128 .Ltmp44-.Lfunc_begin6          #     jumps to .Ltmp44
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp45-.Lfunc_begin6          # >> Call Site 3 <<
	.uleb128 .Ltmp46-.Ltmp45                #   Call between .Ltmp45 and .Ltmp46
	.uleb128 .Ltmp47-.Lfunc_begin6          #     jumps to .Ltmp47
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp46-.Lfunc_begin6          # >> Call Site 4 <<
	.uleb128 .Lfunc_end12-.Ltmp46           #   Call between .Ltmp46 and .Lfunc_end12
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end6:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp48:                                # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp48
.Lttbase1:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi
.Lfunc_begin7:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception7
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp49:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp50:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB13_2:
	ld.d	$a0, $sp, 520
.Ltmp52:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 552
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp53:                                # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB13_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB13_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB13_6:
.Ltmp54:                                # EH_LABEL
	move	$fp, $a0
.LBB13_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB13_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB13_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB13_10:
.Ltmp51:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB13_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB13_2
.Lfunc_end13:
	.size	_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi, .Lfunc_end13-_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table13:
.Lexception7:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase2-.Lttbaseref2
.Lttbaseref2:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end7-.Lcst_begin7
.Lcst_begin7:
	.uleb128 .Lfunc_begin7-.Lfunc_begin7    # >> Call Site 1 <<
	.uleb128 .Ltmp49-.Lfunc_begin7          #   Call between .Lfunc_begin7 and .Ltmp49
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp49-.Lfunc_begin7          # >> Call Site 2 <<
	.uleb128 .Ltmp50-.Ltmp49                #   Call between .Ltmp49 and .Ltmp50
	.uleb128 .Ltmp51-.Lfunc_begin7          #     jumps to .Ltmp51
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp52-.Lfunc_begin7          # >> Call Site 3 <<
	.uleb128 .Ltmp53-.Ltmp52                #   Call between .Ltmp52 and .Ltmp53
	.uleb128 .Ltmp54-.Lfunc_begin7          #     jumps to .Ltmp54
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp53-.Lfunc_begin7          # >> Call Site 4 <<
	.uleb128 .Lfunc_end13-.Ltmp53           #   Call between .Ltmp53 and .Lfunc_end13
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end7:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp55:                                # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp55
.Lttbase2:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi
.Lfunc_begin8:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception8
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	move	$a1, $zero
	move	$a4, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp56:                                # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp57:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB14_2:
	ld.d	$a0, $sp, 520
.Ltmp59:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 552
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp60:                                # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB14_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB14_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB14_6:
.Ltmp61:                                # EH_LABEL
	move	$fp, $a0
.LBB14_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB14_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB14_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB14_10:
.Ltmp58:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB14_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB14_2
.Lfunc_end14:
	.size	_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi, .Lfunc_end14-_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb0ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table14:
.Lexception8:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase3-.Lttbaseref3
.Lttbaseref3:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end8-.Lcst_begin8
.Lcst_begin8:
	.uleb128 .Lfunc_begin8-.Lfunc_begin8    # >> Call Site 1 <<
	.uleb128 .Ltmp56-.Lfunc_begin8          #   Call between .Lfunc_begin8 and .Ltmp56
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp56-.Lfunc_begin8          # >> Call Site 2 <<
	.uleb128 .Ltmp57-.Ltmp56                #   Call between .Ltmp56 and .Ltmp57
	.uleb128 .Ltmp58-.Lfunc_begin8          #     jumps to .Ltmp58
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp59-.Lfunc_begin8          # >> Call Site 3 <<
	.uleb128 .Ltmp60-.Ltmp59                #   Call between .Ltmp59 and .Ltmp60
	.uleb128 .Ltmp61-.Lfunc_begin8          #     jumps to .Ltmp61
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp60-.Lfunc_begin8          # >> Call Site 4 <<
	.uleb128 .Lfunc_end14-.Ltmp60           #   Call between .Ltmp60 and .Lfunc_end14
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end8:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp62:                                # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp62
.Lttbase3:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi
.Lfunc_begin9:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception9
# %bb.0:
	addi.d	$sp, $sp, -1776
	.cfi_def_cfa_offset 1776
	st.d	$ra, $sp, 1768                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1760                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1752                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1744                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1736                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1728                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1720                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1712                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1704                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1696                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1688                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1680                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1672                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1664                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1656                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1648                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1640                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1632                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1624                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 784                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 792
	ori	$a1, $zero, 1
	ori	$a4, $zero, 1
	move	$a2, $zero
	move	$a3, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 280                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 264                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 400                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 432                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 440                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 544                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 568                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 584                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 600                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 616                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 624                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 640                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 656                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 672                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 680                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 696                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 704                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 720                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 712                  # 8-byte Folded Spill
	alsl.w	$s4, $s0, $s0, 1
	alsl.w	$s2, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 336                   # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 376                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 416                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 448                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 464                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 480                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 520                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 560                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 576                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 592                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 608                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 632                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 648                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 688                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 728                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 736                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 752                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 744                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 768                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 760                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 776                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 368                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 664                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s4, $s4, 3
	st.d	$a1, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s4, $s0, 3
	st.d	$a1, $sp, 496                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	move	$a1, $s2
	st.d	$s2, $sp, 240                   # 8-byte Folded Spill
	alsl.w	$a4, $s2, $s0, 2
	st.d	$a4, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 256                   # 8-byte Folded Spill
	alsl.w	$a3, $a2, $s0, 1
	st.d	$a3, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a3, $s4, $s0, 2
	st.d	$a3, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	slli.w	$s6, $s0, 3
	alsl.w	$a3, $s0, $s6, 2
	st.d	$a3, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a3, $s2, $s0, 1
	st.d	$a3, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$s2, $s0, $s6, 1
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s6
	sub.w	$s8, $s6, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s1, $s0, 2
	alsl.w	$s7, $s0, $s1, 1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	slli.w	$fp, $s0, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa1, $fa0, $fa1
	fst.d	$fa1, $sp, 384                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 344                   # 8-byte Folded Spill
	addi.d	$a0, $sp, 824
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 512                   # 8-byte Folded Spill
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 176
	vst	$vr0, $sp, 160
	vst	$vr0, $sp, 144
	vst	$vr0, $sp, 128
	vst	$vr0, $sp, 112
	vst	$vr0, $sp, 96
	vst	$vr0, $sp, 80
	vst	$vr0, $sp, 64
	vst	$vr0, $sp, 48
	vst	$vr0, $sp, 32
	vst	$vr0, $sp, 16
	vst	$vr0, $sp, 0
	movgr2fr.d	$fa0, $zero
	fst.d	$fa1, $sp, 216
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $fp
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s1
	ld.d	$a1, $sp, 240                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s6
	ld.d	$a2, $sp, 256                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 584                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 600                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 624                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 640                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 656                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 712                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 720                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 728                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 736                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 752                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 760                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 768                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 448                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 464                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 496                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 648                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 664                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 688                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 776                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 824
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 784                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 792
.Ltmp63:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 824
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 512                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 384                  # 8-byte Folded Reload
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp64:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	beq	$a1, $a2, .LBB15_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB15_3:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1624                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1632                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1640                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1648                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1656                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1664                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1672                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1680                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1688                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1696                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1704                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1712                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1720                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1728                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1736                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1744                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1752                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1760                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1768                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1776
	ret
.LBB15_4:
.Ltmp65:                                # EH_LABEL
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	move	$fp, $a0
	beq	$a1, $a2, .LBB15_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB15_6:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end15:
	.size	_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi, .Lfunc_end15-_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table15:
.Lexception9:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end9-.Lcst_begin9
.Lcst_begin9:
	.uleb128 .Lfunc_begin9-.Lfunc_begin9    # >> Call Site 1 <<
	.uleb128 .Ltmp63-.Lfunc_begin9          #   Call between .Lfunc_begin9 and .Ltmp63
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp63-.Lfunc_begin9          # >> Call Site 2 <<
	.uleb128 .Ltmp64-.Ltmp63                #   Call between .Ltmp63 and .Ltmp64
	.uleb128 .Ltmp65-.Lfunc_begin9          #     jumps to .Ltmp65
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp64-.Lfunc_begin9          # >> Call Site 3 <<
	.uleb128 .Lfunc_end15-.Ltmp64           #   Call between .Ltmp64 and .Lfunc_end15
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end9:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi
.Lfunc_begin10:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception10
# %bb.0:
	addi.d	$sp, $sp, -1776
	.cfi_def_cfa_offset 1776
	st.d	$ra, $sp, 1768                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1760                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1752                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1744                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1736                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1728                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1720                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1712                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1704                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1696                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1688                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1680                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1672                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1664                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1656                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1648                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1640                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1632                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1624                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 784                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 792
	ori	$a4, $zero, 1
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 280                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 264                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 400                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 432                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 440                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 544                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 568                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 584                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 600                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 616                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 624                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 640                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 656                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 672                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 680                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 696                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 704                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 720                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 712                  # 8-byte Folded Spill
	alsl.w	$s4, $s0, $s0, 1
	alsl.w	$s2, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 336                   # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 376                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 416                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 448                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 464                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 480                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 520                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 560                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 576                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 592                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 608                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 632                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 648                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 688                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 728                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 736                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 752                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 744                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 768                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 760                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 776                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 368                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 664                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s4, $s4, 3
	st.d	$a1, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s4, $s0, 3
	st.d	$a1, $sp, 496                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	move	$a1, $s2
	st.d	$s2, $sp, 240                   # 8-byte Folded Spill
	alsl.w	$a4, $s2, $s0, 2
	st.d	$a4, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 256                   # 8-byte Folded Spill
	alsl.w	$a3, $a2, $s0, 1
	st.d	$a3, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a3, $s4, $s0, 2
	st.d	$a3, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	slli.w	$s6, $s0, 3
	alsl.w	$a3, $s0, $s6, 2
	st.d	$a3, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a3, $s2, $s0, 1
	st.d	$a3, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$s2, $s0, $s6, 1
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s6
	sub.w	$s8, $s6, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s1, $s0, 2
	alsl.w	$s7, $s0, $s1, 1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	slli.w	$fp, $s0, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa1, $fa0, $fa1
	fst.d	$fa1, $sp, 384                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 344                   # 8-byte Folded Spill
	addi.d	$a0, $sp, 824
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 512                   # 8-byte Folded Spill
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 176
	vst	$vr0, $sp, 160
	vst	$vr0, $sp, 144
	vst	$vr0, $sp, 128
	vst	$vr0, $sp, 112
	vst	$vr0, $sp, 96
	vst	$vr0, $sp, 80
	vst	$vr0, $sp, 64
	vst	$vr0, $sp, 48
	vst	$vr0, $sp, 32
	vst	$vr0, $sp, 16
	vst	$vr0, $sp, 0
	movgr2fr.d	$fa0, $zero
	fst.d	$fa1, $sp, 216
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $fp
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s1
	ld.d	$a1, $sp, 240                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s6
	ld.d	$a2, $sp, 256                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 584                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 600                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 624                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 640                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 656                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 712                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 720                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 728                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 736                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 752                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 760                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 768                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 448                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 464                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 496                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 648                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 664                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 688                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 776                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 824
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 784                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 792
.Ltmp66:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	addi.d	$a2, $sp, 824
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 512                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 384                  # 8-byte Folded Reload
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp67:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	beq	$a1, $a2, .LBB16_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB16_3:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1624                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1632                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1640                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1648                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1656                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1664                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1672                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1680                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1688                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1696                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1704                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1712                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1720                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1728                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1736                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1744                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1752                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1760                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1768                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1776
	ret
.LBB16_4:
.Ltmp68:                                # EH_LABEL
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	move	$fp, $a0
	beq	$a1, $a2, .LBB16_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB16_6:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end16:
	.size	_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi, .Lfunc_end16-_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table16:
.Lexception10:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end10-.Lcst_begin10
.Lcst_begin10:
	.uleb128 .Lfunc_begin10-.Lfunc_begin10  # >> Call Site 1 <<
	.uleb128 .Ltmp66-.Lfunc_begin10         #   Call between .Lfunc_begin10 and .Ltmp66
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp66-.Lfunc_begin10         # >> Call Site 2 <<
	.uleb128 .Ltmp67-.Ltmp66                #   Call between .Ltmp66 and .Ltmp67
	.uleb128 .Ltmp68-.Lfunc_begin10         #     jumps to .Ltmp68
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp67-.Lfunc_begin10         # >> Call Site 3 <<
	.uleb128 .Lfunc_end16-.Ltmp67           #   Call between .Ltmp67 and .Lfunc_end16
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end10:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi
.Lfunc_begin11:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception11
# %bb.0:
	addi.d	$sp, $sp, -1776
	.cfi_def_cfa_offset 1776
	st.d	$ra, $sp, 1768                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1760                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1752                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1744                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1736                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1728                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1720                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1712                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1704                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1696                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1688                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1680                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1672                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1664                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1656                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1648                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1640                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1632                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1624                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 784                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 792
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	ori	$a4, $zero, 1
	move	$a3, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 280                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 264                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 400                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 432                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 440                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 544                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 568                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 584                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 600                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 616                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 624                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 640                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 656                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 672                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 680                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 696                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 704                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 720                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 712                  # 8-byte Folded Spill
	alsl.w	$s4, $s0, $s0, 1
	alsl.w	$s2, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 336                   # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 376                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 416                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 448                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 464                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 480                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 520                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 560                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 576                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 592                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 608                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 632                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 648                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 688                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 728                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 736                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 752                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 744                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 768                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 760                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 776                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 368                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 664                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s4, $s4, 3
	st.d	$a1, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s4, $s0, 3
	st.d	$a1, $sp, 496                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	move	$a1, $s2
	st.d	$s2, $sp, 240                   # 8-byte Folded Spill
	alsl.w	$a4, $s2, $s0, 2
	st.d	$a4, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 256                   # 8-byte Folded Spill
	alsl.w	$a3, $a2, $s0, 1
	st.d	$a3, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a3, $s4, $s0, 2
	st.d	$a3, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	slli.w	$s6, $s0, 3
	alsl.w	$a3, $s0, $s6, 2
	st.d	$a3, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a3, $s2, $s0, 1
	st.d	$a3, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$s2, $s0, $s6, 1
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s6
	sub.w	$s8, $s6, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s1, $s0, 2
	alsl.w	$s7, $s0, $s1, 1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	slli.w	$fp, $s0, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa1, $fa0, $fa1
	fst.d	$fa1, $sp, 384                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 344                   # 8-byte Folded Spill
	addi.d	$a0, $sp, 824
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 512                   # 8-byte Folded Spill
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 176
	vst	$vr0, $sp, 160
	vst	$vr0, $sp, 144
	vst	$vr0, $sp, 128
	vst	$vr0, $sp, 112
	vst	$vr0, $sp, 96
	vst	$vr0, $sp, 80
	vst	$vr0, $sp, 64
	vst	$vr0, $sp, 48
	vst	$vr0, $sp, 32
	vst	$vr0, $sp, 16
	vst	$vr0, $sp, 0
	movgr2fr.d	$fa0, $zero
	fst.d	$fa1, $sp, 216
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $fp
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s1
	ld.d	$a1, $sp, 240                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s6
	ld.d	$a2, $sp, 256                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 584                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 600                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 624                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 640                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 656                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 712                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 720                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 728                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 736                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 752                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 760                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 768                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 448                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 464                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 496                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 648                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 664                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 688                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 776                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 824
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 784                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 792
.Ltmp69:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 824
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 512                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 384                  # 8-byte Folded Reload
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp70:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	beq	$a1, $a2, .LBB17_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB17_3:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1624                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1632                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1640                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1648                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1656                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1664                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1672                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1680                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1688                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1696                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1704                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1712                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1720                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1728                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1736                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1744                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1752                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1760                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1768                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1776
	ret
.LBB17_4:
.Ltmp71:                                # EH_LABEL
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	move	$fp, $a0
	beq	$a1, $a2, .LBB17_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB17_6:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end17:
	.size	_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi, .Lfunc_end17-_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table17:
.Lexception11:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end11-.Lcst_begin11
.Lcst_begin11:
	.uleb128 .Lfunc_begin11-.Lfunc_begin11  # >> Call Site 1 <<
	.uleb128 .Ltmp69-.Lfunc_begin11         #   Call between .Lfunc_begin11 and .Ltmp69
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp69-.Lfunc_begin11         # >> Call Site 2 <<
	.uleb128 .Ltmp70-.Ltmp69                #   Call between .Ltmp69 and .Ltmp70
	.uleb128 .Ltmp71-.Lfunc_begin11         #     jumps to .Ltmp71
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp70-.Lfunc_begin11         # >> Call Site 3 <<
	.uleb128 .Lfunc_end17-.Ltmp70           #   Call between .Ltmp70 and .Lfunc_end17
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end11:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi
.Lfunc_begin12:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception12
# %bb.0:
	addi.d	$sp, $sp, -1776
	.cfi_def_cfa_offset 1776
	st.d	$ra, $sp, 1768                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1760                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1752                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1744                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1736                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1728                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1720                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1712                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1704                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1696                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1688                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1680                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1672                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1664                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1656                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1648                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1640                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1632                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1624                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 784                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 792
	ori	$a2, $zero, 1
	ori	$a4, $zero, 1
	move	$a1, $zero
	move	$a3, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs7, $fa0
	fadd.d	$fa0, $fs7, $fs7
	fst.d	$fa0, $sp, 320                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 304                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 296                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 280                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 272                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 264                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs7
	fst.d	$fa0, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs7
	fadd.d	$fs5, $fs6, $fs7
	fst.d	$fs6, $sp, 400                  # 8-byte Folded Spill
	fadd.d	$fs4, $fs5, $fs7
	fst.d	$fs5, $sp, 408                  # 8-byte Folded Spill
	fadd.d	$fs3, $fs4, $fs7
	fst.d	$fs4, $sp, 432                  # 8-byte Folded Spill
	fadd.d	$fs2, $fs3, $fs7
	fst.d	$fs3, $sp, 440                  # 8-byte Folded Spill
	fadd.d	$fs1, $fs2, $fs7
	fst.d	$fs2, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs0, $fs1, $fs7
	fst.d	$fs1, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$ft1, $fs0, $fs7
	fst.d	$fs0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$ft2, $ft1, $fs7
	fst.d	$ft1, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$ft3, $ft2, $fs7
	fst.d	$ft2, $sp, 528                  # 8-byte Folded Spill
	fadd.d	$ft4, $ft3, $fs7
	fst.d	$ft3, $sp, 544                  # 8-byte Folded Spill
	fadd.d	$ft5, $ft4, $fs7
	fst.d	$ft4, $sp, 552                  # 8-byte Folded Spill
	fadd.d	$ft6, $ft5, $fs7
	fst.d	$ft5, $sp, 568                  # 8-byte Folded Spill
	fadd.d	$ft7, $ft6, $fs7
	fst.d	$ft6, $sp, 584                  # 8-byte Folded Spill
	fadd.d	$ft8, $ft7, $fs7
	fst.d	$ft7, $sp, 600                  # 8-byte Folded Spill
	fadd.d	$ft9, $ft8, $fs7
	fst.d	$ft8, $sp, 616                  # 8-byte Folded Spill
	fadd.d	$ft10, $ft9, $fs7
	fst.d	$ft9, $sp, 624                  # 8-byte Folded Spill
	fadd.d	$ft11, $ft10, $fs7
	fst.d	$ft10, $sp, 640                 # 8-byte Folded Spill
	fadd.d	$ft12, $ft11, $fs7
	fst.d	$ft11, $sp, 656                 # 8-byte Folded Spill
	fadd.d	$ft13, $ft12, $fs7
	fst.d	$ft12, $sp, 672                 # 8-byte Folded Spill
	fadd.d	$ft14, $ft13, $fs7
	fst.d	$ft13, $sp, 680                 # 8-byte Folded Spill
	fadd.d	$ft15, $ft14, $fs7
	fst.d	$ft14, $sp, 696                 # 8-byte Folded Spill
	fadd.d	$ft0, $ft15, $fs7
	fst.d	$ft15, $sp, 704                 # 8-byte Folded Spill
	fadd.d	$fa7, $ft0, $fs7
	fst.d	$fa7, $sp, 720                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 712                  # 8-byte Folded Spill
	alsl.w	$s4, $s0, $s0, 1
	alsl.w	$s2, $s0, $s0, 2
	alsl.w	$a2, $s0, $s0, 3
	ori	$a0, $zero, 14
	mul.w	$s1, $s0, $a0
	st.d	$s1, $sp, 336                   # 8-byte Folded Spill
	slli.w	$s3, $s0, 4
	sub.w	$t3, $s3, $s0
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	alsl.w	$a5, $s0, $s0, 4
	alsl.w	$a6, $s0, $s3, 1
	st.d	$a6, $sp, 376                   # 8-byte Folded Spill
	alsl.w	$a3, $s0, $s3, 2
	st.d	$a3, $sp, 416                   # 8-byte Folded Spill
	ori	$a0, $zero, 22
	mul.w	$a4, $s0, $a0
	st.d	$a4, $sp, 448                   # 8-byte Folded Spill
	ori	$a0, $zero, 23
	mul.w	$a7, $s0, $a0
	st.d	$a7, $sp, 464                   # 8-byte Folded Spill
	alsl.w	$t0, $s0, $s3, 3
	st.d	$t0, $sp, 480                   # 8-byte Folded Spill
	ori	$a0, $zero, 26
	mul.w	$t1, $s0, $a0
	st.d	$t1, $sp, 520                   # 8-byte Folded Spill
	ori	$a0, $zero, 28
	mul.w	$t2, $s0, $a0
	st.d	$t2, $sp, 560                   # 8-byte Folded Spill
	ori	$a0, $zero, 29
	mul.w	$t4, $s0, $a0
	st.d	$t4, $sp, 576                   # 8-byte Folded Spill
	ori	$a0, $zero, 30
	mul.w	$t6, $s0, $a0
	st.d	$t6, $sp, 592                   # 8-byte Folded Spill
	slli.w	$s5, $s0, 5
	sub.w	$fp, $s5, $s0
	st.d	$fp, $sp, 608                   # 8-byte Folded Spill
	add.w	$t7, $s5, $s0
	st.d	$t7, $sp, 632                   # 8-byte Folded Spill
	alsl.w	$t8, $s0, $s5, 1
	st.d	$t8, $sp, 648                   # 8-byte Folded Spill
	alsl.w	$t5, $s0, $s5, 2
	st.d	$t5, $sp, 688                   # 8-byte Folded Spill
	alsl.d	$a0, $s0, $s0, 3
	alsl.d	$a0, $a0, $s0, 2
	fadd.d	$fa6, $fa7, $fs7
	fadd.d	$fa5, $fa6, $fs7
	fst.d	$fa6, $sp, 728                  # 8-byte Folded Spill
	fadd.d	$fa4, $fa5, $fs7
	fst.d	$fa5, $sp, 736                  # 8-byte Folded Spill
	fadd.d	$fa2, $fa4, $fs7
	fst.d	$fa2, $sp, 752                  # 8-byte Folded Spill
	fst.d	$fa4, $sp, 744                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa2, $fs7
	fadd.d	$fa1, $fa3, $fs7
	fst.d	$fa1, $sp, 768                  # 8-byte Folded Spill
	fst.d	$fa3, $sp, 760                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa1, $fs7
	fst.d	$fa0, $sp, 776                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fa3
	fdiv.d	$fa0, $fa0, $fa2
	fdiv.d	$fa0, $fa0, $fa4
	fdiv.d	$fa0, $fa0, $fa5
	fdiv.d	$fa0, $fa0, $fa6
	fdiv.d	$fa0, $fa0, $fa7
	fdiv.d	$fa0, $fa0, $ft0
	fdiv.d	$fa0, $fa0, $ft15
	fdiv.d	$fa0, $fa0, $ft14
	fdiv.d	$fa0, $fa0, $ft13
	fdiv.d	$fa0, $fa0, $ft12
	fdiv.d	$fa0, $fa0, $ft11
	fdiv.d	$fa0, $fa0, $ft10
	fdiv.d	$fa0, $fa0, $ft9
	fdiv.d	$fa0, $fa0, $ft8
	fdiv.d	$fa0, $fa0, $ft7
	fdiv.d	$fa0, $fa0, $ft6
	fdiv.d	$fa0, $fa0, $ft5
	fdiv.d	$fa0, $fa0, $ft4
	fdiv.d	$fa0, $fa0, $ft3
	fdiv.d	$fa0, $fa0, $ft2
	fdiv.d	$fa0, $fa0, $ft1
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs6, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fs5, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fs4, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs4
	fld.d	$fs3, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fs2, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fs1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs1
	fld.d	$fs0, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fs0
	fdiv.d	$fa0, $fa0, $fs7
	addi.w	$a1, $a0, 1
	sltui	$a1, $a1, 3
	maskeqz	$a0, $a0, $a1
	addi.w	$a0, $a0, 0
	div.w	$a0, $a0, $t5
	st.d	$a5, $sp, 368                   # 8-byte Folded Spill
	alsl.w	$a1, $a5, $s0, 1
	st.d	$a1, $sp, 664                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t8
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s5
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $t6
	div.w	$a0, $a0, $t4
	div.w	$a0, $a0, $t2
	alsl.w	$a1, $s4, $s4, 3
	st.d	$a1, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t1
	alsl.w	$a1, $s4, $s0, 3
	st.d	$a1, $sp, 496                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $a7
	div.w	$a0, $a0, $a4
	move	$a1, $s2
	st.d	$s2, $sp, 240                   # 8-byte Folded Spill
	alsl.w	$a4, $s2, $s0, 2
	st.d	$a4, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	div.w	$a0, $a0, $a3
	st.d	$a2, $sp, 256                   # 8-byte Folded Spill
	alsl.w	$a3, $a2, $s0, 1
	st.d	$a3, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $a6
	div.w	$a0, $a0, $a5
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $t3
	div.w	$a0, $a0, $s1
	alsl.w	$a3, $s4, $s0, 2
	st.d	$a3, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	slli.w	$s6, $s0, 3
	alsl.w	$a3, $s0, $s6, 2
	st.d	$a3, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a3, $s2, $s0, 1
	st.d	$a3, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$s2, $s0, $s6, 1
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s6
	sub.w	$s8, $s6, $s0
	div.w	$a0, $a0, $s8
	slli.w	$s1, $s0, 2
	alsl.w	$s7, $s0, $s1, 1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s4
	slli.w	$fp, $s0, 1
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa1, $fa0, $fa1
	fst.d	$fa1, $sp, 384                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 352                   # 8-byte Folded Spill
	ori	$a0, $zero, 39
	mul.w	$a0, $s0, $a0
	st.d	$a0, $sp, 344                   # 8-byte Folded Spill
	addi.d	$a0, $sp, 824
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 512                   # 8-byte Folded Spill
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 176
	vst	$vr0, $sp, 160
	vst	$vr0, $sp, 144
	vst	$vr0, $sp, 128
	vst	$vr0, $sp, 112
	vst	$vr0, $sp, 96
	vst	$vr0, $sp, 80
	vst	$vr0, $sp, 64
	vst	$vr0, $sp, 48
	vst	$vr0, $sp, 32
	vst	$vr0, $sp, 16
	vst	$vr0, $sp, 0
	movgr2fr.d	$fa0, $zero
	fst.d	$fa1, $sp, 216
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
	fdiv.d	$fa0, $fs7, $fs0
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $fp
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s1
	ld.d	$a1, $sp, 240                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s7
	div.w	$a0, $a0, $s8
	div.w	$a0, $a0, $s6
	ld.d	$a2, $sp, 256                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s2
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 528                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 544                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 568                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 584                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 600                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 616                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 624                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 640                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 656                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 712                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 720                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 728                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 736                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 752                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 760                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 768                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 448                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 464                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 480                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 496                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s5
	ld.d	$a1, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 648                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 664                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 688                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 776                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 824
	alsl.w	$a1, $a2, $s0, 2
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 784                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	ld.d	$a0, $sp, 792
.Ltmp72:                                # EH_LABEL
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 8
	addi.d	$a2, $sp, 824
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	st.d	$zero, $sp, 0
	ld.d	$a1, $sp, 512                   # 8-byte Folded Reload
	fld.d	$fa0, $sp, 384                  # 8-byte Folded Reload
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp73:                                # EH_LABEL
# %bb.1:
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	beq	$a1, $a2, .LBB18_3
# %bb.2:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB18_3:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1624                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1632                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1640                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1648                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1656                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1664                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1672                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1680                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1688                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1696                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1704                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1712                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1720                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1728                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1736                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1744                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1752                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1760                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1768                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1776
	ret
.LBB18_4:
.Ltmp74:                                # EH_LABEL
	ld.d	$a1, $sp, 792
	addi.d	$a2, $sp, 808
	move	$fp, $a0
	beq	$a1, $a2, .LBB18_6
# %bb.5:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i9
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB18_6:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit11
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi, .Lfunc_end18-_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table18:
.Lexception12:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end12-.Lcst_begin12
.Lcst_begin12:
	.uleb128 .Lfunc_begin12-.Lfunc_begin12  # >> Call Site 1 <<
	.uleb128 .Ltmp72-.Lfunc_begin12         #   Call between .Lfunc_begin12 and .Ltmp72
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp72-.Lfunc_begin12         # >> Call Site 2 <<
	.uleb128 .Ltmp73-.Ltmp72                #   Call between .Ltmp72 and .Ltmp73
	.uleb128 .Ltmp74-.Lfunc_begin12         #     jumps to .Ltmp74
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp73-.Lfunc_begin12         # >> Call Site 3 <<
	.uleb128 .Lfunc_end18-.Ltmp73           #   Call between .Ltmp73 and .Lfunc_end18
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end12:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi
.Lfunc_begin13:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception13
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a1, $zero, 1
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	move	$a2, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp75:                                # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp76:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB19_2:
	ld.d	$a0, $sp, 712
.Ltmp78:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 744
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs2
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp79:                                # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB19_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB19_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB19_6:
.Ltmp80:                                # EH_LABEL
	move	$fp, $a0
.LBB19_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB19_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB19_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB19_10:
.Ltmp77:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB19_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB19_2
.Lfunc_end19:
	.size	_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi, .Lfunc_end19-_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table19:
.Lexception13:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase4-.Lttbaseref4
.Lttbaseref4:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end13-.Lcst_begin13
.Lcst_begin13:
	.uleb128 .Lfunc_begin13-.Lfunc_begin13  # >> Call Site 1 <<
	.uleb128 .Ltmp75-.Lfunc_begin13         #   Call between .Lfunc_begin13 and .Ltmp75
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp75-.Lfunc_begin13         # >> Call Site 2 <<
	.uleb128 .Ltmp76-.Ltmp75                #   Call between .Ltmp75 and .Ltmp76
	.uleb128 .Ltmp77-.Lfunc_begin13         #     jumps to .Ltmp77
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp78-.Lfunc_begin13         # >> Call Site 3 <<
	.uleb128 .Ltmp79-.Ltmp78                #   Call between .Ltmp78 and .Ltmp79
	.uleb128 .Ltmp80-.Lfunc_begin13         #     jumps to .Ltmp80
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp79-.Lfunc_begin13         # >> Call Site 4 <<
	.uleb128 .Lfunc_end19-.Ltmp79           #   Call between .Ltmp79 and .Lfunc_end19
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end13:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp81:                                # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp81
.Lttbase4:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi
.Lfunc_begin14:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception14
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	move	$a1, $zero
	move	$a2, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp82:                                # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp83:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB20_2:
	ld.d	$a0, $sp, 712
.Ltmp85:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 744
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs2
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp86:                                # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB20_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB20_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB20_6:
.Ltmp87:                                # EH_LABEL
	move	$fp, $a0
.LBB20_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB20_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB20_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB20_10:
.Ltmp84:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB20_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB20_2
.Lfunc_end20:
	.size	_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi, .Lfunc_end20-_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table20:
.Lexception14:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase5-.Lttbaseref5
.Lttbaseref5:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end14-.Lcst_begin14
.Lcst_begin14:
	.uleb128 .Lfunc_begin14-.Lfunc_begin14  # >> Call Site 1 <<
	.uleb128 .Ltmp82-.Lfunc_begin14         #   Call between .Lfunc_begin14 and .Ltmp82
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp82-.Lfunc_begin14         # >> Call Site 2 <<
	.uleb128 .Ltmp83-.Ltmp82                #   Call between .Ltmp82 and .Ltmp83
	.uleb128 .Ltmp84-.Lfunc_begin14         #     jumps to .Ltmp84
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp85-.Lfunc_begin14         # >> Call Site 3 <<
	.uleb128 .Ltmp86-.Ltmp85                #   Call between .Ltmp85 and .Ltmp86
	.uleb128 .Ltmp87-.Lfunc_begin14         #     jumps to .Ltmp87
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp86-.Lfunc_begin14         # >> Call Site 4 <<
	.uleb128 .Lfunc_end20-.Ltmp86           #   Call between .Ltmp86 and .Lfunc_end20
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end14:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp88:                                # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp88
.Lttbase5:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi
.Lfunc_begin15:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception15
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp89:                                # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp90:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB21_2:
	ld.d	$a0, $sp, 712
.Ltmp92:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 744
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs2
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp93:                                # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB21_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB21_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB21_6:
.Ltmp94:                                # EH_LABEL
	move	$fp, $a0
.LBB21_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB21_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB21_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB21_10:
.Ltmp91:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB21_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB21_2
.Lfunc_end21:
	.size	_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi, .Lfunc_end21-_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table21:
.Lexception15:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase6-.Lttbaseref6
.Lttbaseref6:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end15-.Lcst_begin15
.Lcst_begin15:
	.uleb128 .Lfunc_begin15-.Lfunc_begin15  # >> Call Site 1 <<
	.uleb128 .Ltmp89-.Lfunc_begin15         #   Call between .Lfunc_begin15 and .Ltmp89
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp89-.Lfunc_begin15         # >> Call Site 2 <<
	.uleb128 .Ltmp90-.Ltmp89                #   Call between .Ltmp89 and .Ltmp90
	.uleb128 .Ltmp91-.Lfunc_begin15         #     jumps to .Ltmp91
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp92-.Lfunc_begin15         # >> Call Site 3 <<
	.uleb128 .Ltmp93-.Ltmp92                #   Call between .Ltmp92 and .Ltmp93
	.uleb128 .Ltmp94-.Lfunc_begin15         #     jumps to .Ltmp94
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp93-.Lfunc_begin15         # >> Call Site 4 <<
	.uleb128 .Lfunc_end21-.Ltmp93           #   Call between .Ltmp93 and .Lfunc_end21
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end15:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp95:                                # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp95
.Lttbase6:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi
.Lfunc_begin16:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception16
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	move	$a1, $zero
	move	$a5, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp96:                                # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp97:                                # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB22_2:
	ld.d	$a0, $sp, 712
.Ltmp99:                                # EH_LABEL
	st.d	$fp, $sp, 8
	st.d	$zero, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 744
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs2
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp100:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB22_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB22_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB22_6:
.Ltmp101:                               # EH_LABEL
	move	$fp, $a0
.LBB22_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB22_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB22_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB22_10:
.Ltmp98:                                # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB22_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB22_2
.Lfunc_end22:
	.size	_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi, .Lfunc_end22-_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb1ELb0EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table22:
.Lexception16:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase7-.Lttbaseref7
.Lttbaseref7:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end16-.Lcst_begin16
.Lcst_begin16:
	.uleb128 .Lfunc_begin16-.Lfunc_begin16  # >> Call Site 1 <<
	.uleb128 .Ltmp96-.Lfunc_begin16         #   Call between .Lfunc_begin16 and .Ltmp96
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp96-.Lfunc_begin16         # >> Call Site 2 <<
	.uleb128 .Ltmp97-.Ltmp96                #   Call between .Ltmp96 and .Ltmp97
	.uleb128 .Ltmp98-.Lfunc_begin16         #     jumps to .Ltmp98
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp99-.Lfunc_begin16         # >> Call Site 3 <<
	.uleb128 .Ltmp100-.Ltmp99               #   Call between .Ltmp99 and .Ltmp100
	.uleb128 .Ltmp101-.Lfunc_begin16        #     jumps to .Ltmp101
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp100-.Lfunc_begin16        # >> Call Site 4 <<
	.uleb128 .Lfunc_end22-.Ltmp100          #   Call between .Ltmp100 and .Lfunc_end22
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end16:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp102:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp102
.Lttbase7:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi
.Lfunc_begin17:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception17
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a1, $zero, 1
	ori	$a5, $zero, 1
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp103:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp104:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB23_2:
	ld.d	$a0, $sp, 520
.Ltmp106:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 552
	ori	$a6, $zero, 2048
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp107:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB23_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB23_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB23_6:
.Ltmp108:                               # EH_LABEL
	move	$fp, $a0
.LBB23_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB23_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB23_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB23_10:
.Ltmp105:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB23_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB23_2
.Lfunc_end23:
	.size	_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi, .Lfunc_end23-_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table23:
.Lexception17:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase8-.Lttbaseref8
.Lttbaseref8:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end17-.Lcst_begin17
.Lcst_begin17:
	.uleb128 .Lfunc_begin17-.Lfunc_begin17  # >> Call Site 1 <<
	.uleb128 .Ltmp103-.Lfunc_begin17        #   Call between .Lfunc_begin17 and .Ltmp103
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp103-.Lfunc_begin17        # >> Call Site 2 <<
	.uleb128 .Ltmp104-.Ltmp103              #   Call between .Ltmp103 and .Ltmp104
	.uleb128 .Ltmp105-.Lfunc_begin17        #     jumps to .Ltmp105
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp106-.Lfunc_begin17        # >> Call Site 3 <<
	.uleb128 .Ltmp107-.Ltmp106              #   Call between .Ltmp106 and .Ltmp107
	.uleb128 .Ltmp108-.Lfunc_begin17        #     jumps to .Ltmp108
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp107-.Lfunc_begin17        # >> Call Site 4 <<
	.uleb128 .Lfunc_end23-.Ltmp107          #   Call between .Ltmp107 and .Lfunc_end23
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end17:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp109:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp109
.Lttbase8:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi
.Lfunc_begin18:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception18
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a5, $zero, 1
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp110:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp111:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB24_2:
	ld.d	$a0, $sp, 520
.Ltmp113:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 552
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp114:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB24_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB24_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB24_6:
.Ltmp115:                               # EH_LABEL
	move	$fp, $a0
.LBB24_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB24_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB24_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB24_10:
.Ltmp112:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB24_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB24_2
.Lfunc_end24:
	.size	_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi, .Lfunc_end24-_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table24:
.Lexception18:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase9-.Lttbaseref9
.Lttbaseref9:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end18-.Lcst_begin18
.Lcst_begin18:
	.uleb128 .Lfunc_begin18-.Lfunc_begin18  # >> Call Site 1 <<
	.uleb128 .Ltmp110-.Lfunc_begin18        #   Call between .Lfunc_begin18 and .Ltmp110
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp110-.Lfunc_begin18        # >> Call Site 2 <<
	.uleb128 .Ltmp111-.Ltmp110              #   Call between .Ltmp110 and .Ltmp111
	.uleb128 .Ltmp112-.Lfunc_begin18        #     jumps to .Ltmp112
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp113-.Lfunc_begin18        # >> Call Site 3 <<
	.uleb128 .Ltmp114-.Ltmp113              #   Call between .Ltmp113 and .Ltmp114
	.uleb128 .Ltmp115-.Lfunc_begin18        #     jumps to .Ltmp115
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp114-.Lfunc_begin18        # >> Call Site 4 <<
	.uleb128 .Lfunc_end24-.Ltmp114          #   Call between .Ltmp114 and .Lfunc_end24
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end18:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp116:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp116
.Lttbase9:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi
.Lfunc_begin19:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception19
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	ori	$a5, $zero, 1
	move	$a3, $zero
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp117:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp118:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB25_2:
	ld.d	$a0, $sp, 520
.Ltmp120:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 552
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp121:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB25_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB25_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB25_6:
.Ltmp122:                               # EH_LABEL
	move	$fp, $a0
.LBB25_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB25_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB25_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB25_10:
.Ltmp119:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB25_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB25_2
.Lfunc_end25:
	.size	_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi, .Lfunc_end25-_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table25:
.Lexception19:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase10-.Lttbaseref10
.Lttbaseref10:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end19-.Lcst_begin19
.Lcst_begin19:
	.uleb128 .Lfunc_begin19-.Lfunc_begin19  # >> Call Site 1 <<
	.uleb128 .Ltmp117-.Lfunc_begin19        #   Call between .Lfunc_begin19 and .Ltmp117
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp117-.Lfunc_begin19        # >> Call Site 2 <<
	.uleb128 .Ltmp118-.Ltmp117              #   Call between .Ltmp117 and .Ltmp118
	.uleb128 .Ltmp119-.Lfunc_begin19        #     jumps to .Ltmp119
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp120-.Lfunc_begin19        # >> Call Site 3 <<
	.uleb128 .Ltmp121-.Ltmp120              #   Call between .Ltmp120 and .Ltmp121
	.uleb128 .Ltmp122-.Lfunc_begin19        #     jumps to .Ltmp122
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp121-.Lfunc_begin19        # >> Call Site 4 <<
	.uleb128 .Lfunc_end25-.Ltmp121          #   Call between .Ltmp121 and .Lfunc_end25
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end19:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp123:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp123
.Lttbase10:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi
.Lfunc_begin20:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception20
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a2, $zero, 1
	ori	$a5, $zero, 1
	move	$a1, $zero
	move	$a3, $zero
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp124:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp125:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB26_2:
	ld.d	$a0, $sp, 520
.Ltmp127:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 552
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp128:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB26_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB26_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB26_6:
.Ltmp129:                               # EH_LABEL
	move	$fp, $a0
.LBB26_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB26_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB26_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB26_10:
.Ltmp126:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB26_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB26_2
.Lfunc_end26:
	.size	_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi, .Lfunc_end26-_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table26:
.Lexception20:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase11-.Lttbaseref11
.Lttbaseref11:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end20-.Lcst_begin20
.Lcst_begin20:
	.uleb128 .Lfunc_begin20-.Lfunc_begin20  # >> Call Site 1 <<
	.uleb128 .Ltmp124-.Lfunc_begin20        #   Call between .Lfunc_begin20 and .Ltmp124
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp124-.Lfunc_begin20        # >> Call Site 2 <<
	.uleb128 .Ltmp125-.Ltmp124              #   Call between .Ltmp124 and .Ltmp125
	.uleb128 .Ltmp126-.Lfunc_begin20        #     jumps to .Ltmp126
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp127-.Lfunc_begin20        # >> Call Site 3 <<
	.uleb128 .Ltmp128-.Ltmp127              #   Call between .Ltmp127 and .Ltmp128
	.uleb128 .Ltmp129-.Lfunc_begin20        #     jumps to .Ltmp129
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp128-.Lfunc_begin20        # >> Call Site 4 <<
	.uleb128 .Lfunc_end26-.Ltmp128          #   Call between .Ltmp128 and .Lfunc_end26
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end20:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp130:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp130
.Lttbase11:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi
.Lfunc_begin21:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception21
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a1, $zero, 1
	ori	$a3, $zero, 1
	ori	$a5, $zero, 1
	move	$a2, $zero
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp131:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp132:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB27_2:
	ld.d	$a0, $sp, 520
.Ltmp134:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 552
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp135:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB27_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB27_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB27_6:
.Ltmp136:                               # EH_LABEL
	move	$fp, $a0
.LBB27_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB27_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB27_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB27_10:
.Ltmp133:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB27_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB27_2
.Lfunc_end27:
	.size	_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi, .Lfunc_end27-_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table27:
.Lexception21:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase12-.Lttbaseref12
.Lttbaseref12:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end21-.Lcst_begin21
.Lcst_begin21:
	.uleb128 .Lfunc_begin21-.Lfunc_begin21  # >> Call Site 1 <<
	.uleb128 .Ltmp131-.Lfunc_begin21        #   Call between .Lfunc_begin21 and .Ltmp131
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp131-.Lfunc_begin21        # >> Call Site 2 <<
	.uleb128 .Ltmp132-.Ltmp131              #   Call between .Ltmp131 and .Ltmp132
	.uleb128 .Ltmp133-.Lfunc_begin21        #     jumps to .Ltmp133
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp134-.Lfunc_begin21        # >> Call Site 3 <<
	.uleb128 .Ltmp135-.Ltmp134              #   Call between .Ltmp134 and .Ltmp135
	.uleb128 .Ltmp136-.Lfunc_begin21        #     jumps to .Ltmp136
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp135-.Lfunc_begin21        # >> Call Site 4 <<
	.uleb128 .Lfunc_end27-.Ltmp135          #   Call between .Ltmp135 and .Lfunc_end27
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end21:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp137:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp137
.Lttbase12:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi
.Lfunc_begin22:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception22
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a3, $zero, 1
	ori	$a5, $zero, 1
	move	$a1, $zero
	move	$a2, $zero
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp138:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp139:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB28_2:
	ld.d	$a0, $sp, 520
.Ltmp141:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 552
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp142:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB28_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB28_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB28_6:
.Ltmp143:                               # EH_LABEL
	move	$fp, $a0
.LBB28_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB28_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB28_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB28_10:
.Ltmp140:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB28_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB28_2
.Lfunc_end28:
	.size	_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi, .Lfunc_end28-_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table28:
.Lexception22:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase13-.Lttbaseref13
.Lttbaseref13:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end22-.Lcst_begin22
.Lcst_begin22:
	.uleb128 .Lfunc_begin22-.Lfunc_begin22  # >> Call Site 1 <<
	.uleb128 .Ltmp138-.Lfunc_begin22        #   Call between .Lfunc_begin22 and .Ltmp138
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp138-.Lfunc_begin22        # >> Call Site 2 <<
	.uleb128 .Ltmp139-.Ltmp138              #   Call between .Ltmp138 and .Ltmp139
	.uleb128 .Ltmp140-.Lfunc_begin22        #     jumps to .Ltmp140
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp141-.Lfunc_begin22        # >> Call Site 3 <<
	.uleb128 .Ltmp142-.Ltmp141              #   Call between .Ltmp141 and .Ltmp142
	.uleb128 .Ltmp143-.Lfunc_begin22        #     jumps to .Ltmp143
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp142-.Lfunc_begin22        # >> Call Site 4 <<
	.uleb128 .Lfunc_end28-.Ltmp142          #   Call between .Ltmp142 and .Lfunc_end28
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end22:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp144:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp144
.Lttbase13:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi
.Lfunc_begin23:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception23
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	ori	$a5, $zero, 1
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp145:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp146:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB29_2:
	ld.d	$a0, $sp, 520
.Ltmp148:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 552
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp149:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB29_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB29_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB29_6:
.Ltmp150:                               # EH_LABEL
	move	$fp, $a0
.LBB29_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB29_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB29_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB29_10:
.Ltmp147:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB29_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB29_2
.Lfunc_end29:
	.size	_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi, .Lfunc_end29-_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table29:
.Lexception23:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase14-.Lttbaseref14
.Lttbaseref14:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end23-.Lcst_begin23
.Lcst_begin23:
	.uleb128 .Lfunc_begin23-.Lfunc_begin23  # >> Call Site 1 <<
	.uleb128 .Ltmp145-.Lfunc_begin23        #   Call between .Lfunc_begin23 and .Ltmp145
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp145-.Lfunc_begin23        # >> Call Site 2 <<
	.uleb128 .Ltmp146-.Ltmp145              #   Call between .Ltmp145 and .Ltmp146
	.uleb128 .Ltmp147-.Lfunc_begin23        #     jumps to .Ltmp147
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp148-.Lfunc_begin23        # >> Call Site 3 <<
	.uleb128 .Ltmp149-.Ltmp148              #   Call between .Ltmp148 and .Ltmp149
	.uleb128 .Ltmp150-.Lfunc_begin23        #     jumps to .Ltmp150
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp149-.Lfunc_begin23        # >> Call Site 4 <<
	.uleb128 .Lfunc_end29-.Ltmp149          #   Call between .Ltmp149 and .Lfunc_end29
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end23:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp151:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp151
.Lttbase14:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi
.Lfunc_begin24:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception24
# %bb.0:
	addi.d	$sp, $sp, -1504
	.cfi_def_cfa_offset 1504
	st.d	$ra, $sp, 1496                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1488                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1480                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1472                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1464                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1456                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1448                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1440                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1432                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1424                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1416                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1408                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1400                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1392                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1384                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1376                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1368                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1360                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1352                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 448                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 520
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	ori	$a5, $zero, 1
	move	$a1, $zero
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 504                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 496                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 488                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 480                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 472                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 464                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 456                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa0, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa6, $fs1, $fs0
	fadd.d	$fa7, $fa6, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 312                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 440                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 424                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 392                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 384                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 376                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 400                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 416                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 432                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 408                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 368                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 360                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 352                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 344                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 320                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 328                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 120                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 336                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 112                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fs6, $fs7, $fs0
	fadd.d	$fa5, $fs6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fa0, $sp, 32                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 40                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 48                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 56                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 64                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fst.d	$ft15, $sp, 136                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 144                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 152                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 160                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 168                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 176                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 184                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 192                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 200                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 208                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 216                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 224                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs1, $sp, 280                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 288                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 296                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 88                   # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fmov.d	$fs6, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fmov.d	$fs5, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fmov.d	$fs4, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fmov.d	$fs7, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 96                    # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fa0, $fa0, $fa1
.Ltmp152:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a1, $a0, %pc_lo12(.L.str.36)
	ori	$a0, $zero, 100
	addi.d	$a2, $sp, 552
	fst.d	$fa0, $sp, 512                  # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp153:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs2
	fdiv.d	$fa0, $fa0, $fs3
	fdiv.d	$fa0, $fa0, $fs4
	fdiv.d	$fa0, $fa0, $fs5
	fdiv.d	$fa0, $fa0, $fs6
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 304                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 296                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 288                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 176                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 160                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 128                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 72                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 64                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 56                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 48                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 40                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 32                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 336                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 120                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 328                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 320                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 344                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 352                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 360                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 368                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 408                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 432                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 416                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 400                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 376                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 384                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 392                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 424                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 552
	ld.d	$a1, $sp, 440                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 448                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB30_2:
	ld.d	$a0, $sp, 520
.Ltmp155:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 552
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fld.d	$fa0, $sp, 512                  # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp156:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 520
	addi.d	$a2, $sp, 536
	beq	$a1, $a2, .LBB30_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB30_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1352                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1360                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1368                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1376                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1384                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1392                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1400                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1408                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1416                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1424                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1432                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1440                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1448                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1456                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1464                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1472                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1480                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1488                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1496                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1504
	ret
.LBB30_6:
.Ltmp157:                               # EH_LABEL
	move	$fp, $a0
.LBB30_7:
	ld.d	$a0, $sp, 520
	addi.d	$a1, $sp, 536
	beq	$a0, $a1, .LBB30_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB30_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB30_10:
.Ltmp154:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB30_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB30_2
.Lfunc_end30:
	.size	_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi, .Lfunc_end30-_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb0ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table30:
.Lexception24:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase15-.Lttbaseref15
.Lttbaseref15:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end24-.Lcst_begin24
.Lcst_begin24:
	.uleb128 .Lfunc_begin24-.Lfunc_begin24  # >> Call Site 1 <<
	.uleb128 .Ltmp152-.Lfunc_begin24        #   Call between .Lfunc_begin24 and .Ltmp152
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp152-.Lfunc_begin24        # >> Call Site 2 <<
	.uleb128 .Ltmp153-.Ltmp152              #   Call between .Ltmp152 and .Ltmp153
	.uleb128 .Ltmp154-.Lfunc_begin24        #     jumps to .Ltmp154
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp155-.Lfunc_begin24        # >> Call Site 3 <<
	.uleb128 .Ltmp156-.Ltmp155              #   Call between .Ltmp155 and .Ltmp156
	.uleb128 .Ltmp157-.Lfunc_begin24        #     jumps to .Ltmp157
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp156-.Lfunc_begin24        # >> Call Site 4 <<
	.uleb128 .Lfunc_end30-.Ltmp156          #   Call between .Ltmp156 and .Lfunc_end30
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end24:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp158:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp158
.Lttbase15:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi
.Lfunc_begin25:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception25
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a1, $zero, 1
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	move	$a2, $zero
	move	$a3, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp159:                               # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp160:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB31_2:
	ld.d	$a0, $sp, 712
.Ltmp162:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 744
	ori	$a6, $zero, 2048
	fmov.d	$fa0, $fs2
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp163:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB31_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB31_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB31_6:
.Ltmp164:                               # EH_LABEL
	move	$fp, $a0
.LBB31_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB31_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB31_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB31_10:
.Ltmp161:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB31_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB31_2
.Lfunc_end31:
	.size	_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi, .Lfunc_end31-_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb0ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table31:
.Lexception25:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase16-.Lttbaseref16
.Lttbaseref16:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end25-.Lcst_begin25
.Lcst_begin25:
	.uleb128 .Lfunc_begin25-.Lfunc_begin25  # >> Call Site 1 <<
	.uleb128 .Ltmp159-.Lfunc_begin25        #   Call between .Lfunc_begin25 and .Ltmp159
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp159-.Lfunc_begin25        # >> Call Site 2 <<
	.uleb128 .Ltmp160-.Ltmp159              #   Call between .Ltmp159 and .Ltmp160
	.uleb128 .Ltmp161-.Lfunc_begin25        #     jumps to .Ltmp161
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp162-.Lfunc_begin25        # >> Call Site 3 <<
	.uleb128 .Ltmp163-.Ltmp162              #   Call between .Ltmp162 and .Ltmp163
	.uleb128 .Ltmp164-.Lfunc_begin25        #     jumps to .Ltmp164
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp163-.Lfunc_begin25        # >> Call Site 4 <<
	.uleb128 .Lfunc_end31-.Ltmp163          #   Call between .Ltmp163 and .Lfunc_end31
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end25:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp165:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp165
.Lttbase16:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi
.Lfunc_begin26:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception26
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp166:                               # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp167:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB32_2:
	ld.d	$a0, $sp, 712
.Ltmp169:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 744
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	fmov.d	$fa0, $fs2
	move	$a4, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp170:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB32_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB32_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB32_6:
.Ltmp171:                               # EH_LABEL
	move	$fp, $a0
.LBB32_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB32_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB32_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB32_10:
.Ltmp168:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB32_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB32_2
.Lfunc_end32:
	.size	_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi, .Lfunc_end32-_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb0ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table32:
.Lexception26:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase17-.Lttbaseref17
.Lttbaseref17:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end26-.Lcst_begin26
.Lcst_begin26:
	.uleb128 .Lfunc_begin26-.Lfunc_begin26  # >> Call Site 1 <<
	.uleb128 .Ltmp166-.Lfunc_begin26        #   Call between .Lfunc_begin26 and .Ltmp166
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp166-.Lfunc_begin26        # >> Call Site 2 <<
	.uleb128 .Ltmp167-.Ltmp166              #   Call between .Ltmp166 and .Ltmp167
	.uleb128 .Ltmp168-.Lfunc_begin26        #     jumps to .Ltmp168
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp169-.Lfunc_begin26        # >> Call Site 3 <<
	.uleb128 .Ltmp170-.Ltmp169              #   Call between .Ltmp169 and .Ltmp170
	.uleb128 .Ltmp171-.Lfunc_begin26        #     jumps to .Ltmp171
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp170-.Lfunc_begin26        # >> Call Site 4 <<
	.uleb128 .Lfunc_end32-.Ltmp170          #   Call between .Ltmp170 and .Lfunc_end32
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end26:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp172:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp172
.Lttbase17:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi
.Lfunc_begin27:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception27
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	move	$a3, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp173:                               # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp174:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB33_2:
	ld.d	$a0, $sp, 712
.Ltmp176:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 744
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	fmov.d	$fa0, $fs2
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp177:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB33_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB33_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB33_6:
.Ltmp178:                               # EH_LABEL
	move	$fp, $a0
.LBB33_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB33_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB33_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB33_10:
.Ltmp175:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB33_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB33_2
.Lfunc_end33:
	.size	_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi, .Lfunc_end33-_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb0ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table33:
.Lexception27:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase18-.Lttbaseref18
.Lttbaseref18:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end27-.Lcst_begin27
.Lcst_begin27:
	.uleb128 .Lfunc_begin27-.Lfunc_begin27  # >> Call Site 1 <<
	.uleb128 .Ltmp173-.Lfunc_begin27        #   Call between .Lfunc_begin27 and .Ltmp173
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp173-.Lfunc_begin27        # >> Call Site 2 <<
	.uleb128 .Ltmp174-.Ltmp173              #   Call between .Ltmp173 and .Ltmp174
	.uleb128 .Ltmp175-.Lfunc_begin27        #     jumps to .Ltmp175
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp176-.Lfunc_begin27        # >> Call Site 3 <<
	.uleb128 .Ltmp177-.Ltmp176              #   Call between .Ltmp176 and .Ltmp177
	.uleb128 .Ltmp178-.Lfunc_begin27        #     jumps to .Ltmp178
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp177-.Lfunc_begin27        # >> Call Site 4 <<
	.uleb128 .Lfunc_end33-.Ltmp177          #   Call between .Ltmp177 and .Lfunc_end33
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end27:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp179:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp179
.Lttbase18:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi
.Lfunc_begin28:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception28
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a2, $zero, 1
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	move	$a1, $zero
	move	$a3, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp180:                               # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp181:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB34_2:
	ld.d	$a0, $sp, 712
.Ltmp183:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 744
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	fmov.d	$fa0, $fs2
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp184:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB34_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB34_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB34_6:
.Ltmp185:                               # EH_LABEL
	move	$fp, $a0
.LBB34_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB34_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB34_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB34_10:
.Ltmp182:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB34_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB34_2
.Lfunc_end34:
	.size	_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi, .Lfunc_end34-_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb0ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table34:
.Lexception28:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase19-.Lttbaseref19
.Lttbaseref19:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end28-.Lcst_begin28
.Lcst_begin28:
	.uleb128 .Lfunc_begin28-.Lfunc_begin28  # >> Call Site 1 <<
	.uleb128 .Ltmp180-.Lfunc_begin28        #   Call between .Lfunc_begin28 and .Ltmp180
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp180-.Lfunc_begin28        # >> Call Site 2 <<
	.uleb128 .Ltmp181-.Ltmp180              #   Call between .Ltmp180 and .Ltmp181
	.uleb128 .Ltmp182-.Lfunc_begin28        #     jumps to .Ltmp182
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp183-.Lfunc_begin28        # >> Call Site 3 <<
	.uleb128 .Ltmp184-.Ltmp183              #   Call between .Ltmp183 and .Ltmp184
	.uleb128 .Ltmp185-.Lfunc_begin28        #     jumps to .Ltmp185
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp184-.Lfunc_begin28        # >> Call Site 4 <<
	.uleb128 .Lfunc_end34-.Ltmp184          #   Call between .Ltmp184 and .Lfunc_end34
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end28:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp186:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp186
.Lttbase19:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi
.Lfunc_begin29:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception29
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a1, $zero, 1
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp187:                               # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp188:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB35_2:
	ld.d	$a0, $sp, 712
.Ltmp190:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 744
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs2
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp191:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB35_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB35_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB35_6:
.Ltmp192:                               # EH_LABEL
	move	$fp, $a0
.LBB35_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB35_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB35_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB35_10:
.Ltmp189:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB35_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB35_2
.Lfunc_end35:
	.size	_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi, .Lfunc_end35-_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb0ELb1ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table35:
.Lexception29:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase20-.Lttbaseref20
.Lttbaseref20:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end29-.Lcst_begin29
.Lcst_begin29:
	.uleb128 .Lfunc_begin29-.Lfunc_begin29  # >> Call Site 1 <<
	.uleb128 .Ltmp187-.Lfunc_begin29        #   Call between .Lfunc_begin29 and .Ltmp187
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp187-.Lfunc_begin29        # >> Call Site 2 <<
	.uleb128 .Ltmp188-.Ltmp187              #   Call between .Ltmp187 and .Ltmp188
	.uleb128 .Ltmp189-.Lfunc_begin29        #     jumps to .Ltmp189
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp190-.Lfunc_begin29        # >> Call Site 3 <<
	.uleb128 .Ltmp191-.Ltmp190              #   Call between .Ltmp190 and .Ltmp191
	.uleb128 .Ltmp192-.Lfunc_begin29        #     jumps to .Ltmp192
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp191-.Lfunc_begin29        # >> Call Site 4 <<
	.uleb128 .Lfunc_end35-.Ltmp191          #   Call between .Ltmp191 and .Lfunc_end35
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end29:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp193:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp193
.Lttbase20:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi
.Lfunc_begin30:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception30
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	move	$a1, $zero
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp194:                               # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp195:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB36_2:
	ld.d	$a0, $sp, 712
.Ltmp197:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 744
	ori	$a3, $zero, 2
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs2
	move	$a4, $zero
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp198:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB36_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB36_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB36_6:
.Ltmp199:                               # EH_LABEL
	move	$fp, $a0
.LBB36_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB36_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB36_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB36_10:
.Ltmp196:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB36_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB36_2
.Lfunc_end36:
	.size	_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi, .Lfunc_end36-_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb0ELb1ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table36:
.Lexception30:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase21-.Lttbaseref21
.Lttbaseref21:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end30-.Lcst_begin30
.Lcst_begin30:
	.uleb128 .Lfunc_begin30-.Lfunc_begin30  # >> Call Site 1 <<
	.uleb128 .Ltmp194-.Lfunc_begin30        #   Call between .Lfunc_begin30 and .Ltmp194
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp194-.Lfunc_begin30        # >> Call Site 2 <<
	.uleb128 .Ltmp195-.Ltmp194              #   Call between .Ltmp194 and .Ltmp195
	.uleb128 .Ltmp196-.Lfunc_begin30        #     jumps to .Ltmp196
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp197-.Lfunc_begin30        # >> Call Site 3 <<
	.uleb128 .Ltmp198-.Ltmp197              #   Call between .Ltmp197 and .Ltmp198
	.uleb128 .Ltmp199-.Lfunc_begin30        #     jumps to .Ltmp199
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp198-.Lfunc_begin30        # >> Call Site 4 <<
	.uleb128 .Lfunc_end36-.Ltmp198          #   Call between .Ltmp198 and .Lfunc_end36
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end30:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp200:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp200
.Lttbase21:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi
.Lfunc_begin31:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception31
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a1, $zero, 1
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs2, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs1, $fa0, $fa1
.Ltmp201:                               # EH_LABEL
	fst.d	$fs1, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp202:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs2
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB37_2:
	ld.d	$a0, $sp, 712
.Ltmp204:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	lu12i.w	$a3, 1
	addi.d	$a2, $sp, 744
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs1
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp205:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB37_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB37_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB37_6:
.Ltmp206:                               # EH_LABEL
	move	$fp, $a0
.LBB37_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB37_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB37_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB37_10:
.Ltmp203:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB37_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB37_2
.Lfunc_end37:
	.size	_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi, .Lfunc_end37-_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb1ELb1ELb1ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table37:
.Lexception31:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase22-.Lttbaseref22
.Lttbaseref22:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end31-.Lcst_begin31
.Lcst_begin31:
	.uleb128 .Lfunc_begin31-.Lfunc_begin31  # >> Call Site 1 <<
	.uleb128 .Ltmp201-.Lfunc_begin31        #   Call between .Lfunc_begin31 and .Ltmp201
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp201-.Lfunc_begin31        # >> Call Site 2 <<
	.uleb128 .Ltmp202-.Ltmp201              #   Call between .Ltmp201 and .Ltmp202
	.uleb128 .Ltmp203-.Lfunc_begin31        #     jumps to .Ltmp203
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp204-.Lfunc_begin31        # >> Call Site 3 <<
	.uleb128 .Ltmp205-.Ltmp204              #   Call between .Ltmp204 and .Ltmp205
	.uleb128 .Ltmp206-.Lfunc_begin31        #     jumps to .Ltmp206
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp205-.Lfunc_begin31        # >> Call Site 4 <<
	.uleb128 .Lfunc_end37-.Ltmp205          #   Call between .Ltmp205 and .Lfunc_end37
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end31:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp207:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp207
.Lttbase22:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi,"axG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi,comdat
	.weak	_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi # -- Begin function _Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi
	.p2align	5
	.type	_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi,@function
_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi: # @_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi
.Lfunc_begin32:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception32
# %bb.0:
	addi.d	$sp, $sp, -1696
	.cfi_def_cfa_offset 1696
	st.d	$ra, $sp, 1688                  # 8-byte Folded Spill
	st.d	$fp, $sp, 1680                  # 8-byte Folded Spill
	st.d	$s0, $sp, 1672                  # 8-byte Folded Spill
	st.d	$s1, $sp, 1664                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1656                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1648                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1640                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1632                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1624                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1616                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1608                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1600                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1592                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1584                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1576                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1568                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1560                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1552                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1544                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a1, $sp, 648                   # 8-byte Folded Spill
	move	$s0, $a0
	addi.d	$a0, $sp, 712
	ori	$a2, $zero, 1
	ori	$a3, $zero, 1
	ori	$a4, $zero, 1
	ori	$a5, $zero, 1
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_Z24getTestDescriptionStringB5cxx11bbbbb)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs0, $fa0
	fadd.d	$fa0, $fs0, $fs0
	fst.d	$fa0, $sp, 656                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 672                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 664                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 704                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 696                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 688                  # 8-byte Folded Spill
	fadd.d	$fa0, $fa0, $fs0
	fst.d	$fa0, $sp, 680                  # 8-byte Folded Spill
	fadd.d	$fs6, $fa0, $fs0
	fadd.d	$fs5, $fs6, $fs0
	fadd.d	$fs4, $fs5, $fs0
	fadd.d	$fs3, $fs4, $fs0
	fadd.d	$fs2, $fs3, $fs0
	fadd.d	$fs1, $fs2, $fs0
	fadd.d	$fa7, $fs1, $fs0
	fadd.d	$ft0, $fa7, $fs0
	fadd.d	$ft1, $ft0, $fs0
	fadd.d	$ft2, $ft1, $fs0
	fadd.d	$ft3, $ft2, $fs0
	fadd.d	$ft4, $ft3, $fs0
	fadd.d	$ft5, $ft4, $fs0
	fadd.d	$ft6, $ft5, $fs0
	fadd.d	$ft7, $ft6, $fs0
	fadd.d	$ft8, $ft7, $fs0
	fadd.d	$ft9, $ft8, $fs0
	fadd.d	$ft10, $ft9, $fs0
	fadd.d	$ft11, $ft10, $fs0
	fadd.d	$ft12, $ft11, $fs0
	fadd.d	$ft13, $ft12, $fs0
	fadd.d	$ft14, $ft13, $fs0
	fadd.d	$ft15, $ft14, $fs0
	fadd.d	$fs7, $ft15, $fs0
	alsl.w	$fp, $s0, $s0, 1
	alsl.w	$s6, $s0, $s0, 2
	slli.w	$s3, $s0, 3
	sub.w	$ra, $s3, $s0
	alsl.w	$s4, $s0, $s0, 3
	alsl.w	$s2, $s0, $s3, 2
	ori	$a0, $zero, 14
	mul.w	$t6, $s0, $a0
	slli.w	$s7, $s0, 4
	sub.w	$s1, $s7, $s0
	alsl.w	$t7, $s0, $s0, 4
	alsl.w	$t8, $s0, $s7, 1
	alsl.d	$a1, $s0, $s0, 3
	alsl.w	$t5, $s0, $s7, 2
	ori	$a0, $zero, 22
	mul.w	$t4, $s0, $a0
	ori	$a0, $zero, 23
	mul.w	$t3, $s0, $a0
	alsl.w	$t2, $s0, $s7, 3
	ori	$a0, $zero, 26
	mul.w	$a5, $s0, $a0
	ori	$a0, $zero, 28
	mul.w	$a2, $s0, $a0
	ori	$a0, $zero, 29
	mul.w	$a4, $s0, $a0
	ori	$a0, $zero, 30
	mul.w	$a6, $s0, $a0
	slli.w	$s5, $s0, 5
	sub.w	$t1, $s5, $s0
	add.w	$t0, $s5, $s0
	alsl.w	$a7, $s0, $s5, 1
	alsl.w	$a3, $s0, $s5, 2
	st.d	$a1, $sp, 512                   # 8-byte Folded Spill
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a0, $a1, 1
	sltui	$a0, $a0, 3
	st.d	$a1, $sp, 640                   # 8-byte Folded Spill
	maskeqz	$a0, $a1, $a0
	addi.w	$a0, $a0, 0
	st.d	$a3, $sp, 624                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a3
	alsl.w	$a1, $t7, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$a7, $sp, 592                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a7
	st.d	$t0, $sp, 584                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t0
	div.w	$a0, $a0, $s5
	st.d	$t1, $sp, 576                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t1
	st.d	$a6, $sp, 600                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a6
	st.d	$a4, $sp, 616                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a4
	st.d	$a2, $sp, 632                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a2
	alsl.w	$a1, $fp, $fp, 3
	div.w	$a0, $a0, $a1
	st.d	$a5, $sp, 608                   # 8-byte Folded Spill
	div.w	$a0, $a0, $a5
	alsl.w	$a1, $fp, $s0, 3
	div.w	$a0, $a0, $a1
	st.d	$t2, $sp, 568                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t2
	st.d	$t3, $sp, 560                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t3
	st.d	$t4, $sp, 552                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t4
	alsl.w	$a1, $s6, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$t5, $sp, 544                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t5
	alsl.w	$a1, $s4, $s0, 1
	div.w	$a0, $a0, $a1
	st.d	$t8, $sp, 520                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t8
	st.d	$t7, $sp, 528                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t7
	div.w	$a0, $a0, $s7
	st.d	$s1, $sp, 312                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s1
	st.d	$t6, $sp, 536                   # 8-byte Folded Spill
	div.w	$a0, $a0, $t6
	alsl.w	$a1, $fp, $s0, 2
	div.w	$a0, $a0, $a1
	st.d	$s2, $sp, 304                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s2
	alsl.w	$a1, $s6, $s0, 1
	div.w	$a0, $a0, $a1
	alsl.w	$s8, $s0, $s3, 1
	fadd.d	$fa6, $fs7, $fs0
	fadd.d	$fa5, $fa6, $fs0
	fadd.d	$fa3, $fa5, $fs0
	fadd.d	$fa2, $fa3, $fs0
	fadd.d	$fa1, $fa2, $fs0
	fadd.d	$fa0, $fa1, $fs0
	fadd.d	$fa4, $fa0, $fs0
	fst.d	$fa4, $sp, 280                  # 8-byte Folded Spill
	fst.d	$fa0, $sp, 232                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa4, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa1
	fst.d	$fa2, $sp, 248                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa2
	fst.d	$fa3, $sp, 256                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa3
	fst.d	$fa5, $sp, 264                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa5
	fst.d	$fa6, $sp, 272                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa6
	fst.d	$fs7, $sp, 320                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs7
	fld.d	$fs7, $sp, 656                  # 8-byte Folded Reload
	fst.d	$ft15, $sp, 328                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft15
	fst.d	$ft14, $sp, 336                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft14
	fst.d	$ft13, $sp, 344                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft13
	fst.d	$ft12, $sp, 352                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft12
	fst.d	$ft11, $sp, 360                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft11
	fst.d	$ft10, $sp, 368                 # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft10
	fst.d	$ft9, $sp, 376                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft9
	fst.d	$ft8, $sp, 384                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft8
	fst.d	$ft7, $sp, 392                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft7
	fst.d	$ft6, $sp, 400                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft6
	fst.d	$ft5, $sp, 408                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft5
	fst.d	$ft4, $sp, 416                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft4
	fst.d	$ft3, $sp, 424                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft3
	fst.d	$ft2, $sp, 432                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft2
	fst.d	$ft1, $sp, 440                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft1
	fst.d	$ft0, $sp, 448                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $ft0
	fst.d	$fa7, $sp, 456                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fa7
	fst.d	$fs1, $sp, 464                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs1
	fst.d	$fs2, $sp, 472                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs2
	fst.d	$fs3, $sp, 480                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs3
	fst.d	$fs4, $sp, 488                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs4
	fst.d	$fs5, $sp, 496                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs5
	fst.d	$fs6, $sp, 504                  # 8-byte Folded Spill
	fdiv.d	$fa0, $fa0, $fs6
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 664                  # 8-byte Folded Reload
	fmov.d	$fs3, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 672                  # 8-byte Folded Reload
	fmov.d	$fs1, $fa1
	fdiv.d	$fa0, $fa0, $fa1
	fdiv.d	$fa0, $fa0, $fs7
	fdiv.d	$fa0, $fa0, $fs0
	div.w	$a0, $a0, $s8
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s3
	st.d	$ra, $sp, 288                   # 8-byte Folded Spill
	div.w	$a0, $a0, $ra
	slli.w	$s2, $s0, 2
	alsl.w	$s1, $s0, $s2, 1
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $fp
	slli.w	$s4, $s0, 1
	div.w	$a0, $a0, $s4
	div.w	$a0, $a0, $s0
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	fadd.d	$fs2, $fa0, $fa1
.Ltmp208:                               # EH_LABEL
	fst.d	$fs2, $sp, 216
	addi.d	$a0, $sp, 744
	st.d	$a0, $sp, 208
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a0, $a0, %pc_lo12(.L.str.36)
	st.d	$a0, $sp, 200
	ori	$a0, $zero, 100
	st.d	$a0, $sp, 192
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 176
	vst	$vr1, $sp, 160
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	vst	$vr1, $sp, 96
	vst	$vr1, $sp, 80
	vst	$vr1, $sp, 64
	vst	$vr1, $sp, 48
	vst	$vr1, $sp, 32
	vst	$vr1, $sp, 16
	movgr2fr.d	$fa0, $zero
	vst	$vr1, $sp, 0
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	move	$a3, $zero
	move	$a4, $zero
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	fmov.d	$fa1, $fa0
	fmov.d	$fa2, $fa0
	fmov.d	$fa3, $fa0
	fmov.d	$fa4, $fa0
	fmov.d	$fa5, $fa0
	fmov.d	$fa6, $fa0
	fmov.d	$fa7, $fa0
	pcaddu18i	$ra, %call36(_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd)
	jirl	$ra, $ra, 0
.Ltmp209:                               # EH_LABEL
# %bb.1:
	fdiv.d	$fa0, $fs0, $fs7
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fa0, $fa0, $fs3
	fld.d	$fa1, $sp, 704                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 696                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 688                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 680                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $s0, $s4
	div.w	$a0, $a0, $fp
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s6
	div.w	$a0, $a0, $s1
	fld.d	$fa1, $sp, 504                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 496                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 488                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 480                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 472                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 464                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 456                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 448                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 440                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 432                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 424                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 416                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 408                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 400                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 392                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 384                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 376                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 368                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 360                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 352                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 344                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 336                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 328                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 320                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 272                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 264                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 232                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	ld.d	$a1, $sp, 288                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $s3
	ld.d	$a1, $sp, 296                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 2
	div.w	$a0, $a0, $s8
	alsl.d	$a2, $a1, $s0, 1
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	alsl.d	$a2, $s0, $s0, 1
	ld.d	$a3, $sp, 304                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a3, $a2, $s0, 2
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 536                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 312                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	div.w	$a0, $a0, $s7
	ld.d	$a3, $sp, 528                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 520                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 512                   # 8-byte Folded Reload
	alsl.d	$a3, $a3, $s0, 1
	addi.w	$a3, $a3, 0
	div.w	$a0, $a0, $a3
	ld.d	$a3, $sp, 544                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	alsl.d	$a1, $a1, $s0, 2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 552                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	alsl.d	$a1, $s0, $s0, 4
	alsl.d	$a1, $a1, $s0, 1
	ld.d	$a3, $sp, 560                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a3
	ori	$a3, $zero, 38
	mul.w	$a3, $s0, $a3
	ld.d	$a4, $sp, 568                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a4
	ori	$a4, $zero, 39
	mul.w	$a4, $s0, $a4
	alsl.d	$a5, $a2, $s0, 3
	addi.w	$a5, $a5, 0
	div.w	$a0, $a0, $a5
	ld.d	$a5, $sp, 608                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a5
	alsl.d	$a2, $a2, $a2, 3
	addi.w	$a2, $a2, 0
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 632                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 616                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 600                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 576                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	div.w	$a0, $a0, $s5
	ld.d	$a2, $sp, 584                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	ld.d	$a2, $sp, 592                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a2
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	ld.d	$a1, $sp, 624                   # 8-byte Folded Reload
	div.w	$a0, $a0, $a1
	fld.d	$fa1, $sp, 280                  # 8-byte Folded Reload
	fdiv.d	$fa0, $fa0, $fa1
	fld.d	$fa1, $sp, 744
	ld.d	$a1, $sp, 640                   # 8-byte Folded Reload
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	div.w	$a0, $a0, $a3
	fdiv.d	$fa0, $fa0, $fa1
	div.w	$a0, $a0, $a4
	movfr2gr.d	$a1, $fa1
	addi.w	$a1, $a1, 0
	div.w	$a0, $a0, $a1
	movgr2fr.w	$fa1, $a0
	ffint.d.w	$fa1, $fa1
	ld.d	$a2, $sp, 648                   # 8-byte Folded Reload
	ld.w	$a0, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	add.d	$a0, $a0, $a1
	st.w	$a0, $a2, 0
	addi.w	$fp, $zero, -1
.LBB38_2:
	ld.d	$a0, $sp, 712
.Ltmp211:                               # EH_LABEL
	st.d	$fp, $sp, 8
	ori	$a1, $zero, 1
	st.d	$a1, $sp, 0
	pcalau12i	$a1, %pc_hi20(.L.str.36)
	addi.d	$a1, $a1, %pc_lo12(.L.str.36)
	addi.d	$a2, $sp, 744
	ori	$a3, $zero, 2
	ori	$a4, $zero, 1
	ori	$a6, $zero, 2048
	ori	$a7, $zero, 1
	fmov.d	$fa0, $fs2
	pcaddu18i	$ra, %call36(_Z11check_tracePKcS0_PK13trace_elementdjbjjbbi)
	jirl	$ra, $ra, 0
.Ltmp212:                               # EH_LABEL
# %bb.3:
	ld.d	$a1, $sp, 712
	addi.d	$a2, $sp, 728
	beq	$a1, $a2, .LBB38_5
# %bb.4:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i
	move	$fp, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $fp
.LBB38_5:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
	fld.d	$fs7, $sp, 1544                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1552                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1560                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1568                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1576                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1584                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1592                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1600                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1608                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1616                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1624                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1632                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1640                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1648                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1656                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 1664                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 1672                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 1680                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 1688                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 1696
	ret
.LBB38_6:
.Ltmp213:                               # EH_LABEL
	move	$fp, $a0
.LBB38_7:
	ld.d	$a0, $sp, 712
	addi.d	$a1, $sp, 728
	beq	$a0, $a1, .LBB38_9
# %bb.8:                                # %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv.exit.i.i15
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
.LBB38_9:                               # %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit17
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB38_10:
.Ltmp210:                               # EH_LABEL
	addi.w	$a1, $a1, 0
	move	$fp, $a0
	ori	$a0, $zero, 1
	bne	$a1, $a0, .LBB38_7
# %bb.11:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	ld.w	$fp, $a0, 0
	pcaddu18i	$ra, %call36(__cxa_end_catch)
	jirl	$ra, $ra, 0
	b	.LBB38_2
.Lfunc_end38:
	.size	_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi, .Lfunc_end38-_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi
	.cfi_endproc
	.section	.gcc_except_table._Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi,"aG",@progbits,_Z19check_frame_variantILb0ELb1ELb1ELb1ELb1EEbiRVi,comdat
	.p2align	2, 0x0
GCC_except_table38:
.Lexception32:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase23-.Lttbaseref23
.Lttbaseref23:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end32-.Lcst_begin32
.Lcst_begin32:
	.uleb128 .Lfunc_begin32-.Lfunc_begin32  # >> Call Site 1 <<
	.uleb128 .Ltmp208-.Lfunc_begin32        #   Call between .Lfunc_begin32 and .Ltmp208
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp208-.Lfunc_begin32        # >> Call Site 2 <<
	.uleb128 .Ltmp209-.Ltmp208              #   Call between .Ltmp208 and .Ltmp209
	.uleb128 .Ltmp210-.Lfunc_begin32        #     jumps to .Ltmp210
	.byte	3                               #   On action: 2
	.uleb128 .Ltmp211-.Lfunc_begin32        # >> Call Site 3 <<
	.uleb128 .Ltmp212-.Ltmp211              #   Call between .Ltmp211 and .Ltmp212
	.uleb128 .Ltmp213-.Lfunc_begin32        #     jumps to .Ltmp213
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp212-.Lfunc_begin32        # >> Call Site 4 <<
	.uleb128 .Lfunc_end38-.Ltmp212          #   Call between .Ltmp212 and .Lfunc_end38
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end32:
	.byte	0                               # >> Action Record 1 <<
                                        #   Cleanup
	.byte	0                               #   No further actions
	.byte	1                               # >> Action Record 2 <<
                                        #   Catch TypeInfo 1
	.byte	125                             #   Continue to action 1
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
.Ltmp214:                               # TypeInfo 1
	.word	.L_ZTIi.DW.stub-.Ltmp214
.Lttbase23:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	addi.d	$fp, $sp, 2032
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a0, $a3, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $a2, 8
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 16
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fld.d	$fa0, $a0, 0
	fst.d	$fa0, $a2, 24
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 32
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end39:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end39-_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -16
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	st.w	$a0, $sp, 12
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 0
	ld.w	$a0, $sp, 12
	st.w	$a0, $a2, 8
	addi.d	$a0, $sp, 12
	st.d	$a0, $a2, 16
	fld.d	$fa0, $sp, 0
	fst.d	$fa0, $a2, 24
	addi.d	$a0, $sp, 0
	st.d	$a0, $a2, 32
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end40:
	.size	_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end40-_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	addi.d	$fp, $sp, 2032
	lu12i.w	$a3, 2
	ori	$a3, $a3, 2064
	sub.d	$sp, $sp, $a3
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	fst.d	$fa0, $a2, 0
	ld.b	$a3, $a1, 0
	lu12i.w	$a4, 2
	add.d	$a4, $s8, $a4
	st.w	$a3, $a4, 0
	ld.b	$a3, $a1, 1
	movgr2fr.w	$fa0, $a3
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	fst.d	$fa0, $a3, 0
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	ld.w	$a3, $a3, 0
	st.w	$a3, $a2, 8
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	st.d	$a3, $a2, 16
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	fld.d	$fa0, $a3, 0
	move	$a3, $sp
	fst.d	$fa0, $a2, 24
	lu12i.w	$a4, 1
	add.d	$a4, $s8, $a4
	st.d	$a4, $a2, 32
	bstrpick.d	$a4, $a0, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a1, $a4, $a0
	ld.b	$a1, $a4, 0
	st.w	$a1, $a2, 40
	st.d	$a4, $a2, 48
	ldx.b	$a1, $a4, $a0
	add.d	$a0, $a4, $a0
	st.w	$a1, $a2, 56
	st.d	$a0, $a2, 64
	move	$sp, $a3
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end41:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end41-_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	addi.d	$fp, $sp, 2032
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	fst.d	$fa0, $a2, 0
	ld.b	$a3, $a1, 0
	ori	$a4, $zero, 4068
	add.d	$a4, $s8, $a4
	st.w	$a3, $a4, 0
	ld.b	$a3, $a1, 1
	movgr2fr.w	$fa0, $a3
	ffint.d.w	$fa0, $fa0
	ori	$a3, $zero, 4056
	add.d	$a3, $s8, $a3
	fst.d	$fa0, $a3, 0
	ori	$a3, $zero, 4068
	add.d	$a3, $s8, $a3
	ld.w	$a3, $a3, 0
	st.w	$a3, $a2, 8
	ori	$a3, $zero, 4068
	add.d	$a3, $s8, $a3
	st.d	$a3, $a2, 16
	ori	$a3, $zero, 4056
	add.d	$a3, $s8, $a3
	fld.d	$fa0, $a3, 0
	move	$a3, $sp
	fst.d	$fa0, $a2, 24
	ori	$a4, $zero, 4056
	add.d	$a4, $s8, $a4
	st.d	$a4, $a2, 32
	bstrpick.d	$a4, $a0, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a1, $a4, $a0
	ld.b	$a1, $a4, 0
	st.w	$a1, $a2, 40
	st.d	$a4, $a2, 48
	ldx.b	$a1, $a4, $a0
	add.d	$a0, $a4, $a0
	st.w	$a1, $a2, 56
	st.d	$a0, $a2, 64
	move	$sp, $a3
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end42:
	.size	_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end42-_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	ori	$a0, $zero, 4064
	add.d	$a0, $sp, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a0, $a3, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $a2, 8
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 16
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fld.d	$fa0, $a0, 0
	fst.d	$fa0, $a2, 24
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3912
	add.d	$a0, $sp, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $sp, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	ori	$a0, $zero, 3936
	add.d	$a0, $sp, $a0
	fst.d	$fs2, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $sp, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3960
	add.d	$a0, $sp, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $sp, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $sp, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4016
	add.d	$a0, $sp, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4008
	add.d	$a0, $sp, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	ori	$a1, $zero, 4000
	add.d	$a1, $sp, $a1
	st.d	$a2, $a1, 0                     # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	ori	$a3, $zero, 3984
	add.d	$a3, $sp, $a3
	st.d	$a1, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	ori	$a3, $zero, 3952
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t7, $a0, 5
	alsl.d	$a2, $a0, $t7, 2
	ori	$a3, $zero, 3928
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t8, $a0, $a0, 4
	alsl.d	$a2, $t8, $a0, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t7, 1
	ori	$a3, $zero, 3896
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t7, $a0
	ori	$a3, $zero, 3888
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	sub.d	$a2, $t7, $a0
	ori	$a3, $zero, 3880
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3856
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t0, $a0, $a0, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3848
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 26
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3840
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$s0, $t0, $a0, 3
	div.d	$a1, $a1, $s0
	ext.w.h	$a2, $a1
	slli.d	$a6, $a0, 4
	alsl.d	$s1, $a0, $a6, 3
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s2, $a0, $a4
	div.d	$a2, $a2, $s2
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a0, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a0, $a0, 2
	alsl.d	$s5, $a7, $a0, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a0, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$s8, $a0, $a6, 1
	div.d	$a4, $a4, $s8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $t8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t6, $a6, $a0
	div.d	$a4, $a4, $t6
	ext.w.h	$ra, $a4
	ori	$a4, $zero, 14
	mul.d	$t5, $a0, $a4
	div.d	$ra, $ra, $t5
	ext.w.h	$ra, $ra
	alsl.d	$t4, $t0, $a0, 2
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	slli.d	$a3, $a0, 3
	alsl.d	$t3, $a0, $a3, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	alsl.d	$t2, $a7, $a0, 1
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a0, $a3, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a0
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	slli.d	$a1, $a0, 1
	div.d	$ra, $ra, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	ori	$a2, $zero, 3912
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3920
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3936
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3960
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3968
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ori	$a2, $zero, 4064
	add.d	$a2, $sp, $a2
	ld.d	$a3, $a2, 0                     # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s8
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s0
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3840
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3848
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3856
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3864
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3872
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3880
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3888
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3896
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3904
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3928
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3952
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3984
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 4000
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end43:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end43-_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -432
	.cfi_def_cfa_offset 432
	st.d	$ra, $sp, 424                   # 8-byte Folded Spill
	st.d	$fp, $sp, 416                   # 8-byte Folded Spill
	st.d	$s0, $sp, 408                   # 8-byte Folded Spill
	st.d	$s1, $sp, 400                   # 8-byte Folded Spill
	st.d	$s2, $sp, 392                   # 8-byte Folded Spill
	st.d	$s3, $sp, 384                   # 8-byte Folded Spill
	st.d	$s4, $sp, 376                   # 8-byte Folded Spill
	st.d	$s5, $sp, 368                   # 8-byte Folded Spill
	st.d	$s6, $sp, 360                   # 8-byte Folded Spill
	st.d	$s7, $sp, 352                   # 8-byte Folded Spill
	st.d	$s8, $sp, 344                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 336                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 328                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 320                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 312                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 296                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 288                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 280                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a2, $sp, 232                   # 8-byte Folded Spill
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	st.w	$a0, $sp, 276
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 264
	ld.w	$a0, $sp, 276
	st.w	$a0, $a2, 8
	addi.d	$a0, $sp, 276
	st.d	$a0, $a2, 16
	fld.d	$fa0, $sp, 264
	fst.d	$fa0, $a2, 24
	addi.d	$a0, $sp, 264
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 208                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 200                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	fst.d	$ft1, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $sp, 136                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $sp, 144                  # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $sp, 152                  # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $sp, 184                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 168                  # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	st.d	$a2, $sp, 176                   # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	st.d	$a1, $sp, 160                   # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t6, $a0, 5
	alsl.d	$a2, $a0, $t6, 2
	st.d	$a2, $sp, 104                   # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t7, $a0, $a0, 4
	alsl.d	$a2, $t7, $a0, 1
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t6, 1
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t6, $a0
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	sub.d	$a2, $t6, $a0
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a7, $a0, $a0, 1
	alsl.d	$a2, $a7, $a7, 3
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a3, $zero, 26
	mul.d	$t8, $a0, $a3
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	alsl.d	$fp, $a7, $a0, 3
	div.d	$a1, $a1, $fp
	ext.w.h	$a1, $a1
	slli.d	$s3, $a0, 4
	alsl.d	$s0, $a0, $s3, 3
	div.d	$a1, $a1, $s0
	ext.w.h	$a1, $a1
	ori	$a3, $zero, 23
	mul.d	$s1, $a0, $a3
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	ori	$a3, $zero, 22
	mul.d	$s2, $a0, $a3
	div.d	$a1, $a1, $s2
	ext.w.h	$a3, $a1
	alsl.d	$a6, $a0, $a0, 2
	alsl.d	$s5, $a6, $a0, 2
	div.d	$a3, $a3, $s5
	ext.w.h	$a3, $a3
	alsl.d	$s6, $a0, $s3, 2
	div.d	$a3, $a3, $s6
	ext.w.h	$a3, $a3
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a3, $a3, $s7
	ext.w.h	$a3, $a3
	alsl.d	$s8, $a0, $s3, 1
	div.d	$a3, $a3, $s8
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $t7
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $s3
	ext.w.h	$a3, $a3
	sub.d	$t5, $s3, $a0
	div.d	$a3, $a3, $t5
	ext.w.h	$ra, $a3
	ori	$a3, $zero, 14
	mul.d	$t4, $a0, $a3
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	alsl.d	$t3, $a7, $a0, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	slli.d	$a3, $a0, 3
	alsl.d	$t2, $a0, $a3, 2
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a6, $a0, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	alsl.d	$t0, $a0, $a3, 1
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a0
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a6
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	slli.d	$a1, $a0, 1
	div.d	$ra, $ra, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	fld.d	$fa2, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ld.d	$a3, $sp, 232                   # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s8
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $fp
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 128                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 160                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 176                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	fld.d	$fs7, $sp, 280                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 288                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 296                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 304                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 312                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 320                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 328                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 336                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 360                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 368                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 376                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 384                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 392                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 400                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 408                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 416                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 424                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 432
	ret
.Lfunc_end44:
	.size	_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end44-_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a3, 2
	ori	$a3, $a3, 2064
	sub.d	$sp, $sp, $a3
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	move	$s0, $a2
	fst.d	$fa0, $a2, 0
	ld.b	$a2, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $s0, 8
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	st.d	$a2, $s0, 16
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	fst.d	$fa0, $s0, 24
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a0, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a4, $a3, $a0
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a0
	add.d	$a0, $a3, $a0
	st.w	$a4, $s0, 56
	st.d	$a0, $s0, 64
	move	$sp, $a2
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $s8, $a0
	fst.d	$ft15, $a0, 0                   # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $s8, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	ori	$a0, $zero, 3952
	add.d	$a0, $s8, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $s8, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $s8, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $s8, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 4008
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $s8, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4016
	add.d	$a0, $s8, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	ori	$a1, $zero, 4000
	add.d	$a1, $s8, $a1
	st.d	$a2, $a1, 0                     # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	ori	$a3, $zero, 3984
	add.d	$a3, $s8, $a3
	st.d	$a1, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	ori	$a3, $zero, 3960
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t8, $a0, 5
	alsl.d	$a2, $a0, $t8, 2
	ori	$a3, $zero, 3936
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$s2, $a0, $a0, 4
	alsl.d	$a2, $s2, $a0, 1
	ori	$a3, $zero, 3912
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t8, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t8, $a0
	ori	$a3, $zero, 3896
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	sub.d	$a2, $t8, $a0
	ori	$a3, $zero, 3888
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3880
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t0, $a0, $a0, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3856
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 26
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3848
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $t0, $a0, 3
	ori	$a3, $zero, 3840
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $a1
	slli.d	$a6, $a0, 4
	alsl.d	$a1, $a0, $a6, 3
	ori	$a3, $zero, 3832
	add.d	$a3, $s8, $a3
	st.d	$a1, $a3, 0                     # 8-byte Folded Spill
	div.d	$a2, $a2, $a1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a0, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a0, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a0, $a0, 2
	alsl.d	$s5, $a7, $a0, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a0, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a0, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a0
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a0, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a0, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a0, 3
	alsl.d	$t4, $a0, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a0, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a0, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a0
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a1, $a0, 1
	div.d	$t1, $t1, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	ori	$a2, $zero, 3920
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3952
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3968
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4024
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $ra
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3832
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3840
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3848
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3856
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3864
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3872
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3880
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3888
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3896
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3904
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3912
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3936
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3960
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3984
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 4000
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end45:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end45-_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	move	$s0, $a2
	fst.d	$fa0, $a2, 0
	ld.b	$a2, $a1, 0
	ori	$a3, $zero, 3940
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	ori	$a2, $zero, 3940
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $s0, 8
	ori	$a2, $zero, 3940
	add.d	$a2, $s8, $a2
	st.d	$a2, $s0, 16
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	fst.d	$fa0, $s0, 24
	ori	$a3, $zero, 3928
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a0, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a4, $a3, $a0
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a0
	add.d	$a0, $a3, $a0
	st.w	$a4, $s0, 56
	st.d	$a0, $s0, 64
	move	$sp, $a2
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $s8, 2016                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2008                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2000                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2040                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 1992                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2032                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2024                 # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $s8, 1984                 # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	fst.d	$ft15, $s8, 1872                # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $s8, 1880                 # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	fst.d	$fs1, $s8, 1896                 # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	fst.d	$ft1, $s8, 1904                 # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $s8, 1920                 # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $s8, 1928                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $s8, 1944                 # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $s8, 1960                 # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $s8, 1976                 # 8-byte Folded Spill
	fst.d	$ft0, $s8, 1968                 # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $s8, 1984                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $s8, 1992                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $s8, 2000                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $s8, 2008                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $s8, 2016                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	st.d	$a2, $s8, 1952                  # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	st.d	$a1, $s8, 1936                  # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	st.d	$a2, $s8, 1912                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t8, $a0, 5
	alsl.d	$a2, $a0, $t8, 2
	st.d	$a2, $s8, 1888                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$s2, $a0, $a0, 4
	alsl.d	$a2, $s2, $a0, 1
	st.d	$a2, $s8, 1864                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t8, 1
	st.d	$a2, $s8, 1856                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t8, $a0
	st.d	$a2, $s8, 1848                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	sub.d	$a2, $t8, $a0
	st.d	$a2, $s8, 1840                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1832                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1824                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1816                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t0, $a0, $a0, 1
	alsl.d	$a2, $t0, $t0, 3
	st.d	$a2, $s8, 1808                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 26
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1800                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $t0, $a0, 3
	st.d	$a2, $s8, 1792                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $a1
	slli.d	$a6, $a0, 4
	alsl.d	$a1, $a0, $a6, 3
	st.d	$a1, $s8, 1784                  # 8-byte Folded Spill
	div.d	$a2, $a2, $a1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a0, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a0, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a0, $a0, 2
	alsl.d	$s5, $a7, $a0, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a0, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a0, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a0
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a0, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a0, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a0, 3
	alsl.d	$t4, $a0, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a0, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a0, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a0
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a1, $a0, 1
	div.d	$t1, $t1, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	fld.d	$fa2, $s8, 1872                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1880                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1896                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1904                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $s8, 1920                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1928                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1944                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1960                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1968                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1976                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $ra
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1784                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1792                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1800                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1808                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1816                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1824                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1832                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1840                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1848                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1856                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1864                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1888                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1912                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1936                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1952                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end46:
	.size	_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end46-_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	addi.d	$fp, $sp, 2032
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	ld.d	$a0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a2, $a3, 0
	ld.b	$a1, $a1, 1
	movgr2fr.w	$fa0, $a1
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a1, 1
	add.d	$a1, $sp, $a1
	fst.d	$fa0, $a1, 0
	lu12i.w	$a1, 2
	add.d	$a1, $sp, $a1
	ld.w	$a1, $a1, 0
	st.w	$a1, $a0, 8
	lu12i.w	$a1, 2
	add.d	$a1, $sp, $a1
	st.d	$a1, $a0, 16
	lu12i.w	$a1, 1
	add.d	$a1, $sp, $a1
	fld.d	$fa0, $a1, 0
	fst.d	$fa0, $a0, 24
	lu12i.w	$a1, 1
	add.d	$a1, $sp, $a1
	st.d	$a1, $a0, 32
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end47:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end47-_Z10test_frameILj4096ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -16
	ld.d	$a0, $sp, 224
	fld.d	$fa0, $sp, 232
	ld.d	$a1, $sp, 216
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	st.w	$a2, $sp, 12
	ld.b	$a1, $a1, 1
	movgr2fr.w	$fa0, $a1
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 0
	ld.w	$a1, $sp, 12
	st.w	$a1, $a0, 8
	addi.d	$a1, $sp, 12
	st.d	$a1, $a0, 16
	fld.d	$fa0, $sp, 0
	fst.d	$fa0, $a0, 24
	addi.d	$a1, $sp, 0
	st.d	$a1, $a0, 32
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end48:
	.size	_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end48-_Z10test_frameILj2ELb0ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	addi.d	$fp, $sp, 2032
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	ld.d	$a0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $a0, 8
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	st.d	$a2, $a0, 16
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	ld.d	$a3, $fp, 192
	fst.d	$fa0, $a0, 24
	lu12i.w	$a4, 1
	add.d	$a4, $s8, $a4
	st.d	$a4, $a0, 32
	bstrpick.d	$a4, $a3, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a3, $a3, -1
	bstrpick.d	$a3, $a3, 31, 0
	stx.b	$a1, $a4, $a3
	ld.b	$a1, $a4, 0
	st.w	$a1, $a0, 40
	st.d	$a4, $a0, 48
	ldx.b	$a1, $a4, $a3
	add.d	$a3, $a4, $a3
	st.w	$a1, $a0, 56
	st.d	$a3, $a0, 64
	move	$sp, $a2
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end49:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end49-_Z10test_frameILj4096ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
# %bb.0:
	addi.d	$sp, $sp, -2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	addi.d	$fp, $sp, 2032
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	ld.d	$a0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	ori	$a3, $zero, 4068
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	ori	$a2, $zero, 4056
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	ori	$a2, $zero, 4068
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $a0, 8
	ori	$a2, $zero, 4068
	add.d	$a2, $s8, $a2
	st.d	$a2, $a0, 16
	ori	$a2, $zero, 4056
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	ld.d	$a3, $fp, 192
	fst.d	$fa0, $a0, 24
	ori	$a4, $zero, 4056
	add.d	$a4, $s8, $a4
	st.d	$a4, $a0, 32
	bstrpick.d	$a4, $a3, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a3, $a3, -1
	bstrpick.d	$a3, $a3, 31, 0
	stx.b	$a1, $a4, $a3
	ld.b	$a1, $a4, 0
	st.w	$a1, $a0, 40
	st.d	$a4, $a0, 48
	ldx.b	$a1, $a4, $a3
	add.d	$a3, $a4, $a3
	st.w	$a1, $a0, 56
	st.d	$a3, $a0, 64
	move	$sp, $a2
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end50:
	.size	_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end50-_Z10test_frameILj2ELb1ELj2048ELb0ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	ld.d	$a2, $fp, 208
	ori	$a0, $zero, 4064
	add.d	$a0, $sp, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a0, $a3, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $a2, 8
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 16
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fld.d	$fa0, $a0, 0
	fst.d	$fa0, $a2, 24
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3912
	add.d	$a0, $sp, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $sp, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	ori	$a0, $zero, 3936
	add.d	$a0, $sp, $a0
	fst.d	$fs2, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $sp, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3960
	add.d	$a0, $sp, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $sp, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $sp, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4016
	add.d	$a0, $sp, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4008
	add.d	$a0, $sp, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	ori	$a0, $zero, 4000
	add.d	$a0, $sp, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	ori	$a3, $zero, 3984
	add.d	$a3, $sp, $a3
	st.d	$a0, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	ori	$a3, $zero, 3952
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t7, $a1, 5
	alsl.d	$a2, $a1, $t7, 2
	ori	$a3, $zero, 3928
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t8, $a1, $a1, 4
	alsl.d	$a2, $t8, $a1, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t7, 1
	ori	$a3, $zero, 3896
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t7, $a1
	ori	$a3, $zero, 3888
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	sub.d	$a2, $t7, $a1
	ori	$a3, $zero, 3880
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3856
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t0, $a1, $a1, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3848
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 26
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3840
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$s0, $t0, $a1, 3
	div.d	$a0, $a0, $s0
	ext.w.h	$a2, $a0
	slli.d	$a6, $a1, 4
	alsl.d	$s1, $a1, $a6, 3
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s2, $a1, $a4
	div.d	$a2, $a2, $s2
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a1, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a1, $a1, 2
	alsl.d	$s5, $a7, $a1, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a1, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$s8, $a1, $a6, 1
	div.d	$a4, $a4, $s8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $t8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t6, $a6, $a1
	div.d	$a4, $a4, $t6
	ext.w.h	$ra, $a4
	ori	$a4, $zero, 14
	mul.d	$t5, $a1, $a4
	div.d	$ra, $ra, $t5
	ext.w.h	$ra, $ra
	alsl.d	$t4, $t0, $a1, 2
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	slli.d	$a3, $a1, 3
	alsl.d	$t3, $a1, $a3, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	alsl.d	$t2, $a7, $a1, 1
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a1, $a3, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a1
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	slli.d	$a0, $a1, 1
	div.d	$ra, $ra, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	ori	$a2, $zero, 3912
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3920
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3936
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3960
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3968
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ori	$a2, $zero, 4064
	add.d	$a2, $sp, $a2
	ld.d	$a3, $a2, 0                     # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s8
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s0
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3840
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3848
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3856
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3864
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3872
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3880
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3888
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3896
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3904
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3928
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3952
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3984
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 4000
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end51:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end51-_Z10test_frameILj4096ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -432
	.cfi_def_cfa_offset 432
	st.d	$ra, $sp, 424                   # 8-byte Folded Spill
	st.d	$fp, $sp, 416                   # 8-byte Folded Spill
	st.d	$s0, $sp, 408                   # 8-byte Folded Spill
	st.d	$s1, $sp, 400                   # 8-byte Folded Spill
	st.d	$s2, $sp, 392                   # 8-byte Folded Spill
	st.d	$s3, $sp, 384                   # 8-byte Folded Spill
	st.d	$s4, $sp, 376                   # 8-byte Folded Spill
	st.d	$s5, $sp, 368                   # 8-byte Folded Spill
	st.d	$s6, $sp, 360                   # 8-byte Folded Spill
	st.d	$s7, $sp, 352                   # 8-byte Folded Spill
	st.d	$s8, $sp, 344                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 336                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 328                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 320                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 312                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 296                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 288                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 280                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	ld.d	$a2, $sp, 640
	st.d	$a2, $sp, 232                   # 8-byte Folded Spill
	fld.d	$fa0, $sp, 648
	ld.d	$a1, $sp, 632
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	st.w	$a0, $sp, 276
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 264
	ld.w	$a0, $sp, 276
	st.w	$a0, $a2, 8
	addi.d	$a0, $sp, 276
	st.d	$a0, $a2, 16
	fld.d	$fa0, $sp, 264
	fst.d	$fa0, $a2, 24
	addi.d	$a0, $sp, 264
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 208                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 200                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	fst.d	$ft1, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $sp, 136                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $sp, 144                  # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $sp, 152                  # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $sp, 184                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 168                  # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	st.d	$a2, $sp, 176                   # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	st.d	$a0, $sp, 160                   # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t6, $a1, 5
	alsl.d	$a2, $a1, $t6, 2
	st.d	$a2, $sp, 104                   # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t7, $a1, $a1, 4
	alsl.d	$a2, $t7, $a1, 1
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t6, 1
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t6, $a1
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	sub.d	$a2, $t6, $a1
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a7, $a1, $a1, 1
	alsl.d	$a2, $a7, $a7, 3
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a3, $zero, 26
	mul.d	$t8, $a1, $a3
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	alsl.d	$fp, $a7, $a1, 3
	div.d	$a0, $a0, $fp
	ext.w.h	$a0, $a0
	slli.d	$s3, $a1, 4
	alsl.d	$s0, $a1, $s3, 3
	div.d	$a0, $a0, $s0
	ext.w.h	$a0, $a0
	ori	$a3, $zero, 23
	mul.d	$s1, $a1, $a3
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	ori	$a3, $zero, 22
	mul.d	$s2, $a1, $a3
	div.d	$a0, $a0, $s2
	ext.w.h	$a3, $a0
	alsl.d	$a6, $a1, $a1, 2
	alsl.d	$s5, $a6, $a1, 2
	div.d	$a3, $a3, $s5
	ext.w.h	$a3, $a3
	alsl.d	$s6, $a1, $s3, 2
	div.d	$a3, $a3, $s6
	ext.w.h	$a3, $a3
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a3, $a3, $s7
	ext.w.h	$a3, $a3
	alsl.d	$s8, $a1, $s3, 1
	div.d	$a3, $a3, $s8
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $t7
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $s3
	ext.w.h	$a3, $a3
	sub.d	$t5, $s3, $a1
	div.d	$a3, $a3, $t5
	ext.w.h	$ra, $a3
	ori	$a3, $zero, 14
	mul.d	$t4, $a1, $a3
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	alsl.d	$t3, $a7, $a1, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	slli.d	$a3, $a1, 3
	alsl.d	$t2, $a1, $a3, 2
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a6, $a1, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	alsl.d	$t0, $a1, $a3, 1
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a1
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a6
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	slli.d	$a0, $a1, 1
	div.d	$ra, $ra, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	fld.d	$fa2, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ld.d	$a3, $sp, 232                   # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s8
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $fp
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 128                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 160                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 176                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	fld.d	$fs7, $sp, 280                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 288                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 296                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 304                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 312                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 320                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 328                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 336                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 360                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 368                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 376                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 384                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 392                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 400                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 408                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 416                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 424                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 432
	ret
.Lfunc_end52:
	.size	_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end52-_Z10test_frameILj2ELb0ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	ld.d	$s0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $s0, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	st.w	$a0, $a2, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $s8, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $s8, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $s0, 8
	lu12i.w	$a0, 2
	add.d	$a0, $s8, $a0
	st.d	$a0, $s0, 16
	lu12i.w	$a0, 1
	add.d	$a0, $s8, $a0
	fld.d	$fa0, $a0, 0
	move	$a0, $sp
	ld.d	$a2, $fp, 192
	fst.d	$fa0, $s0, 24
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a2, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a2, $a2, -1
	bstrpick.d	$a2, $a2, 31, 0
	stx.b	$a4, $a3, $a2
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a2
	add.d	$a2, $a3, $a2
	st.w	$a4, $s0, 56
	st.d	$a2, $s0, 64
	move	$sp, $a0
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $s8, $a0
	fst.d	$ft15, $a0, 0                   # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $s8, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	ori	$a0, $zero, 3952
	add.d	$a0, $s8, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $s8, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $s8, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $s8, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 4008
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $s8, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4016
	add.d	$a0, $s8, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	ori	$a0, $zero, 4000
	add.d	$a0, $s8, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	ori	$a3, $zero, 3984
	add.d	$a3, $s8, $a3
	st.d	$a0, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	ori	$a3, $zero, 3960
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t8, $a1, 5
	alsl.d	$a2, $a1, $t8, 2
	ori	$a3, $zero, 3936
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$s2, $a1, $a1, 4
	alsl.d	$a2, $s2, $a1, 1
	ori	$a3, $zero, 3912
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t8, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t8, $a1
	ori	$a3, $zero, 3896
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	sub.d	$a2, $t8, $a1
	ori	$a3, $zero, 3888
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3880
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t0, $a1, $a1, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3856
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 26
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3848
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $t0, $a1, 3
	ori	$a3, $zero, 3840
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $a0
	slli.d	$a6, $a1, 4
	alsl.d	$a0, $a1, $a6, 3
	ori	$a3, $zero, 3832
	add.d	$a3, $s8, $a3
	st.d	$a0, $a3, 0                     # 8-byte Folded Spill
	div.d	$a2, $a2, $a0
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a1, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a1, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a1, $a1, 2
	alsl.d	$s5, $a7, $a1, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a1, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a1, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a1
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a1, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a1, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a1, 3
	alsl.d	$t4, $a1, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a1, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a1, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a1
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a0, $a1, 1
	div.d	$t1, $t1, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	ori	$a2, $zero, 3920
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3952
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3968
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4024
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $ra
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3832
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3840
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3848
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3856
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3864
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3872
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3880
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3888
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3896
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3904
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3912
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3936
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3960
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3984
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 4000
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end53:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end53-_Z10test_frameILj4096ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	ld.d	$s0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $s0, 0
	ld.b	$a0, $a1, 0
	ori	$a2, $zero, 3940
	add.d	$a2, $s8, $a2
	st.w	$a0, $a2, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fst.d	$fa0, $a0, 0
	ori	$a0, $zero, 3940
	add.d	$a0, $s8, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $s0, 8
	ori	$a0, $zero, 3940
	add.d	$a0, $s8, $a0
	st.d	$a0, $s0, 16
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fld.d	$fa0, $a0, 0
	move	$a0, $sp
	ld.d	$a2, $fp, 192
	fst.d	$fa0, $s0, 24
	ori	$a3, $zero, 3928
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a2, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a2, $a2, -1
	bstrpick.d	$a2, $a2, 31, 0
	stx.b	$a4, $a3, $a2
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a2
	add.d	$a2, $a3, $a2
	st.w	$a4, $s0, 56
	st.d	$a2, $s0, 64
	move	$sp, $a0
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $s8, 2016                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2008                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2000                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2040                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 1992                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2032                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2024                 # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $s8, 1984                 # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	fst.d	$ft15, $s8, 1872                # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $s8, 1880                 # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	fst.d	$fs1, $s8, 1896                 # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	fst.d	$ft1, $s8, 1904                 # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $s8, 1920                 # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $s8, 1928                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $s8, 1944                 # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $s8, 1960                 # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $s8, 1976                 # 8-byte Folded Spill
	fst.d	$ft0, $s8, 1968                 # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $s8, 1984                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $s8, 1992                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $s8, 2000                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $s8, 2008                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $s8, 2016                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	st.d	$a2, $s8, 1952                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	st.d	$a0, $s8, 1936                  # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	st.d	$a2, $s8, 1912                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t8, $a1, 5
	alsl.d	$a2, $a1, $t8, 2
	st.d	$a2, $s8, 1888                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$s2, $a1, $a1, 4
	alsl.d	$a2, $s2, $a1, 1
	st.d	$a2, $s8, 1864                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t8, 1
	st.d	$a2, $s8, 1856                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t8, $a1
	st.d	$a2, $s8, 1848                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	sub.d	$a2, $t8, $a1
	st.d	$a2, $s8, 1840                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1832                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1824                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1816                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t0, $a1, $a1, 1
	alsl.d	$a2, $t0, $t0, 3
	st.d	$a2, $s8, 1808                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 26
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1800                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $t0, $a1, 3
	st.d	$a2, $s8, 1792                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $a0
	slli.d	$a6, $a1, 4
	alsl.d	$a0, $a1, $a6, 3
	st.d	$a0, $s8, 1784                  # 8-byte Folded Spill
	div.d	$a2, $a2, $a0
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a1, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a1, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a1, $a1, 2
	alsl.d	$s5, $a7, $a1, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a1, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a1, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a1
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a1, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a1, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a1, 3
	alsl.d	$t4, $a1, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a1, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a1, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a1
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a0, $a1, 1
	div.d	$t1, $t1, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	fld.d	$fa2, $s8, 1872                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1880                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1896                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1904                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $s8, 1920                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1928                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1944                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1960                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1968                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1976                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $ra
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1784                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1792                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1800                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1808                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1816                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1824                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1832                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1840                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1848                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1856                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1864                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1888                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1912                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1936                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1952                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end54:
	.size	_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end54-_Z10test_frameILj2ELb1ELj2048ELb1ELb0EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a0, $a3, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $a2, 8
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 16
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fld.d	$fa0, $a0, 0
	fst.d	$fa0, $a2, 24
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 32
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end55:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end55-_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	st.w	$a0, $sp, 20
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 8
	ld.w	$a0, $sp, 20
	st.w	$a0, $a2, 8
	addi.d	$a0, $sp, 20
	st.d	$a0, $a2, 16
	fld.d	$fa0, $sp, 8
	fst.d	$fa0, $a2, 24
	addi.d	$a0, $sp, 8
	st.d	$a0, $a2, 32
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end56:
	.size	_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end56-_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 31, -24
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a3, 2
	ori	$a3, $a3, 2064
	sub.d	$sp, $sp, $a3
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	fst.d	$fa0, $a2, 0
	ld.b	$a3, $a1, 0
	lu12i.w	$a4, 2
	add.d	$a4, $s8, $a4
	st.w	$a3, $a4, 0
	ld.b	$a3, $a1, 1
	movgr2fr.w	$fa0, $a3
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	fst.d	$fa0, $a3, 0
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	ld.w	$a3, $a3, 0
	st.w	$a3, $a2, 8
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	st.d	$a3, $a2, 16
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	fld.d	$fa0, $a3, 0
	move	$a3, $sp
	fst.d	$fa0, $a2, 24
	lu12i.w	$a4, 1
	add.d	$a4, $s8, $a4
	st.d	$a4, $a2, 32
	bstrpick.d	$a4, $a0, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a1, $a4, $a0
	ld.b	$a1, $a4, 0
	st.w	$a1, $a2, 40
	st.d	$a4, $a2, 48
	ldx.b	$a1, $a4, $a0
	add.d	$a0, $a4, $a0
	st.w	$a1, $a2, 56
	st.d	$a0, $a2, 64
	move	$sp, $a3
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end57:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end57-_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 31, -24
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	fst.d	$fa0, $a2, 0
	ld.b	$a3, $a1, 0
	ori	$a4, $zero, 4068
	add.d	$a4, $s8, $a4
	st.w	$a3, $a4, 0
	ld.b	$a3, $a1, 1
	movgr2fr.w	$fa0, $a3
	ffint.d.w	$fa0, $fa0
	ori	$a3, $zero, 4056
	add.d	$a3, $s8, $a3
	fst.d	$fa0, $a3, 0
	ori	$a3, $zero, 4068
	add.d	$a3, $s8, $a3
	ld.w	$a3, $a3, 0
	st.w	$a3, $a2, 8
	ori	$a3, $zero, 4068
	add.d	$a3, $s8, $a3
	st.d	$a3, $a2, 16
	ori	$a3, $zero, 4056
	add.d	$a3, $s8, $a3
	fld.d	$fa0, $a3, 0
	move	$a3, $sp
	fst.d	$fa0, $a2, 24
	ori	$a4, $zero, 4056
	add.d	$a4, $s8, $a4
	st.d	$a4, $a2, 32
	bstrpick.d	$a4, $a0, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a1, $a4, $a0
	ld.b	$a1, $a4, 0
	st.w	$a1, $a2, 40
	st.d	$a4, $a2, 48
	ldx.b	$a1, $a4, $a0
	add.d	$a0, $a4, $a0
	st.w	$a1, $a2, 56
	st.d	$a0, $a2, 64
	move	$sp, $a3
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end58:
	.size	_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end58-_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	ori	$a0, $zero, 4064
	add.d	$a0, $sp, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a0, $a3, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $a2, 8
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 16
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fld.d	$fa0, $a0, 0
	fst.d	$fa0, $a2, 24
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3912
	add.d	$a0, $sp, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $sp, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	ori	$a0, $zero, 3936
	add.d	$a0, $sp, $a0
	fst.d	$fs2, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $sp, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3960
	add.d	$a0, $sp, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $sp, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $sp, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4016
	add.d	$a0, $sp, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4008
	add.d	$a0, $sp, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	ori	$a1, $zero, 4000
	add.d	$a1, $sp, $a1
	st.d	$a2, $a1, 0                     # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	ori	$a3, $zero, 3984
	add.d	$a3, $sp, $a3
	st.d	$a1, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	ori	$a3, $zero, 3952
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t7, $a0, 5
	alsl.d	$a2, $a0, $t7, 2
	ori	$a3, $zero, 3928
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t8, $a0, $a0, 4
	alsl.d	$a2, $t8, $a0, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t7, 1
	ori	$a3, $zero, 3896
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t7, $a0
	ori	$a3, $zero, 3888
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	sub.d	$a2, $t7, $a0
	ori	$a3, $zero, 3880
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3856
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t0, $a0, $a0, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3848
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 26
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3840
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$s0, $t0, $a0, 3
	div.d	$a1, $a1, $s0
	ext.w.h	$a2, $a1
	slli.d	$a6, $a0, 4
	alsl.d	$s1, $a0, $a6, 3
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s2, $a0, $a4
	div.d	$a2, $a2, $s2
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a0, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a0, $a0, 2
	alsl.d	$s5, $a7, $a0, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a0, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$s8, $a0, $a6, 1
	div.d	$a4, $a4, $s8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $t8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t6, $a6, $a0
	div.d	$a4, $a4, $t6
	ext.w.h	$ra, $a4
	ori	$a4, $zero, 14
	mul.d	$t5, $a0, $a4
	div.d	$ra, $ra, $t5
	ext.w.h	$ra, $ra
	alsl.d	$t4, $t0, $a0, 2
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	slli.d	$a3, $a0, 3
	alsl.d	$t3, $a0, $a3, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	alsl.d	$t2, $a7, $a0, 1
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a0, $a3, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a0
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	slli.d	$a1, $a0, 1
	div.d	$ra, $ra, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	ori	$a2, $zero, 3912
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3920
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3936
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3960
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3968
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ori	$a2, $zero, 4064
	add.d	$a2, $sp, $a2
	ld.d	$a3, $a2, 0                     # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s8
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s0
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3840
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3848
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3856
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3864
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3872
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3880
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3888
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3896
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3904
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3928
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3952
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3984
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 4000
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end59:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end59-_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -432
	.cfi_def_cfa_offset 432
	st.d	$ra, $sp, 424                   # 8-byte Folded Spill
	st.d	$fp, $sp, 416                   # 8-byte Folded Spill
	st.d	$s0, $sp, 408                   # 8-byte Folded Spill
	st.d	$s1, $sp, 400                   # 8-byte Folded Spill
	st.d	$s2, $sp, 392                   # 8-byte Folded Spill
	st.d	$s3, $sp, 384                   # 8-byte Folded Spill
	st.d	$s4, $sp, 376                   # 8-byte Folded Spill
	st.d	$s5, $sp, 368                   # 8-byte Folded Spill
	st.d	$s6, $sp, 360                   # 8-byte Folded Spill
	st.d	$s7, $sp, 352                   # 8-byte Folded Spill
	st.d	$s8, $sp, 344                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 336                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 328                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 320                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 312                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 296                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 288                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 280                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a2, $sp, 232                   # 8-byte Folded Spill
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	st.w	$a0, $sp, 276
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 264
	ld.w	$a0, $sp, 276
	st.w	$a0, $a2, 8
	addi.d	$a0, $sp, 276
	st.d	$a0, $a2, 16
	fld.d	$fa0, $sp, 264
	fst.d	$fa0, $a2, 24
	addi.d	$a0, $sp, 264
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 208                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 200                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	fst.d	$ft1, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $sp, 136                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $sp, 144                  # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $sp, 152                  # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $sp, 184                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 168                  # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	st.d	$a2, $sp, 176                   # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	st.d	$a1, $sp, 160                   # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t6, $a0, 5
	alsl.d	$a2, $a0, $t6, 2
	st.d	$a2, $sp, 104                   # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t7, $a0, $a0, 4
	alsl.d	$a2, $t7, $a0, 1
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t6, 1
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t6, $a0
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	sub.d	$a2, $t6, $a0
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a7, $a0, $a0, 1
	alsl.d	$a2, $a7, $a7, 3
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a3, $zero, 26
	mul.d	$t8, $a0, $a3
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	alsl.d	$fp, $a7, $a0, 3
	div.d	$a1, $a1, $fp
	ext.w.h	$a1, $a1
	slli.d	$s3, $a0, 4
	alsl.d	$s0, $a0, $s3, 3
	div.d	$a1, $a1, $s0
	ext.w.h	$a1, $a1
	ori	$a3, $zero, 23
	mul.d	$s1, $a0, $a3
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	ori	$a3, $zero, 22
	mul.d	$s2, $a0, $a3
	div.d	$a1, $a1, $s2
	ext.w.h	$a3, $a1
	alsl.d	$a6, $a0, $a0, 2
	alsl.d	$s5, $a6, $a0, 2
	div.d	$a3, $a3, $s5
	ext.w.h	$a3, $a3
	alsl.d	$s6, $a0, $s3, 2
	div.d	$a3, $a3, $s6
	ext.w.h	$a3, $a3
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a3, $a3, $s7
	ext.w.h	$a3, $a3
	alsl.d	$s8, $a0, $s3, 1
	div.d	$a3, $a3, $s8
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $t7
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $s3
	ext.w.h	$a3, $a3
	sub.d	$t5, $s3, $a0
	div.d	$a3, $a3, $t5
	ext.w.h	$ra, $a3
	ori	$a3, $zero, 14
	mul.d	$t4, $a0, $a3
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	alsl.d	$t3, $a7, $a0, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	slli.d	$a3, $a0, 3
	alsl.d	$t2, $a0, $a3, 2
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a6, $a0, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	alsl.d	$t0, $a0, $a3, 1
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a0
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a6
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	slli.d	$a1, $a0, 1
	div.d	$ra, $ra, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	fld.d	$fa2, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ld.d	$a3, $sp, 232                   # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s8
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $fp
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 128                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 160                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $sp, 176                   # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	fld.d	$fs7, $sp, 280                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 288                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 296                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 304                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 312                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 320                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 328                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 336                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 360                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 368                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 376                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 384                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 392                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 400                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 408                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 416                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 424                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 432
	ret
.Lfunc_end60:
	.size	_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end60-_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a3, 2
	ori	$a3, $a3, 2064
	sub.d	$sp, $sp, $a3
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	move	$s0, $a2
	fst.d	$fa0, $a2, 0
	ld.b	$a2, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $s0, 8
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	st.d	$a2, $s0, 16
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	fst.d	$fa0, $s0, 24
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a0, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a4, $a3, $a0
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a0
	add.d	$a0, $a3, $a0
	st.w	$a4, $s0, 56
	st.d	$a0, $s0, 64
	move	$sp, $a2
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $s8, $a0
	fst.d	$ft15, $a0, 0                   # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $s8, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	ori	$a0, $zero, 3952
	add.d	$a0, $s8, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $s8, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $s8, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $s8, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 4008
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $s8, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4016
	add.d	$a0, $s8, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	ori	$a1, $zero, 4000
	add.d	$a1, $s8, $a1
	st.d	$a2, $a1, 0                     # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	ori	$a3, $zero, 3984
	add.d	$a3, $s8, $a3
	st.d	$a1, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	ori	$a3, $zero, 3960
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t8, $a0, 5
	alsl.d	$a2, $a0, $t8, 2
	ori	$a3, $zero, 3936
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$s2, $a0, $a0, 4
	alsl.d	$a2, $s2, $a0, 1
	ori	$a3, $zero, 3912
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t8, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t8, $a0
	ori	$a3, $zero, 3896
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	sub.d	$a2, $t8, $a0
	ori	$a3, $zero, 3888
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3880
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t0, $a0, $a0, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3856
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 26
	mul.d	$a2, $a0, $a2
	ori	$a3, $zero, 3848
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $t0, $a0, 3
	ori	$a3, $zero, 3840
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $a1
	slli.d	$a6, $a0, 4
	alsl.d	$a1, $a0, $a6, 3
	ori	$a3, $zero, 3832
	add.d	$a3, $s8, $a3
	st.d	$a1, $a3, 0                     # 8-byte Folded Spill
	div.d	$a2, $a2, $a1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a0, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a0, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a0, $a0, 2
	alsl.d	$s5, $a7, $a0, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a0, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a0, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a0
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a0, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a0, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a0, 3
	alsl.d	$t4, $a0, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a0, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a0, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a0
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a1, $a0, 1
	div.d	$t1, $t1, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	ori	$a2, $zero, 3920
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3952
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3968
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4024
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $ra
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3832
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3840
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3848
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3856
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3864
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3872
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3880
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3888
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3896
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3904
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3912
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3936
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3960
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 3984
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 4000
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end61:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end61-_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	move	$s0, $a2
	fst.d	$fa0, $a2, 0
	ld.b	$a2, $a1, 0
	ori	$a3, $zero, 3940
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	ori	$a2, $zero, 3940
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $s0, 8
	ori	$a2, $zero, 3940
	add.d	$a2, $s8, $a2
	st.d	$a2, $s0, 16
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	fst.d	$fa0, $s0, 24
	ori	$a3, $zero, 3928
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a0, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a0, $a0, -1
	bstrpick.d	$a0, $a0, 31, 0
	stx.b	$a4, $a3, $a0
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a0
	add.d	$a0, $a3, $a0
	st.w	$a4, $s0, 56
	st.d	$a0, $s0, 64
	move	$sp, $a2
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $s8, 2016                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2008                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2000                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2040                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 1992                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2032                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2024                 # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $s8, 1984                 # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	fst.d	$ft15, $s8, 1872                # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $s8, 1880                 # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	fst.d	$fs1, $s8, 1896                 # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	fst.d	$ft1, $s8, 1904                 # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $s8, 1920                 # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $s8, 1928                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $s8, 1944                 # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $s8, 1960                 # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $s8, 1976                 # 8-byte Folded Spill
	fst.d	$ft0, $s8, 1968                 # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $s8, 1984                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $s8, 1992                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $s8, 2000                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $s8, 2008                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $s8, 2016                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a0, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a1, $zero, 39
	mul.d	$a2, $a0, $a1
	st.d	$a2, $s8, 1952                  # 8-byte Folded Spill
	ori	$a1, $zero, 38
	mul.d	$a1, $a0, $a1
	st.d	$a1, $s8, 1936                  # 8-byte Folded Spill
	div.d	$a1, $a2, $a1
	ext.w.h	$a1, $a1
	alsl.d	$s4, $a0, $a0, 3
	alsl.d	$a2, $s4, $a0, 2
	st.d	$a2, $s8, 1912                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	slli.d	$t8, $a0, 5
	alsl.d	$a2, $a0, $t8, 2
	st.d	$a2, $s8, 1888                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$s2, $a0, $a0, 4
	alsl.d	$a2, $s2, $a0, 1
	st.d	$a2, $s8, 1864                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $a0, $t8, 1
	st.d	$a2, $s8, 1856                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	add.d	$a2, $t8, $a0
	st.d	$a2, $s8, 1848                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	sub.d	$a2, $t8, $a0
	st.d	$a2, $s8, 1840                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 30
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1832                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 29
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1824                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 28
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1816                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$t0, $a0, $a0, 1
	alsl.d	$a2, $t0, $t0, 3
	st.d	$a2, $s8, 1808                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ori	$a2, $zero, 26
	mul.d	$a2, $a0, $a2
	st.d	$a2, $s8, 1800                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	alsl.d	$a2, $t0, $a0, 3
	st.d	$a2, $s8, 1792                  # 8-byte Folded Spill
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $a1
	slli.d	$a6, $a0, 4
	alsl.d	$a1, $a0, $a6, 3
	st.d	$a1, $s8, 1784                  # 8-byte Folded Spill
	div.d	$a2, $a2, $a1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a0, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a0, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a0, $a0, 2
	alsl.d	$s5, $a7, $a0, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a0, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a0, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a0, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a0
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a0, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a0, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a0, 3
	alsl.d	$t4, $a0, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a0, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a0, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a0
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a0, 2
	alsl.d	$a4, $a0, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a1, $a0, 1
	div.d	$t1, $t1, $a1
	div.d	$a1, $a0, $a1
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t0
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t4
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $a6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	fld.d	$fa2, $s8, 1872                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1880                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1896                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1904                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $s8, 1920                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1928                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1944                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1960                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1968                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1976                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $ra
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s7
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s6
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s5
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s3
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $s1
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1784                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1792                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1800                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1808                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1816                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1824                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1832                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1840                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	div.d	$a1, $a1, $t8
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1848                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1856                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1864                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1888                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1912                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1936                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a1, $a1
	ld.d	$a2, $s8, 1952                  # 8-byte Folded Reload
	div.d	$a1, $a1, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a0
	ext.w.h	$a1, $a1
	div.d	$a0, $a1, $a0
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end62:
	.size	_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd, .Lfunc_end62-_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	ld.d	$a0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a2, $a3, 0
	ld.b	$a1, $a1, 1
	movgr2fr.w	$fa0, $a1
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a1, 1
	add.d	$a1, $sp, $a1
	fst.d	$fa0, $a1, 0
	lu12i.w	$a1, 2
	add.d	$a1, $sp, $a1
	ld.w	$a1, $a1, 0
	st.w	$a1, $a0, 8
	lu12i.w	$a1, 2
	add.d	$a1, $sp, $a1
	st.d	$a1, $a0, 16
	lu12i.w	$a1, 1
	add.d	$a1, $sp, $a1
	fld.d	$fa0, $a1, 0
	fst.d	$fa0, $a0, 24
	lu12i.w	$a1, 1
	add.d	$a1, $sp, $a1
	st.d	$a1, $a0, 32
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end63:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end63-_Z10test_frameILj4096ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	ld.d	$a0, $sp, 240
	fld.d	$fa0, $sp, 248
	ld.d	$a1, $sp, 232
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	st.w	$a2, $sp, 20
	ld.b	$a1, $a1, 1
	movgr2fr.w	$fa0, $a1
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 8
	ld.w	$a1, $sp, 20
	st.w	$a1, $a0, 8
	addi.d	$a1, $sp, 20
	st.d	$a1, $a0, 16
	fld.d	$fa0, $sp, 8
	fst.d	$fa0, $a0, 24
	addi.d	$a1, $sp, 8
	st.d	$a1, $a0, 32
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end64:
	.size	_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end64-_Z10test_frameILj2ELb0ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 31, -24
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	ld.d	$a0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $a0, 8
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	st.d	$a2, $a0, 16
	lu12i.w	$a2, 1
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	ld.d	$a3, $fp, 192
	fst.d	$fa0, $a0, 24
	lu12i.w	$a4, 1
	add.d	$a4, $s8, $a4
	st.d	$a4, $a0, 32
	bstrpick.d	$a4, $a3, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a3, $a3, -1
	bstrpick.d	$a3, $a3, 31, 0
	stx.b	$a1, $a4, $a3
	ld.b	$a1, $a4, 0
	st.w	$a1, $a0, 40
	st.d	$a4, $a0, 48
	ldx.b	$a1, $a4, $a3
	add.d	$a3, $a4, $a3
	st.w	$a1, $a0, 56
	st.d	$a3, $a0, 64
	move	$sp, $a2
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end65:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end65-_Z10test_frameILj4096ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s8, $sp, 2008                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 31, -24
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	ld.d	$a0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a0, 0
	ld.b	$a2, $a1, 0
	ori	$a3, $zero, 4068
	add.d	$a3, $s8, $a3
	st.w	$a2, $a3, 0
	ld.b	$a2, $a1, 1
	movgr2fr.w	$fa0, $a2
	ffint.d.w	$fa0, $fa0
	ori	$a2, $zero, 4056
	add.d	$a2, $s8, $a2
	fst.d	$fa0, $a2, 0
	ori	$a2, $zero, 4068
	add.d	$a2, $s8, $a2
	ld.w	$a2, $a2, 0
	st.w	$a2, $a0, 8
	ori	$a2, $zero, 4068
	add.d	$a2, $s8, $a2
	st.d	$a2, $a0, 16
	ori	$a2, $zero, 4056
	add.d	$a2, $s8, $a2
	fld.d	$fa0, $a2, 0
	move	$a2, $sp
	ld.d	$a3, $fp, 192
	fst.d	$fa0, $a0, 24
	ori	$a4, $zero, 4056
	add.d	$a4, $s8, $a4
	st.d	$a4, $a0, 32
	bstrpick.d	$a4, $a3, 31, 0
	addi.d	$a4, $a4, 15
	bstrpick.d	$a4, $a4, 32, 4
	slli.d	$a4, $a4, 4
	sub.d	$a4, $sp, $a4
	bstrins.d	$a4, $zero, 10, 0
	move	$sp, $a4
	ld.b	$a5, $a1, 2
	st.b	$a5, $a4, 0
	ld.b	$a1, $a1, 3
	addi.d	$a3, $a3, -1
	bstrpick.d	$a3, $a3, 31, 0
	stx.b	$a1, $a4, $a3
	ld.b	$a1, $a4, 0
	st.w	$a1, $a0, 40
	st.d	$a4, $a0, 48
	ldx.b	$a1, $a4, $a3
	add.d	$a3, $a4, $a3
	st.w	$a1, $a0, 56
	st.d	$a3, $a0, 64
	move	$sp, $a2
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	ld.d	$s8, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end66:
	.size	_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end66-_Z10test_frameILj2ELb1ELj2048ELb0ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	ld.d	$a2, $fp, 208
	ori	$a0, $zero, 4064
	add.d	$a0, $sp, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a3, 2
	add.d	$a3, $sp, $a3
	st.w	$a0, $a3, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $a2, 8
	lu12i.w	$a0, 2
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 16
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	fld.d	$fa0, $a0, 0
	fst.d	$fa0, $a2, 24
	lu12i.w	$a0, 1
	add.d	$a0, $sp, $a0
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3912
	add.d	$a0, $sp, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $sp, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	ori	$a0, $zero, 3936
	add.d	$a0, $sp, $a0
	fst.d	$fs2, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $sp, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3960
	add.d	$a0, $sp, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $sp, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $sp, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $sp, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4016
	add.d	$a0, $sp, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4008
	add.d	$a0, $sp, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4024
	add.d	$a0, $sp, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4032
	add.d	$a0, $sp, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $sp, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $sp, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4048
	add.d	$a0, $sp, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4056
	add.d	$a0, $sp, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	ori	$a0, $zero, 4000
	add.d	$a0, $sp, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	ori	$a3, $zero, 3984
	add.d	$a3, $sp, $a3
	st.d	$a0, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	ori	$a3, $zero, 3952
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t7, $a1, 5
	alsl.d	$a2, $a1, $t7, 2
	ori	$a3, $zero, 3928
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t8, $a1, $a1, 4
	alsl.d	$a2, $t8, $a1, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t7, 1
	ori	$a3, $zero, 3896
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t7, $a1
	ori	$a3, $zero, 3888
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	sub.d	$a2, $t7, $a1
	ori	$a3, $zero, 3880
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3856
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t0, $a1, $a1, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3848
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 26
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3840
	add.d	$a3, $sp, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$s0, $t0, $a1, 3
	div.d	$a0, $a0, $s0
	ext.w.h	$a2, $a0
	slli.d	$a6, $a1, 4
	alsl.d	$s1, $a1, $a6, 3
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s2, $a1, $a4
	div.d	$a2, $a2, $s2
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a1, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a1, $a1, 2
	alsl.d	$s5, $a7, $a1, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a1, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$s8, $a1, $a6, 1
	div.d	$a4, $a4, $s8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $t8
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t6, $a6, $a1
	div.d	$a4, $a4, $t6
	ext.w.h	$ra, $a4
	ori	$a4, $zero, 14
	mul.d	$t5, $a1, $a4
	div.d	$ra, $ra, $t5
	ext.w.h	$ra, $ra
	alsl.d	$t4, $t0, $a1, 2
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	slli.d	$a3, $a1, 3
	alsl.d	$t3, $a1, $a3, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	alsl.d	$t2, $a7, $a1, 1
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a1, $a3, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a1
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	slli.d	$a0, $a1, 1
	div.d	$ra, $ra, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	ori	$a2, $zero, 3912
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3920
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3936
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3960
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3968
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $sp, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ori	$a2, $zero, 4064
	add.d	$a2, $sp, $a2
	ld.d	$a3, $a2, 0                     # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s8
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s0
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3840
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3848
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3856
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3864
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3872
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3880
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3888
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3896
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3904
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3928
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3952
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3984
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 4000
	add.d	$a2, $sp, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end67:
	.size	_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end67-_Z10test_frameILj4096ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -432
	.cfi_def_cfa_offset 432
	st.d	$ra, $sp, 424                   # 8-byte Folded Spill
	st.d	$fp, $sp, 416                   # 8-byte Folded Spill
	st.d	$s0, $sp, 408                   # 8-byte Folded Spill
	st.d	$s1, $sp, 400                   # 8-byte Folded Spill
	st.d	$s2, $sp, 392                   # 8-byte Folded Spill
	st.d	$s3, $sp, 384                   # 8-byte Folded Spill
	st.d	$s4, $sp, 376                   # 8-byte Folded Spill
	st.d	$s5, $sp, 368                   # 8-byte Folded Spill
	st.d	$s6, $sp, 360                   # 8-byte Folded Spill
	st.d	$s7, $sp, 352                   # 8-byte Folded Spill
	st.d	$s8, $sp, 344                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 336                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 328                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 320                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 312                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 304                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 296                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 288                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 280                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	ld.d	$a2, $sp, 640
	st.d	$a2, $sp, 232                   # 8-byte Folded Spill
	fld.d	$fa0, $sp, 648
	ld.d	$a1, $sp, 632
	fst.d	$fa0, $a2, 0
	ld.b	$a0, $a1, 0
	st.w	$a0, $sp, 276
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fst.d	$fa0, $sp, 264
	ld.w	$a0, $sp, 276
	st.w	$a0, $a2, 8
	addi.d	$a0, $sp, 276
	st.d	$a0, $a2, 16
	fld.d	$fa0, $sp, 264
	fst.d	$fa0, $a2, 24
	addi.d	$a0, $sp, 264
	st.d	$a0, $a2, 32
	ld.b	$a0, $a1, 3
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $sp, 224                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 216                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 208                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 256                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 200                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 248                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $sp, 240                  # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $sp, 192                  # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$ft10, $fs4, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft8, $ft9, $fa0
	fadd.d	$ft11, $ft8, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$ft14, $ft13, $fa0
	fadd.d	$fs3, $ft14, $fa0
	fadd.d	$fs0, $fs3, $fa0
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fadd.d	$fs2, $fs1, $fa0
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fadd.d	$ft1, $fs2, $fa0
	fst.d	$fs2, $sp, 96                   # 8-byte Folded Spill
	fadd.d	$ft7, $ft1, $fa0
	fst.d	$ft1, $sp, 112                  # 8-byte Folded Spill
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $sp, 120                  # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $sp, 136                  # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $sp, 144                  # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $sp, 152                  # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $sp, 184                  # 8-byte Folded Spill
	fst.d	$ft0, $sp, 168                  # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $ft14
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $sp, 192                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $sp, 200                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $sp, 208                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $sp, 216                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $sp, 224                  # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 2
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	st.d	$a2, $sp, 176                   # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	st.d	$a0, $sp, 160                   # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t6, $a1, 5
	alsl.d	$a2, $a1, $t6, 2
	st.d	$a2, $sp, 104                   # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t7, $a1, $a1, 4
	alsl.d	$a2, $t7, $a1, 1
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t6, 1
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t6, $a1
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	sub.d	$a2, $t6, $a1
	st.d	$a2, $sp, 48                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a7, $a1, $a1, 1
	alsl.d	$a2, $a7, $a7, 3
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a3, $zero, 26
	mul.d	$t8, $a1, $a3
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	alsl.d	$fp, $a7, $a1, 3
	div.d	$a0, $a0, $fp
	ext.w.h	$a0, $a0
	slli.d	$s3, $a1, 4
	alsl.d	$s0, $a1, $s3, 3
	div.d	$a0, $a0, $s0
	ext.w.h	$a0, $a0
	ori	$a3, $zero, 23
	mul.d	$s1, $a1, $a3
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	ori	$a3, $zero, 22
	mul.d	$s2, $a1, $a3
	div.d	$a0, $a0, $s2
	ext.w.h	$a3, $a0
	alsl.d	$a6, $a1, $a1, 2
	alsl.d	$s5, $a6, $a1, 2
	div.d	$a3, $a3, $s5
	ext.w.h	$a3, $a3
	alsl.d	$s6, $a1, $s3, 2
	div.d	$a3, $a3, $s6
	ext.w.h	$a3, $a3
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a3, $a3, $s7
	ext.w.h	$a3, $a3
	alsl.d	$s8, $a1, $s3, 1
	div.d	$a3, $a3, $s8
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $t7
	ext.w.h	$a3, $a3
	div.d	$a3, $a3, $s3
	ext.w.h	$a3, $a3
	sub.d	$t5, $s3, $a1
	div.d	$a3, $a3, $t5
	ext.w.h	$ra, $a3
	ori	$a3, $zero, 14
	mul.d	$t4, $a1, $a3
	div.d	$ra, $ra, $t4
	ext.w.h	$ra, $ra
	alsl.d	$t3, $a7, $a1, 2
	div.d	$ra, $ra, $t3
	ext.w.h	$ra, $ra
	slli.d	$a3, $a1, 3
	alsl.d	$t2, $a1, $a3, 2
	div.d	$ra, $ra, $t2
	ext.w.h	$ra, $ra
	alsl.d	$t1, $a6, $a1, 1
	div.d	$ra, $ra, $t1
	ext.w.h	$ra, $ra
	alsl.d	$t0, $a1, $a3, 1
	div.d	$ra, $ra, $t0
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $s4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a3
	ext.w.h	$ra, $ra
	sub.d	$a5, $a3, $a1
	div.d	$ra, $ra, $a5
	ext.w.h	$ra, $ra
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$ra, $ra, $a4
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a6
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a2
	ext.w.h	$ra, $ra
	div.d	$ra, $ra, $a7
	ext.w.h	$ra, $ra
	slli.d	$a0, $a1, 1
	div.d	$ra, $ra, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $sp, 256                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $sp, 248                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 240                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $ft14
	fdiv.d	$fa1, $fa1, $fs3
	fld.d	$fa2, $sp, 80                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 88                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 96                   # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 112                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $sp, 120                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 136                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 144                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 152                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 168                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $sp, 184                  # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	ld.d	$a3, $sp, 232                   # 8-byte Folded Reload
	fst.d	$fa0, $a3, 48
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s8
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $fp
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 128                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 160                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $sp, 176                   # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $ra
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $a3, 40
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	fld.d	$fs7, $sp, 280                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 288                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 296                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 304                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 312                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 320                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 328                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 336                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 344                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 352                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 360                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 368                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 376                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 384                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 392                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 400                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 408                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 416                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 424                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 432
	ret
.Lfunc_end68:
	.size	_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end68-_Z10test_frameILj2ELb0ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	sub.d	$sp, $sp, $a0
	bstrins.d	$sp, $zero, 11, 0
	move	$s8, $sp
	ld.d	$s0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $s0, 0
	ld.b	$a0, $a1, 0
	lu12i.w	$a2, 2
	add.d	$a2, $s8, $a2
	st.w	$a0, $a2, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	lu12i.w	$a0, 1
	add.d	$a0, $s8, $a0
	fst.d	$fa0, $a0, 0
	lu12i.w	$a0, 2
	add.d	$a0, $s8, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $s0, 8
	lu12i.w	$a0, 2
	add.d	$a0, $s8, $a0
	st.d	$a0, $s0, 16
	lu12i.w	$a0, 1
	add.d	$a0, $s8, $a0
	fld.d	$fa0, $a0, 0
	move	$a0, $sp
	ld.d	$a2, $fp, 192
	fst.d	$fa0, $s0, 24
	lu12i.w	$a3, 1
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a2, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a2, $a2, -1
	bstrpick.d	$a2, $a2, 31, 0
	stx.b	$a4, $a3, $a2
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a2
	add.d	$a2, $a3, $a2
	st.w	$a4, $s0, 56
	st.d	$a2, $s0, 64
	move	$sp, $a0
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	ori	$a0, $zero, 3920
	add.d	$a0, $s8, $a0
	fst.d	$ft15, $a0, 0                   # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fst.d	$fs0, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	ori	$a0, $zero, 3944
	add.d	$a0, $s8, $a0
	fst.d	$fs1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	ori	$a0, $zero, 3952
	add.d	$a0, $s8, $a0
	fst.d	$ft1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	ori	$a0, $zero, 3968
	add.d	$a0, $s8, $a0
	fst.d	$fa5, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	ori	$a0, $zero, 3976
	add.d	$a0, $s8, $a0
	fst.d	$fa4, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	ori	$a0, $zero, 3992
	add.d	$a0, $s8, $a0
	fst.d	$fa3, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	ori	$a0, $zero, 4008
	add.d	$a0, $s8, $a0
	fst.d	$fa1, $a0, 0                    # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	ori	$a0, $zero, 4024
	add.d	$a0, $s8, $a0
	fst.d	$fa2, $a0, 0                    # 8-byte Folded Spill
	ori	$a0, $zero, 4016
	add.d	$a0, $s8, $a0
	fst.d	$ft0, $a0, 0                    # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	ori	$a0, $zero, 4032
	add.d	$a0, $s8, $a0
	fld.d	$fa5, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	ori	$a0, $zero, 4072
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4080
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4040
	add.d	$a0, $s8, $a0
	fld.d	$fa4, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	ori	$a0, $zero, 4088
	add.d	$a0, $s8, $a0
	fld.d	$fa1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	ori	$a0, $zero, 4048
	add.d	$a0, $s8, $a0
	fld.d	$fa3, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	ori	$a0, $zero, 4056
	add.d	$a0, $s8, $a0
	fld.d	$fa2, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	ori	$a0, $zero, 4064
	add.d	$a0, $s8, $a0
	fld.d	$ft1, $a0, 0                    # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	ori	$a0, $zero, 4000
	add.d	$a0, $s8, $a0
	st.d	$a2, $a0, 0                     # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	ori	$a3, $zero, 3984
	add.d	$a3, $s8, $a3
	st.d	$a0, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	ori	$a3, $zero, 3960
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t8, $a1, 5
	alsl.d	$a2, $a1, $t8, 2
	ori	$a3, $zero, 3936
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$s2, $a1, $a1, 4
	alsl.d	$a2, $s2, $a1, 1
	ori	$a3, $zero, 3912
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t8, 1
	ori	$a3, $zero, 3904
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t8, $a1
	ori	$a3, $zero, 3896
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	sub.d	$a2, $t8, $a1
	ori	$a3, $zero, 3888
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3880
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3872
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3864
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t0, $a1, $a1, 1
	alsl.d	$a2, $t0, $t0, 3
	ori	$a3, $zero, 3856
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 26
	mul.d	$a2, $a1, $a2
	ori	$a3, $zero, 3848
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $t0, $a1, 3
	ori	$a3, $zero, 3840
	add.d	$a3, $s8, $a3
	st.d	$a2, $a3, 0                     # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $a0
	slli.d	$a6, $a1, 4
	alsl.d	$a0, $a1, $a6, 3
	ori	$a3, $zero, 3832
	add.d	$a3, $s8, $a3
	st.d	$a0, $a3, 0                     # 8-byte Folded Spill
	div.d	$a2, $a2, $a0
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a1, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a1, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a1, $a1, 2
	alsl.d	$s5, $a7, $a1, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a1, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a1, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a1
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a1, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a1, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a1, 3
	alsl.d	$t4, $a1, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a1, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a1, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a1
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a0, $a1, 1
	div.d	$t1, $t1, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	ori	$a2, $zero, 4088
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	ori	$a2, $zero, 4080
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4072
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	ori	$a2, $zero, 3920
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3928
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3944
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3952
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	ori	$a2, $zero, 3968
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3976
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 3992
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4008
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4016
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	ori	$a2, $zero, 4024
	add.d	$a2, $s8, $a2
	fld.d	$fa2, $a2, 0                    # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $ra
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3832
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3840
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3848
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3856
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3864
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3872
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3880
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3888
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3896
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3904
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3912
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3936
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3960
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 3984
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 4000
	add.d	$a2, $s8, $a2
	ld.d	$a2, $a2, 0                     # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 3
	sub.d	$sp, $fp, $a0
	lu12i.w	$a0, 2
	ori	$a0, $a0, 2064
	add.d	$sp, $sp, $a0
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end69:
	.size	_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end69-_Z10test_frameILj4096ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text._Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,"axG",@progbits,_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,comdat
	.weak	_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd # -- Begin function _Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.p2align	5
	.type	_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd,@function
_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd: # @_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -2032
	.cfi_def_cfa_offset 2032
	st.d	$ra, $sp, 2024                  # 8-byte Folded Spill
	st.d	$fp, $sp, 2016                  # 8-byte Folded Spill
	st.d	$s0, $sp, 2008                  # 8-byte Folded Spill
	st.d	$s1, $sp, 2000                  # 8-byte Folded Spill
	st.d	$s2, $sp, 1992                  # 8-byte Folded Spill
	st.d	$s3, $sp, 1984                  # 8-byte Folded Spill
	st.d	$s4, $sp, 1976                  # 8-byte Folded Spill
	st.d	$s5, $sp, 1968                  # 8-byte Folded Spill
	st.d	$s6, $sp, 1960                  # 8-byte Folded Spill
	st.d	$s7, $sp, 1952                  # 8-byte Folded Spill
	st.d	$s8, $sp, 1944                  # 8-byte Folded Spill
	fst.d	$fs0, $sp, 1936                 # 8-byte Folded Spill
	fst.d	$fs1, $sp, 1928                 # 8-byte Folded Spill
	fst.d	$fs2, $sp, 1920                 # 8-byte Folded Spill
	fst.d	$fs3, $sp, 1912                 # 8-byte Folded Spill
	fst.d	$fs4, $sp, 1904                 # 8-byte Folded Spill
	fst.d	$fs5, $sp, 1896                 # 8-byte Folded Spill
	fst.d	$fs6, $sp, 1888                 # 8-byte Folded Spill
	fst.d	$fs7, $sp, 1880                 # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	addi.d	$fp, $sp, 2032
	.cfi_def_cfa 22, 0
	addi.d	$sp, $sp, -2048
	addi.d	$sp, $sp, -16
	bstrins.d	$sp, $zero, 10, 0
	move	$s8, $sp
	ld.d	$s0, $fp, 208
	fld.d	$fa0, $fp, 216
	ld.d	$a1, $fp, 200
	fst.d	$fa0, $s0, 0
	ld.b	$a0, $a1, 0
	ori	$a2, $zero, 3940
	add.d	$a2, $s8, $a2
	st.w	$a0, $a2, 0
	ld.b	$a0, $a1, 1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fst.d	$fa0, $a0, 0
	ori	$a0, $zero, 3940
	add.d	$a0, $s8, $a0
	ld.w	$a0, $a0, 0
	st.w	$a0, $s0, 8
	ori	$a0, $zero, 3940
	add.d	$a0, $s8, $a0
	st.d	$a0, $s0, 16
	ori	$a0, $zero, 3928
	add.d	$a0, $s8, $a0
	fld.d	$fa0, $a0, 0
	move	$a0, $sp
	ld.d	$a2, $fp, 192
	fst.d	$fa0, $s0, 24
	ori	$a3, $zero, 3928
	add.d	$a3, $s8, $a3
	st.d	$a3, $s0, 32
	bstrpick.d	$a3, $a2, 31, 0
	addi.d	$a3, $a3, 15
	bstrpick.d	$a3, $a3, 32, 4
	slli.d	$a3, $a3, 4
	sub.d	$a3, $sp, $a3
	bstrins.d	$a3, $zero, 10, 0
	move	$sp, $a3
	ld.b	$a4, $a1, 2
	st.b	$a4, $a3, 0
	ld.b	$a4, $a1, 3
	addi.d	$a2, $a2, -1
	bstrpick.d	$a2, $a2, 31, 0
	stx.b	$a4, $a3, $a2
	ld.b	$a4, $a3, 0
	st.w	$a4, $s0, 40
	st.d	$a3, $s0, 48
	ldx.b	$a4, $a3, $a2
	add.d	$a2, $a3, $a2
	st.w	$a4, $s0, 56
	st.d	$a2, $s0, 64
	move	$sp, $a0
	ld.b	$a0, $a1, 5
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fadd.d	$ft2, $fa0, $fa0
	fadd.d	$ft3, $ft2, $fa0
	fadd.d	$ft4, $ft3, $fa0
	fadd.d	$ft5, $ft4, $fa0
	fadd.d	$ft6, $ft5, $fa0
	fadd.d	$fa6, $ft6, $fa0
	fadd.d	$fa7, $fa6, $fa0
	fadd.d	$fs6, $fa7, $fa0
	fadd.d	$fs7, $fs6, $fa0
	fadd.d	$fa1, $fs7, $fa0
	fst.d	$fa1, $s8, 2016                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2008                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2000                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2040                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 1992                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2032                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa1, $fa0
	fst.d	$fa1, $s8, 2024                 # 8-byte Folded Spill
	fadd.d	$fs5, $fa1, $fa0
	fadd.d	$fa1, $fs5, $fa0
	fst.d	$fa1, $s8, 1984                 # 8-byte Folded Spill
	fadd.d	$fs4, $fa1, $fa0
	fadd.d	$fs3, $fs4, $fa0
	fadd.d	$ft10, $fs3, $fa0
	fadd.d	$ft9, $ft10, $fa0
	fadd.d	$ft11, $ft9, $fa0
	fadd.d	$ft12, $ft11, $fa0
	fadd.d	$ft13, $ft12, $fa0
	fadd.d	$fs2, $ft13, $fa0
	fadd.d	$ft15, $fs2, $fa0
	fadd.d	$fs0, $ft15, $fa0
	fst.d	$ft15, $s8, 1872                # 8-byte Folded Spill
	fadd.d	$fs1, $fs0, $fa0
	fst.d	$fs0, $s8, 1880                 # 8-byte Folded Spill
	fadd.d	$ft1, $fs1, $fa0
	fst.d	$fs1, $s8, 1896                 # 8-byte Folded Spill
	fadd.d	$ft8, $ft1, $fa0
	fst.d	$ft1, $s8, 1904                 # 8-byte Folded Spill
	fadd.d	$ft7, $ft8, $fa0
	fadd.d	$fa5, $ft7, $fa0
	fadd.d	$fa4, $fa5, $fa0
	fst.d	$fa5, $s8, 1920                 # 8-byte Folded Spill
	fadd.d	$fa3, $fa4, $fa0
	fst.d	$fa4, $s8, 1928                 # 8-byte Folded Spill
	fadd.d	$fa1, $fa3, $fa0
	fst.d	$fa3, $s8, 1944                 # 8-byte Folded Spill
	fadd.d	$ft0, $fa1, $fa0
	fst.d	$fa1, $s8, 1960                 # 8-byte Folded Spill
	fadd.d	$fa2, $ft0, $fa0
	fst.d	$fa2, $s8, 1976                 # 8-byte Folded Spill
	fst.d	$ft0, $s8, 1968                 # 8-byte Folded Spill
	fdiv.d	$ft0, $fa2, $ft0
	fdiv.d	$ft0, $ft0, $fa1
	fdiv.d	$ft0, $ft0, $fa3
	fdiv.d	$ft0, $ft0, $fa4
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $ft7
	fdiv.d	$ft0, $ft0, $ft8
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs1
	fdiv.d	$ft0, $ft0, $fs0
	fdiv.d	$ft0, $ft0, $ft15
	fdiv.d	$ft0, $ft0, $fs2
	fdiv.d	$ft0, $ft0, $ft13
	fdiv.d	$ft0, $ft0, $ft12
	fdiv.d	$ft0, $ft0, $ft11
	fdiv.d	$ft0, $ft0, $ft9
	fdiv.d	$ft0, $ft0, $ft10
	fdiv.d	$ft0, $ft0, $fs3
	fdiv.d	$ft0, $ft0, $fs4
	fld.d	$fa5, $s8, 1984                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa5
	fdiv.d	$ft0, $ft0, $fs5
	fld.d	$fa1, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa1, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa4, $s8, 1992                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa4
	fld.d	$fa1, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa1
	fld.d	$fa3, $s8, 2000                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa3
	fld.d	$fa2, $s8, 2008                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $fa2
	fld.d	$ft1, $s8, 2016                 # 8-byte Folded Reload
	fdiv.d	$ft0, $ft0, $ft1
	fdiv.d	$ft0, $ft0, $fs7
	fdiv.d	$ft0, $ft0, $fs6
	fdiv.d	$ft0, $ft0, $fa7
	fdiv.d	$ft0, $ft0, $fa6
	fdiv.d	$ft0, $ft0, $ft6
	fdiv.d	$ft0, $ft0, $ft5
	fdiv.d	$ft0, $ft0, $ft4
	fdiv.d	$ft0, $ft0, $ft3
	fdiv.d	$ft0, $ft0, $ft2
	fdiv.d	$fa1, $fa0, $ft2
	fdiv.d	$fa1, $fa1, $ft3
	fdiv.d	$fa1, $fa1, $ft4
	fdiv.d	$fa1, $fa1, $ft5
	fdiv.d	$fa1, $fa1, $ft6
	fdiv.d	$fa1, $fa1, $fa6
	fdiv.d	$fa1, $fa1, $fa7
	ld.b	$a1, $a1, 4
	fdiv.d	$fa1, $fa1, $fs6
	fdiv.d	$fa1, $fa1, $fs7
	ori	$a0, $zero, 39
	mul.d	$a2, $a1, $a0
	st.d	$a2, $s8, 1952                  # 8-byte Folded Spill
	ori	$a0, $zero, 38
	mul.d	$a0, $a1, $a0
	st.d	$a0, $s8, 1936                  # 8-byte Folded Spill
	div.d	$a0, $a2, $a0
	ext.w.h	$a0, $a0
	alsl.d	$s4, $a1, $a1, 3
	alsl.d	$a2, $s4, $a1, 2
	st.d	$a2, $s8, 1912                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	slli.d	$t8, $a1, 5
	alsl.d	$a2, $a1, $t8, 2
	st.d	$a2, $s8, 1888                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$s2, $a1, $a1, 4
	alsl.d	$a2, $s2, $a1, 1
	st.d	$a2, $s8, 1864                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $a1, $t8, 1
	st.d	$a2, $s8, 1856                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	add.d	$a2, $t8, $a1
	st.d	$a2, $s8, 1848                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	sub.d	$a2, $t8, $a1
	st.d	$a2, $s8, 1840                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 30
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1832                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 29
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1824                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 28
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1816                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$t0, $a1, $a1, 1
	alsl.d	$a2, $t0, $t0, 3
	st.d	$a2, $s8, 1808                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ori	$a2, $zero, 26
	mul.d	$a2, $a1, $a2
	st.d	$a2, $s8, 1800                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	alsl.d	$a2, $t0, $a1, 3
	st.d	$a2, $s8, 1792                  # 8-byte Folded Spill
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $a0
	slli.d	$a6, $a1, 4
	alsl.d	$a0, $a1, $a6, 3
	st.d	$a0, $s8, 1784                  # 8-byte Folded Spill
	div.d	$a2, $a2, $a0
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 23
	mul.d	$s1, $a1, $a4
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	ori	$a4, $zero, 22
	mul.d	$s3, $a1, $a4
	div.d	$a2, $a2, $s3
	ext.w.h	$a4, $a2
	alsl.d	$a7, $a1, $a1, 2
	alsl.d	$s5, $a7, $a1, 2
	div.d	$a4, $a4, $s5
	ext.w.h	$a4, $a4
	alsl.d	$s6, $a1, $a6, 2
	div.d	$a4, $a4, $s6
	ext.w.h	$a4, $a4
	alsl.d	$s7, $s4, $a1, 1
	div.d	$a4, $a4, $s7
	ext.w.h	$a4, $a4
	alsl.d	$ra, $a1, $a6, 1
	div.d	$a4, $a4, $ra
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $a6
	ext.w.h	$a4, $a4
	sub.d	$t7, $a6, $a1
	div.d	$a4, $a4, $t7
	ext.w.h	$a4, $a4
	ori	$a5, $zero, 14
	mul.d	$t6, $a1, $a5
	div.d	$a4, $a4, $t6
	ext.w.h	$t1, $a4
	alsl.d	$t5, $t0, $a1, 2
	div.d	$t1, $t1, $t5
	ext.w.h	$t1, $t1
	slli.d	$a3, $a1, 3
	alsl.d	$t4, $a1, $a3, 2
	div.d	$t1, $t1, $t4
	ext.w.h	$t1, $t1
	alsl.d	$t3, $a7, $a1, 1
	div.d	$t1, $t1, $t3
	ext.w.h	$t1, $t1
	alsl.d	$t2, $a1, $a3, 1
	div.d	$t1, $t1, $t2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $s4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a3
	ext.w.h	$t1, $t1
	sub.d	$a5, $a3, $a1
	div.d	$t1, $t1, $a5
	ext.w.h	$t1, $t1
	slli.d	$a2, $a1, 2
	alsl.d	$a4, $a1, $a2, 1
	div.d	$t1, $t1, $a4
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a7
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $a2
	ext.w.h	$t1, $t1
	div.d	$t1, $t1, $t0
	ext.w.h	$t1, $t1
	slli.d	$a0, $a1, 1
	div.d	$t1, $t1, $a0
	div.d	$a0, $a1, $a0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t0
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	fdiv.d	$fa1, $fa1, $ft1
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa3
	fld.d	$fa2, $s8, 2040                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fa4
	fld.d	$fa2, $s8, 2032                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 2024                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $fs5
	fdiv.d	$fa1, $fa1, $fa5
	fdiv.d	$fa1, $fa1, $fs4
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $ft10
	fdiv.d	$fa1, $fa1, $ft9
	fdiv.d	$fa1, $fa1, $ft11
	fdiv.d	$fa1, $fa1, $ft12
	fdiv.d	$fa1, $fa1, $ft13
	fdiv.d	$fa1, $fa1, $fs2
	fld.d	$fa2, $s8, 1872                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1880                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1896                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1904                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa1, $fa1, $ft8
	fdiv.d	$fa1, $fa1, $ft7
	fld.d	$fa2, $s8, 1920                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1928                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1944                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1960                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1968                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fld.d	$fa2, $s8, 1976                 # 8-byte Folded Reload
	fdiv.d	$fa1, $fa1, $fa2
	fdiv.d	$fa2, $ft0, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fmul.d	$fa0, $fa0, $fa2
	fst.d	$fa0, $s0, 80
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $ra
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s7
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s6
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s5
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1784                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1792                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1800                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1808                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1816                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1824                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1832                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1840                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $t8
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1848                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1856                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1864                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1888                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1912                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1936                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a0, $a0
	ld.d	$a2, $s8, 1952                  # 8-byte Folded Reload
	div.d	$a0, $a0, $a2
	ext.w.h	$a2, $t1
	div.d	$a2, $a2, $a1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $a1
	ext.w.h	$a1, $a2
	ext.w.h	$a0, $a0
	mul.d	$a0, $a0, $a1
	st.w	$a0, $s0, 72
	pcaddu18i	$ra, %call36(_Z27function_throwing_exceptionv)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 1
	sub.d	$sp, $fp, $a0
	addi.d	$sp, $sp, 2032
	addi.d	$sp, $sp, 32
	fld.d	$fs7, $sp, 1880                 # 8-byte Folded Reload
	fld.d	$fs6, $sp, 1888                 # 8-byte Folded Reload
	fld.d	$fs5, $sp, 1896                 # 8-byte Folded Reload
	fld.d	$fs4, $sp, 1904                 # 8-byte Folded Reload
	fld.d	$fs3, $sp, 1912                 # 8-byte Folded Reload
	fld.d	$fs2, $sp, 1920                 # 8-byte Folded Reload
	fld.d	$fs1, $sp, 1928                 # 8-byte Folded Reload
	fld.d	$fs0, $sp, 1936                 # 8-byte Folded Reload
	ld.d	$s8, $sp, 1944                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 1952                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 1960                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 1968                  # 8-byte Folded Reload
	ld.d	$s4, $sp, 1976                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 1984                  # 8-byte Folded Reload
	ld.d	$s2, $sp, 1992                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 2000                  # 8-byte Folded Reload
	ld.d	$s0, $sp, 2008                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 2016                  # 8-byte Folded Reload
	ld.d	$ra, $sp, 2024                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 2032
	ret
.Lfunc_end70:
	.size	_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd, .Lfunc_end70-_Z10test_frameILj2ELb1ELj2048ELb1ELb1EJiiiiiiiiiiiiiiiiiiiiddddddddddddddddddddEEvDpT4_jPKcP13trace_elementd
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	5                               # -- Begin function _GLOBAL__sub_I_frame_layout.cpp
	.type	_GLOBAL__sub_I_frame_layout.cpp,@function
_GLOBAL__sub_I_frame_layout.cpp:        # @_GLOBAL__sub_I_frame_layout.cpp
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	pcalau12i	$a0, %pc_hi20(_ZL21testDescriptionHeader)
	addi.d	$fp, $a0, %pc_lo12(_ZL21testDescriptionHeader)
	st.d	$zero, $fp, 16
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 0
	ori	$a0, $zero, 128
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	st.d	$a0, $fp, 0
	addi.d	$s0, $a0, 128
	st.d	$s0, $fp, 16
	pcalau12i	$a1, %pc_hi20(.Lconstinit)
	addi.d	$a1, $a1, %pc_lo12(.Lconstinit)
	ori	$a2, $zero, 128
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	st.d	$s0, $fp, 8
	pcalau12i	$a0, %pc_hi20(_ZNSt6vectorIPKcSaIS1_EED2Ev)
	addi.d	$a0, $a0, %pc_lo12(_ZNSt6vectorIPKcSaIS1_EED2Ev)
	pcalau12i	$a1, %pc_hi20(__dso_handle)
	addi.d	$a2, $a1, %pc_lo12(__dso_handle)
	move	$a1, $fp
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(__cxa_atexit)
	jr	$t8
.Lfunc_end71:
	.size	_GLOBAL__sub_I_frame_layout.cpp, .Lfunc_end71-_GLOBAL__sub_I_frame_layout.cpp
	.cfi_endproc
                                        # -- End function
	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"arg_passing"
	.size	.L.str, 12

	.type	.L.str.1,@object                # @.str.1
.L.str.1:
	.asciz	"int_local"
	.size	.L.str.1, 10

	.type	.L.str.2,@object                # @.str.2
.L.str.2:
	.asciz	"double_local"
	.size	.L.str.2, 13

	.type	.L.str.3,@object                # @.str.3
.L.str.3:
	.asciz	"vla_start"
	.size	.L.str.3, 10

	.type	.L.str.4,@object                # @.str.4
.L.str.4:
	.asciz	"vla_end"
	.size	.L.str.4, 8

	.type	.L.str.5,@object                # @.str.5
.L.str.5:
	.asciz	"callee_save_int"
	.size	.L.str.5, 16

	.type	.L.str.6,@object                # @.str.6
.L.str.6:
	.asciz	"callee_save_double"
	.size	.L.str.6, 19

	.type	.L.str.7,@object                # @.str.7
.L.str.7:
	.asciz	"thrown_value"
	.size	.L.str.7, 13

	.type	_ZL21testDescriptionHeader,@object # @_ZL21testDescriptionHeader
	.local	_ZL21testDescriptionHeader
	.comm	_ZL21testDescriptionHeader,24,8
	.type	.L.str.8,@object                # @.str.8
.L.str.8:
	.asciz	"AVCAE"
	.size	.L.str.8, 6

	.type	.L.str.9,@object                # @.str.9
.L.str.9:
	.asciz	"LLARX"
	.size	.L.str.9, 6

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	"IALGC"
	.size	.L.str.10, 6

	.type	.L.str.11,@object               # @.str.11
.L.str.11:
	.asciz	"G|LSE"
	.size	.L.str.11, 6

	.type	.L.str.12,@object               # @.str.12
.L.str.12:
	.asciz	"N|E P"
	.size	.L.str.12, 6

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	"E|EOT"
	.size	.L.str.13, 6

	.type	.L.str.14,@object               # @.str.14
.L.str.14:
	.asciz	"D| NI"
	.size	.L.str.14, 6

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	" |S O"
	.size	.L.str.15, 6

	.type	.L.str.16,@object               # @.str.16
.L.str.16:
	.asciz	"L|ASN"
	.size	.L.str.16, 6

	.type	.L.str.17,@object               # @.str.17
.L.str.17:
	.asciz	"O|VT|"
	.size	.L.str.17, 6

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"C|EA|"
	.size	.L.str.18, 6

	.type	.L.str.19,@object               # @.str.19
.L.str.19:
	.asciz	"A||C|"
	.size	.L.str.19, 6

	.type	.L.str.20,@object               # @.str.20
.L.str.20:
	.asciz	"L||K|"
	.size	.L.str.20, 6

	.type	.L.str.21,@object               # @.str.21
.L.str.21:
	.asciz	"S||||"
	.size	.L.str.21, 6

	.type	.L.str.22,@object               # @.str.22
.L.str.22:
	.asciz	"|||||"
	.size	.L.str.22, 6

	.type	.L.str.23,@object               # @.str.23
.L.str.23:
	.asciz	"VVVVV"
	.size	.L.str.23, 6

	.type	.Lconstinit,@object             # @constinit
	.section	.data.rel.ro,"aw",@progbits
	.p2align	3, 0x0
.Lconstinit:
	.dword	.L.str.8
	.dword	.L.str.9
	.dword	.L.str.10
	.dword	.L.str.11
	.dword	.L.str.12
	.dword	.L.str.13
	.dword	.L.str.14
	.dword	.L.str.15
	.dword	.L.str.16
	.dword	.L.str.17
	.dword	.L.str.18
	.dword	.L.str.19
	.dword	.L.str.20
	.dword	.L.str.21
	.dword	.L.str.22
	.dword	.L.str.23
	.size	.Lconstinit, 128

	.hidden	__dso_handle
	.type	.L.str.25,@object               # @.str.25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.25:
	.asciz	"+"
	.size	.L.str.25, 2

	.type	.L.str.26,@object               # @.str.26
.L.str.26:
	.asciz	"-"
	.size	.L.str.26, 2

	.type	.L.str.27,@object               # @.str.27
.L.str.27:
	.asciz	", "
	.size	.L.str.27, 3

	.type	.L.str.28,@object               # @.str.28
.L.str.28:
	.asciz	", alignment: "
	.size	.L.str.28, 14

	.type	.L.str.29,@object               # @.str.29
.L.str.29:
	.asciz	" OK"
	.size	.L.str.29, 4

	.type	.L.str.30,@object               # @.str.30
.L.str.30:
	.asciz	" ALIGNMENT NOT AS EXPECTED: "
	.size	.L.str.30, 29

	.type	.L.str.31,@object               # @.str.31
.L.str.31:
	.asciz	" CONTENT NOT AS EXPECTED: "
	.size	.L.str.31, 27

	.type	.L.str.32,@object               # @.str.32
.L.str.32:
	.asciz	" instead of "
	.size	.L.str.32, 13

	.type	.L.str.35,@object               # @.str.35
.L.str.35:
	.asciz	"basic_string::append"
	.size	.L.str.35, 21

	.type	.L.str.36,@object               # @.str.36
.L.str.36:
	.asciz	"abcdefghijklmnopqrstuvwxyz"
	.size	.L.str.36, 27

	.section	.init_array,"aw",@init_array
	.p2align	3, 0x0
	.dword	_GLOBAL__sub_I_frame_layout.cpp
	.data
	.p2align	3, 0x0
.L_ZTIi.DW.stub:
	.dword	_ZTIi
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.data.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.p2align	3, 0x0
	.type	DW.ref.__gxx_personality_v0,@object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.dword	__gxx_personality_v0
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym __gxx_personality_v0
	.addrsig_sym _GLOBAL__sub_I_frame_layout.cpp
	.addrsig_sym _Unwind_Resume
	.addrsig_sym _ZL21testDescriptionHeader
	.addrsig_sym __dso_handle
	.addrsig_sym _ZSt4cout
	.addrsig_sym _ZTIi
