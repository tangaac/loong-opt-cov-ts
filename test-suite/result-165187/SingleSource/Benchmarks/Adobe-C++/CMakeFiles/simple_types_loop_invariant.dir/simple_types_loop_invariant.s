	.file	"simple_types_loop_invariant.cpp"
	.text
	.globl	_Z13record_resultdPKc           # -- Begin function _Z13record_resultdPKc
	.p2align	5
	.type	_Z13record_resultdPKc,@function
_Z13record_resultdPKc:                  # @_Z13record_resultdPKc
# %bb.0:
	addi.d	$sp, $sp, -48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	fst.d	$fs0, $sp, 0                    # 8-byte Folded Spill
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$fp, $a0
	fmov.d	$fs0, $fa0
	pcalau12i	$s0, %pc_hi20(current_test)
	beqz	$a2, .LBB0_2
# %bb.1:
	ld.w	$a0, $s0, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB0_4
.LBB0_2:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB0_5
# %bb.3:                                # %._crit_edge
	move	$a2, $a0
	ld.w	$a0, $s0, %pc_lo12(current_test)
.LBB0_4:
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fs0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s0, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 0                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB0_5:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end0:
	.size	_Z13record_resultdPKc, .Lfunc_end0-_Z13record_resultdPKc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z9summarizePKciiii
.LCPI1_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z9summarizePKciiii
	.p2align	5
	.type	_Z9summarizePKciiii,@function
_Z9summarizePKciiii:                    # @_Z9summarizePKciiii
# %bb.0:
	addi.d	$sp, $sp, -128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 24                   # 8-byte Folded Spill
	pcalau12i	$s6, %pc_hi20(current_test)
	ld.w	$fp, $s6, %pc_lo12(current_test)
	move	$s0, $a4
	move	$s2, $a2
	move	$s3, $a1
	move	$s5, $a0
	pcalau12i	$s7, %pc_hi20(results)
	blez	$fp, .LBB1_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s7, %pc_lo12(results)
	addi.d	$s4, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB1_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s4, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$fp, $fp, -1
	addi.d	$s4, $s4, 16
	bnez	$fp, .LBB1_2
	b	.LBB1_4
.LBB1_3:
	ori	$s1, $zero, 12
.LBB1_4:                                # %._crit_edge
	addi.w	$a1, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.1)
	addi.d	$a0, $a0, %pc_lo12(.L.str.1)
	pcalau12i	$a2, %pc_hi20(.L.str.2)
	addi.d	$s4, $a2, %pc_lo12(.L.str.2)
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.3)
	addi.d	$a0, $a0, %pc_lo12(.L.str.3)
	move	$a1, $s1
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blez	$a0, .LBB1_10
# %bb.5:                                # %.lr.ph45.preheader
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	movgr2fr.w	$fa0, $s3
	movgr2fr.w	$fa1, $s2
	pcalau12i	$a0, %pc_hi20(.LCPI1_0)
	fld.d	$fa2, $a0, %pc_lo12(.LCPI1_0)
	ffint.d.w	$fa0, $fa0
	ffint.d.w	$fa1, $fa1
	fmul.d	$fa0, $fa0, $fa1
	fdiv.d	$fs1, $fa0, $fa2
	pcalau12i	$a0, %pc_hi20(.L.str.4)
	addi.d	$s2, $a0, %pc_lo12(.L.str.4)
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s3, $a0, %pc_lo12(.L.str.5)
	move	$s8, $zero
	move	$s4, $zero
	move	$fp, $zero
	.p2align	4, , 16
.LBB1_6:                                # %.lr.ph45
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$s0, $s7, %pc_lo12(results)
	add.d	$a0, $s0, $s8
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	fldx.d	$fa0, $s0, $s8
	fld.d	$fa1, $s0, 0
	sub.w	$a2, $s1, $a0
	fdiv.d	$fa2, $fs1, $fa0
	fdiv.d	$fa1, $fa0, $fa1
	movfr2gr.d	$a5, $fa0
	movfr2gr.d	$a6, $fa2
	movfr2gr.d	$a7, $fa1
	move	$a0, $s2
	move	$a1, $s4
	move	$a3, $s3
	move	$a4, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	addi.d	$fp, $fp, 1
	addi.w	$s4, $s4, 1
	addi.d	$s8, $s8, 16
	blt	$fp, $a0, .LBB1_6
# %bb.7:                                # %.preheader39
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	blez	$a0, .LBB1_10
# %bb.8:                                # %.lr.ph49
	ld.d	$a1, $s7, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB1_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB1_9
.LBB1_10:                               # %._crit_edge50
	movfr2gr.d	$a2, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a0, $a0, %pc_lo12(.L.str.6)
	move	$a1, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	beqz	$s0, .LBB1_15
# %bb.11:                               # %._crit_edge50
	ld.w	$a0, $s6, %pc_lo12(current_test)
	ori	$a1, $zero, 2
	blt	$a0, $a1, .LBB1_15
# %bb.12:                               # %.lr.ph54
	ld.d	$a0, $s7, %pc_lo12(results)
	fld.d	$fs1, $a0, 0
	addi.d	$fp, $a0, 16
	movgr2fr.d	$fs0, $zero
	ori	$s0, $zero, 1
	.p2align	4, , 16
.LBB1_13:                               # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $fp, 0
	fdiv.d	$fa0, $fa0, $fs1
	pcaddu18i	$ra, %call36(log)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$s0, $s0, 1
	addi.d	$fp, $fp, 16
	blt	$s0, $a0, .LBB1_13
# %bb.14:                               # %._crit_edge55
	addi.d	$a0, $a0, -1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fdiv.d	$fa0, $fs0, $fa0
	pcaddu18i	$ra, %call36(exp)
	jirl	$ra, $ra, 0
	movfr2gr.d	$a2, $fa0
	pcalau12i	$a0, %pc_hi20(.L.str.7)
	addi.d	$a0, $a0, %pc_lo12(.L.str.7)
	move	$a1, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.LBB1_15:
	st.w	$zero, $s6, %pc_lo12(current_test)
	fld.d	$fs1, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end1:
	.size	_Z9summarizePKciiii, .Lfunc_end1-_Z9summarizePKciiii
                                        # -- End function
	.globl	_Z17summarize_simplefP8_IO_FILEPKc # -- Begin function _Z17summarize_simplefP8_IO_FILEPKc
	.p2align	5
	.type	_Z17summarize_simplefP8_IO_FILEPKc,@function
_Z17summarize_simplefP8_IO_FILEPKc:     # @_Z17summarize_simplefP8_IO_FILEPKc
# %bb.0:
	addi.d	$sp, $sp, -128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	pcalau12i	$s5, %pc_hi20(current_test)
	ld.w	$fp, $s5, %pc_lo12(current_test)
	move	$s0, $a1
	move	$s7, $a0
	pcalau12i	$s3, %pc_hi20(results)
	blez	$fp, .LBB2_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s3, %pc_lo12(results)
	addi.d	$s2, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB2_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s2, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$fp, $fp, -1
	addi.d	$s2, $s2, 16
	bnez	$fp, .LBB2_2
	b	.LBB2_4
.LBB2_3:
	ori	$s1, $zero, 12
.LBB2_4:                                # %._crit_edge
	addi.w	$a2, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.8)
	addi.d	$a1, $a0, %pc_lo12(.L.str.8)
	pcalau12i	$a0, %pc_hi20(.L.str.2)
	addi.d	$s2, $a0, %pc_lo12(.L.str.2)
	move	$a0, $s7
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.9)
	addi.d	$a1, $a0, %pc_lo12(.L.str.9)
	move	$a0, $s7
	move	$a2, $s1
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blez	$a0, .LBB2_10
# %bb.5:                                # %.lr.ph32.preheader
	st.d	$s0, $sp, 16                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.10)
	addi.d	$a0, $a0, %pc_lo12(.L.str.10)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s2, $a0, %pc_lo12(.L.str.5)
	move	$s8, $zero
	move	$s4, $zero
	move	$fp, $zero
	.p2align	4, , 16
.LBB2_6:                                # %.lr.ph32
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$s6, $s3, %pc_lo12(results)
	add.d	$a0, $s6, $s8
	move	$s0, $s5
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	ldx.d	$a6, $s6, $s8
	sub.w	$a3, $s1, $a0
	move	$a0, $s7
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $s4
	move	$a4, $s2
	move	$a5, $s5
	move	$s5, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, %pc_lo12(current_test)
	addi.d	$fp, $fp, 1
	addi.w	$s4, $s4, 1
	addi.d	$s8, $s8, 16
	blt	$fp, $a0, .LBB2_6
# %bb.7:                                # %.preheader
	ld.d	$s0, $sp, 16                    # 8-byte Folded Reload
	blez	$a0, .LBB2_10
# %bb.8:                                # %.lr.ph36
	ld.d	$a1, $s3, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB2_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB2_9
.LBB2_10:                               # %._crit_edge37
	movfr2gr.d	$a3, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a1, $a0, %pc_lo12(.L.str.6)
	move	$a0, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	st.w	$zero, $s5, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end2:
	.size	_Z17summarize_simplefP8_IO_FILEPKc, .Lfunc_end2-_Z17summarize_simplefP8_IO_FILEPKc
                                        # -- End function
	.globl	_Z11start_timerv                # -- Begin function _Z11start_timerv
	.p2align	5
	.type	_Z11start_timerv,@function
_Z11start_timerv:                       # @_Z11start_timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a0, $a1, %pc_lo12(start_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end3:
	.size	_Z11start_timerv, .Lfunc_end3-_Z11start_timerv
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z5timerv
.LCPI4_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z5timerv
	.p2align	5
	.type	_Z5timerv,@function
_Z5timerv:                              # @_Z5timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	ld.d	$a1, $a1, %pc_lo12(start_time)
	pcalau12i	$a2, %pc_hi20(end_time)
	pcalau12i	$a3, %pc_hi20(.LCPI4_0)
	fld.d	$fa0, $a3, %pc_lo12(.LCPI4_0)
	sub.d	$a1, $a0, $a1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	st.d	$a0, $a2, %pc_lo12(end_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end4:
	.size	_Z5timerv, .Lfunc_end4-_Z5timerv
                                        # -- End function
	.globl	main                            # -- Begin function main
	.p2align	5
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	move	$s0, $a0
	ori	$s1, $zero, 2
	pcalau12i	$a0, %pc_hi20(init_value)
	addi.d	$s7, $a0, %pc_lo12(init_value)
	blt	$s0, $s1, .LBB5_4
# %bb.1:
	move	$fp, $a1
	ld.d	$a0, $a1, 8
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.w	$a0, $a1, %pc_lo12(iterations)
	beq	$s0, $s1, .LBB5_4
# %bb.2:
	ld.d	$a0, $fp, 16
	move	$a1, $zero
	pcaddu18i	$ra, %call36(strtod)
	jirl	$ra, $ra, 0
	ori	$a0, $zero, 4
	fst.d	$fa0, $s7, 0
	bltu	$s0, $a0, .LBB5_4
# %bb.3:
	ld.d	$a0, $fp, 24
	move	$a1, $zero
	pcaddu18i	$ra, %call36(strtod)
	jirl	$ra, $ra, 0
                                        # kill: def $f0_64 killed $f0_64 def $vr0
	b	.LBB5_5
.LBB5_4:
	vldi	$vr0, -912
.LBB5_5:                                # %.thread535
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	fld.d	$fa0, $s7, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a1, $fa0
	pcalau12i	$a0, %pc_hi20(data8)
	addi.d	$s3, $a0, %pc_lo12(data8)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	move	$a0, $s3
	move	$a2, $s2
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$fp, $fa0
	slli.d	$s0, $fp, 1
	ext.w.b	$s4, $s0
	addi.d	$s8, $fp, 2
	ext.w.b	$s5, $s8
	div.d	$a0, $s4, $s5
	add.d	$s1, $a0, $fp
	pcalau12i	$a0, %pc_hi20(.L.str.11)
	addi.d	$a3, $a0, %pc_lo12(.L.str.11)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.12)
	addi.d	$a3, $a0, %pc_lo12(.L.str.12)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	ext.w.b	$s6, $s1
	pcalau12i	$a0, %pc_hi20(.L.str.13)
	addi.d	$a6, $a0, %pc_lo12(.L.str.13)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.14)
	addi.d	$a3, $a0, %pc_lo12(.L.str.14)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.15)
	addi.d	$a6, $a0, %pc_lo12(.L.str.15)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.16)
	addi.d	$a3, $a0, %pc_lo12(.L.str.16)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.17)
	addi.d	$a6, $a0, %pc_lo12(.L.str.17)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.18)
	addi.d	$a6, $a0, %pc_lo12(.L.str.18)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a3, $a0, %pc_lo12(.L.str.19)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.20)
	addi.d	$a6, $a0, %pc_lo12(.L.str.20)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.21)
	addi.d	$a6, $a0, %pc_lo12(.L.str.21)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.22)
	addi.d	$a6, $a0, %pc_lo12(.L.str.22)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.23)
	addi.d	$a3, $a0, %pc_lo12(.L.str.23)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.24)
	addi.d	$a6, $a0, %pc_lo12(.L.str.24)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.25)
	addi.d	$a3, $a0, %pc_lo12(.L.str.25)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.26)
	addi.d	$a6, $a0, %pc_lo12(.L.str.26)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.27)
	addi.d	$a3, $a0, %pc_lo12(.L.str.27)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.28)
	addi.d	$a6, $a0, %pc_lo12(.L.str.28)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s7, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a1, $fa0
	pcalau12i	$a0, %pc_hi20(data8unsigned)
	addi.d	$s3, $a0, %pc_lo12(data8unsigned)
	move	$a0, $s3
	move	$a2, $s2
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	andi	$s4, $s8, 255
	andi	$s5, $s0, 254
	div.du	$a0, $s5, $s4
	add.d	$s1, $a0, $fp
	pcalau12i	$a0, %pc_hi20(.L.str.29)
	addi.d	$a3, $a0, %pc_lo12(.L.str.29)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.30)
	addi.d	$a3, $a0, %pc_lo12(.L.str.30)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	andi	$s6, $s1, 255
	pcalau12i	$a0, %pc_hi20(.L.str.31)
	addi.d	$a6, $a0, %pc_lo12(.L.str.31)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.32)
	addi.d	$a3, $a0, %pc_lo12(.L.str.32)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.33)
	addi.d	$a6, $a0, %pc_lo12(.L.str.33)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.34)
	addi.d	$a3, $a0, %pc_lo12(.L.str.34)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.35)
	addi.d	$a6, $a0, %pc_lo12(.L.str.35)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.36)
	addi.d	$a6, $a0, %pc_lo12(.L.str.36)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.37)
	addi.d	$a3, $a0, %pc_lo12(.L.str.37)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.38)
	addi.d	$a6, $a0, %pc_lo12(.L.str.38)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.39)
	addi.d	$a6, $a0, %pc_lo12(.L.str.39)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.40)
	addi.d	$a6, $a0, %pc_lo12(.L.str.40)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.41)
	addi.d	$a3, $a0, %pc_lo12(.L.str.41)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.42)
	addi.d	$a6, $a0, %pc_lo12(.L.str.42)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.43)
	addi.d	$a3, $a0, %pc_lo12(.L.str.43)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.44)
	addi.d	$a6, $a0, %pc_lo12(.L.str.44)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.45)
	addi.d	$a3, $a0, %pc_lo12(.L.str.45)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.46)
	addi.d	$a6, $a0, %pc_lo12(.L.str.46)
	move	$a0, $s3
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s5
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	st.d	$s7, $sp, 8                     # 8-byte Folded Spill
	fld.d	$fa0, $s7, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a0, $fa0
	vreplgr2vr.h	$vr0, $a0
	lu12i.w	$s8, -4
	ori	$a0, $s8, 384
	pcalau12i	$a1, %pc_hi20(data16)
	addi.d	$a1, $a1, %pc_lo12(data16)
	lu12i.w	$a2, 3
	ori	$s1, $a2, 3712
	ori	$s7, $a2, 3728
	.p2align	4, , 16
.LBB5_6:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s1
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s7
	bnez	$a0, .LBB5_6
# %bb.7:                                # %_Z4fillIPssEvT_S1_T0_.exit
	ext.w.h	$s3, $s0
	addi.d	$a0, $fp, 2
	ext.w.h	$s4, $a0
	div.w	$a0, $s3, $s4
	add.d	$s6, $a0, $fp
	pcalau12i	$a0, %pc_hi20(data16)
	addi.d	$s5, $a0, %pc_lo12(data16)
	pcalau12i	$a0, %pc_hi20(.L.str.47)
	addi.d	$a3, $a0, %pc_lo12(.L.str.47)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.48)
	addi.d	$a3, $a0, %pc_lo12(.L.str.48)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	ext.w.h	$s6, $s6
	pcalau12i	$a0, %pc_hi20(.L.str.49)
	addi.d	$a6, $a0, %pc_lo12(.L.str.49)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.50)
	addi.d	$a3, $a0, %pc_lo12(.L.str.50)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.51)
	addi.d	$a6, $a0, %pc_lo12(.L.str.51)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.52)
	addi.d	$a3, $a0, %pc_lo12(.L.str.52)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.53)
	addi.d	$a6, $a0, %pc_lo12(.L.str.53)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.54)
	addi.d	$a6, $a0, %pc_lo12(.L.str.54)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.55)
	addi.d	$a3, $a0, %pc_lo12(.L.str.55)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.56)
	addi.d	$a6, $a0, %pc_lo12(.L.str.56)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.57)
	addi.d	$a6, $a0, %pc_lo12(.L.str.57)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.58)
	addi.d	$a6, $a0, %pc_lo12(.L.str.58)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.59)
	addi.d	$a3, $a0, %pc_lo12(.L.str.59)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.60)
	addi.d	$a6, $a0, %pc_lo12(.L.str.60)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.61)
	addi.d	$a3, $a0, %pc_lo12(.L.str.61)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.62)
	addi.d	$a6, $a0, %pc_lo12(.L.str.62)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.63)
	addi.d	$a3, $a0, %pc_lo12(.L.str.63)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.64)
	addi.d	$a6, $a0, %pc_lo12(.L.str.64)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s3
	move	$a4, $s4
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	fld.d	$fa0, $a0, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a0, $fa0
	vreplgr2vr.h	$vr0, $a0
	ori	$a0, $s8, 384
	pcalau12i	$a1, %pc_hi20(data16unsigned)
	addi.d	$a1, $a1, %pc_lo12(data16unsigned)
	.p2align	4, , 16
.LBB5_8:                                # %vector.body540
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s1
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s7
	bnez	$a0, .LBB5_8
# %bb.9:                                # %_Z4fillIPttEvT_S1_T0_.exit
	addi.d	$a0, $fp, 2
	bstrpick.d	$s3, $a0, 15, 0
	bstrpick.d	$a0, $s0, 15, 1
	slli.d	$s4, $a0, 1
	div.du	$a0, $s4, $s3
	add.d	$s1, $a0, $fp
	pcalau12i	$a0, %pc_hi20(data16unsigned)
	addi.d	$s5, $a0, %pc_lo12(data16unsigned)
	pcalau12i	$a0, %pc_hi20(.L.str.65)
	addi.d	$a3, $a0, %pc_lo12(.L.str.65)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.66)
	addi.d	$a3, $a0, %pc_lo12(.L.str.66)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	bstrpick.d	$s6, $s1, 15, 0
	pcalau12i	$a0, %pc_hi20(.L.str.67)
	addi.d	$a6, $a0, %pc_lo12(.L.str.67)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.68)
	addi.d	$a3, $a0, %pc_lo12(.L.str.68)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.69)
	addi.d	$a6, $a0, %pc_lo12(.L.str.69)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.70)
	addi.d	$a3, $a0, %pc_lo12(.L.str.70)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.71)
	addi.d	$a6, $a0, %pc_lo12(.L.str.71)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.72)
	addi.d	$a6, $a0, %pc_lo12(.L.str.72)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.73)
	addi.d	$a3, $a0, %pc_lo12(.L.str.73)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.74)
	addi.d	$a6, $a0, %pc_lo12(.L.str.74)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.75)
	addi.d	$a6, $a0, %pc_lo12(.L.str.75)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.76)
	addi.d	$a6, $a0, %pc_lo12(.L.str.76)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.77)
	addi.d	$a3, $a0, %pc_lo12(.L.str.77)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.78)
	addi.d	$a6, $a0, %pc_lo12(.L.str.78)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.79)
	addi.d	$a3, $a0, %pc_lo12(.L.str.79)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.80)
	addi.d	$a6, $a0, %pc_lo12(.L.str.80)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.81)
	addi.d	$a3, $a0, %pc_lo12(.L.str.81)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.82)
	addi.d	$a6, $a0, %pc_lo12(.L.str.82)
	move	$a0, $s5
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	fld.d	$fa0, $a0, 0
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	vreplgr2vr.w	$vr0, $a0
	lu12i.w	$a0, -8
	ori	$a0, $a0, 768
	pcalau12i	$a1, %pc_hi20(data32)
	addi.d	$a1, $a1, %pc_lo12(data32)
	lu12i.w	$a2, 7
	ori	$s8, $a2, 3328
	ori	$s1, $a2, 3344
	.p2align	4, , 16
.LBB5_10:                               # %vector.body548
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s8
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s1
	bnez	$a0, .LBB5_10
# %bb.11:                               # %_Z4fillIPiiEvT_S1_T0_.exit
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$s3, $fa0
	slli.w	$s4, $s3, 1
	addi.w	$s5, $s3, 2
	div.w	$a0, $s4, $s5
	add.w	$s6, $a0, $s3
	pcalau12i	$a0, %pc_hi20(data32)
	addi.d	$s7, $a0, %pc_lo12(data32)
	pcalau12i	$a0, %pc_hi20(.L.str.83)
	addi.d	$a3, $a0, %pc_lo12(.L.str.83)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.84)
	addi.d	$a3, $a0, %pc_lo12(.L.str.84)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.85)
	addi.d	$a6, $a0, %pc_lo12(.L.str.85)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.86)
	addi.d	$a3, $a0, %pc_lo12(.L.str.86)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.87)
	addi.d	$a6, $a0, %pc_lo12(.L.str.87)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.88)
	addi.d	$a3, $a0, %pc_lo12(.L.str.88)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.89)
	addi.d	$a6, $a0, %pc_lo12(.L.str.89)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.90)
	addi.d	$a6, $a0, %pc_lo12(.L.str.90)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.91)
	addi.d	$a3, $a0, %pc_lo12(.L.str.91)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.92)
	addi.d	$a6, $a0, %pc_lo12(.L.str.92)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.93)
	addi.d	$a6, $a0, %pc_lo12(.L.str.93)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.94)
	addi.d	$a6, $a0, %pc_lo12(.L.str.94)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.95)
	addi.d	$a3, $a0, %pc_lo12(.L.str.95)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.96)
	addi.d	$a6, $a0, %pc_lo12(.L.str.96)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.97)
	addi.d	$a3, $a0, %pc_lo12(.L.str.97)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.98)
	addi.d	$a6, $a0, %pc_lo12(.L.str.98)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.99)
	addi.d	$a3, $a0, %pc_lo12(.L.str.99)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.100)
	addi.d	$a6, $a0, %pc_lo12(.L.str.100)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s3
	move	$a3, $s4
	move	$a4, $s5
	move	$a5, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	fld.d	$fa0, $a0, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a0, $fa0
	vreplgr2vr.w	$vr0, $a0
	lu12i.w	$a0, -8
	ori	$a0, $a0, 768
	pcalau12i	$a1, %pc_hi20(data32unsigned)
	addi.d	$a1, $a1, %pc_lo12(data32unsigned)
	.p2align	4, , 16
.LBB5_12:                               # %vector.body556
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s8
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s1
	bnez	$a0, .LBB5_12
# %bb.13:                               # %_Z4fillIPjjEvT_S1_T0_.exit
	addi.d	$a0, $fp, 2
	addi.w	$s3, $a0, 0
	addi.w	$s4, $s0, 0
	div.wu	$a0, $s4, $s3
	add.w	$s5, $a0, $fp
	addi.w	$s6, $fp, 0
	pcalau12i	$a0, %pc_hi20(data32unsigned)
	addi.d	$s7, $a0, %pc_lo12(data32unsigned)
	pcalau12i	$a0, %pc_hi20(.L.str.101)
	addi.d	$a3, $a0, %pc_lo12(.L.str.101)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.102)
	addi.d	$a3, $a0, %pc_lo12(.L.str.102)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.103)
	addi.d	$a6, $a0, %pc_lo12(.L.str.103)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.104)
	addi.d	$a3, $a0, %pc_lo12(.L.str.104)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.105)
	addi.d	$a6, $a0, %pc_lo12(.L.str.105)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.106)
	addi.d	$a3, $a0, %pc_lo12(.L.str.106)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.107)
	addi.d	$a6, $a0, %pc_lo12(.L.str.107)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.108)
	addi.d	$a6, $a0, %pc_lo12(.L.str.108)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.109)
	addi.d	$a3, $a0, %pc_lo12(.L.str.109)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.110)
	addi.d	$a6, $a0, %pc_lo12(.L.str.110)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.111)
	addi.d	$a6, $a0, %pc_lo12(.L.str.111)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.112)
	addi.d	$a6, $a0, %pc_lo12(.L.str.112)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.113)
	addi.d	$a3, $a0, %pc_lo12(.L.str.113)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.114)
	addi.d	$a6, $a0, %pc_lo12(.L.str.114)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.115)
	addi.d	$a3, $a0, %pc_lo12(.L.str.115)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.116)
	addi.d	$a6, $a0, %pc_lo12(.L.str.116)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.117)
	addi.d	$a3, $a0, %pc_lo12(.L.str.117)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	pcaddu18i	$ra, %call36(_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.118)
	addi.d	$a6, $a0, %pc_lo12(.L.str.118)
	move	$a0, $s7
	move	$a1, $s2
	move	$a2, $s6
	move	$a3, $s4
	move	$a4, $s3
	move	$a5, $s5
	pcaddu18i	$ra, %call36(_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	ld.d	$s6, $sp, 8                     # 8-byte Folded Reload
	fld.d	$fa0, $s6, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a1, $fa0
	pcalau12i	$a0, %pc_hi20(data64+16)
	addi.d	$a0, $a0, %pc_lo12(data64+16)
	vreplgr2vr.d	$vr0, $a1
	.p2align	4, , 16
.LBB5_14:                               # %vector.body564
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$s2, $s2, -4
	addi.d	$a0, $a0, 32
	bnez	$s2, .LBB5_14
# %bb.15:                               # %_Z4fillIPllEvT_S1_T0_.exit
	addi.d	$s5, $fp, 2
	div.d	$a0, $s0, $s5
	add.d	$s3, $a0, $fp
	pcalau12i	$a0, %pc_hi20(data64)
	addi.d	$s4, $a0, %pc_lo12(data64)
	pcalau12i	$a0, %pc_hi20(.L.str.119)
	addi.d	$a3, $a0, %pc_lo12(.L.str.119)
	lu12i.w	$s7, 1
	ori	$s2, $s7, 3904
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.120)
	addi.d	$a3, $a0, %pc_lo12(.L.str.120)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.121)
	addi.d	$a6, $a0, %pc_lo12(.L.str.121)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.122)
	addi.d	$a3, $a0, %pc_lo12(.L.str.122)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.123)
	addi.d	$a6, $a0, %pc_lo12(.L.str.123)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.124)
	addi.d	$a3, $a0, %pc_lo12(.L.str.124)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.125)
	addi.d	$a6, $a0, %pc_lo12(.L.str.125)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.126)
	addi.d	$a6, $a0, %pc_lo12(.L.str.126)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.127)
	addi.d	$a3, $a0, %pc_lo12(.L.str.127)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.128)
	addi.d	$a6, $a0, %pc_lo12(.L.str.128)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.129)
	addi.d	$a6, $a0, %pc_lo12(.L.str.129)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.130)
	addi.d	$a6, $a0, %pc_lo12(.L.str.130)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.131)
	addi.d	$a3, $a0, %pc_lo12(.L.str.131)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.132)
	addi.d	$a6, $a0, %pc_lo12(.L.str.132)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.133)
	addi.d	$a3, $a0, %pc_lo12(.L.str.133)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.134)
	addi.d	$a6, $a0, %pc_lo12(.L.str.134)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.135)
	addi.d	$a3, $a0, %pc_lo12(.L.str.135)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.136)
	addi.d	$a6, $a0, %pc_lo12(.L.str.136)
	move	$a0, $s4
	move	$a1, $s2
	move	$a2, $fp
	move	$a3, $s0
	move	$a4, $s5
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	fld.d	$fa1, $s6, 0
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fa0, $a0
	fcmp.clt.d	$fcc0, $fa1, $fa0
	fsub.d	$fa2, $fa1, $fa0
	ftintrz.l.d	$fa2, $fa2
	movfr2gr.d	$a1, $fa2
	lu52i.d	$a0, $zero, -2048
	xor	$a1, $a1, $a0
	movcf2gr	$a2, $fcc0
	masknez	$a1, $a1, $a2
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a1, $a2, $a1
	vreplgr2vr.d	$vr1, $a1
	pcalau12i	$a1, %pc_hi20(data64unsigned+16)
	addi.d	$a1, $a1, %pc_lo12(data64unsigned+16)
	.p2align	4, , 16
.LBB5_16:                               # %vector.body572
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr1, $a1, -16
	vst	$vr1, $a1, 0
	addi.d	$s2, $s2, -4
	addi.d	$a1, $a1, 32
	bnez	$s2, .LBB5_16
# %bb.17:                               # %_Z4fillIPmmEvT_S1_T0_.exit
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	fcmp.clt.d	$fcc0, $fa1, $fa0
	fsub.d	$fa0, $fa1, $fa0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a1, $fa0
	xor	$a0, $a1, $a0
	movcf2gr	$a1, $fcc0
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $fp, $a1
	or	$s0, $a1, $a0
	slli.d	$s5, $s0, 1
	addi.d	$s2, $s0, 2
	div.du	$a0, $s5, $s2
	add.d	$s3, $a0, $s0
	pcalau12i	$a0, %pc_hi20(data64unsigned)
	addi.d	$s4, $a0, %pc_lo12(data64unsigned)
	pcalau12i	$a0, %pc_hi20(.L.str.137)
	addi.d	$a3, $a0, %pc_lo12(.L.str.137)
	ori	$fp, $s7, 3904
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.138)
	addi.d	$a3, $a0, %pc_lo12(.L.str.138)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.139)
	addi.d	$a6, $a0, %pc_lo12(.L.str.139)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.140)
	addi.d	$a3, $a0, %pc_lo12(.L.str.140)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.141)
	addi.d	$a6, $a0, %pc_lo12(.L.str.141)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.142)
	addi.d	$a3, $a0, %pc_lo12(.L.str.142)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.143)
	addi.d	$a6, $a0, %pc_lo12(.L.str.143)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.144)
	addi.d	$a6, $a0, %pc_lo12(.L.str.144)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.145)
	addi.d	$a3, $a0, %pc_lo12(.L.str.145)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.146)
	addi.d	$a6, $a0, %pc_lo12(.L.str.146)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.147)
	addi.d	$a6, $a0, %pc_lo12(.L.str.147)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.148)
	addi.d	$a6, $a0, %pc_lo12(.L.str.148)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.149)
	addi.d	$a3, $a0, %pc_lo12(.L.str.149)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.150)
	addi.d	$a6, $a0, %pc_lo12(.L.str.150)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.151)
	addi.d	$a3, $a0, %pc_lo12(.L.str.151)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.152)
	addi.d	$a6, $a0, %pc_lo12(.L.str.152)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.153)
	addi.d	$a3, $a0, %pc_lo12(.L.str.153)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.154)
	addi.d	$a6, $a0, %pc_lo12(.L.str.154)
	move	$a0, $s4
	move	$a1, $fp
	move	$a2, $s0
	move	$a3, $s5
	move	$a4, $s2
	move	$a5, $s3
	pcaddu18i	$ra, %call36(_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s6, 0
	fcvt.s.d	$fa0, $fa0
	vreplvei.w	$vr0, $vr0, 0
	lu12i.w	$a0, -8
	ori	$a0, $a0, 768
	pcalau12i	$a1, %pc_hi20(dataFloat)
	addi.d	$a1, $a1, %pc_lo12(dataFloat)
	.p2align	4, , 16
.LBB5_18:                               # %vector.body580
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a2, $s8
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a2, $s1
	bnez	$a0, .LBB5_18
# %bb.19:                               # %_Z4fillIPffEvT_S1_T0_.exit
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	fcvt.s.d	$fs0, $fa0
	fadd.s	$fs1, $fs0, $fs0
	vldi	$vr0, -1280
	fadd.s	$fs2, $fs0, $fa0
	fdiv.s	$fa0, $fs1, $fs2
	fadd.s	$fs3, $fa0, $fs0
	pcalau12i	$a0, %pc_hi20(dataFloat)
	addi.d	$s0, $a0, %pc_lo12(dataFloat)
	pcalau12i	$a0, %pc_hi20(.L.str.155)
	addi.d	$a2, $a0, %pc_lo12(.L.str.155)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.156)
	addi.d	$a2, $a0, %pc_lo12(.L.str.156)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.157)
	addi.d	$a2, $a0, %pc_lo12(.L.str.157)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs2
	fmov.s	$fa3, $fs3
	pcaddu18i	$ra, %call36(_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.158)
	addi.d	$a2, $a0, %pc_lo12(.L.str.158)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.159)
	addi.d	$a2, $a0, %pc_lo12(.L.str.159)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs2
	fmov.s	$fa3, $fs3
	pcaddu18i	$ra, %call36(_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.160)
	addi.d	$a2, $a0, %pc_lo12(.L.str.160)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.161)
	addi.d	$a2, $a0, %pc_lo12(.L.str.161)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs2
	fmov.s	$fa3, $fs3
	pcaddu18i	$ra, %call36(_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.162)
	addi.d	$a2, $a0, %pc_lo12(.L.str.162)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs2
	fmov.s	$fa3, $fs3
	pcaddu18i	$ra, %call36(_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.163)
	addi.d	$a2, $a0, %pc_lo12(.L.str.163)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.164)
	addi.d	$a2, $a0, %pc_lo12(.L.str.164)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs2
	fmov.s	$fa3, $fs3
	pcaddu18i	$ra, %call36(_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.165)
	addi.d	$a2, $a0, %pc_lo12(.L.str.165)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs2
	fmov.s	$fa3, $fs3
	pcaddu18i	$ra, %call36(_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.166)
	addi.d	$a2, $a0, %pc_lo12(.L.str.166)
	move	$a0, $s0
	move	$a1, $fp
	fmov.s	$fa0, $fs0
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs2
	fmov.s	$fa3, $fs3
	pcaddu18i	$ra, %call36(_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(dataDouble+16)
	addi.d	$a0, $a0, %pc_lo12(dataDouble+16)
	vldrepl.d	$vr0, $s6, 0
	.p2align	4, , 16
.LBB5_20:                               # %vector.body588
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$fp, $fp, -4
	addi.d	$a0, $a0, 32
	bnez	$fp, .LBB5_20
# %bb.21:                               # %_Z4fillIPddEvT_S1_T0_.exit
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
	fadd.d	$fs0, $fa1, $fa1
	vldi	$vr0, -1024
	fadd.d	$fs1, $fa1, $fa0
	fdiv.d	$fa0, $fs0, $fs1
	fadd.d	$fs2, $fa1, $fa0
	vori.b	$vr0, $vr1, 0
	pcalau12i	$a0, %pc_hi20(dataDouble)
	addi.d	$fp, $a0, %pc_lo12(dataDouble)
	pcalau12i	$a0, %pc_hi20(.L.str.167)
	addi.d	$a2, $a0, %pc_lo12(.L.str.167)
	ori	$s0, $s7, 3904
	move	$a0, $fp
	move	$a1, $s0
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	pcaddu18i	$ra, %call36(_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.168)
	addi.d	$a2, $a0, %pc_lo12(.L.str.168)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	pcaddu18i	$ra, %call36(_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.169)
	addi.d	$a2, $a0, %pc_lo12(.L.str.169)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	fmov.d	$fa1, $fs0
	fmov.d	$fa2, $fs1
	fmov.d	$fa3, $fs2
	pcaddu18i	$ra, %call36(_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.170)
	addi.d	$a2, $a0, %pc_lo12(.L.str.170)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	pcaddu18i	$ra, %call36(_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.171)
	addi.d	$a2, $a0, %pc_lo12(.L.str.171)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	fmov.d	$fa1, $fs0
	fmov.d	$fa2, $fs1
	fmov.d	$fa3, $fs2
	pcaddu18i	$ra, %call36(_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.172)
	addi.d	$a2, $a0, %pc_lo12(.L.str.172)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	pcaddu18i	$ra, %call36(_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.173)
	addi.d	$a2, $a0, %pc_lo12(.L.str.173)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	fmov.d	$fa1, $fs0
	fmov.d	$fa2, $fs1
	fmov.d	$fa3, $fs2
	pcaddu18i	$ra, %call36(_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.174)
	addi.d	$a2, $a0, %pc_lo12(.L.str.174)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	fmov.d	$fa1, $fs0
	fmov.d	$fa2, $fs1
	fmov.d	$fa3, $fs2
	pcaddu18i	$ra, %call36(_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.175)
	addi.d	$a2, $a0, %pc_lo12(.L.str.175)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	pcaddu18i	$ra, %call36(_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.176)
	addi.d	$a2, $a0, %pc_lo12(.L.str.176)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	fmov.d	$fa1, $fs0
	fmov.d	$fa2, $fs1
	fmov.d	$fa3, $fs2
	pcaddu18i	$ra, %call36(_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.177)
	addi.d	$a2, $a0, %pc_lo12(.L.str.177)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	fmov.d	$fa1, $fs0
	fmov.d	$fa2, $fs1
	fmov.d	$fa3, $fs2
	pcaddu18i	$ra, %call36(_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.178)
	addi.d	$a2, $a0, %pc_lo12(.L.str.178)
	move	$a0, $fp
	move	$a1, $s0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
                                        # kill: def $f0_64 killed $f0_64 killed $vr0
	fmov.d	$fa1, $fs0
	fmov.d	$fa2, $fs1
	fmov.d	$fa3, $fs2
	pcaddu18i	$ra, %call36(_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.Lfunc_end5:
	.size	main, .Lfunc_end5-main
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
.LCPI6_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc: # @_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB6_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB6_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB6_4
	.p2align	4, , 16
.LBB6_3:                                # %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB6_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB6_23
.LBB6_4:                                # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_9 Depth 2
                                        #     Child Loop BB6_13 Depth 2
                                        #     Child Loop BB6_16 Depth 2
	bgeu	$s1, $a5, .LBB6_6
# %bb.5:                                #   in Loop: Header=BB6_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB6_15
	.p2align	4, , 16
.LBB6_6:                                # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB6_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB6_8
# %bb.7:                                #   in Loop: Header=BB6_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB6_12
	.p2align	4, , 16
.LBB6_8:                                # %vector.body.preheader
                                        #   in Loop: Header=BB6_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB6_9:                                # %vector.body
                                        #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB6_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB6_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB6_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB6_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB6_15
.LBB6_12:                               # %vec.epilog.ph
                                        #   in Loop: Header=BB6_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB6_13:                               # %vec.epilog.vector.body
                                        #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB6_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB6_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB6_17
.LBB6_15:                               # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB6_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB6_16:                               # %vec.epilog.scalar.ph
                                        #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB6_16
.LBB6_17:                               # %._crit_edge.us
                                        #   in Loop: Header=BB6_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB6_3
# %bb.18:                               #   in Loop: Header=BB6_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB6_3
.LBB6_19:                               # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB6_21
	.p2align	4, , 16
.LBB6_20:                               # %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit
                                        #   in Loop: Header=BB6_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB6_23
.LBB6_21:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB6_20
# %bb.22:                               #   in Loop: Header=BB6_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB6_20
.LBB6_23:                               # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB6_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB6_27
.LBB6_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB6_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB6_27:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI6_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI6_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB6_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end6:
	.size	_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc, .Lfunc_end6-_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
.LCPI7_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB7_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$s7, $s0, $s1
	blez	$s1, .LBB7_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$fp, $a0, 5
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB7_4
	.p2align	4, , 16
.LBB7_3:                                # %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB7_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB7_23
.LBB7_4:                                # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_9 Depth 2
                                        #     Child Loop BB7_13 Depth 2
                                        #     Child Loop BB7_16 Depth 2
	bgeu	$s1, $a5, .LBB7_6
# %bb.5:                                #   in Loop: Header=BB7_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB7_15
	.p2align	4, , 16
.LBB7_6:                                # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB7_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB7_8
# %bb.7:                                #   in Loop: Header=BB7_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB7_12
	.p2align	4, , 16
.LBB7_8:                                # %vector.body.preheader
                                        #   in Loop: Header=BB7_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB7_9:                                # %vector.body
                                        #   Parent Loop BB7_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB7_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB7_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB7_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB7_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB7_15
.LBB7_12:                               # %vec.epilog.ph
                                        #   in Loop: Header=BB7_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB7_13:                               # %vec.epilog.vector.body
                                        #   Parent Loop BB7_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB7_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB7_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB7_17
.LBB7_15:                               # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB7_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB7_16:                               # %vec.epilog.scalar.ph
                                        #   Parent Loop BB7_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB7_16
.LBB7_17:                               # %._crit_edge.us
                                        #   in Loop: Header=BB7_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	add.d	$a0, $a0, $s7
	andi	$a0, $a0, 255
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	beq	$a0, $a2, .LBB7_3
# %bb.18:                               #   in Loop: Header=BB7_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB7_3
.LBB7_19:                               # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	andi	$s2, $s7, 255
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB7_21
	.p2align	4, , 16
.LBB7_20:                               # %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit
                                        #   in Loop: Header=BB7_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB7_23
.LBB7_21:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	slli.d	$a0, $a0, 6
	andi	$a0, $a0, 192
	beq	$s2, $a0, .LBB7_20
# %bb.22:                               #   in Loop: Header=BB7_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB7_20
.LBB7_23:                               # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB7_25
# %bb.24:                               # %._crit_edge19
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB7_27
.LBB7_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB7_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB7_27:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI7_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI7_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB7_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end7:
	.size	_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc, .Lfunc_end7-_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI8_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB8_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB8_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s5, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB8_4
	.p2align	4, , 16
.LBB8_3:                                # %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB8_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB8_23
.LBB8_4:                                # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_9 Depth 2
                                        #     Child Loop BB8_13 Depth 2
                                        #     Child Loop BB8_16 Depth 2
	bgeu	$s0, $a5, .LBB8_6
# %bb.5:                                #   in Loop: Header=BB8_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB8_15
	.p2align	4, , 16
.LBB8_6:                                # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB8_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB8_8
# %bb.7:                                #   in Loop: Header=BB8_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB8_12
	.p2align	4, , 16
.LBB8_8:                                # %vector.body.preheader
                                        #   in Loop: Header=BB8_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB8_9:                                # %vector.body
                                        #   Parent Loop BB8_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr4, $vr0
	vadd.b	$vr1, $vr4, $vr1
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB8_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB8_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB8_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB8_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB8_15
.LBB8_12:                               # %vec.epilog.ph
                                        #   in Loop: Header=BB8_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB8_13:                               # %vec.epilog.vector.body
                                        #   Parent Loop BB8_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr5, $vr0
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB8_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB8_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB8_17
.LBB8_15:                               # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB8_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB8_16:                               # %vec.epilog.scalar.ph
                                        #   Parent Loop BB8_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB8_16
.LBB8_17:                               # %._crit_edge.us
                                        #   in Loop: Header=BB8_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB8_3
# %bb.18:                               #   in Loop: Header=BB8_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB8_3
.LBB8_19:                               # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB8_21
	.p2align	4, , 16
.LBB8_20:                               # %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB8_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB8_23
.LBB8_21:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB8_20
# %bb.22:                               #   in Loop: Header=BB8_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB8_20
.LBB8_23:                               # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB8_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB8_27
.LBB8_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB8_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB8_27:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI8_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI8_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB8_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end8:
	.size	_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end8-_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
.LCPI9_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc: # @_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB9_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB9_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB9_4
	.p2align	4, , 16
.LBB9_3:                                # %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB9_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB9_23
.LBB9_4:                                # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_9 Depth 2
                                        #     Child Loop BB9_13 Depth 2
                                        #     Child Loop BB9_16 Depth 2
	bgeu	$s1, $a5, .LBB9_6
# %bb.5:                                #   in Loop: Header=BB9_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB9_15
	.p2align	4, , 16
.LBB9_6:                                # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB9_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB9_8
# %bb.7:                                #   in Loop: Header=BB9_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB9_12
	.p2align	4, , 16
.LBB9_8:                                # %vector.body.preheader
                                        #   in Loop: Header=BB9_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB9_9:                                # %vector.body
                                        #   Parent Loop BB9_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.b	$vr0, $vr0, $vr4
	vsub.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB9_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB9_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB9_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB9_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB9_15
.LBB9_12:                               # %vec.epilog.ph
                                        #   in Loop: Header=BB9_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB9_13:                               # %vec.epilog.vector.body
                                        #   Parent Loop BB9_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB9_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB9_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB9_17
.LBB9_15:                               # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB9_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB9_16:                               # %vec.epilog.scalar.ph
                                        #   Parent Loop BB9_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB9_16
.LBB9_17:                               # %._crit_edge.us
                                        #   in Loop: Header=BB9_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB9_3
# %bb.18:                               #   in Loop: Header=BB9_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB9_3
.LBB9_19:                               # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB9_21
	.p2align	4, , 16
.LBB9_20:                               # %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit
                                        #   in Loop: Header=BB9_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB9_23
.LBB9_21:                               # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB9_20
# %bb.22:                               #   in Loop: Header=BB9_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB9_20
.LBB9_23:                               # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB9_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB9_27
.LBB9_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB9_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB9_27:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI9_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI9_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB9_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end9:
	.size	_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc, .Lfunc_end9-_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI10_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB10_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB10_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s5, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB10_4
	.p2align	4, , 16
.LBB10_3:                               # %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB10_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB10_23
.LBB10_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_9 Depth 2
                                        #     Child Loop BB10_13 Depth 2
                                        #     Child Loop BB10_16 Depth 2
	bgeu	$s0, $a5, .LBB10_6
# %bb.5:                                #   in Loop: Header=BB10_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB10_15
	.p2align	4, , 16
.LBB10_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB10_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB10_8
# %bb.7:                                #   in Loop: Header=BB10_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB10_12
	.p2align	4, , 16
.LBB10_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB10_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB10_9:                               # %vector.body
                                        #   Parent Loop BB10_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.b	$vr0, $vr0, $vr4
	vsub.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB10_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB10_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB10_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB10_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB10_15
.LBB10_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB10_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB10_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB10_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB10_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB10_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB10_17
.LBB10_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB10_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB10_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB10_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB10_16
.LBB10_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB10_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s3
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB10_3
# %bb.18:                               #   in Loop: Header=BB10_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB10_3
.LBB10_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB10_21
	.p2align	4, , 16
.LBB10_20:                              # %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB10_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB10_23
.LBB10_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s3
	andi	$a0, $a0, 3
	beqz	$a0, .LBB10_20
# %bb.22:                               #   in Loop: Header=BB10_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB10_20
.LBB10_23:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB10_25
# %bb.24:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB10_27
.LBB10_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB10_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB10_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI10_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI10_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB10_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end10:
	.size	_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end10-_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
.LCPI11_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc: # @_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB11_23
# %bb.1:                                # %.preheader.lr.ph
	slli.d	$s7, $s0, 6
	blez	$s1, .LBB11_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$fp, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB11_4
	.p2align	4, , 16
.LBB11_3:                               # %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB11_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB11_23
.LBB11_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_9 Depth 2
                                        #     Child Loop BB11_13 Depth 2
                                        #     Child Loop BB11_16 Depth 2
	bgeu	$s1, $a5, .LBB11_6
# %bb.5:                                #   in Loop: Header=BB11_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB11_15
	.p2align	4, , 16
.LBB11_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB11_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB11_8
# %bb.7:                                #   in Loop: Header=BB11_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB11_12
	.p2align	4, , 16
.LBB11_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB11_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB11_9:                               # %vector.body
                                        #   Parent Loop BB11_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr2, $vr4
	vmadd.b	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB11_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB11_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB11_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB11_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB11_15
.LBB11_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB11_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB11_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB11_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr1, $vr5
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB11_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB11_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB11_17
.LBB11_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB11_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB11_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB11_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB11_16
.LBB11_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB11_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s7, $a2
	andi	$a2, $a2, 255
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB11_3
# %bb.18:                               #   in Loop: Header=BB11_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB11_3
.LBB11_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB11_21
	.p2align	4, , 16
.LBB11_20:                              # %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit
                                        #   in Loop: Header=BB11_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB11_23
.LBB11_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s7, $a0
	andi	$a0, $a0, 255
	beqz	$a0, .LBB11_20
# %bb.22:                               #   in Loop: Header=BB11_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB11_20
.LBB11_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB11_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB11_27
.LBB11_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB11_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB11_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI11_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI11_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB11_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end11:
	.size	_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc, .Lfunc_end11-_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI12_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s3, $a3
	move	$s2, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB12_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	slli.d	$s4, $a2, 6
	blez	$s0, .LBB12_19
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$fp, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $s5
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB12_4
	.p2align	4, , 16
.LBB12_3:                               # %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB12_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB12_23
.LBB12_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_9 Depth 2
                                        #     Child Loop BB12_13 Depth 2
                                        #     Child Loop BB12_16 Depth 2
	bgeu	$s0, $a5, .LBB12_6
# %bb.5:                                #   in Loop: Header=BB12_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB12_15
	.p2align	4, , 16
.LBB12_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB12_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB12_8
# %bb.7:                                #   in Loop: Header=BB12_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB12_12
	.p2align	4, , 16
.LBB12_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB12_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB12_9:                               # %vector.body
                                        #   Parent Loop BB12_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr4, $vr2
	vmadd.b	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB12_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB12_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB12_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB12_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB12_15
.LBB12_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB12_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB12_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB12_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr5, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB12_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB12_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB12_17
.LBB12_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB12_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB12_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB12_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB12_16
.LBB12_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB12_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s4, $a2
	andi	$a2, $a2, 255
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB12_3
# %bb.18:                               #   in Loop: Header=BB12_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB12_3
.LBB12_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB12_21
	.p2align	4, , 16
.LBB12_20:                              # %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB12_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB12_23
.LBB12_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s4, $a0
	andi	$a0, $a0, 255
	beqz	$a0, .LBB12_20
# %bb.22:                               #   in Loop: Header=BB12_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB12_20
.LBB12_23:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB12_25
# %bb.24:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB12_27
.LBB12_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB12_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB12_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI12_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI12_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB12_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end12:
	.size	_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end12-_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
.LCPI13_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB13_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$s4, $a2, $s3
	blez	$s0, .LBB13_19
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$fp, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $s5
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB13_4
	.p2align	4, , 16
.LBB13_3:                               # %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB13_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB13_23
.LBB13_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_9 Depth 2
                                        #     Child Loop BB13_13 Depth 2
                                        #     Child Loop BB13_16 Depth 2
	bgeu	$s0, $a5, .LBB13_6
# %bb.5:                                #   in Loop: Header=BB13_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB13_15
	.p2align	4, , 16
.LBB13_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB13_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB13_8
# %bb.7:                                #   in Loop: Header=BB13_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB13_12
	.p2align	4, , 16
.LBB13_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB13_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB13_9:                               # %vector.body
                                        #   Parent Loop BB13_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB13_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB13_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB13_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB13_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB13_15
.LBB13_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB13_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB13_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB13_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB13_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB13_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB13_17
.LBB13_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB13_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB13_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB13_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB13_16
.LBB13_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB13_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB13_3
# %bb.18:                               #   in Loop: Header=BB13_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB13_3
.LBB13_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB13_21
	.p2align	4, , 16
.LBB13_20:                              # %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB13_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB13_23
.LBB13_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s4, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB13_20
# %bb.22:                               #   in Loop: Header=BB13_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB13_20
.LBB13_23:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB13_25
# %bb.24:                               # %._crit_edge26
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB13_27
.LBB13_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB13_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB13_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI13_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI13_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB13_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end13:
	.size	_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end13-_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
.LCPI14_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc: # @_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB14_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB14_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.h	$vr6, $s0
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$fp, $a0, 4
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 16
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vst	$vr6, $sp, 48                   # 16-byte Folded Spill
	b	.LBB14_4
	.p2align	4, , 16
.LBB14_3:                               # %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB14_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB14_23
.LBB14_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_12 Depth 2
                                        #     Child Loop BB14_9 Depth 2
                                        #     Child Loop BB14_16 Depth 2
	bgeu	$s1, $a5, .LBB14_6
# %bb.5:                                #   in Loop: Header=BB14_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB14_15
	.p2align	4, , 16
.LBB14_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB14_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB14_11
# %bb.7:                                #   in Loop: Header=BB14_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
.LBB14_8:                               # %vec.epilog.ph
                                        #   in Loop: Header=BB14_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB14_9:                               # %vec.epilog.vector.body
                                        #   Parent Loop BB14_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr1, $a2, 0
	vilvh.b	$vr2, $vr1, $vr1
	vslli.h	$vr2, $vr2, 8
	vsrai.h	$vr2, $vr2, 8
	vilvl.b	$vr1, $vr1, $vr1
	vslli.h	$vr1, $vr1, 8
	vsrai.h	$vr1, $vr1, 8
	vdiv.h	$vr1, $vr1, $vr6
	vdiv.h	$vr2, $vr2, $vr6
	vpickev.b	$vr1, $vr2, $vr1
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 16
	addi.d	$a2, $a2, 16
	bnez	$a0, .LBB14_9
# %bb.10:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB14_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	bne	$fp, $s1, .LBB14_15
	b	.LBB14_17
	.p2align	4, , 16
.LBB14_11:                              # %vector.body.preheader
                                        #   in Loop: Header=BB14_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB14_12:                              # %vector.body
                                        #   Parent Loop BB14_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vilvh.b	$vr4, $vr2, $vr2
	vslli.h	$vr4, $vr4, 8
	vsrai.h	$vr4, $vr4, 8
	vilvl.b	$vr2, $vr2, $vr2
	vslli.h	$vr2, $vr2, 8
	vsrai.h	$vr2, $vr2, 8
	vilvh.b	$vr5, $vr3, $vr3
	vslli.h	$vr5, $vr5, 8
	vsrai.h	$vr5, $vr5, 8
	vilvl.b	$vr3, $vr3, $vr3
	vslli.h	$vr3, $vr3, 8
	vsrai.h	$vr3, $vr3, 8
	vdiv.h	$vr2, $vr2, $vr6
	vdiv.h	$vr4, $vr4, $vr6
	vdiv.h	$vr3, $vr3, $vr6
	vdiv.h	$vr5, $vr5, $vr6
	vpickev.b	$vr2, $vr4, $vr2
	vpickev.b	$vr3, $vr5, $vr3
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB14_12
# %bb.13:                               # %middle.block
                                        #   in Loop: Header=BB14_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB14_17
# %bb.14:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB14_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	bnez	$a4, .LBB14_8
	.p2align	4, , 16
.LBB14_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB14_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB14_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB14_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	div.d	$a4, $a4, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB14_16
.LBB14_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB14_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.d	$a2, $a2, $s0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB14_3
# %bb.18:                               #   in Loop: Header=BB14_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 16
	vld	$vr6, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB14_3
.LBB14_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB14_21
	.p2align	4, , 16
.LBB14_20:                              # %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit
                                        #   in Loop: Header=BB14_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB14_23
.LBB14_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.d	$a0, $a0, $s0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB14_20
# %bb.22:                               #   in Loop: Header=BB14_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB14_20
.LBB14_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB14_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB14_27
.LBB14_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB14_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB14_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI14_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI14_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB14_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end14:
	.size	_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc, .Lfunc_end14-_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI15_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s5, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$fp, %pc_hi20(iterations)
	ld.w	$a1, $fp, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	blez	$a1, .LBB15_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB15_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$s8, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	move	$s7, $zero
	b	.LBB15_4
	.p2align	4, , 16
.LBB15_3:                               # %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB15_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB15_17
.LBB15_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_7 Depth 2
                                        #     Child Loop BB15_10 Depth 2
	bne	$s4, $a7, .LBB15_6
# %bb.5:                                #   in Loop: Header=BB15_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB15_9
	.p2align	4, , 16
.LBB15_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB15_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	addi.d	$a4, $s5, 1
	.p2align	4, , 16
.LBB15_7:                               # %vector.body
                                        #   Parent Loop BB15_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a5, $a4, -1
	ld.b	$a6, $a4, 0
	div.d	$a5, $a5, $s3
	ext.w.h	$a5, $a5
	div.d	$a6, $a6, $s3
	ext.w.h	$a6, $a6
	div.d	$a5, $a5, $s2
	ext.w.h	$a5, $a5
	div.d	$a6, $a6, $s2
	ext.w.h	$a6, $a6
	div.d	$a5, $a5, $s1
	ext.w.h	$a5, $a5
	div.d	$a6, $a6, $s1
	ext.w.h	$a6, $a6
	div.d	$a5, $a5, $s0
	div.d	$a6, $a6, $s0
	add.d	$a0, $a0, $a5
	add.d	$a2, $a2, $a6
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 2
	bnez	$a3, .LBB15_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB15_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s8
	beq	$s8, $s4, .LBB15_11
.LBB15_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB15_4 Depth=1
	add.d	$a2, $s5, $a3
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB15_10:                              # %scalar.ph
                                        #   Parent Loop BB15_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	div.d	$a4, $a4, $s3
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s2
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s1
	ext.w.h	$a4, $a4
	div.d	$a4, $a4, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB15_10
.LBB15_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB15_4 Depth=1
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.d	$a2, $a2, $s3
	ext.w.h	$a2, $a2
	div.d	$a2, $a2, $s2
	ext.w.h	$a2, $a2
	div.d	$a2, $a2, $s1
	ext.w.h	$a2, $a2
	div.d	$a2, $a2, $s0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB15_3
# %bb.12:                               #   in Loop: Header=BB15_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.w	$a1, $fp, %pc_lo12(iterations)
	b	.LBB15_3
.LBB15_13:                              # %.preheader.preheader
	pcalau12i	$s5, %pc_hi20(init_value)
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	b	.LBB15_15
	.p2align	4, , 16
.LBB15_14:                              # %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB15_15 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB15_17
.LBB15_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s2
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s1
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB15_14
# %bb.16:                               #   in Loop: Header=BB15_15 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ld.w	$a1, $fp, %pc_lo12(iterations)
	b	.LBB15_14
.LBB15_17:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	beqz	$a2, .LBB15_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB15_21
.LBB15_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB15_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB15_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI15_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI15_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB15_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end15:
	.size	_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end15-_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
.LCPI16_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB16_23
# %bb.1:                                # %.preheader.lr.ph
	div.d	$a0, $s5, $s4
	ext.w.h	$a0, $a0
	div.d	$a0, $a0, $s3
	ext.w.h	$a0, $a0
	div.d	$s3, $a0, $s2
	blez	$s0, .LBB16_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s5, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB16_4
	.p2align	4, , 16
.LBB16_3:                               # %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB16_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB16_23
.LBB16_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_9 Depth 2
                                        #     Child Loop BB16_13 Depth 2
                                        #     Child Loop BB16_16 Depth 2
	bgeu	$s0, $a5, .LBB16_6
# %bb.5:                                #   in Loop: Header=BB16_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB16_15
	.p2align	4, , 16
.LBB16_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB16_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB16_8
# %bb.7:                                #   in Loop: Header=BB16_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB16_12
	.p2align	4, , 16
.LBB16_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB16_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB16_9:                               # %vector.body
                                        #   Parent Loop BB16_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB16_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB16_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB16_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB16_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB16_15
.LBB16_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB16_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB16_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB16_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr1, $vr0
	vadd.b	$vr0, $vr0, $vr5
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB16_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB16_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB16_17
.LBB16_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB16_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB16_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB16_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB16_16
.LBB16_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB16_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB16_3
# %bb.18:                               #   in Loop: Header=BB16_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB16_3
.LBB16_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB16_21
	.p2align	4, , 16
.LBB16_20:                              # %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB16_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB16_23
.LBB16_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB16_20
# %bb.22:                               #   in Loop: Header=BB16_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB16_20
.LBB16_23:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB16_25
# %bb.24:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB16_27
.LBB16_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB16_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB16_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI16_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI16_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB16_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end16:
	.size	_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end16-_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI17_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB17_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s4, $s5
	div.d	$s5, $a0, $s3
	sub.d	$s4, $s0, $s5
	blez	$s1, .LBB17_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$fp, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	vreplgr2vr.b	$vr5, $s5
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$a0, $a0, 3
	vinsgr2vr.b	$vr6, $s0, 0
	vinsgr2vr.b	$vr6, $s0, 1
	vinsgr2vr.b	$vr6, $s0, 2
	vinsgr2vr.b	$vr6, $s0, 3
	vinsgr2vr.b	$vr6, $s0, 4
	vinsgr2vr.b	$vr6, $s0, 5
	vinsgr2vr.b	$vr6, $s0, 6
	vinsgr2vr.b	$vr6, $s0, 7
	vinsgr2vr.b	$vr7, $s5, 0
	vinsgr2vr.b	$vr7, $s5, 1
	vinsgr2vr.b	$vr7, $s5, 2
	vinsgr2vr.b	$vr7, $s5, 3
	vinsgr2vr.b	$vr7, $s5, 4
	vinsgr2vr.b	$vr7, $s5, 5
	vinsgr2vr.b	$vr7, $s5, 6
	vinsgr2vr.b	$vr7, $s5, 7
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	sub.d	$a0, $zero, $a0
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s3, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 128                  # 16-byte Folded Spill
	vst	$vr4, $sp, 112                  # 16-byte Folded Spill
	vst	$vr5, $sp, 96                   # 16-byte Folded Spill
	vst	$vr6, $sp, 80                   # 16-byte Folded Spill
	vst	$vr7, $sp, 64                   # 16-byte Folded Spill
	b	.LBB17_4
	.p2align	4, , 16
.LBB17_3:                               # %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB17_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB17_23
.LBB17_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_9 Depth 2
                                        #     Child Loop BB17_13 Depth 2
                                        #     Child Loop BB17_16 Depth 2
	bgeu	$s1, $a5, .LBB17_6
# %bb.5:                                #   in Loop: Header=BB17_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB17_15
	.p2align	4, , 16
.LBB17_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB17_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB17_8
# %bb.7:                                #   in Loop: Header=BB17_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB17_12
	.p2align	4, , 16
.LBB17_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB17_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 128                  # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB17_9:                               # %vector.body
                                        #   Parent Loop BB17_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	vsub.b	$vr0, $vr0, $vr5
	vsub.b	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB17_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB17_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB17_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB17_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB17_15
.LBB17_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB17_4 Depth=1
	vld	$vr0, $sp, 128                  # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB17_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB17_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr6
	vadd.b	$vr0, $vr0, $vr1
	vsub.b	$vr0, $vr0, $vr7
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB17_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB17_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	move	$a3, $a2
	beq	$a2, $s1, .LBB17_17
.LBB17_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB17_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB17_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB17_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB17_16
.LBB17_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB17_4 Depth=1
	fld.d	$fa0, $s3, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB17_3
# %bb.18:                               #   in Loop: Header=BB17_4 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr7, $sp, 64                   # 16-byte Folded Reload
	vld	$vr6, $sp, 80                   # 16-byte Folded Reload
	vld	$vr5, $sp, 96                   # 16-byte Folded Reload
	vld	$vr4, $sp, 112                  # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB17_3
.LBB17_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB17_21
	.p2align	4, , 16
.LBB17_20:                              # %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB17_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB17_23
.LBB17_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s4, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB17_20
# %bb.22:                               #   in Loop: Header=BB17_21 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB17_20
.LBB17_23:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB17_25
# %bb.24:                               # %._crit_edge22
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB17_27
.LBB17_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB17_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB17_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI17_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI17_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB17_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end17:
	.size	_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end17-_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
.LCPI18_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc: # @_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB18_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB18_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB18_4
	.p2align	4, , 16
.LBB18_3:                               # %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB18_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB18_23
.LBB18_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_9 Depth 2
                                        #     Child Loop BB18_13 Depth 2
                                        #     Child Loop BB18_16 Depth 2
	bgeu	$s1, $a5, .LBB18_6
# %bb.5:                                #   in Loop: Header=BB18_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB18_15
	.p2align	4, , 16
.LBB18_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB18_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB18_8
# %bb.7:                                #   in Loop: Header=BB18_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB18_12
	.p2align	4, , 16
.LBB18_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB18_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB18_9:                               # %vector.body
                                        #   Parent Loop BB18_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB18_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB18_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB18_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB18_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB18_15
.LBB18_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB18_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB18_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB18_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr5
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB18_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB18_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB18_17
.LBB18_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB18_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB18_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB18_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB18_16
.LBB18_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB18_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB18_3
# %bb.18:                               #   in Loop: Header=BB18_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB18_3
.LBB18_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	andi	$s1, $s0, 3
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB18_21
	.p2align	4, , 16
.LBB18_20:                              # %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit
                                        #   in Loop: Header=BB18_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB18_23
.LBB18_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $s1, $a0
	beqz	$a0, .LBB18_20
# %bb.22:                               #   in Loop: Header=BB18_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB18_20
.LBB18_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB18_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB18_27
.LBB18_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB18_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB18_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI18_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI18_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB18_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc, .Lfunc_end18-_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI19_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB19_23
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s4, $s2
	and	$a0, $s5, $a0
	and	$fp, $a0, $s3
	blez	$s0, .LBB19_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	move	$a3, $s2
	slli.d	$s2, $a0, 5
	vinsgr2vr.b	$vr0, $s4, 0
	vinsgr2vr.b	$vr1, $a3, 0
	vinsgr2vr.b	$vr2, $s5, 0
	vinsgr2vr.b	$vr3, $s3, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.b	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 3
	move	$a2, $s3
	slli.d	$s3, $a0, 3
	and	$a0, $a3, $s4
	and	$a0, $s5, $a0
	and	$s4, $a2, $a0
	vinsgr2vr.b	$vr5, $s4, 0
	vinsgr2vr.b	$vr5, $s4, 1
	vinsgr2vr.b	$vr5, $s4, 2
	vinsgr2vr.b	$vr5, $s4, 3
	vinsgr2vr.b	$vr5, $s4, 4
	vinsgr2vr.b	$vr5, $s4, 5
	vinsgr2vr.b	$vr5, $s4, 6
	vinsgr2vr.b	$vr5, $s4, 7
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB19_4
	.p2align	4, , 16
.LBB19_3:                               # %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB19_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB19_23
.LBB19_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_9 Depth 2
                                        #     Child Loop BB19_13 Depth 2
                                        #     Child Loop BB19_16 Depth 2
	bgeu	$s0, $a5, .LBB19_6
# %bb.5:                                #   in Loop: Header=BB19_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB19_15
	.p2align	4, , 16
.LBB19_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB19_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB19_8
# %bb.7:                                #   in Loop: Header=BB19_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB19_12
	.p2align	4, , 16
.LBB19_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB19_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB19_9:                               # %vector.body
                                        #   Parent Loop BB19_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB19_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB19_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB19_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB19_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB19_15
.LBB19_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB19_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB19_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB19_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr5, $vr1
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB19_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB19_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB19_17
.LBB19_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB19_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB19_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB19_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	and	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB19_16
.LBB19_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB19_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $fp, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB19_3
# %bb.18:                               #   in Loop: Header=BB19_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB19_3
.LBB19_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	andi	$fp, $fp, 3
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB19_21
	.p2align	4, , 16
.LBB19_20:                              # %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB19_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB19_23
.LBB19_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $fp, $a0
	beqz	$a0, .LBB19_20
# %bb.22:                               #   in Loop: Header=BB19_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB19_20
.LBB19_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB19_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB19_27
.LBB19_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB19_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB19_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI19_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI19_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB19_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end19:
	.size	_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end19-_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
.LCPI20_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc: # @_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB20_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB20_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB20_4
	.p2align	4, , 16
.LBB20_3:                               # %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB20_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB20_23
.LBB20_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_9 Depth 2
                                        #     Child Loop BB20_13 Depth 2
                                        #     Child Loop BB20_16 Depth 2
	bgeu	$s1, $a5, .LBB20_6
# %bb.5:                                #   in Loop: Header=BB20_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB20_15
	.p2align	4, , 16
.LBB20_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB20_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB20_8
# %bb.7:                                #   in Loop: Header=BB20_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB20_12
	.p2align	4, , 16
.LBB20_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB20_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB20_9:                               # %vector.body
                                        #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB20_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB20_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB20_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB20_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB20_15
.LBB20_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB20_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB20_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr5
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB20_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB20_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB20_17
.LBB20_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB20_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB20_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB20_16
.LBB20_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB20_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB20_3
# %bb.18:                               #   in Loop: Header=BB20_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB20_3
.LBB20_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB20_21
	.p2align	4, , 16
.LBB20_20:                              # %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit
                                        #   in Loop: Header=BB20_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB20_23
.LBB20_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $s0, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB20_20
# %bb.22:                               #   in Loop: Header=BB20_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB20_20
.LBB20_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB20_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB20_27
.LBB20_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB20_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB20_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI20_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI20_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB20_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end20:
	.size	_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc, .Lfunc_end20-_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI21_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB21_23
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s4, $s2
	or	$a0, $s5, $a0
	or	$fp, $a0, $s3
	blez	$s0, .LBB21_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	move	$a3, $s2
	slli.d	$s2, $a0, 5
	vinsgr2vr.b	$vr0, $s4, 0
	vinsgr2vr.b	$vr1, $a3, 0
	vinsgr2vr.b	$vr2, $s5, 0
	vinsgr2vr.b	$vr3, $s3, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.b	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 3
	move	$a2, $s3
	slli.d	$s3, $a0, 3
	or	$a0, $a3, $s4
	or	$a0, $s5, $a0
	or	$s4, $a2, $a0
	vinsgr2vr.b	$vr5, $s4, 0
	vinsgr2vr.b	$vr5, $s4, 1
	vinsgr2vr.b	$vr5, $s4, 2
	vinsgr2vr.b	$vr5, $s4, 3
	vinsgr2vr.b	$vr5, $s4, 4
	vinsgr2vr.b	$vr5, $s4, 5
	vinsgr2vr.b	$vr5, $s4, 6
	vinsgr2vr.b	$vr5, $s4, 7
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB21_4
	.p2align	4, , 16
.LBB21_3:                               # %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB21_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB21_23
.LBB21_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_9 Depth 2
                                        #     Child Loop BB21_13 Depth 2
                                        #     Child Loop BB21_16 Depth 2
	bgeu	$s0, $a5, .LBB21_6
# %bb.5:                                #   in Loop: Header=BB21_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB21_15
	.p2align	4, , 16
.LBB21_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB21_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB21_8
# %bb.7:                                #   in Loop: Header=BB21_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB21_12
	.p2align	4, , 16
.LBB21_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB21_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB21_9:                               # %vector.body
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB21_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB21_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB21_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB21_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB21_15
.LBB21_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB21_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB21_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr5, $vr1
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB21_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB21_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB21_17
.LBB21_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB21_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB21_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB21_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	or	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB21_16
.LBB21_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB21_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $fp, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB21_3
# %bb.18:                               #   in Loop: Header=BB21_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB21_3
.LBB21_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB21_21
	.p2align	4, , 16
.LBB21_20:                              # %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB21_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB21_23
.LBB21_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $fp, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB21_20
# %bb.22:                               #   in Loop: Header=BB21_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB21_20
.LBB21_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB21_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB21_27
.LBB21_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB21_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB21_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI21_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI21_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB21_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end21:
	.size	_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end21-_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
.LCPI22_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc: # @_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB22_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB22_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB22_4
	.p2align	4, , 16
.LBB22_3:                               # %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us
                                        #   in Loop: Header=BB22_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB22_23
.LBB22_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_9 Depth 2
                                        #     Child Loop BB22_13 Depth 2
                                        #     Child Loop BB22_16 Depth 2
	bgeu	$s1, $a5, .LBB22_6
# %bb.5:                                #   in Loop: Header=BB22_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB22_15
	.p2align	4, , 16
.LBB22_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB22_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB22_8
# %bb.7:                                #   in Loop: Header=BB22_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB22_12
	.p2align	4, , 16
.LBB22_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB22_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB22_9:                               # %vector.body
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB22_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB22_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB22_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB22_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB22_15
.LBB22_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB22_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB22_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr5
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB22_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB22_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB22_17
.LBB22_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB22_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB22_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB22_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB22_16
.LBB22_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB22_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB22_3
# %bb.18:                               #   in Loop: Header=BB22_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB22_3
.LBB22_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB22_21
	.p2align	4, , 16
.LBB22_20:                              # %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit
                                        #   in Loop: Header=BB22_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB22_23
.LBB22_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $s0, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB22_20
# %bb.22:                               #   in Loop: Header=BB22_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB22_20
.LBB22_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB22_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB22_27
.LBB22_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB22_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB22_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI22_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI22_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB22_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end22:
	.size	_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc, .Lfunc_end22-_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
.LCPI23_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB23_23
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s4, $s2
	xor	$a0, $s5, $a0
	xor	$fp, $a0, $s3
	blez	$s0, .LBB23_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	move	$a3, $s2
	slli.d	$s2, $a0, 5
	vinsgr2vr.b	$vr0, $s4, 0
	vinsgr2vr.b	$vr1, $a3, 0
	vinsgr2vr.b	$vr2, $s5, 0
	vinsgr2vr.b	$vr3, $s3, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.b	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 3
	move	$a2, $s3
	slli.d	$s3, $a0, 3
	xor	$a0, $a3, $s4
	xor	$a0, $s5, $a0
	xor	$s4, $a2, $a0
	vinsgr2vr.b	$vr5, $s4, 0
	vinsgr2vr.b	$vr5, $s4, 1
	vinsgr2vr.b	$vr5, $s4, 2
	vinsgr2vr.b	$vr5, $s4, 3
	vinsgr2vr.b	$vr5, $s4, 4
	vinsgr2vr.b	$vr5, $s4, 5
	vinsgr2vr.b	$vr5, $s4, 6
	vinsgr2vr.b	$vr5, $s4, 7
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB23_4
	.p2align	4, , 16
.LBB23_3:                               # %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB23_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB23_23
.LBB23_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_9 Depth 2
                                        #     Child Loop BB23_13 Depth 2
                                        #     Child Loop BB23_16 Depth 2
	bgeu	$s0, $a5, .LBB23_6
# %bb.5:                                #   in Loop: Header=BB23_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB23_15
	.p2align	4, , 16
.LBB23_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB23_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB23_8
# %bb.7:                                #   in Loop: Header=BB23_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB23_12
	.p2align	4, , 16
.LBB23_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB23_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB23_9:                               # %vector.body
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB23_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB23_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB23_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB23_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB23_15
.LBB23_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB23_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB23_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr5, $vr1
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB23_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB23_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB23_17
.LBB23_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB23_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB23_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB23_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xor	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB23_16
.LBB23_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB23_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $fp, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB23_3
# %bb.18:                               #   in Loop: Header=BB23_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB23_3
.LBB23_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB23_21
	.p2align	4, , 16
.LBB23_20:                              # %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB23_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB23_23
.LBB23_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $fp, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB23_20
# %bb.22:                               #   in Loop: Header=BB23_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB23_20
.LBB23_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB23_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB23_27
.LBB23_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB23_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB23_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI23_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI23_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB23_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end23:
	.size	_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end23-_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
.LCPI24_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc: # @_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB24_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB24_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB24_4
	.p2align	4, , 16
.LBB24_3:                               # %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB24_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB24_23
.LBB24_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_9 Depth 2
                                        #     Child Loop BB24_13 Depth 2
                                        #     Child Loop BB24_16 Depth 2
	bgeu	$s1, $a5, .LBB24_6
# %bb.5:                                #   in Loop: Header=BB24_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB24_15
	.p2align	4, , 16
.LBB24_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB24_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB24_8
# %bb.7:                                #   in Loop: Header=BB24_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB24_12
	.p2align	4, , 16
.LBB24_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB24_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB24_9:                               # %vector.body
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB24_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB24_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB24_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB24_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB24_15
.LBB24_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB24_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB24_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB24_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB24_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB24_17
.LBB24_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB24_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB24_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB24_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB24_16
.LBB24_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB24_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB24_3
# %bb.18:                               #   in Loop: Header=BB24_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB24_3
.LBB24_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB24_21
	.p2align	4, , 16
.LBB24_20:                              # %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit
                                        #   in Loop: Header=BB24_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB24_23
.LBB24_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB24_20
# %bb.22:                               #   in Loop: Header=BB24_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB24_20
.LBB24_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB24_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB24_27
.LBB24_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB24_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB24_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI24_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI24_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB24_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end24:
	.size	_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc, .Lfunc_end24-_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
.LCPI25_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB25_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$s7, $s0, $s1
	blez	$s1, .LBB25_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$fp, $a0, 5
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB25_4
	.p2align	4, , 16
.LBB25_3:                               # %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB25_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB25_23
.LBB25_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_9 Depth 2
                                        #     Child Loop BB25_13 Depth 2
                                        #     Child Loop BB25_16 Depth 2
	bgeu	$s1, $a5, .LBB25_6
# %bb.5:                                #   in Loop: Header=BB25_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB25_15
	.p2align	4, , 16
.LBB25_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB25_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB25_8
# %bb.7:                                #   in Loop: Header=BB25_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB25_12
	.p2align	4, , 16
.LBB25_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB25_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB25_9:                               # %vector.body
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB25_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB25_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB25_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB25_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB25_15
.LBB25_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB25_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB25_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB25_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB25_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB25_17
.LBB25_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB25_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB25_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB25_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB25_16
.LBB25_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB25_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	add.d	$a0, $a0, $s7
	andi	$a0, $a0, 255
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	beq	$a0, $a2, .LBB25_3
# %bb.18:                               #   in Loop: Header=BB25_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB25_3
.LBB25_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	andi	$s2, $s7, 255
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB25_21
	.p2align	4, , 16
.LBB25_20:                              # %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit
                                        #   in Loop: Header=BB25_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB25_23
.LBB25_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	slli.d	$a0, $a0, 6
	andi	$a0, $a0, 192
	beq	$s2, $a0, .LBB25_20
# %bb.22:                               #   in Loop: Header=BB25_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB25_20
.LBB25_23:                              # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB25_25
# %bb.24:                               # %._crit_edge19
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB25_27
.LBB25_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB25_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB25_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI25_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI25_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB25_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end25:
	.size	_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc, .Lfunc_end25-_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI26_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB26_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB26_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s5, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB26_4
	.p2align	4, , 16
.LBB26_3:                               # %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB26_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB26_23
.LBB26_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_9 Depth 2
                                        #     Child Loop BB26_13 Depth 2
                                        #     Child Loop BB26_16 Depth 2
	bgeu	$s0, $a5, .LBB26_6
# %bb.5:                                #   in Loop: Header=BB26_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB26_15
	.p2align	4, , 16
.LBB26_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB26_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB26_8
# %bb.7:                                #   in Loop: Header=BB26_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB26_12
	.p2align	4, , 16
.LBB26_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB26_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB26_9:                               # %vector.body
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr4, $vr0
	vadd.b	$vr1, $vr4, $vr1
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB26_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB26_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB26_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB26_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB26_15
.LBB26_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB26_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB26_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr5, $vr0
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB26_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB26_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB26_17
.LBB26_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB26_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB26_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB26_16
.LBB26_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB26_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB26_3
# %bb.18:                               #   in Loop: Header=BB26_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB26_3
.LBB26_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB26_21
	.p2align	4, , 16
.LBB26_20:                              # %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB26_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB26_23
.LBB26_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB26_20
# %bb.22:                               #   in Loop: Header=BB26_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB26_20
.LBB26_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB26_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB26_27
.LBB26_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB26_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB26_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI26_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI26_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB26_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end26:
	.size	_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end26-_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
.LCPI27_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc: # @_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB27_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB27_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB27_4
	.p2align	4, , 16
.LBB27_3:                               # %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB27_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB27_23
.LBB27_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_9 Depth 2
                                        #     Child Loop BB27_13 Depth 2
                                        #     Child Loop BB27_16 Depth 2
	bgeu	$s1, $a5, .LBB27_6
# %bb.5:                                #   in Loop: Header=BB27_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB27_15
	.p2align	4, , 16
.LBB27_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB27_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB27_8
# %bb.7:                                #   in Loop: Header=BB27_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB27_12
	.p2align	4, , 16
.LBB27_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB27_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB27_9:                               # %vector.body
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.b	$vr0, $vr0, $vr4
	vsub.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB27_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB27_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB27_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB27_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB27_15
.LBB27_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB27_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB27_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB27_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB27_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB27_17
.LBB27_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB27_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB27_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB27_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB27_16
.LBB27_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB27_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB27_3
# %bb.18:                               #   in Loop: Header=BB27_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB27_3
.LBB27_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB27_21
	.p2align	4, , 16
.LBB27_20:                              # %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit
                                        #   in Loop: Header=BB27_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB27_23
.LBB27_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB27_20
# %bb.22:                               #   in Loop: Header=BB27_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB27_20
.LBB27_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB27_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB27_27
.LBB27_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB27_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB27_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI27_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI27_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB27_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end27:
	.size	_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc, .Lfunc_end27-_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI28_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB28_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB28_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s5, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB28_4
	.p2align	4, , 16
.LBB28_3:                               # %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB28_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB28_23
.LBB28_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_9 Depth 2
                                        #     Child Loop BB28_13 Depth 2
                                        #     Child Loop BB28_16 Depth 2
	bgeu	$s0, $a5, .LBB28_6
# %bb.5:                                #   in Loop: Header=BB28_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB28_15
	.p2align	4, , 16
.LBB28_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB28_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB28_8
# %bb.7:                                #   in Loop: Header=BB28_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB28_12
	.p2align	4, , 16
.LBB28_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB28_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB28_9:                               # %vector.body
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.b	$vr0, $vr0, $vr4
	vsub.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB28_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB28_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB28_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB28_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB28_15
.LBB28_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB28_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB28_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB28_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB28_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB28_17
.LBB28_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB28_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB28_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB28_16
.LBB28_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB28_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s3
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB28_3
# %bb.18:                               #   in Loop: Header=BB28_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB28_3
.LBB28_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB28_21
	.p2align	4, , 16
.LBB28_20:                              # %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB28_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB28_23
.LBB28_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s3
	andi	$a0, $a0, 3
	beqz	$a0, .LBB28_20
# %bb.22:                               #   in Loop: Header=BB28_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB28_20
.LBB28_23:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB28_25
# %bb.24:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB28_27
.LBB28_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB28_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB28_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI28_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI28_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB28_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end28:
	.size	_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end28-_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
.LCPI29_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc: # @_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB29_23
# %bb.1:                                # %.preheader.lr.ph
	slli.d	$s7, $s0, 6
	blez	$s1, .LBB29_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$fp, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB29_4
	.p2align	4, , 16
.LBB29_3:                               # %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB29_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB29_23
.LBB29_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_9 Depth 2
                                        #     Child Loop BB29_13 Depth 2
                                        #     Child Loop BB29_16 Depth 2
	bgeu	$s1, $a5, .LBB29_6
# %bb.5:                                #   in Loop: Header=BB29_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB29_15
	.p2align	4, , 16
.LBB29_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB29_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB29_8
# %bb.7:                                #   in Loop: Header=BB29_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB29_12
	.p2align	4, , 16
.LBB29_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB29_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB29_9:                               # %vector.body
                                        #   Parent Loop BB29_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr2, $vr4
	vmadd.b	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB29_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB29_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB29_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB29_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB29_15
.LBB29_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB29_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB29_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB29_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr1, $vr5
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB29_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB29_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB29_17
.LBB29_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB29_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB29_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB29_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB29_16
.LBB29_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB29_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s7, $a2
	andi	$a2, $a2, 255
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB29_3
# %bb.18:                               #   in Loop: Header=BB29_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB29_3
.LBB29_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB29_21
	.p2align	4, , 16
.LBB29_20:                              # %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit
                                        #   in Loop: Header=BB29_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB29_23
.LBB29_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s7, $a0
	andi	$a0, $a0, 255
	beqz	$a0, .LBB29_20
# %bb.22:                               #   in Loop: Header=BB29_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB29_20
.LBB29_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB29_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB29_27
.LBB29_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB29_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB29_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI29_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI29_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB29_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end29:
	.size	_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc, .Lfunc_end29-_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI30_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s3, $a3
	move	$s2, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB30_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	slli.d	$s4, $a2, 6
	blez	$s0, .LBB30_19
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$fp, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $s5
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB30_4
	.p2align	4, , 16
.LBB30_3:                               # %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB30_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB30_23
.LBB30_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_9 Depth 2
                                        #     Child Loop BB30_13 Depth 2
                                        #     Child Loop BB30_16 Depth 2
	bgeu	$s0, $a5, .LBB30_6
# %bb.5:                                #   in Loop: Header=BB30_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB30_15
	.p2align	4, , 16
.LBB30_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB30_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB30_8
# %bb.7:                                #   in Loop: Header=BB30_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB30_12
	.p2align	4, , 16
.LBB30_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB30_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB30_9:                               # %vector.body
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.b	$vr0, $vr4, $vr2
	vmadd.b	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB30_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB30_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB30_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB30_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB30_15
.LBB30_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB30_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB30_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.b	$vr0, $vr5, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB30_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB30_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB30_17
.LBB30_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB30_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB30_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB30_16
.LBB30_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB30_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s4, $a2
	andi	$a2, $a2, 255
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB30_3
# %bb.18:                               #   in Loop: Header=BB30_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB30_3
.LBB30_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB30_21
	.p2align	4, , 16
.LBB30_20:                              # %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB30_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB30_23
.LBB30_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s4, $a0
	andi	$a0, $a0, 255
	beqz	$a0, .LBB30_20
# %bb.22:                               #   in Loop: Header=BB30_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB30_20
.LBB30_23:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB30_25
# %bb.24:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB30_27
.LBB30_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB30_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB30_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI30_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI30_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB30_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end30:
	.size	_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end30-_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
.LCPI31_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB31_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$s4, $a2, $s3
	blez	$s0, .LBB31_19
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$fp, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $s5
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB31_4
	.p2align	4, , 16
.LBB31_3:                               # %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB31_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB31_23
.LBB31_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_9 Depth 2
                                        #     Child Loop BB31_13 Depth 2
                                        #     Child Loop BB31_16 Depth 2
	bgeu	$s0, $a5, .LBB31_6
# %bb.5:                                #   in Loop: Header=BB31_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB31_15
	.p2align	4, , 16
.LBB31_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB31_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB31_8
# %bb.7:                                #   in Loop: Header=BB31_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB31_12
	.p2align	4, , 16
.LBB31_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB31_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB31_9:                               # %vector.body
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr0, $vr2
	vadd.b	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB31_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB31_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB31_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB31_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB31_15
.LBB31_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB31_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB31_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr0, $vr5
	vadd.b	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB31_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB31_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB31_17
.LBB31_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB31_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB31_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB31_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB31_16
.LBB31_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB31_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB31_3
# %bb.18:                               #   in Loop: Header=BB31_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB31_3
.LBB31_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB31_21
	.p2align	4, , 16
.LBB31_20:                              # %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB31_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB31_23
.LBB31_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s4, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB31_20
# %bb.22:                               #   in Loop: Header=BB31_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB31_20
.LBB31_23:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB31_25
# %bb.24:                               # %._crit_edge26
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB31_27
.LBB31_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB31_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB31_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI31_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI31_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB31_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end31:
	.size	_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end31-_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
.LCPI32_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc: # @_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB32_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB32_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 16
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$fp, $a0, 4
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 16
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB32_4
	.p2align	4, , 16
.LBB32_3:                               # %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB32_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB32_23
.LBB32_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_12 Depth 2
                                        #     Child Loop BB32_9 Depth 2
                                        #     Child Loop BB32_16 Depth 2
	bgeu	$s1, $a5, .LBB32_6
# %bb.5:                                #   in Loop: Header=BB32_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB32_15
	.p2align	4, , 16
.LBB32_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB32_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB32_11
# %bb.7:                                #   in Loop: Header=BB32_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
.LBB32_8:                               # %vec.epilog.ph
                                        #   in Loop: Header=BB32_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB32_9:                               # %vec.epilog.vector.body
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr1, $a2, 0
	vdiv.bu	$vr1, $vr1, $vr4
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 16
	addi.d	$a2, $a2, 16
	bnez	$a0, .LBB32_9
# %bb.10:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB32_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	bne	$fp, $s1, .LBB32_15
	b	.LBB32_17
	.p2align	4, , 16
.LBB32_11:                              # %vector.body.preheader
                                        #   in Loop: Header=BB32_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB32_12:                              # %vector.body
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vdiv.bu	$vr2, $vr2, $vr4
	vdiv.bu	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB32_12
# %bb.13:                               # %middle.block
                                        #   in Loop: Header=BB32_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB32_17
# %bb.14:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB32_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	bnez	$a4, .LBB32_8
	.p2align	4, , 16
.LBB32_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB32_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB32_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB32_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	div.du	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB32_16
.LBB32_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB32_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.du	$a2, $a2, $s0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB32_3
# %bb.18:                               #   in Loop: Header=BB32_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 16
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB32_3
.LBB32_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB32_21
	.p2align	4, , 16
.LBB32_20:                              # %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit
                                        #   in Loop: Header=BB32_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB32_23
.LBB32_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.du	$a0, $a0, $s0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB32_20
# %bb.22:                               #   in Loop: Header=BB32_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB32_20
.LBB32_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB32_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB32_27
.LBB32_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB32_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB32_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI32_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI32_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB32_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end32:
	.size	_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc, .Lfunc_end32-_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI33_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s5, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$fp, %pc_hi20(iterations)
	ld.w	$a1, $fp, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	blez	$a1, .LBB33_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB33_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$s8, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	move	$s7, $zero
	b	.LBB33_4
	.p2align	4, , 16
.LBB33_3:                               # %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB33_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB33_17
.LBB33_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_7 Depth 2
                                        #     Child Loop BB33_10 Depth 2
	bne	$s4, $a7, .LBB33_6
# %bb.5:                                #   in Loop: Header=BB33_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB33_9
	.p2align	4, , 16
.LBB33_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB33_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	addi.d	$a4, $s5, 1
	.p2align	4, , 16
.LBB33_7:                               # %vector.body
                                        #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a5, $a4, -1
	ld.bu	$a6, $a4, 0
	div.du	$a5, $a5, $s3
	div.du	$a6, $a6, $s3
	div.du	$a5, $a5, $s2
	div.du	$a6, $a6, $s2
	div.du	$a5, $a5, $s1
	div.du	$a6, $a6, $s1
	div.du	$a5, $a5, $s0
	div.du	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 2
	bnez	$a3, .LBB33_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB33_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s8
	beq	$s8, $s4, .LBB33_11
.LBB33_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB33_4 Depth=1
	add.d	$a2, $s5, $a3
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB33_10:                              # %scalar.ph
                                        #   Parent Loop BB33_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	div.du	$a4, $a4, $s3
	div.du	$a4, $a4, $s2
	div.du	$a4, $a4, $s1
	div.du	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB33_10
.LBB33_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB33_4 Depth=1
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.du	$a2, $a2, $s3
	div.du	$a2, $a2, $s2
	div.du	$a2, $a2, $s1
	div.du	$a2, $a2, $s0
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB33_3
# %bb.12:                               #   in Loop: Header=BB33_4 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.w	$a1, $fp, %pc_lo12(iterations)
	b	.LBB33_3
.LBB33_13:                              # %.preheader.preheader
	pcalau12i	$s5, %pc_hi20(init_value)
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	b	.LBB33_15
	.p2align	4, , 16
.LBB33_14:                              # %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB33_15 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB33_17
.LBB33_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.du	$a0, $a0, $s3
	div.du	$a0, $a0, $s2
	div.du	$a0, $a0, $s1
	div.du	$a0, $a0, $s0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB33_14
# %bb.16:                               #   in Loop: Header=BB33_15 Depth=1
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ld.w	$a1, $fp, %pc_lo12(iterations)
	b	.LBB33_14
.LBB33_17:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	beqz	$a2, .LBB33_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB33_21
.LBB33_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB33_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB33_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI33_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI33_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB33_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end33:
	.size	_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end33-_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
.LCPI34_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB34_23
# %bb.1:                                # %.preheader.lr.ph
	div.du	$a0, $s5, $s4
	div.du	$a0, $a0, $s3
	div.du	$s3, $a0, $s2
	blez	$s0, .LBB34_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s5, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB34_4
	.p2align	4, , 16
.LBB34_3:                               # %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB34_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB34_23
.LBB34_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_9 Depth 2
                                        #     Child Loop BB34_13 Depth 2
                                        #     Child Loop BB34_16 Depth 2
	bgeu	$s0, $a5, .LBB34_6
# %bb.5:                                #   in Loop: Header=BB34_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB34_15
	.p2align	4, , 16
.LBB34_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB34_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB34_8
# %bb.7:                                #   in Loop: Header=BB34_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB34_12
	.p2align	4, , 16
.LBB34_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB34_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB34_9:                               # %vector.body
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	vadd.b	$vr0, $vr0, $vr4
	vadd.b	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB34_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB34_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB34_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB34_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB34_15
.LBB34_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB34_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB34_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr0, $vr1, $vr0
	vadd.b	$vr0, $vr0, $vr5
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB34_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB34_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB34_17
.LBB34_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB34_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB34_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB34_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB34_16
.LBB34_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB34_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB34_3
# %bb.18:                               #   in Loop: Header=BB34_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB34_3
.LBB34_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB34_21
	.p2align	4, , 16
.LBB34_20:                              # %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB34_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB34_23
.LBB34_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB34_20
# %bb.22:                               #   in Loop: Header=BB34_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB34_20
.LBB34_23:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB34_25
# %bb.24:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB34_27
.LBB34_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB34_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB34_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI34_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI34_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB34_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end34:
	.size	_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end34-_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI35_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB35_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s4, $s5
	div.du	$a0, $a0, $s2
	sub.d	$s3, $s3, $a0
	blez	$s0, .LBB35_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	slli.d	$s5, $a0, 5
	vreplgr2vr.b	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s3, 0
	vinsgr2vr.b	$vr5, $s3, 1
	vinsgr2vr.b	$vr5, $s3, 2
	vinsgr2vr.b	$vr5, $s3, 3
	vinsgr2vr.b	$vr5, $s3, 4
	vinsgr2vr.b	$vr5, $s3, 5
	vinsgr2vr.b	$vr5, $s3, 6
	vinsgr2vr.b	$vr5, $s3, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB35_4
	.p2align	4, , 16
.LBB35_3:                               # %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB35_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB35_23
.LBB35_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_9 Depth 2
                                        #     Child Loop BB35_13 Depth 2
                                        #     Child Loop BB35_16 Depth 2
	bgeu	$s0, $a5, .LBB35_6
# %bb.5:                                #   in Loop: Header=BB35_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB35_15
	.p2align	4, , 16
.LBB35_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB35_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB35_8
# %bb.7:                                #   in Loop: Header=BB35_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB35_12
	.p2align	4, , 16
.LBB35_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB35_9:                               # %vector.body
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.b	$vr2, $vr4, $vr2
	vadd.b	$vr3, $vr4, $vr3
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB35_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB35_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB35_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB35_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB35_15
.LBB35_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB35_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB35_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.b	$vr1, $vr5, $vr1
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB35_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB35_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB35_17
.LBB35_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB35_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	add.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB35_16
.LBB35_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB35_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB35_3
# %bb.18:                               #   in Loop: Header=BB35_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB35_3
.LBB35_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB35_21
	.p2align	4, , 16
.LBB35_20:                              # %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB35_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB35_23
.LBB35_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB35_20
# %bb.22:                               #   in Loop: Header=BB35_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB35_20
.LBB35_23:                              # %._crit_edge23
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB35_25
# %bb.24:                               # %._crit_edge23
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB35_27
.LBB35_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB35_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB35_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI35_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI35_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB35_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end35:
	.size	_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end35-_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
.LCPI36_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc: # @_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB36_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB36_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB36_4
	.p2align	4, , 16
.LBB36_3:                               # %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB36_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB36_23
.LBB36_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_9 Depth 2
                                        #     Child Loop BB36_13 Depth 2
                                        #     Child Loop BB36_16 Depth 2
	bgeu	$s1, $a5, .LBB36_6
# %bb.5:                                #   in Loop: Header=BB36_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB36_15
	.p2align	4, , 16
.LBB36_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB36_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB36_8
# %bb.7:                                #   in Loop: Header=BB36_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB36_12
	.p2align	4, , 16
.LBB36_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB36_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB36_9:                               # %vector.body
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB36_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB36_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB36_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB36_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB36_15
.LBB36_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB36_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB36_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr5
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB36_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB36_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB36_17
.LBB36_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB36_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB36_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB36_16
.LBB36_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB36_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB36_3
# %bb.18:                               #   in Loop: Header=BB36_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB36_3
.LBB36_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	andi	$s1, $s0, 3
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB36_21
	.p2align	4, , 16
.LBB36_20:                              # %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit
                                        #   in Loop: Header=BB36_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB36_23
.LBB36_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $s1, $a0
	beqz	$a0, .LBB36_20
# %bb.22:                               #   in Loop: Header=BB36_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB36_20
.LBB36_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB36_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB36_27
.LBB36_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB36_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB36_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI36_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI36_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB36_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end36:
	.size	_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc, .Lfunc_end36-_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI37_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB37_23
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s4, $s2
	and	$a0, $s5, $a0
	and	$fp, $a0, $s3
	blez	$s0, .LBB37_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	move	$a3, $s2
	slli.d	$s2, $a0, 5
	vinsgr2vr.b	$vr0, $s4, 0
	vinsgr2vr.b	$vr1, $a3, 0
	vinsgr2vr.b	$vr2, $s5, 0
	vinsgr2vr.b	$vr3, $s3, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.b	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 3
	move	$a2, $s3
	slli.d	$s3, $a0, 3
	and	$a0, $a3, $s4
	and	$a0, $s5, $a0
	and	$s4, $a2, $a0
	vinsgr2vr.b	$vr5, $s4, 0
	vinsgr2vr.b	$vr5, $s4, 1
	vinsgr2vr.b	$vr5, $s4, 2
	vinsgr2vr.b	$vr5, $s4, 3
	vinsgr2vr.b	$vr5, $s4, 4
	vinsgr2vr.b	$vr5, $s4, 5
	vinsgr2vr.b	$vr5, $s4, 6
	vinsgr2vr.b	$vr5, $s4, 7
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB37_4
	.p2align	4, , 16
.LBB37_3:                               # %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB37_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB37_23
.LBB37_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_9 Depth 2
                                        #     Child Loop BB37_13 Depth 2
                                        #     Child Loop BB37_16 Depth 2
	bgeu	$s0, $a5, .LBB37_6
# %bb.5:                                #   in Loop: Header=BB37_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB37_15
	.p2align	4, , 16
.LBB37_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB37_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB37_8
# %bb.7:                                #   in Loop: Header=BB37_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB37_12
	.p2align	4, , 16
.LBB37_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB37_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB37_9:                               # %vector.body
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB37_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB37_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB37_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB37_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB37_15
.LBB37_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB37_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB37_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr5, $vr1
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB37_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB37_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB37_17
.LBB37_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB37_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB37_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB37_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.bu	$a4, $a2, 0
	and	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB37_16
.LBB37_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB37_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $fp, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB37_3
# %bb.18:                               #   in Loop: Header=BB37_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB37_3
.LBB37_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	andi	$fp, $fp, 3
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB37_21
	.p2align	4, , 16
.LBB37_20:                              # %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB37_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB37_23
.LBB37_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $fp, $a0
	beqz	$a0, .LBB37_20
# %bb.22:                               #   in Loop: Header=BB37_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB37_20
.LBB37_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB37_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB37_27
.LBB37_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB37_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB37_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI37_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI37_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB37_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end37:
	.size	_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end37-_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
.LCPI38_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc: # @_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB38_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB38_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB38_4
	.p2align	4, , 16
.LBB38_3:                               # %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB38_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB38_23
.LBB38_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_9 Depth 2
                                        #     Child Loop BB38_13 Depth 2
                                        #     Child Loop BB38_16 Depth 2
	bgeu	$s1, $a5, .LBB38_6
# %bb.5:                                #   in Loop: Header=BB38_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB38_15
	.p2align	4, , 16
.LBB38_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB38_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB38_8
# %bb.7:                                #   in Loop: Header=BB38_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB38_12
	.p2align	4, , 16
.LBB38_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB38_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB38_9:                               # %vector.body
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB38_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB38_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB38_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB38_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB38_15
.LBB38_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB38_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB38_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr5
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB38_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB38_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB38_17
.LBB38_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB38_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB38_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB38_16
.LBB38_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB38_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB38_3
# %bb.18:                               #   in Loop: Header=BB38_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB38_3
.LBB38_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB38_21
	.p2align	4, , 16
.LBB38_20:                              # %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit
                                        #   in Loop: Header=BB38_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB38_23
.LBB38_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $s0, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB38_20
# %bb.22:                               #   in Loop: Header=BB38_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB38_20
.LBB38_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB38_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB38_27
.LBB38_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB38_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB38_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI38_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI38_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB38_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end38:
	.size	_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc, .Lfunc_end38-_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI39_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB39_23
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s4, $s2
	or	$a0, $s5, $a0
	or	$fp, $a0, $s3
	blez	$s0, .LBB39_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	move	$a3, $s2
	slli.d	$s2, $a0, 5
	vinsgr2vr.b	$vr0, $s4, 0
	vinsgr2vr.b	$vr1, $a3, 0
	vinsgr2vr.b	$vr2, $s5, 0
	vinsgr2vr.b	$vr3, $s3, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.b	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 3
	move	$a2, $s3
	slli.d	$s3, $a0, 3
	or	$a0, $a3, $s4
	or	$a0, $s5, $a0
	or	$s4, $a2, $a0
	vinsgr2vr.b	$vr5, $s4, 0
	vinsgr2vr.b	$vr5, $s4, 1
	vinsgr2vr.b	$vr5, $s4, 2
	vinsgr2vr.b	$vr5, $s4, 3
	vinsgr2vr.b	$vr5, $s4, 4
	vinsgr2vr.b	$vr5, $s4, 5
	vinsgr2vr.b	$vr5, $s4, 6
	vinsgr2vr.b	$vr5, $s4, 7
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB39_4
	.p2align	4, , 16
.LBB39_3:                               # %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB39_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB39_23
.LBB39_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_9 Depth 2
                                        #     Child Loop BB39_13 Depth 2
                                        #     Child Loop BB39_16 Depth 2
	bgeu	$s0, $a5, .LBB39_6
# %bb.5:                                #   in Loop: Header=BB39_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB39_15
	.p2align	4, , 16
.LBB39_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB39_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB39_8
# %bb.7:                                #   in Loop: Header=BB39_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB39_12
	.p2align	4, , 16
.LBB39_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB39_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB39_9:                               # %vector.body
                                        #   Parent Loop BB39_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB39_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB39_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB39_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB39_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB39_15
.LBB39_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB39_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB39_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB39_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr5, $vr1
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB39_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB39_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB39_17
.LBB39_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB39_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB39_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB39_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	or	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB39_16
.LBB39_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB39_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $fp, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB39_3
# %bb.18:                               #   in Loop: Header=BB39_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB39_3
.LBB39_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB39_21
	.p2align	4, , 16
.LBB39_20:                              # %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB39_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB39_23
.LBB39_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $fp, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB39_20
# %bb.22:                               #   in Loop: Header=BB39_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB39_20
.LBB39_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB39_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB39_27
.LBB39_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB39_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB39_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI39_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI39_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB39_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end39:
	.size	_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end39-_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
.LCPI40_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc: # @_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB40_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB40_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 5
	slli.d	$s8, $a0, 5
	vreplgr2vr.b	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vinsgr2vr.b	$vr5, $s0, 0
	vinsgr2vr.b	$vr5, $s0, 1
	vinsgr2vr.b	$vr5, $s0, 2
	vinsgr2vr.b	$vr5, $s0, 3
	vinsgr2vr.b	$vr5, $s0, 4
	vinsgr2vr.b	$vr5, $s0, 5
	vinsgr2vr.b	$vr5, $s0, 6
	vinsgr2vr.b	$vr5, $s0, 7
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB40_4
	.p2align	4, , 16
.LBB40_3:                               # %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us
                                        #   in Loop: Header=BB40_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB40_23
.LBB40_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_9 Depth 2
                                        #     Child Loop BB40_13 Depth 2
                                        #     Child Loop BB40_16 Depth 2
	bgeu	$s1, $a5, .LBB40_6
# %bb.5:                                #   in Loop: Header=BB40_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB40_15
	.p2align	4, , 16
.LBB40_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB40_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s1, $a0, .LBB40_8
# %bb.7:                                #   in Loop: Header=BB40_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB40_12
	.p2align	4, , 16
.LBB40_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB40_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB40_9:                               # %vector.body
                                        #   Parent Loop BB40_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB40_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB40_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB40_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB40_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB40_15
.LBB40_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB40_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s2, $a2
	.p2align	4, , 16
.LBB40_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB40_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr5
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB40_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB40_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB40_17
.LBB40_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB40_4 Depth=1
	add.d	$a2, $s2, $a3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB40_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB40_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB40_16
.LBB40_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB40_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $s0, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB40_3
# %bb.18:                               #   in Loop: Header=BB40_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB40_3
.LBB40_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB40_21
	.p2align	4, , 16
.LBB40_20:                              # %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit
                                        #   in Loop: Header=BB40_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB40_23
.LBB40_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $s0, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB40_20
# %bb.22:                               #   in Loop: Header=BB40_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB40_20
.LBB40_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB40_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB40_27
.LBB40_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB40_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB40_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI40_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI40_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB40_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end40:
	.size	_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc, .Lfunc_end40-_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
.LCPI41_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB41_23
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s4, $s2
	xor	$a0, $s5, $a0
	xor	$fp, $a0, $s3
	blez	$s0, .LBB41_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 24
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 5
	move	$a3, $s2
	slli.d	$s2, $a0, 5
	vinsgr2vr.b	$vr0, $s4, 0
	vinsgr2vr.b	$vr1, $a3, 0
	vinsgr2vr.b	$vr2, $s5, 0
	vinsgr2vr.b	$vr3, $s3, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.b	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 3
	move	$a2, $s3
	slli.d	$s3, $a0, 3
	xor	$a0, $a3, $s4
	xor	$a0, $s5, $a0
	xor	$s4, $a2, $a0
	vinsgr2vr.b	$vr5, $s4, 0
	vinsgr2vr.b	$vr5, $s4, 1
	vinsgr2vr.b	$vr5, $s4, 2
	vinsgr2vr.b	$vr5, $s4, 3
	vinsgr2vr.b	$vr5, $s4, 4
	vinsgr2vr.b	$vr5, $s4, 5
	vinsgr2vr.b	$vr5, $s4, 6
	vinsgr2vr.b	$vr5, $s4, 7
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB41_4
	.p2align	4, , 16
.LBB41_3:                               # %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB41_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB41_23
.LBB41_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_9 Depth 2
                                        #     Child Loop BB41_13 Depth 2
                                        #     Child Loop BB41_16 Depth 2
	bgeu	$s0, $a5, .LBB41_6
# %bb.5:                                #   in Loop: Header=BB41_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB41_15
	.p2align	4, , 16
.LBB41_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB41_4 Depth=1
	ori	$a0, $zero, 32
	bgeu	$s0, $a0, .LBB41_8
# %bb.7:                                #   in Loop: Header=BB41_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB41_12
	.p2align	4, , 16
.LBB41_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB41_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB41_9:                               # %vector.body
                                        #   Parent Loop BB41_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.b	$vr0, $vr2, $vr0
	vadd.b	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -32
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB41_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB41_4 Depth=1
	vadd.b	$vr0, $vr1, $vr0
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB41_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB41_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB41_15
.LBB41_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB41_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.b	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB41_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB41_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr5, $vr1
	vadd.b	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB41_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB41_4 Depth=1
	vhaddw.h.b	$vr0, $vr0, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB41_17
.LBB41_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB41_4 Depth=1
	add.d	$a2, $s1, $a3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB41_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB41_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.b	$a4, $a2, 0
	xor	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 1
	bnez	$a3, .LBB41_16
.LBB41_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB41_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $fp, $a2
	slli.d	$a2, $a2, 6
	andi	$a2, $a2, 192
	andi	$a0, $a0, 255
	beq	$a0, $a2, .LBB41_3
# %bb.18:                               #   in Loop: Header=BB41_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB41_3
.LBB41_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB41_21
	.p2align	4, , 16
.LBB41_20:                              # %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB41_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB41_23
.LBB41_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $fp, $a0
	andi	$a0, $a0, 3
	beqz	$a0, .LBB41_20
# %bb.22:                               #   in Loop: Header=BB41_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB41_20
.LBB41_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB41_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB41_27
.LBB41_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB41_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB41_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI41_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI41_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB41_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end41:
	.size	_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end41-_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
.LCPI42_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc: # @_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB42_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB42_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB42_4
	.p2align	4, , 16
.LBB42_3:                               # %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB42_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB42_23
.LBB42_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_9 Depth 2
                                        #     Child Loop BB42_13 Depth 2
                                        #     Child Loop BB42_16 Depth 2
	bgeu	$s1, $a5, .LBB42_6
# %bb.5:                                #   in Loop: Header=BB42_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB42_15
	.p2align	4, , 16
.LBB42_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB42_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB42_8
# %bb.7:                                #   in Loop: Header=BB42_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB42_12
	.p2align	4, , 16
.LBB42_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB42_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB42_9:                               # %vector.body
                                        #   Parent Loop BB42_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB42_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB42_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB42_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB42_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB42_15
.LBB42_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB42_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB42_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB42_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB42_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB42_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB42_17
.LBB42_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB42_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB42_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB42_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB42_16
.LBB42_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB42_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB42_3
# %bb.18:                               #   in Loop: Header=BB42_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB42_3
.LBB42_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB42_21
	.p2align	4, , 16
.LBB42_20:                              # %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit
                                        #   in Loop: Header=BB42_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB42_23
.LBB42_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB42_20
# %bb.22:                               #   in Loop: Header=BB42_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB42_20
.LBB42_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB42_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB42_27
.LBB42_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB42_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB42_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI42_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI42_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB42_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end42:
	.size	_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc, .Lfunc_end42-_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
.LCPI43_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB43_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$s7, $s0, $s1
	blez	$s1, .LBB43_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$fp, $a0, 4
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s4, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB43_4
	.p2align	4, , 16
.LBB43_3:                               # %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB43_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB43_23
.LBB43_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_9 Depth 2
                                        #     Child Loop BB43_13 Depth 2
                                        #     Child Loop BB43_16 Depth 2
	bgeu	$s1, $a5, .LBB43_6
# %bb.5:                                #   in Loop: Header=BB43_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB43_15
	.p2align	4, , 16
.LBB43_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB43_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB43_8
# %bb.7:                                #   in Loop: Header=BB43_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB43_12
	.p2align	4, , 16
.LBB43_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB43_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB43_9:                               # %vector.body
                                        #   Parent Loop BB43_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB43_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB43_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB43_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB43_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB43_15
.LBB43_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB43_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB43_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB43_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB43_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB43_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB43_17
.LBB43_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB43_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB43_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB43_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB43_16
.LBB43_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB43_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	add.d	$a0, $a0, $s7
	bstrpick.d	$a0, $a0, 15, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s3
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	beq	$a0, $a2, .LBB43_3
# %bb.18:                               #   in Loop: Header=BB43_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB43_3
.LBB43_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	bstrpick.d	$s3, $s7, 15, 0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s4, $zero
	b	.LBB43_21
	.p2align	4, , 16
.LBB43_20:                              # %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit
                                        #   in Loop: Header=BB43_21 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB43_23
.LBB43_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$s3, $a0, .LBB43_20
# %bb.22:                               #   in Loop: Header=BB43_21 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB43_20
.LBB43_23:                              # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB43_25
# %bb.24:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB43_27
.LBB43_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB43_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB43_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI43_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI43_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB43_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end43:
	.size	_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc, .Lfunc_end43-_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI44_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB44_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB44_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB44_4
	.p2align	4, , 16
.LBB44_3:                               # %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB44_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB44_23
.LBB44_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_9 Depth 2
                                        #     Child Loop BB44_13 Depth 2
                                        #     Child Loop BB44_16 Depth 2
	bgeu	$s0, $a5, .LBB44_6
# %bb.5:                                #   in Loop: Header=BB44_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB44_15
	.p2align	4, , 16
.LBB44_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB44_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB44_8
# %bb.7:                                #   in Loop: Header=BB44_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB44_12
	.p2align	4, , 16
.LBB44_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB44_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB44_9:                               # %vector.body
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr4, $vr0
	vadd.h	$vr1, $vr4, $vr1
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB44_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB44_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB44_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB44_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB44_15
.LBB44_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB44_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB44_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr5, $vr0
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB44_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB44_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB44_17
.LBB44_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB44_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB44_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB44_16
.LBB44_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB44_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB44_3
# %bb.18:                               #   in Loop: Header=BB44_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB44_3
.LBB44_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB44_21
	.p2align	4, , 16
.LBB44_20:                              # %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB44_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB44_23
.LBB44_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB44_20
# %bb.22:                               #   in Loop: Header=BB44_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB44_20
.LBB44_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB44_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB44_27
.LBB44_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB44_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB44_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI44_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI44_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB44_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end44:
	.size	_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end44-_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
.LCPI45_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc: # @_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB45_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB45_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB45_4
	.p2align	4, , 16
.LBB45_3:                               # %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB45_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB45_23
.LBB45_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_9 Depth 2
                                        #     Child Loop BB45_13 Depth 2
                                        #     Child Loop BB45_16 Depth 2
	bgeu	$s1, $a5, .LBB45_6
# %bb.5:                                #   in Loop: Header=BB45_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB45_15
	.p2align	4, , 16
.LBB45_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB45_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB45_8
# %bb.7:                                #   in Loop: Header=BB45_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB45_12
	.p2align	4, , 16
.LBB45_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB45_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB45_9:                               # %vector.body
                                        #   Parent Loop BB45_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.h	$vr0, $vr0, $vr4
	vsub.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB45_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB45_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB45_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB45_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB45_15
.LBB45_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB45_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB45_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB45_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB45_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB45_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB45_17
.LBB45_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB45_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB45_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB45_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB45_16
.LBB45_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB45_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s0
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB45_3
# %bb.18:                               #   in Loop: Header=BB45_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB45_3
.LBB45_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB45_21
	.p2align	4, , 16
.LBB45_20:                              # %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit
                                        #   in Loop: Header=BB45_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB45_23
.LBB45_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB45_20
# %bb.22:                               #   in Loop: Header=BB45_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB45_20
.LBB45_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB45_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB45_27
.LBB45_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB45_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB45_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI45_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI45_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB45_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end45:
	.size	_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc, .Lfunc_end45-_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI46_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB46_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB46_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB46_4
	.p2align	4, , 16
.LBB46_3:                               # %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB46_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB46_23
.LBB46_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_9 Depth 2
                                        #     Child Loop BB46_13 Depth 2
                                        #     Child Loop BB46_16 Depth 2
	bgeu	$s0, $a5, .LBB46_6
# %bb.5:                                #   in Loop: Header=BB46_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB46_15
	.p2align	4, , 16
.LBB46_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB46_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB46_8
# %bb.7:                                #   in Loop: Header=BB46_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB46_12
	.p2align	4, , 16
.LBB46_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB46_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB46_9:                               # %vector.body
                                        #   Parent Loop BB46_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.h	$vr0, $vr0, $vr4
	vsub.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB46_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB46_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB46_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB46_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB46_15
.LBB46_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB46_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB46_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB46_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB46_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB46_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB46_17
.LBB46_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB46_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB46_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB46_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB46_16
.LBB46_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB46_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s3
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB46_3
# %bb.18:                               #   in Loop: Header=BB46_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB46_3
.LBB46_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB46_21
	.p2align	4, , 16
.LBB46_20:                              # %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB46_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB46_23
.LBB46_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s3
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB46_20
# %bb.22:                               #   in Loop: Header=BB46_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB46_20
.LBB46_23:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB46_25
# %bb.24:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB46_27
.LBB46_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB46_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB46_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI46_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI46_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB46_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end46:
	.size	_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end46-_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
.LCPI47_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc: # @_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB47_23
# %bb.1:                                # %.preheader.lr.ph
	lu12i.w	$a0, 1
	ori	$a0, $a0, 3904
	mul.d	$s7, $s0, $a0
	blez	$s1, .LBB47_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$fp, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB47_4
	.p2align	4, , 16
.LBB47_3:                               # %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB47_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB47_23
.LBB47_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_9 Depth 2
                                        #     Child Loop BB47_13 Depth 2
                                        #     Child Loop BB47_16 Depth 2
	bgeu	$s1, $a5, .LBB47_6
# %bb.5:                                #   in Loop: Header=BB47_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB47_15
	.p2align	4, , 16
.LBB47_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB47_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB47_8
# %bb.7:                                #   in Loop: Header=BB47_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB47_12
	.p2align	4, , 16
.LBB47_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB47_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB47_9:                               # %vector.body
                                        #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr2, $vr4
	vmadd.h	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB47_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB47_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB47_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB47_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB47_15
.LBB47_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB47_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB47_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr1, $vr5
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB47_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB47_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB47_17
.LBB47_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB47_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB47_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB47_16
.LBB47_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB47_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s7, $a2
	bstrpick.d	$a2, $a2, 15, 0
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB47_3
# %bb.18:                               #   in Loop: Header=BB47_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB47_3
.LBB47_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB47_21
	.p2align	4, , 16
.LBB47_20:                              # %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit
                                        #   in Loop: Header=BB47_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB47_23
.LBB47_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s7, $a0
	slli.d	$a0, $a0, 48
	beqz	$a0, .LBB47_20
# %bb.22:                               #   in Loop: Header=BB47_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB47_20
.LBB47_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB47_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB47_27
.LBB47_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB47_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB47_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI47_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI47_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB47_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end47:
	.size	_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc, .Lfunc_end47-_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI48_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB48_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	lu12i.w	$a3, 1
	ori	$a3, $a3, 3904
	mul.d	$s4, $a2, $a3
	blez	$s0, .LBB48_19
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$fp, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s5, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $s5
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB48_4
	.p2align	4, , 16
.LBB48_3:                               # %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB48_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB48_23
.LBB48_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_9 Depth 2
                                        #     Child Loop BB48_13 Depth 2
                                        #     Child Loop BB48_16 Depth 2
	bgeu	$s0, $a5, .LBB48_6
# %bb.5:                                #   in Loop: Header=BB48_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB48_15
	.p2align	4, , 16
.LBB48_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB48_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB48_8
# %bb.7:                                #   in Loop: Header=BB48_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB48_12
	.p2align	4, , 16
.LBB48_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB48_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB48_9:                               # %vector.body
                                        #   Parent Loop BB48_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr4, $vr2
	vmadd.h	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB48_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB48_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB48_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB48_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB48_15
.LBB48_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB48_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB48_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB48_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr5, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB48_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB48_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB48_17
.LBB48_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB48_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB48_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB48_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB48_16
.LBB48_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB48_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s4, $a2
	bstrpick.d	$a2, $a2, 15, 0
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB48_3
# %bb.18:                               #   in Loop: Header=BB48_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB48_3
.LBB48_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB48_21
	.p2align	4, , 16
.LBB48_20:                              # %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB48_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB48_23
.LBB48_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s4, $a0
	slli.d	$a0, $a0, 48
	beqz	$a0, .LBB48_20
# %bb.22:                               #   in Loop: Header=BB48_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB48_20
.LBB48_23:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB48_25
# %bb.24:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB48_27
.LBB48_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB48_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB48_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI48_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI48_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB48_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end48:
	.size	_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end48-_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
.LCPI49_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB49_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$s4, $a2, $s3
	blez	$s0, .LBB49_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	mul.d	$a0, $a0, $s3
	mul.d	$s2, $a0, $s2
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$fp, $a0, 4
	vreplgr2vr.h	$vr4, $s2
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s3, $a0, 2
	vinsgr2vr.h	$vr5, $s2, 0
	vinsgr2vr.h	$vr5, $s2, 1
	vinsgr2vr.h	$vr5, $s2, 2
	vinsgr2vr.h	$vr5, $s2, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB49_4
	.p2align	4, , 16
.LBB49_3:                               # %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB49_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB49_23
.LBB49_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_9 Depth 2
                                        #     Child Loop BB49_13 Depth 2
                                        #     Child Loop BB49_16 Depth 2
	bgeu	$s0, $a5, .LBB49_6
# %bb.5:                                #   in Loop: Header=BB49_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB49_15
	.p2align	4, , 16
.LBB49_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB49_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB49_8
# %bb.7:                                #   in Loop: Header=BB49_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB49_12
	.p2align	4, , 16
.LBB49_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB49_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB49_9:                               # %vector.body
                                        #   Parent Loop BB49_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB49_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB49_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB49_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB49_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB49_15
.LBB49_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB49_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB49_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB49_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB49_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB49_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB49_17
.LBB49_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB49_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB49_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB49_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB49_16
.LBB49_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB49_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB49_3
# %bb.18:                               #   in Loop: Header=BB49_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB49_3
.LBB49_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB49_21
	.p2align	4, , 16
.LBB49_20:                              # %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB49_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB49_23
.LBB49_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s4, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB49_20
# %bb.22:                               #   in Loop: Header=BB49_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB49_20
.LBB49_23:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB49_25
# %bb.24:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB49_27
.LBB49_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB49_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB49_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI49_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI49_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB49_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end49:
	.size	_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end49-_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
.LCPI50_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc: # @_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB50_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB50_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 1
	slli.d	$s7, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	b	.LBB50_4
	.p2align	4, , 16
.LBB50_3:                               # %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB50_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB50_17
.LBB50_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_7 Depth 2
                                        #     Child Loop BB50_10 Depth 2
	bne	$s1, $a7, .LBB50_6
# %bb.5:                                #   in Loop: Header=BB50_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB50_9
	.p2align	4, , 16
.LBB50_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB50_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s7
	addi.d	$a4, $s2, 2
	.p2align	4, , 16
.LBB50_7:                               # %vector.body
                                        #   Parent Loop BB50_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a5, $a4, -2
	ld.h	$a6, $a4, 0
	div.w	$a5, $a5, $s0
	div.w	$a6, $a6, $s0
	add.d	$a0, $a0, $a5
	add.d	$a2, $a2, $a6
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 4
	bnez	$a3, .LBB50_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB50_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s7
	beq	$s7, $s1, .LBB50_11
.LBB50_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB50_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB50_10:                              # %scalar.ph
                                        #   Parent Loop BB50_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	div.w	$a4, $a4, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB50_10
.LBB50_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB50_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.w	$a2, $a2, $s0
	mul.d	$a2, $a2, $s8
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB50_3
# %bb.12:                               #   in Loop: Header=BB50_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB50_3
.LBB50_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB50_15
	.p2align	4, , 16
.LBB50_14:                              # %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit
                                        #   in Loop: Header=BB50_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB50_17
.LBB50_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.w	$a0, $a0, $s0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB50_14
# %bb.16:                               #   in Loop: Header=BB50_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB50_14
.LBB50_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB50_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB50_21
.LBB50_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB50_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB50_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI50_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI50_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB50_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end50:
	.size	_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc, .Lfunc_end50-_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI51_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s5, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB51_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB51_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$s8, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	move	$fp, $zero
	b	.LBB51_4
	.p2align	4, , 16
.LBB51_3:                               # %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB51_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB51_17
.LBB51_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_7 Depth 2
                                        #     Child Loop BB51_10 Depth 2
	bne	$s4, $a7, .LBB51_6
# %bb.5:                                #   in Loop: Header=BB51_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB51_9
	.p2align	4, , 16
.LBB51_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB51_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	addi.d	$a4, $s5, 2
	.p2align	4, , 16
.LBB51_7:                               # %vector.body
                                        #   Parent Loop BB51_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a5, $a4, -2
	ld.h	$a6, $a4, 0
	div.w	$a5, $a5, $s3
	div.w	$a6, $a6, $s3
	div.w	$a5, $a5, $s2
	div.w	$a6, $a6, $s2
	div.w	$a5, $a5, $s1
	div.w	$a6, $a6, $s1
	div.w	$a5, $a5, $s0
	div.w	$a6, $a6, $s0
	add.d	$a0, $a0, $a5
	add.d	$a2, $a2, $a6
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 4
	bnez	$a3, .LBB51_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB51_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s8
	beq	$s8, $s4, .LBB51_11
.LBB51_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB51_4 Depth=1
	alsl.d	$a2, $a3, $s5, 1
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB51_10:                              # %scalar.ph
                                        #   Parent Loop BB51_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	div.w	$a4, $a4, $s3
	div.w	$a4, $a4, $s2
	div.w	$a4, $a4, $s1
	div.w	$a4, $a4, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB51_10
.LBB51_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB51_4 Depth=1
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.w	$a2, $a2, $s3
	div.w	$a2, $a2, $s2
	div.w	$a2, $a2, $s1
	div.w	$a2, $a2, $s0
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB51_3
# %bb.12:                               #   in Loop: Header=BB51_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB51_3
.LBB51_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	b	.LBB51_15
	.p2align	4, , 16
.LBB51_14:                              # %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB51_15 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB51_17
.LBB51_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s0
	mul.d	$a0, $a0, $s5
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB51_14
# %bb.16:                               #   in Loop: Header=BB51_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB51_14
.LBB51_17:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB51_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB51_21
.LBB51_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB51_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB51_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI51_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI51_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB51_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end51:
	.size	_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end51-_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
.LCPI52_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB52_23
# %bb.1:                                # %.preheader.lr.ph
	div.w	$a0, $s5, $s4
	div.w	$a0, $a0, $s3
	div.w	$s3, $a0, $s2
	blez	$s0, .LBB52_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB52_4
	.p2align	4, , 16
.LBB52_3:                               # %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB52_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB52_23
.LBB52_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_9 Depth 2
                                        #     Child Loop BB52_13 Depth 2
                                        #     Child Loop BB52_16 Depth 2
	bgeu	$s0, $a5, .LBB52_6
# %bb.5:                                #   in Loop: Header=BB52_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB52_15
	.p2align	4, , 16
.LBB52_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB52_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB52_8
# %bb.7:                                #   in Loop: Header=BB52_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB52_12
	.p2align	4, , 16
.LBB52_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB52_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB52_9:                               # %vector.body
                                        #   Parent Loop BB52_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB52_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB52_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB52_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB52_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB52_15
.LBB52_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB52_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB52_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB52_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr1, $vr0
	vadd.h	$vr0, $vr0, $vr5
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB52_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB52_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB52_17
.LBB52_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB52_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB52_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB52_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB52_16
.LBB52_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB52_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB52_3
# %bb.18:                               #   in Loop: Header=BB52_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB52_3
.LBB52_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB52_21
	.p2align	4, , 16
.LBB52_20:                              # %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB52_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB52_23
.LBB52_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB52_20
# %bb.22:                               #   in Loop: Header=BB52_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB52_20
.LBB52_23:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB52_25
# %bb.24:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB52_27
.LBB52_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB52_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB52_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI52_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI52_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB52_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end52:
	.size	_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end52-_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI53_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB53_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s4, $s5
	div.w	$a0, $a0, $s2
	sub.d	$s3, $s3, $a0
	blez	$s0, .LBB53_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB53_4
	.p2align	4, , 16
.LBB53_3:                               # %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB53_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB53_23
.LBB53_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_9 Depth 2
                                        #     Child Loop BB53_13 Depth 2
                                        #     Child Loop BB53_16 Depth 2
	bgeu	$s0, $a5, .LBB53_6
# %bb.5:                                #   in Loop: Header=BB53_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB53_15
	.p2align	4, , 16
.LBB53_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB53_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB53_8
# %bb.7:                                #   in Loop: Header=BB53_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB53_12
	.p2align	4, , 16
.LBB53_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB53_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB53_9:                               # %vector.body
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr2, $vr4, $vr2
	vadd.h	$vr3, $vr4, $vr3
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB53_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB53_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB53_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB53_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB53_15
.LBB53_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB53_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB53_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB53_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB53_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB53_17
.LBB53_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB53_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB53_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB53_16
.LBB53_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB53_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB53_3
# %bb.18:                               #   in Loop: Header=BB53_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB53_3
.LBB53_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB53_21
	.p2align	4, , 16
.LBB53_20:                              # %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB53_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB53_23
.LBB53_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB53_20
# %bb.22:                               #   in Loop: Header=BB53_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB53_20
.LBB53_23:                              # %._crit_edge23
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB53_25
# %bb.24:                               # %._crit_edge23
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB53_27
.LBB53_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB53_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB53_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI53_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI53_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB53_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end53:
	.size	_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end53-_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
.LCPI54_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc: # @_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB54_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB54_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB54_4
	.p2align	4, , 16
.LBB54_3:                               # %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB54_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB54_23
.LBB54_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_9 Depth 2
                                        #     Child Loop BB54_13 Depth 2
                                        #     Child Loop BB54_16 Depth 2
	bgeu	$s1, $a5, .LBB54_6
# %bb.5:                                #   in Loop: Header=BB54_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB54_15
	.p2align	4, , 16
.LBB54_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB54_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB54_8
# %bb.7:                                #   in Loop: Header=BB54_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB54_12
	.p2align	4, , 16
.LBB54_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB54_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB54_9:                               # %vector.body
                                        #   Parent Loop BB54_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB54_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB54_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB54_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB54_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB54_15
.LBB54_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB54_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB54_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB54_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr5
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB54_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB54_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB54_17
.LBB54_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB54_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB54_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB54_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB54_16
.LBB54_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB54_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB54_3
# %bb.18:                               #   in Loop: Header=BB54_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB54_3
.LBB54_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB54_21
	.p2align	4, , 16
.LBB54_20:                              # %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit
                                        #   in Loop: Header=BB54_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB54_23
.LBB54_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB54_20
# %bb.22:                               #   in Loop: Header=BB54_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB54_20
.LBB54_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB54_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB54_27
.LBB54_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB54_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB54_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI54_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI54_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB54_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end54:
	.size	_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc, .Lfunc_end54-_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI55_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s6, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB55_23
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s4, $s3
	and	$a0, $s5, $a0
	and	$fp, $a0, $s6
	blez	$s0, .LBB55_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s2, $a0, 4
	vinsgr2vr.h	$vr0, $s4, 0
	vinsgr2vr.h	$vr1, $s3, 0
	vinsgr2vr.h	$vr2, $s5, 0
	vinsgr2vr.h	$vr3, $s6, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.h	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 2
	move	$a2, $s3
	slli.d	$s3, $a0, 2
	and	$a0, $a2, $s4
	and	$a0, $s5, $a0
	and	$s4, $s6, $a0
	vinsgr2vr.h	$vr5, $s4, 0
	vinsgr2vr.h	$vr5, $s4, 1
	vinsgr2vr.h	$vr5, $s4, 2
	vinsgr2vr.h	$vr5, $s4, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB55_4
	.p2align	4, , 16
.LBB55_3:                               # %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB55_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB55_23
.LBB55_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_9 Depth 2
                                        #     Child Loop BB55_13 Depth 2
                                        #     Child Loop BB55_16 Depth 2
	bgeu	$s0, $a5, .LBB55_6
# %bb.5:                                #   in Loop: Header=BB55_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB55_15
	.p2align	4, , 16
.LBB55_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB55_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB55_8
# %bb.7:                                #   in Loop: Header=BB55_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB55_12
	.p2align	4, , 16
.LBB55_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB55_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB55_9:                               # %vector.body
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB55_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB55_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB55_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB55_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB55_15
.LBB55_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB55_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB55_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB55_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB55_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB55_17
.LBB55_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB55_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB55_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB55_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	and	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB55_16
.LBB55_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB55_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $fp, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB55_3
# %bb.18:                               #   in Loop: Header=BB55_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB55_3
.LBB55_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB55_21
	.p2align	4, , 16
.LBB55_20:                              # %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB55_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB55_23
.LBB55_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB55_20
# %bb.22:                               #   in Loop: Header=BB55_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB55_20
.LBB55_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB55_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB55_27
.LBB55_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB55_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB55_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI55_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI55_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB55_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end55:
	.size	_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end55-_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
.LCPI56_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc: # @_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB56_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB56_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB56_4
	.p2align	4, , 16
.LBB56_3:                               # %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB56_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB56_23
.LBB56_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_9 Depth 2
                                        #     Child Loop BB56_13 Depth 2
                                        #     Child Loop BB56_16 Depth 2
	bgeu	$s1, $a5, .LBB56_6
# %bb.5:                                #   in Loop: Header=BB56_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB56_15
	.p2align	4, , 16
.LBB56_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB56_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB56_8
# %bb.7:                                #   in Loop: Header=BB56_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB56_12
	.p2align	4, , 16
.LBB56_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB56_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB56_9:                               # %vector.body
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB56_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB56_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB56_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB56_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB56_15
.LBB56_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB56_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB56_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr5
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB56_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB56_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB56_17
.LBB56_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB56_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB56_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB56_16
.LBB56_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB56_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB56_3
# %bb.18:                               #   in Loop: Header=BB56_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB56_3
.LBB56_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB56_21
	.p2align	4, , 16
.LBB56_20:                              # %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit
                                        #   in Loop: Header=BB56_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB56_23
.LBB56_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB56_20
# %bb.22:                               #   in Loop: Header=BB56_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB56_20
.LBB56_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB56_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB56_27
.LBB56_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB56_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB56_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI56_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI56_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB56_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end56:
	.size	_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc, .Lfunc_end56-_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI57_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s6, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB57_23
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s4, $s3
	or	$a0, $s5, $a0
	or	$fp, $a0, $s6
	blez	$s0, .LBB57_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s2, $a0, 4
	vinsgr2vr.h	$vr0, $s4, 0
	vinsgr2vr.h	$vr1, $s3, 0
	vinsgr2vr.h	$vr2, $s5, 0
	vinsgr2vr.h	$vr3, $s6, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.h	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 2
	move	$a2, $s3
	slli.d	$s3, $a0, 2
	or	$a0, $a2, $s4
	or	$a0, $s5, $a0
	or	$s4, $s6, $a0
	vinsgr2vr.h	$vr5, $s4, 0
	vinsgr2vr.h	$vr5, $s4, 1
	vinsgr2vr.h	$vr5, $s4, 2
	vinsgr2vr.h	$vr5, $s4, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB57_4
	.p2align	4, , 16
.LBB57_3:                               # %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB57_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB57_23
.LBB57_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_9 Depth 2
                                        #     Child Loop BB57_13 Depth 2
                                        #     Child Loop BB57_16 Depth 2
	bgeu	$s0, $a5, .LBB57_6
# %bb.5:                                #   in Loop: Header=BB57_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB57_15
	.p2align	4, , 16
.LBB57_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB57_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB57_8
# %bb.7:                                #   in Loop: Header=BB57_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB57_12
	.p2align	4, , 16
.LBB57_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB57_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB57_9:                               # %vector.body
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB57_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB57_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB57_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB57_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB57_15
.LBB57_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB57_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB57_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB57_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB57_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB57_17
.LBB57_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB57_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB57_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	or	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB57_16
.LBB57_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB57_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $fp, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB57_3
# %bb.18:                               #   in Loop: Header=BB57_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB57_3
.LBB57_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB57_21
	.p2align	4, , 16
.LBB57_20:                              # %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB57_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB57_23
.LBB57_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB57_20
# %bb.22:                               #   in Loop: Header=BB57_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB57_20
.LBB57_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB57_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB57_27
.LBB57_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB57_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB57_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI57_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI57_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB57_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end57:
	.size	_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end57-_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
.LCPI58_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc: # @_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB58_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB58_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB58_4
	.p2align	4, , 16
.LBB58_3:                               # %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us
                                        #   in Loop: Header=BB58_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB58_23
.LBB58_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_9 Depth 2
                                        #     Child Loop BB58_13 Depth 2
                                        #     Child Loop BB58_16 Depth 2
	bgeu	$s1, $a5, .LBB58_6
# %bb.5:                                #   in Loop: Header=BB58_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB58_15
	.p2align	4, , 16
.LBB58_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB58_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB58_8
# %bb.7:                                #   in Loop: Header=BB58_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB58_12
	.p2align	4, , 16
.LBB58_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB58_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB58_9:                               # %vector.body
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB58_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB58_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB58_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB58_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB58_15
.LBB58_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB58_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB58_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr5
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB58_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB58_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB58_17
.LBB58_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB58_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB58_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB58_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB58_16
.LBB58_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB58_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB58_3
# %bb.18:                               #   in Loop: Header=BB58_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB58_3
.LBB58_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB58_21
	.p2align	4, , 16
.LBB58_20:                              # %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit
                                        #   in Loop: Header=BB58_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB58_23
.LBB58_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB58_20
# %bb.22:                               #   in Loop: Header=BB58_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB58_20
.LBB58_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB58_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB58_27
.LBB58_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB58_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB58_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI58_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI58_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB58_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end58:
	.size	_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc, .Lfunc_end58-_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
.LCPI59_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s6, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB59_23
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s4, $s3
	xor	$a0, $s5, $a0
	xor	$fp, $a0, $s6
	blez	$s0, .LBB59_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s2, $a0, 4
	vinsgr2vr.h	$vr0, $s4, 0
	vinsgr2vr.h	$vr1, $s3, 0
	vinsgr2vr.h	$vr2, $s5, 0
	vinsgr2vr.h	$vr3, $s6, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.h	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 2
	move	$a2, $s3
	slli.d	$s3, $a0, 2
	xor	$a0, $a2, $s4
	xor	$a0, $s5, $a0
	xor	$s4, $s6, $a0
	vinsgr2vr.h	$vr5, $s4, 0
	vinsgr2vr.h	$vr5, $s4, 1
	vinsgr2vr.h	$vr5, $s4, 2
	vinsgr2vr.h	$vr5, $s4, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB59_4
	.p2align	4, , 16
.LBB59_3:                               # %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB59_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB59_23
.LBB59_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_9 Depth 2
                                        #     Child Loop BB59_13 Depth 2
                                        #     Child Loop BB59_16 Depth 2
	bgeu	$s0, $a5, .LBB59_6
# %bb.5:                                #   in Loop: Header=BB59_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB59_15
	.p2align	4, , 16
.LBB59_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB59_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB59_8
# %bb.7:                                #   in Loop: Header=BB59_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB59_12
	.p2align	4, , 16
.LBB59_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB59_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB59_9:                               # %vector.body
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB59_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB59_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB59_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB59_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB59_15
.LBB59_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB59_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB59_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB59_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB59_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB59_17
.LBB59_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB59_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB59_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB59_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xor	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB59_16
.LBB59_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB59_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $fp, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB59_3
# %bb.18:                               #   in Loop: Header=BB59_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB59_3
.LBB59_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB59_21
	.p2align	4, , 16
.LBB59_20:                              # %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB59_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB59_23
.LBB59_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB59_20
# %bb.22:                               #   in Loop: Header=BB59_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB59_20
.LBB59_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB59_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB59_27
.LBB59_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB59_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB59_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI59_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI59_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB59_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end59:
	.size	_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end59-_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
.LCPI60_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc: # @_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB60_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB60_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB60_4
	.p2align	4, , 16
.LBB60_3:                               # %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB60_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB60_23
.LBB60_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_9 Depth 2
                                        #     Child Loop BB60_13 Depth 2
                                        #     Child Loop BB60_16 Depth 2
	bgeu	$s1, $a5, .LBB60_6
# %bb.5:                                #   in Loop: Header=BB60_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB60_15
	.p2align	4, , 16
.LBB60_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB60_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB60_8
# %bb.7:                                #   in Loop: Header=BB60_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB60_12
	.p2align	4, , 16
.LBB60_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB60_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB60_9:                               # %vector.body
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB60_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB60_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB60_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB60_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB60_15
.LBB60_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB60_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB60_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB60_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB60_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB60_17
.LBB60_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB60_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB60_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB60_16
.LBB60_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB60_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB60_3
# %bb.18:                               #   in Loop: Header=BB60_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB60_3
.LBB60_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB60_21
	.p2align	4, , 16
.LBB60_20:                              # %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit
                                        #   in Loop: Header=BB60_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB60_23
.LBB60_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB60_20
# %bb.22:                               #   in Loop: Header=BB60_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB60_20
.LBB60_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB60_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB60_27
.LBB60_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB60_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB60_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI60_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI60_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB60_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end60:
	.size	_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc, .Lfunc_end60-_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
.LCPI61_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB61_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$s7, $s0, $s1
	blez	$s1, .LBB61_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$fp, $a0, 4
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s4, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 48                   # 16-byte Folded Spill
	b	.LBB61_4
	.p2align	4, , 16
.LBB61_3:                               # %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB61_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB61_23
.LBB61_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_9 Depth 2
                                        #     Child Loop BB61_13 Depth 2
                                        #     Child Loop BB61_16 Depth 2
	bgeu	$s1, $a5, .LBB61_6
# %bb.5:                                #   in Loop: Header=BB61_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB61_15
	.p2align	4, , 16
.LBB61_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB61_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB61_8
# %bb.7:                                #   in Loop: Header=BB61_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB61_12
	.p2align	4, , 16
.LBB61_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB61_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 48                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB61_9:                               # %vector.body
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB61_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB61_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB61_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB61_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB61_15
.LBB61_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB61_4 Depth=1
	vld	$vr0, $sp, 48                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB61_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB61_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB61_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB61_17
.LBB61_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB61_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB61_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB61_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB61_16
.LBB61_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB61_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	add.d	$a0, $a0, $s7
	bstrpick.d	$a0, $a0, 15, 0
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s3
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	beq	$a0, $a2, .LBB61_3
# %bb.18:                               #   in Loop: Header=BB61_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB61_3
.LBB61_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	bstrpick.d	$s3, $s7, 15, 0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s4, $zero
	b	.LBB61_21
	.p2align	4, , 16
.LBB61_20:                              # %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit
                                        #   in Loop: Header=BB61_21 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB61_23
.LBB61_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beq	$s3, $a0, .LBB61_20
# %bb.22:                               #   in Loop: Header=BB61_21 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB61_20
.LBB61_23:                              # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB61_25
# %bb.24:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB61_27
.LBB61_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB61_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB61_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI61_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI61_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB61_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end61:
	.size	_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc, .Lfunc_end61-_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
.LCPI62_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB62_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB62_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB62_4
	.p2align	4, , 16
.LBB62_3:                               # %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB62_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB62_23
.LBB62_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_9 Depth 2
                                        #     Child Loop BB62_13 Depth 2
                                        #     Child Loop BB62_16 Depth 2
	bgeu	$s0, $a5, .LBB62_6
# %bb.5:                                #   in Loop: Header=BB62_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB62_15
	.p2align	4, , 16
.LBB62_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB62_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB62_8
# %bb.7:                                #   in Loop: Header=BB62_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB62_12
	.p2align	4, , 16
.LBB62_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB62_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB62_9:                               # %vector.body
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr4, $vr0
	vadd.h	$vr1, $vr4, $vr1
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB62_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB62_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB62_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB62_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB62_15
.LBB62_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB62_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB62_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr5, $vr0
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB62_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB62_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB62_17
.LBB62_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB62_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB62_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB62_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB62_16
.LBB62_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB62_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB62_3
# %bb.18:                               #   in Loop: Header=BB62_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB62_3
.LBB62_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB62_21
	.p2align	4, , 16
.LBB62_20:                              # %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB62_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB62_23
.LBB62_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB62_20
# %bb.22:                               #   in Loop: Header=BB62_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB62_20
.LBB62_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB62_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB62_27
.LBB62_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB62_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB62_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI62_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI62_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB62_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end62:
	.size	_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end62-_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
.LCPI63_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc: # @_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB63_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB63_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB63_4
	.p2align	4, , 16
.LBB63_3:                               # %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB63_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB63_23
.LBB63_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_9 Depth 2
                                        #     Child Loop BB63_13 Depth 2
                                        #     Child Loop BB63_16 Depth 2
	bgeu	$s1, $a5, .LBB63_6
# %bb.5:                                #   in Loop: Header=BB63_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB63_15
	.p2align	4, , 16
.LBB63_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB63_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB63_8
# %bb.7:                                #   in Loop: Header=BB63_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB63_12
	.p2align	4, , 16
.LBB63_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB63_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB63_9:                               # %vector.body
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.h	$vr0, $vr0, $vr4
	vsub.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB63_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB63_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB63_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB63_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB63_15
.LBB63_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB63_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB63_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB63_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB63_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB63_17
.LBB63_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB63_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB63_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB63_16
.LBB63_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB63_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s0
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB63_3
# %bb.18:                               #   in Loop: Header=BB63_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB63_3
.LBB63_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB63_21
	.p2align	4, , 16
.LBB63_20:                              # %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit
                                        #   in Loop: Header=BB63_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB63_23
.LBB63_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB63_20
# %bb.22:                               #   in Loop: Header=BB63_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB63_20
.LBB63_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB63_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB63_27
.LBB63_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB63_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB63_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI63_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI63_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB63_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end63:
	.size	_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc, .Lfunc_end63-_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
.LCPI64_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB64_23
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB64_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB64_4
	.p2align	4, , 16
.LBB64_3:                               # %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB64_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB64_23
.LBB64_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_9 Depth 2
                                        #     Child Loop BB64_13 Depth 2
                                        #     Child Loop BB64_16 Depth 2
	bgeu	$s0, $a5, .LBB64_6
# %bb.5:                                #   in Loop: Header=BB64_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB64_15
	.p2align	4, , 16
.LBB64_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB64_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB64_8
# %bb.7:                                #   in Loop: Header=BB64_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB64_12
	.p2align	4, , 16
.LBB64_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB64_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB64_9:                               # %vector.body
                                        #   Parent Loop BB64_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.h	$vr0, $vr0, $vr4
	vsub.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB64_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB64_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB64_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB64_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB64_15
.LBB64_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB64_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB64_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB64_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vsub.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB64_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB64_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB64_17
.LBB64_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB64_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB64_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB64_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB64_16
.LBB64_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB64_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s3
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB64_3
# %bb.18:                               #   in Loop: Header=BB64_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB64_3
.LBB64_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB64_21
	.p2align	4, , 16
.LBB64_20:                              # %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB64_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB64_23
.LBB64_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s3
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB64_20
# %bb.22:                               #   in Loop: Header=BB64_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB64_20
.LBB64_23:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB64_25
# %bb.24:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB64_27
.LBB64_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB64_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB64_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI64_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI64_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB64_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end64:
	.size	_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end64-_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
.LCPI65_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc: # @_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB65_23
# %bb.1:                                # %.preheader.lr.ph
	lu12i.w	$a0, 1
	ori	$a0, $a0, 3904
	mul.d	$s7, $s0, $a0
	blez	$s1, .LBB65_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$fp, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $s8
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB65_4
	.p2align	4, , 16
.LBB65_3:                               # %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB65_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB65_23
.LBB65_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_9 Depth 2
                                        #     Child Loop BB65_13 Depth 2
                                        #     Child Loop BB65_16 Depth 2
	bgeu	$s1, $a5, .LBB65_6
# %bb.5:                                #   in Loop: Header=BB65_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB65_15
	.p2align	4, , 16
.LBB65_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB65_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB65_8
# %bb.7:                                #   in Loop: Header=BB65_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB65_12
	.p2align	4, , 16
.LBB65_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB65_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB65_9:                               # %vector.body
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr2, $vr4
	vmadd.h	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB65_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB65_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s1, .LBB65_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB65_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB65_15
.LBB65_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB65_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB65_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr1, $vr5
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB65_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB65_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB65_17
.LBB65_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB65_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB65_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB65_16
.LBB65_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB65_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s7, $a2
	bstrpick.d	$a2, $a2, 15, 0
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB65_3
# %bb.18:                               #   in Loop: Header=BB65_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB65_3
.LBB65_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB65_21
	.p2align	4, , 16
.LBB65_20:                              # %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit
                                        #   in Loop: Header=BB65_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB65_23
.LBB65_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s7, $a0
	slli.d	$a0, $a0, 48
	beqz	$a0, .LBB65_20
# %bb.22:                               #   in Loop: Header=BB65_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB65_20
.LBB65_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB65_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB65_27
.LBB65_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB65_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB65_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI65_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI65_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB65_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end65:
	.size	_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc, .Lfunc_end65-_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
.LCPI66_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB66_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	lu12i.w	$a3, 1
	ori	$a3, $a3, 3904
	mul.d	$s4, $a2, $a3
	blez	$s0, .LBB66_19
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$fp, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s5, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $s5
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB66_4
	.p2align	4, , 16
.LBB66_3:                               # %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB66_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB66_23
.LBB66_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_9 Depth 2
                                        #     Child Loop BB66_13 Depth 2
                                        #     Child Loop BB66_16 Depth 2
	bgeu	$s0, $a5, .LBB66_6
# %bb.5:                                #   in Loop: Header=BB66_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB66_15
	.p2align	4, , 16
.LBB66_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB66_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB66_8
# %bb.7:                                #   in Loop: Header=BB66_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB66_12
	.p2align	4, , 16
.LBB66_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB66_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB66_9:                               # %vector.body
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.h	$vr0, $vr4, $vr2
	vmadd.h	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB66_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB66_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB66_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB66_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB66_15
.LBB66_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB66_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB66_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vmadd.h	$vr0, $vr5, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB66_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB66_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB66_17
.LBB66_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB66_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB66_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB66_16
.LBB66_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB66_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s4, $a2
	bstrpick.d	$a2, $a2, 15, 0
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB66_3
# %bb.18:                               #   in Loop: Header=BB66_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB66_3
.LBB66_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB66_21
	.p2align	4, , 16
.LBB66_20:                              # %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB66_21 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB66_23
.LBB66_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s4, $a0
	slli.d	$a0, $a0, 48
	beqz	$a0, .LBB66_20
# %bb.22:                               #   in Loop: Header=BB66_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB66_20
.LBB66_23:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB66_25
# %bb.24:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB66_27
.LBB66_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB66_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB66_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI66_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI66_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB66_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end66:
	.size	_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end66-_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
.LCPI67_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB67_23
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$s4, $a2, $s3
	blez	$s0, .LBB67_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s5, $zero
	mul.d	$a0, $a0, $s3
	mul.d	$s2, $a0, $s2
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$fp, $a0, 4
	vreplgr2vr.h	$vr4, $s2
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s3, $a0, 2
	vinsgr2vr.h	$vr5, $s2, 0
	vinsgr2vr.h	$vr5, $s2, 1
	vinsgr2vr.h	$vr5, $s2, 2
	vinsgr2vr.h	$vr5, $s2, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB67_4
	.p2align	4, , 16
.LBB67_3:                               # %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB67_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB67_23
.LBB67_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_9 Depth 2
                                        #     Child Loop BB67_13 Depth 2
                                        #     Child Loop BB67_16 Depth 2
	bgeu	$s0, $a5, .LBB67_6
# %bb.5:                                #   in Loop: Header=BB67_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB67_15
	.p2align	4, , 16
.LBB67_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB67_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB67_8
# %bb.7:                                #   in Loop: Header=BB67_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB67_12
	.p2align	4, , 16
.LBB67_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB67_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $fp
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB67_9:                               # %vector.body
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr0, $vr2
	vadd.h	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB67_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB67_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$fp, $s0, .LBB67_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB67_4 Depth=1
	move	$a2, $fp
	move	$a3, $fp
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB67_15
.LBB67_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB67_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB67_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr0, $vr5
	vadd.h	$vr0, $vr0, $vr1
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB67_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB67_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB67_17
.LBB67_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB67_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB67_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a0, $s2
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB67_16
.LBB67_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB67_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB67_3
# %bb.18:                               #   in Loop: Header=BB67_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB67_3
.LBB67_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB67_21
	.p2align	4, , 16
.LBB67_20:                              # %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB67_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB67_23
.LBB67_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s4, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB67_20
# %bb.22:                               #   in Loop: Header=BB67_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB67_20
.LBB67_23:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB67_25
# %bb.24:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB67_27
.LBB67_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB67_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB67_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI67_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI67_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB67_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end67:
	.size	_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end67-_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
.LCPI68_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc: # @_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB68_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB68_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 8
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 64                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB68_4
	.p2align	4, , 16
.LBB68_3:                               # %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB68_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB68_23
.LBB68_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_12 Depth 2
                                        #     Child Loop BB68_9 Depth 2
                                        #     Child Loop BB68_16 Depth 2
	bgeu	$s1, $a5, .LBB68_6
# %bb.5:                                #   in Loop: Header=BB68_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB68_15
	.p2align	4, , 16
.LBB68_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB68_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB68_11
# %bb.7:                                #   in Loop: Header=BB68_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
.LBB68_8:                               # %vec.epilog.ph
                                        #   in Loop: Header=BB68_4 Depth=1
	vld	$vr0, $sp, 64                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB68_9:                               # %vec.epilog.vector.body
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr1, $a2, 0
	vdiv.hu	$vr1, $vr1, $vr4
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 8
	addi.d	$a2, $a2, 16
	bnez	$a0, .LBB68_9
# %bb.10:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB68_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	bne	$fp, $s1, .LBB68_15
	b	.LBB68_17
	.p2align	4, , 16
.LBB68_11:                              # %vector.body.preheader
                                        #   in Loop: Header=BB68_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB68_12:                              # %vector.body
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vdiv.hu	$vr2, $vr2, $vr4
	vdiv.hu	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB68_12
# %bb.13:                               # %middle.block
                                        #   in Loop: Header=BB68_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB68_17
# %bb.14:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB68_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	bnez	$a4, .LBB68_8
	.p2align	4, , 16
.LBB68_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB68_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB68_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	div.du	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB68_16
.LBB68_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB68_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.du	$a2, $a2, $s0
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB68_3
# %bb.18:                               #   in Loop: Header=BB68_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB68_3
.LBB68_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB68_21
	.p2align	4, , 16
.LBB68_20:                              # %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit
                                        #   in Loop: Header=BB68_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB68_23
.LBB68_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.du	$a0, $a0, $s0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB68_20
# %bb.22:                               #   in Loop: Header=BB68_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB68_20
.LBB68_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB68_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB68_27
.LBB68_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB68_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB68_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI68_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI68_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB68_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end68:
	.size	_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc, .Lfunc_end68-_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
.LCPI69_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s5, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB69_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB69_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$s8, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	move	$fp, $zero
	b	.LBB69_4
	.p2align	4, , 16
.LBB69_3:                               # %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB69_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB69_17
.LBB69_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_7 Depth 2
                                        #     Child Loop BB69_10 Depth 2
	bne	$s4, $a7, .LBB69_6
# %bb.5:                                #   in Loop: Header=BB69_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB69_9
	.p2align	4, , 16
.LBB69_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB69_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	addi.d	$a4, $s5, 2
	.p2align	4, , 16
.LBB69_7:                               # %vector.body
                                        #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a5, $a4, -2
	ld.hu	$a6, $a4, 0
	div.du	$a5, $a5, $s3
	div.du	$a6, $a6, $s3
	div.du	$a5, $a5, $s2
	div.du	$a6, $a6, $s2
	div.du	$a5, $a5, $s1
	div.du	$a6, $a6, $s1
	div.du	$a5, $a5, $s0
	div.du	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 4
	bnez	$a3, .LBB69_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB69_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s8
	beq	$s8, $s4, .LBB69_11
.LBB69_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB69_4 Depth=1
	alsl.d	$a2, $a3, $s5, 1
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB69_10:                              # %scalar.ph
                                        #   Parent Loop BB69_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	div.du	$a4, $a4, $s3
	div.du	$a4, $a4, $s2
	div.du	$a4, $a4, $s1
	div.du	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB69_10
.LBB69_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB69_4 Depth=1
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.du	$a2, $a2, $s3
	div.du	$a2, $a2, $s2
	div.du	$a2, $a2, $s1
	div.du	$a2, $a2, $s0
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB69_3
# %bb.12:                               #   in Loop: Header=BB69_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB69_3
.LBB69_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	b	.LBB69_15
	.p2align	4, , 16
.LBB69_14:                              # %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB69_15 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB69_17
.LBB69_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.du	$a0, $a0, $s3
	div.du	$a0, $a0, $s2
	div.du	$a0, $a0, $s1
	div.du	$a0, $a0, $s0
	mul.d	$a0, $a0, $s5
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB69_14
# %bb.16:                               #   in Loop: Header=BB69_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB69_14
.LBB69_17:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB69_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB69_21
.LBB69_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB69_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB69_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI69_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI69_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB69_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end69:
	.size	_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end69-_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
.LCPI70_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB70_23
# %bb.1:                                # %.preheader.lr.ph
	div.du	$a0, $s5, $s4
	div.du	$a0, $a0, $s3
	div.du	$s3, $a0, $s2
	blez	$s0, .LBB70_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB70_4
	.p2align	4, , 16
.LBB70_3:                               # %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB70_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB70_23
.LBB70_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_9 Depth 2
                                        #     Child Loop BB70_13 Depth 2
                                        #     Child Loop BB70_16 Depth 2
	bgeu	$s0, $a5, .LBB70_6
# %bb.5:                                #   in Loop: Header=BB70_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB70_15
	.p2align	4, , 16
.LBB70_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB70_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB70_8
# %bb.7:                                #   in Loop: Header=BB70_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB70_12
	.p2align	4, , 16
.LBB70_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB70_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB70_9:                               # %vector.body
                                        #   Parent Loop BB70_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	vadd.h	$vr0, $vr0, $vr4
	vadd.h	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB70_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB70_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB70_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB70_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB70_15
.LBB70_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB70_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB70_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB70_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr0, $vr1, $vr0
	vadd.h	$vr0, $vr0, $vr5
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB70_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB70_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB70_17
.LBB70_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB70_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB70_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB70_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB70_16
.LBB70_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB70_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB70_3
# %bb.18:                               #   in Loop: Header=BB70_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB70_3
.LBB70_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB70_21
	.p2align	4, , 16
.LBB70_20:                              # %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB70_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB70_23
.LBB70_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB70_20
# %bb.22:                               #   in Loop: Header=BB70_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB70_20
.LBB70_23:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB70_25
# %bb.24:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB70_27
.LBB70_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB70_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB70_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI70_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI70_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB70_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end70:
	.size	_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end70-_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
.LCPI71_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB71_23
# %bb.1:                                # %.preheader.lr.ph
	mul.w	$a0, $s4, $s5
	div.wu	$a0, $a0, $s2
	sub.d	$s3, $s3, $a0
	blez	$s0, .LBB71_19
# %bb.2:                                # %.preheader.lr.ph.split.us
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s5, $a0, 4
	vreplgr2vr.h	$vr4, $s3
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s3, 0
	vinsgr2vr.h	$vr5, $s3, 1
	vinsgr2vr.h	$vr5, $s3, 2
	vinsgr2vr.h	$vr5, $s3, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB71_4
	.p2align	4, , 16
.LBB71_3:                               # %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB71_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB71_23
.LBB71_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_9 Depth 2
                                        #     Child Loop BB71_13 Depth 2
                                        #     Child Loop BB71_16 Depth 2
	bgeu	$s0, $a5, .LBB71_6
# %bb.5:                                #   in Loop: Header=BB71_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB71_15
	.p2align	4, , 16
.LBB71_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB71_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB71_8
# %bb.7:                                #   in Loop: Header=BB71_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB71_12
	.p2align	4, , 16
.LBB71_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB71_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB71_9:                               # %vector.body
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.h	$vr2, $vr4, $vr2
	vadd.h	$vr3, $vr4, $vr3
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB71_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB71_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s5, $s0, .LBB71_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB71_4 Depth=1
	move	$a2, $s5
	move	$a3, $s5
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB71_15
.LBB71_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB71_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB71_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vadd.h	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB71_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB71_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s0, .LBB71_17
.LBB71_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB71_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB71_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	add.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB71_16
.LBB71_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB71_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s7
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB71_3
# %bb.18:                               #   in Loop: Header=BB71_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB71_3
.LBB71_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB71_21
	.p2align	4, , 16
.LBB71_20:                              # %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB71_21 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB71_23
.LBB71_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB71_20
# %bb.22:                               #   in Loop: Header=BB71_21 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB71_20
.LBB71_23:                              # %._crit_edge23
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB71_25
# %bb.24:                               # %._crit_edge23
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB71_27
.LBB71_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB71_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB71_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI71_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI71_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB71_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end71:
	.size	_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end71-_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
.LCPI72_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc: # @_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB72_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB72_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB72_4
	.p2align	4, , 16
.LBB72_3:                               # %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB72_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB72_23
.LBB72_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_9 Depth 2
                                        #     Child Loop BB72_13 Depth 2
                                        #     Child Loop BB72_16 Depth 2
	bgeu	$s1, $a5, .LBB72_6
# %bb.5:                                #   in Loop: Header=BB72_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB72_15
	.p2align	4, , 16
.LBB72_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB72_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB72_8
# %bb.7:                                #   in Loop: Header=BB72_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB72_12
	.p2align	4, , 16
.LBB72_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB72_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB72_9:                               # %vector.body
                                        #   Parent Loop BB72_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB72_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB72_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB72_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB72_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB72_15
.LBB72_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB72_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB72_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB72_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr1, $vr5
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB72_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB72_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB72_17
.LBB72_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB72_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB72_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB72_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB72_16
.LBB72_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB72_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB72_3
# %bb.18:                               #   in Loop: Header=BB72_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB72_3
.LBB72_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB72_21
	.p2align	4, , 16
.LBB72_20:                              # %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit
                                        #   in Loop: Header=BB72_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB72_23
.LBB72_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB72_20
# %bb.22:                               #   in Loop: Header=BB72_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB72_20
.LBB72_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB72_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB72_27
.LBB72_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB72_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB72_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI72_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI72_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB72_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end72:
	.size	_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc, .Lfunc_end72-_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
.LCPI73_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s6, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB73_23
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s4, $s3
	and	$a0, $s5, $a0
	and	$fp, $a0, $s6
	blez	$s0, .LBB73_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s2, $a0, 4
	vinsgr2vr.h	$vr0, $s4, 0
	vinsgr2vr.h	$vr1, $s3, 0
	vinsgr2vr.h	$vr2, $s5, 0
	vinsgr2vr.h	$vr3, $s6, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.h	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 2
	move	$a2, $s3
	slli.d	$s3, $a0, 2
	and	$a0, $a2, $s4
	and	$a0, $s5, $a0
	and	$s4, $s6, $a0
	vinsgr2vr.h	$vr5, $s4, 0
	vinsgr2vr.h	$vr5, $s4, 1
	vinsgr2vr.h	$vr5, $s4, 2
	vinsgr2vr.h	$vr5, $s4, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB73_4
	.p2align	4, , 16
.LBB73_3:                               # %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB73_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB73_23
.LBB73_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_9 Depth 2
                                        #     Child Loop BB73_13 Depth 2
                                        #     Child Loop BB73_16 Depth 2
	bgeu	$s0, $a5, .LBB73_6
# %bb.5:                                #   in Loop: Header=BB73_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB73_15
	.p2align	4, , 16
.LBB73_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB73_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB73_8
# %bb.7:                                #   in Loop: Header=BB73_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB73_12
	.p2align	4, , 16
.LBB73_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB73_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB73_9:                               # %vector.body
                                        #   Parent Loop BB73_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB73_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB73_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB73_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB73_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB73_15
.LBB73_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB73_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB73_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB73_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vand.v	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB73_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB73_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB73_17
.LBB73_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB73_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB73_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB73_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.hu	$a4, $a2, 0
	and	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB73_16
.LBB73_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB73_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $fp, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB73_3
# %bb.18:                               #   in Loop: Header=BB73_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB73_3
.LBB73_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB73_21
	.p2align	4, , 16
.LBB73_20:                              # %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB73_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB73_23
.LBB73_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB73_20
# %bb.22:                               #   in Loop: Header=BB73_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB73_20
.LBB73_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB73_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB73_27
.LBB73_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB73_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB73_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI73_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI73_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB73_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end73:
	.size	_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end73-_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
.LCPI74_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc,@function
_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc: # @_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB74_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB74_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB74_4
	.p2align	4, , 16
.LBB74_3:                               # %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB74_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB74_23
.LBB74_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_9 Depth 2
                                        #     Child Loop BB74_13 Depth 2
                                        #     Child Loop BB74_16 Depth 2
	bgeu	$s1, $a5, .LBB74_6
# %bb.5:                                #   in Loop: Header=BB74_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB74_15
	.p2align	4, , 16
.LBB74_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB74_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB74_8
# %bb.7:                                #   in Loop: Header=BB74_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB74_12
	.p2align	4, , 16
.LBB74_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB74_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB74_9:                               # %vector.body
                                        #   Parent Loop BB74_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB74_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB74_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB74_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB74_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB74_15
.LBB74_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB74_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB74_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB74_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr1, $vr5
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB74_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB74_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB74_17
.LBB74_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB74_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB74_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB74_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB74_16
.LBB74_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB74_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB74_3
# %bb.18:                               #   in Loop: Header=BB74_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB74_3
.LBB74_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB74_21
	.p2align	4, , 16
.LBB74_20:                              # %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit
                                        #   in Loop: Header=BB74_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB74_23
.LBB74_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB74_20
# %bb.22:                               #   in Loop: Header=BB74_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB74_20
.LBB74_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB74_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB74_27
.LBB74_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB74_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB74_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI74_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI74_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB74_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end74:
	.size	_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc, .Lfunc_end74-_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
.LCPI75_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s6, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB75_23
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s4, $s3
	or	$a0, $s5, $a0
	or	$fp, $a0, $s6
	blez	$s0, .LBB75_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s2, $a0, 4
	vinsgr2vr.h	$vr0, $s4, 0
	vinsgr2vr.h	$vr1, $s3, 0
	vinsgr2vr.h	$vr2, $s5, 0
	vinsgr2vr.h	$vr3, $s6, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.h	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 2
	move	$a2, $s3
	slli.d	$s3, $a0, 2
	or	$a0, $a2, $s4
	or	$a0, $s5, $a0
	or	$s4, $s6, $a0
	vinsgr2vr.h	$vr5, $s4, 0
	vinsgr2vr.h	$vr5, $s4, 1
	vinsgr2vr.h	$vr5, $s4, 2
	vinsgr2vr.h	$vr5, $s4, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB75_4
	.p2align	4, , 16
.LBB75_3:                               # %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB75_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB75_23
.LBB75_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_9 Depth 2
                                        #     Child Loop BB75_13 Depth 2
                                        #     Child Loop BB75_16 Depth 2
	bgeu	$s0, $a5, .LBB75_6
# %bb.5:                                #   in Loop: Header=BB75_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB75_15
	.p2align	4, , 16
.LBB75_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB75_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB75_8
# %bb.7:                                #   in Loop: Header=BB75_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB75_12
	.p2align	4, , 16
.LBB75_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB75_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB75_9:                               # %vector.body
                                        #   Parent Loop BB75_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB75_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB75_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB75_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB75_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB75_15
.LBB75_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB75_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB75_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB75_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vor.v	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB75_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB75_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB75_17
.LBB75_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB75_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB75_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB75_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	or	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB75_16
.LBB75_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB75_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $fp, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB75_3
# %bb.18:                               #   in Loop: Header=BB75_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB75_3
.LBB75_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB75_21
	.p2align	4, , 16
.LBB75_20:                              # %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB75_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB75_23
.LBB75_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB75_20
# %bb.22:                               #   in Loop: Header=BB75_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB75_20
.LBB75_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB75_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB75_27
.LBB75_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB75_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB75_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI75_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI75_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB75_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end75:
	.size	_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end75-_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
.LCPI76_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc: # @_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB76_23
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB76_19
# %bb.2:                                # %.preheader.us.preheader
	andi	$a0, $s1, 12
	st.d	$a0, $sp, 8                     # 8-byte Folded Spill
	bstrpick.d	$a0, $s1, 30, 4
	slli.d	$s8, $a0, 4
	vreplgr2vr.h	$vr4, $s0
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vinsgr2vr.h	$vr5, $s0, 0
	vinsgr2vr.h	$vr5, $s0, 1
	vinsgr2vr.h	$vr5, $s0, 2
	vinsgr2vr.h	$vr5, $s0, 3
	sub.d	$a0, $zero, $fp
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB76_4
	.p2align	4, , 16
.LBB76_3:                               # %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us
                                        #   in Loop: Header=BB76_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB76_23
.LBB76_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_9 Depth 2
                                        #     Child Loop BB76_13 Depth 2
                                        #     Child Loop BB76_16 Depth 2
	bgeu	$s1, $a5, .LBB76_6
# %bb.5:                                #   in Loop: Header=BB76_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB76_15
	.p2align	4, , 16
.LBB76_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB76_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s1, $a0, .LBB76_8
# %bb.7:                                #   in Loop: Header=BB76_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB76_12
	.p2align	4, , 16
.LBB76_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB76_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB76_9:                               # %vector.body
                                        #   Parent Loop BB76_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB76_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB76_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s8, $s1, .LBB76_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB76_4 Depth=1
	move	$a2, $s8
	move	$a3, $s8
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	beqz	$a4, .LBB76_15
.LBB76_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB76_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s2, 1
	.p2align	4, , 16
.LBB76_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB76_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr1, $vr5
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB76_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB76_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB76_17
.LBB76_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB76_4 Depth=1
	alsl.d	$a2, $a3, $s2, 1
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB76_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB76_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB76_16
.LBB76_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB76_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB76_3
# %bb.18:                               #   in Loop: Header=BB76_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB76_3
.LBB76_19:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB76_21
	.p2align	4, , 16
.LBB76_20:                              # %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit
                                        #   in Loop: Header=BB76_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB76_23
.LBB76_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB76_20
# %bb.22:                               #   in Loop: Header=BB76_21 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB76_20
.LBB76_23:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB76_25
# %bb.24:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB76_27
.LBB76_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB76_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB76_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI76_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI76_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB76_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end76:
	.size	_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc, .Lfunc_end76-_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
.LCPI77_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s6, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 32                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB77_23
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s4, $s3
	xor	$a0, $s5, $a0
	xor	$fp, $a0, $s6
	blez	$s0, .LBB77_19
# %bb.2:                                # %.preheader.us.preheader
	move	$s7, $zero
	andi	$a0, $s0, 12
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	bstrpick.d	$a0, $s0, 30, 4
	slli.d	$s2, $a0, 4
	vinsgr2vr.h	$vr0, $s4, 0
	vinsgr2vr.h	$vr1, $s3, 0
	vinsgr2vr.h	$vr2, $s5, 0
	vinsgr2vr.h	$vr3, $s6, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.h	$vr4, $vr0, 0
	bstrpick.d	$a0, $s0, 30, 2
	move	$a2, $s3
	slli.d	$s3, $a0, 2
	xor	$a0, $a2, $s4
	xor	$a0, $s5, $a0
	xor	$s4, $s6, $a0
	vinsgr2vr.h	$vr5, $s4, 0
	vinsgr2vr.h	$vr5, $s4, 1
	vinsgr2vr.h	$vr5, $s4, 2
	vinsgr2vr.h	$vr5, $s4, 3
	sub.d	$a0, $zero, $s3
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	vst	$vr5, $sp, 48                   # 16-byte Folded Spill
	b	.LBB77_4
	.p2align	4, , 16
.LBB77_3:                               # %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB77_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB77_23
.LBB77_4:                               # %iter.check
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_9 Depth 2
                                        #     Child Loop BB77_13 Depth 2
                                        #     Child Loop BB77_16 Depth 2
	bgeu	$s0, $a5, .LBB77_6
# %bb.5:                                #   in Loop: Header=BB77_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB77_15
	.p2align	4, , 16
.LBB77_6:                               # %vector.main.loop.iter.check
                                        #   in Loop: Header=BB77_4 Depth=1
	ori	$a0, $zero, 16
	bgeu	$s0, $a0, .LBB77_8
# %bb.7:                                #   in Loop: Header=BB77_4 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB77_12
	.p2align	4, , 16
.LBB77_8:                               # %vector.body.preheader
                                        #   in Loop: Header=BB77_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB77_9:                               # %vector.body
                                        #   Parent Loop BB77_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.h	$vr0, $vr2, $vr0
	vadd.h	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -16
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB77_9
# %bb.10:                               # %middle.block
                                        #   in Loop: Header=BB77_4 Depth=1
	vadd.h	$vr0, $vr1, $vr0
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$s2, $s0, .LBB77_17
# %bb.11:                               # %vec.epilog.iter.check
                                        #   in Loop: Header=BB77_4 Depth=1
	move	$a2, $s2
	move	$a3, $s2
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	beqz	$a4, .LBB77_15
.LBB77_12:                              # %vec.epilog.ph
                                        #   in Loop: Header=BB77_4 Depth=1
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vinsgr2vr.h	$vr0, $a0, 0
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a2
	alsl.d	$a2, $a2, $s1, 1
	.p2align	4, , 16
.LBB77_13:                              # %vec.epilog.vector.body
                                        #   Parent Loop BB77_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	vinsgr2vr.d	$vr1, $a3, 0
	vxor.v	$vr1, $vr5, $vr1
	vadd.h	$vr0, $vr1, $vr0
	addi.d	$a0, $a0, 4
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB77_13
# %bb.14:                               # %vec.epilog.middle.block
                                        #   in Loop: Header=BB77_4 Depth=1
	vhaddw.w.h	$vr0, $vr0, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s3
	beq	$s3, $s0, .LBB77_17
.LBB77_15:                              # %vec.epilog.scalar.ph.preheader
                                        #   in Loop: Header=BB77_4 Depth=1
	alsl.d	$a2, $a3, $s1, 1
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB77_16:                              # %vec.epilog.scalar.ph
                                        #   Parent Loop BB77_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.h	$a4, $a2, 0
	xor	$a4, $a4, $s4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 2
	bnez	$a3, .LBB77_16
.LBB77_17:                              # %._crit_edge.us
                                        #   in Loop: Header=BB77_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $fp, $a2
	mul.d	$a2, $a2, $s6
	bstrpick.d	$a2, $a2, 15, 6
	slli.d	$a2, $a2, 6
	bstrpick.d	$a0, $a0, 15, 0
	beq	$a0, $a2, .LBB77_3
# %bb.18:                               #   in Loop: Header=BB77_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 48                   # 16-byte Folded Reload
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB77_3
.LBB77_19:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB77_21
	.p2align	4, , 16
.LBB77_20:                              # %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB77_21 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB77_23
.LBB77_21:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	bstrpick.d	$a0, $a0, 15, 6
	slli.d	$a0, $a0, 6
	beqz	$a0, .LBB77_20
# %bb.22:                               #   in Loop: Header=BB77_21 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB77_20
.LBB77_23:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB77_25
# %bb.24:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB77_27
.LBB77_25:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB77_28
# %bb.26:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB77_27:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI77_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI77_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB77_28:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end77:
	.size	_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end77-_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
.LCPI78_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc: # @_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB78_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB78_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB78_4
	.p2align	4, , 16
.LBB78_3:                               # %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB78_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB78_17
.LBB78_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_7 Depth 2
                                        #     Child Loop BB78_10 Depth 2
	bgeu	$s1, $a5, .LBB78_6
# %bb.5:                                #   in Loop: Header=BB78_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB78_9
	.p2align	4, , 16
.LBB78_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB78_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB78_7:                               # %vector.body
                                        #   Parent Loop BB78_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB78_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB78_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB78_11
.LBB78_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB78_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB78_10:                              # %scalar.ph
                                        #   Parent Loop BB78_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB78_10
.LBB78_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB78_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB78_3
# %bb.12:                               #   in Loop: Header=BB78_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB78_3
.LBB78_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB78_15
	.p2align	4, , 16
.LBB78_14:                              # %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit
                                        #   in Loop: Header=BB78_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB78_17
.LBB78_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	sub.w	$a0, $zero, $a0
	beq	$s0, $a0, .LBB78_14
# %bb.16:                               #   in Loop: Header=BB78_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB78_14
.LBB78_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB78_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB78_21
.LBB78_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB78_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB78_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI78_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI78_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB78_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end78:
	.size	_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc, .Lfunc_end78-_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
.LCPI79_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB79_17
# %bb.1:                                # %.preheader.lr.ph
	mul.w	$s7, $s0, $s1
	blez	$s1, .LBB79_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s4, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB79_4
	.p2align	4, , 16
.LBB79_3:                               # %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB79_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB79_17
.LBB79_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_7 Depth 2
                                        #     Child Loop BB79_10 Depth 2
	bgeu	$s1, $a5, .LBB79_6
# %bb.5:                                #   in Loop: Header=BB79_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB79_9
	.p2align	4, , 16
.LBB79_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB79_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB79_7:                               # %vector.body
                                        #   Parent Loop BB79_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB79_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB79_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB79_11
.LBB79_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB79_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB79_10:                              # %scalar.ph
                                        #   Parent Loop BB79_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB79_10
.LBB79_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB79_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	add.w	$a0, $a0, $s7
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.w	$a2, $a2, $s5
	beq	$a0, $a2, .LBB79_3
# %bb.12:                               #   in Loop: Header=BB79_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB79_3
.LBB79_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB79_15
	.p2align	4, , 16
.LBB79_14:                              # %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit
                                        #   in Loop: Header=BB79_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB79_17
.LBB79_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.w	$a0, $a0, $s2
	beq	$s7, $a0, .LBB79_14
# %bb.16:                               #   in Loop: Header=BB79_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB79_14
.LBB79_17:                              # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB79_19
# %bb.18:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB79_21
.LBB79_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB79_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB79_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI79_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI79_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB79_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end79:
	.size	_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc, .Lfunc_end79-_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI80_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB80_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.w	$s3, $a2, $a0
	blez	$s0, .LBB80_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s4, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB80_4
	.p2align	4, , 16
.LBB80_3:                               # %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB80_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB80_17
.LBB80_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_7 Depth 2
                                        #     Child Loop BB80_10 Depth 2
	bgeu	$s0, $a5, .LBB80_6
# %bb.5:                                #   in Loop: Header=BB80_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB80_9
	.p2align	4, , 16
.LBB80_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB80_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB80_7:                               # %vector.body
                                        #   Parent Loop BB80_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr4, $vr0
	vadd.w	$vr1, $vr4, $vr1
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB80_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB80_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB80_11
.LBB80_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB80_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB80_10:                              # %scalar.ph
                                        #   Parent Loop BB80_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB80_10
.LBB80_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB80_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB80_3
# %bb.12:                               #   in Loop: Header=BB80_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB80_3
.LBB80_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB80_15
	.p2align	4, , 16
.LBB80_14:                              # %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB80_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB80_17
.LBB80_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	sub.w	$a0, $zero, $a0
	beq	$s3, $a0, .LBB80_14
# %bb.16:                               #   in Loop: Header=BB80_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB80_14
.LBB80_17:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB80_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB80_21
.LBB80_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB80_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB80_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI80_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI80_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB80_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end80:
	.size	_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end80-_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
.LCPI81_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc: # @_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB81_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB81_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB81_4
	.p2align	4, , 16
.LBB81_3:                               # %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB81_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB81_17
.LBB81_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_7 Depth 2
                                        #     Child Loop BB81_10 Depth 2
	bgeu	$s1, $a5, .LBB81_6
# %bb.5:                                #   in Loop: Header=BB81_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB81_9
	.p2align	4, , 16
.LBB81_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB81_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB81_7:                               # %vector.body
                                        #   Parent Loop BB81_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.w	$vr0, $vr0, $vr4
	vsub.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB81_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB81_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB81_11
.LBB81_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB81_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB81_10:                              # %scalar.ph
                                        #   Parent Loop BB81_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB81_10
.LBB81_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB81_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	sub.d	$a2, $a2, $s0
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB81_3
# %bb.12:                               #   in Loop: Header=BB81_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB81_3
.LBB81_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB81_15
	.p2align	4, , 16
.LBB81_14:                              # %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit
                                        #   in Loop: Header=BB81_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB81_17
.LBB81_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beq	$s0, $a0, .LBB81_14
# %bb.16:                               #   in Loop: Header=BB81_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB81_14
.LBB81_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB81_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB81_21
.LBB81_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB81_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB81_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI81_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI81_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB81_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end81:
	.size	_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc, .Lfunc_end81-_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI82_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB82_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.w	$s3, $a2, $a0
	blez	$s0, .LBB82_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s4, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB82_4
	.p2align	4, , 16
.LBB82_3:                               # %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB82_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB82_17
.LBB82_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_7 Depth 2
                                        #     Child Loop BB82_10 Depth 2
	bgeu	$s0, $a5, .LBB82_6
# %bb.5:                                #   in Loop: Header=BB82_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB82_9
	.p2align	4, , 16
.LBB82_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB82_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB82_7:                               # %vector.body
                                        #   Parent Loop BB82_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.w	$vr0, $vr0, $vr4
	vsub.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB82_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB82_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB82_11
.LBB82_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB82_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB82_10:                              # %scalar.ph
                                        #   Parent Loop BB82_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB82_10
.LBB82_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB82_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	sub.d	$a2, $a2, $s3
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB82_3
# %bb.12:                               #   in Loop: Header=BB82_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB82_3
.LBB82_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB82_15
	.p2align	4, , 16
.LBB82_14:                              # %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB82_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB82_17
.LBB82_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beq	$s3, $a0, .LBB82_14
# %bb.16:                               #   in Loop: Header=BB82_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB82_14
.LBB82_17:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB82_19
# %bb.18:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB82_21
.LBB82_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB82_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB82_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI82_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI82_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB82_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end82:
	.size	_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end82-_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
.LCPI83_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc: # @_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB83_17
# %bb.1:                                # %.preheader.lr.ph
	lu12i.w	$a0, 1
	ori	$a0, $a0, 3904
	mul.d	$s7, $s0, $a0
	blez	$s1, .LBB83_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB83_4
	.p2align	4, , 16
.LBB83_3:                               # %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB83_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB83_17
.LBB83_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_7 Depth 2
                                        #     Child Loop BB83_10 Depth 2
	bgeu	$s1, $a5, .LBB83_6
# %bb.5:                                #   in Loop: Header=BB83_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB83_9
	.p2align	4, , 16
.LBB83_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB83_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB83_7:                               # %vector.body
                                        #   Parent Loop BB83_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB83_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB83_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB83_11
.LBB83_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB83_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB83_10:                              # %scalar.ph
                                        #   Parent Loop BB83_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB83_10
.LBB83_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB83_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.w	$a2, $s7, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB83_3
# %bb.12:                               #   in Loop: Header=BB83_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB83_3
.LBB83_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB83_15
	.p2align	4, , 16
.LBB83_14:                              # %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit
                                        #   in Loop: Header=BB83_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB83_17
.LBB83_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $s7, $a0
	beqz	$a0, .LBB83_14
# %bb.16:                               #   in Loop: Header=BB83_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB83_14
.LBB83_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB83_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB83_21
.LBB83_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB83_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB83_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI83_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI83_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB83_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end83:
	.size	_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc, .Lfunc_end83-_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI84_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB84_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	lu12i.w	$a3, 1
	ori	$a3, $a3, 3904
	mul.d	$s4, $a2, $a3
	blez	$s0, .LBB84_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB84_4
	.p2align	4, , 16
.LBB84_3:                               # %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB84_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB84_17
.LBB84_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_7 Depth 2
                                        #     Child Loop BB84_10 Depth 2
	bgeu	$s0, $a5, .LBB84_6
# %bb.5:                                #   in Loop: Header=BB84_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB84_9
	.p2align	4, , 16
.LBB84_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB84_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB84_7:                               # %vector.body
                                        #   Parent Loop BB84_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr4, $vr2
	vmadd.w	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB84_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB84_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB84_11
.LBB84_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB84_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB84_10:                              # %scalar.ph
                                        #   Parent Loop BB84_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB84_10
.LBB84_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB84_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.w	$a2, $s4, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB84_3
# %bb.12:                               #   in Loop: Header=BB84_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB84_3
.LBB84_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB84_15
	.p2align	4, , 16
.LBB84_14:                              # %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB84_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB84_17
.LBB84_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	mul.w	$a0, $s4, $a0
	beqz	$a0, .LBB84_14
# %bb.16:                               #   in Loop: Header=BB84_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB84_14
.LBB84_17:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB84_19
# %bb.18:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB84_21
.LBB84_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB84_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB84_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI84_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI84_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB84_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end84:
	.size	_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end84-_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
.LCPI85_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$fp, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(current_test)
	blez	$a1, .LBB85_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $fp
	mul.w	$s4, $a2, $s3
	blez	$s0, .LBB85_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $fp
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB85_4
	.p2align	4, , 16
.LBB85_3:                               # %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB85_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB85_17
.LBB85_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_7 Depth 2
                                        #     Child Loop BB85_10 Depth 2
	bgeu	$s0, $a5, .LBB85_6
# %bb.5:                                #   in Loop: Header=BB85_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB85_9
	.p2align	4, , 16
.LBB85_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB85_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB85_7:                               # %vector.body
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB85_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB85_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB85_11
.LBB85_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB85_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB85_10:                              # %scalar.ph
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB85_10
.LBB85_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB85_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.w	$a2, $a2, $s7
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB85_3
# %bb.12:                               #   in Loop: Header=BB85_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB85_3
.LBB85_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB85_15
	.p2align	4, , 16
.LBB85_14:                              # %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB85_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB85_17
.LBB85_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	sub.w	$a0, $zero, $a0
	beq	$s4, $a0, .LBB85_14
# %bb.16:                               #   in Loop: Header=BB85_15 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB85_14
.LBB85_17:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(results)
	ld.d	$a2, $s3, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB85_19
# %bb.18:                               # %._crit_edge26
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB85_21
.LBB85_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s3, %pc_lo12(results)
	beqz	$a0, .LBB85_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB85_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI85_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI85_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB85_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end85:
	.size	_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end85-_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
.LCPI86_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc: # @_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB86_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB86_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 1
	slli.d	$s7, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	b	.LBB86_4
	.p2align	4, , 16
.LBB86_3:                               # %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB86_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB86_17
.LBB86_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_7 Depth 2
                                        #     Child Loop BB86_10 Depth 2
	bne	$s1, $a7, .LBB86_6
# %bb.5:                                #   in Loop: Header=BB86_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB86_9
	.p2align	4, , 16
.LBB86_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB86_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s7
	addi.d	$a4, $s2, 4
	.p2align	4, , 16
.LBB86_7:                               # %vector.body
                                        #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	div.w	$a5, $a5, $s0
	div.w	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 8
	bnez	$a3, .LBB86_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB86_4 Depth=1
	add.w	$a0, $a2, $a0
	move	$a3, $s7
	beq	$s7, $s1, .LBB86_11
.LBB86_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB86_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB86_10:                              # %scalar.ph
                                        #   Parent Loop BB86_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	div.w	$a4, $a4, $s0
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB86_10
.LBB86_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB86_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	div.w	$a2, $a2, $s0
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB86_3
# %bb.12:                               #   in Loop: Header=BB86_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB86_3
.LBB86_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB86_15
	.p2align	4, , 16
.LBB86_14:                              # %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit
                                        #   in Loop: Header=BB86_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB86_17
.LBB86_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	div.w	$a0, $a0, $s0
	beqz	$a0, .LBB86_14
# %bb.16:                               #   in Loop: Header=BB86_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB86_14
.LBB86_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB86_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB86_21
.LBB86_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB86_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB86_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI86_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI86_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB86_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end86:
	.size	_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc, .Lfunc_end86-_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI87_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s5, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB87_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB87_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$s8, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	move	$fp, $zero
	b	.LBB87_4
	.p2align	4, , 16
.LBB87_3:                               # %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB87_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB87_17
.LBB87_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_7 Depth 2
                                        #     Child Loop BB87_10 Depth 2
	bne	$s4, $a7, .LBB87_6
# %bb.5:                                #   in Loop: Header=BB87_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB87_9
	.p2align	4, , 16
.LBB87_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB87_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	addi.d	$a4, $s5, 4
	.p2align	4, , 16
.LBB87_7:                               # %vector.body
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	div.w	$a5, $a5, $s3
	div.w	$a6, $a6, $s3
	div.w	$a5, $a5, $s2
	div.w	$a6, $a6, $s2
	div.w	$a5, $a5, $s1
	div.w	$a6, $a6, $s1
	div.w	$a5, $a5, $s0
	div.w	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 8
	bnez	$a3, .LBB87_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB87_4 Depth=1
	add.w	$a0, $a2, $a0
	move	$a3, $s8
	beq	$s8, $s4, .LBB87_11
.LBB87_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB87_4 Depth=1
	alsl.d	$a2, $a3, $s5, 2
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB87_10:                              # %scalar.ph
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	div.w	$a4, $a4, $s3
	div.w	$a4, $a4, $s2
	div.w	$a4, $a4, $s1
	div.w	$a4, $a4, $s0
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB87_10
.LBB87_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB87_4 Depth=1
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	div.w	$a2, $a2, $s3
	div.w	$a2, $a2, $s2
	div.w	$a2, $a2, $s1
	div.w	$a2, $a2, $s0
	mul.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB87_3
# %bb.12:                               #   in Loop: Header=BB87_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB87_3
.LBB87_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	b	.LBB87_15
	.p2align	4, , 16
.LBB87_14:                              # %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB87_15 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB87_17
.LBB87_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	div.w	$a0, $a0, $s3
	div.w	$a0, $a0, $s2
	div.w	$a0, $a0, $s1
	div.w	$a0, $a0, $s0
	beqz	$a0, .LBB87_14
# %bb.16:                               #   in Loop: Header=BB87_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB87_14
.LBB87_17:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB87_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB87_21
.LBB87_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB87_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB87_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI87_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI87_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB87_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end87:
	.size	_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end87-_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
.LCPI88_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB88_17
# %bb.1:                                # %.preheader.lr.ph
	div.w	$a0, $s5, $s4
	div.w	$a0, $a0, $s3
	div.w	$s3, $a0, $s2
	blez	$s0, .LBB88_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s4, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB88_4
	.p2align	4, , 16
.LBB88_3:                               # %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB88_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB88_17
.LBB88_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_7 Depth 2
                                        #     Child Loop BB88_10 Depth 2
	bgeu	$s0, $a5, .LBB88_6
# %bb.5:                                #   in Loop: Header=BB88_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB88_9
	.p2align	4, , 16
.LBB88_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB88_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB88_7:                               # %vector.body
                                        #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB88_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB88_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB88_11
.LBB88_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB88_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB88_10:                              # %scalar.ph
                                        #   Parent Loop BB88_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB88_10
.LBB88_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB88_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB88_3
# %bb.12:                               #   in Loop: Header=BB88_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB88_3
.LBB88_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB88_15
	.p2align	4, , 16
.LBB88_14:                              # %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB88_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB88_17
.LBB88_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	sub.w	$a0, $zero, $a0
	beq	$s3, $a0, .LBB88_14
# %bb.16:                               #   in Loop: Header=BB88_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB88_14
.LBB88_17:                              # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB88_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB88_21
.LBB88_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB88_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB88_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI88_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI88_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB88_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end88:
	.size	_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end88-_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI89_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB89_17
# %bb.1:                                # %.preheader.lr.ph
	mul.w	$a0, $s4, $s5
	div.w	$s5, $a0, $s3
	sub.w	$s4, $s0, $s5
	blez	$s1, .LBB89_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	vreplgr2vr.w	$vr5, $s5
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB89_4
	.p2align	4, , 16
.LBB89_3:                               # %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB89_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB89_17
.LBB89_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_7 Depth 2
                                        #     Child Loop BB89_10 Depth 2
	bgeu	$s1, $a5, .LBB89_6
# %bb.5:                                #   in Loop: Header=BB89_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB89_9
	.p2align	4, , 16
.LBB89_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB89_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB89_7:                               # %vector.body
                                        #   Parent Loop BB89_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vsub.w	$vr0, $vr0, $vr5
	vsub.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB89_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB89_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB89_11
.LBB89_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB89_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB89_10:                              # %scalar.ph
                                        #   Parent Loop BB89_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB89_10
.LBB89_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB89_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.w	$a2, $a2, $s6
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB89_3
# %bb.12:                               #   in Loop: Header=BB89_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB89_3
.LBB89_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB89_15
	.p2align	4, , 16
.LBB89_14:                              # %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB89_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB89_17
.LBB89_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	sub.w	$a0, $zero, $a0
	beq	$s4, $a0, .LBB89_14
# %bb.16:                               #   in Loop: Header=BB89_15 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB89_14
.LBB89_17:                              # %._crit_edge23
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB89_19
# %bb.18:                               # %._crit_edge23
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB89_21
.LBB89_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB89_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB89_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI89_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI89_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB89_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end89:
	.size	_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end89-_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
.LCPI90_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc: # @_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB90_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB90_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB90_4
	.p2align	4, , 16
.LBB90_3:                               # %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB90_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB90_17
.LBB90_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_7 Depth 2
                                        #     Child Loop BB90_10 Depth 2
	bgeu	$s1, $a5, .LBB90_6
# %bb.5:                                #   in Loop: Header=BB90_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB90_9
	.p2align	4, , 16
.LBB90_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB90_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB90_7:                               # %vector.body
                                        #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB90_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB90_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB90_11
.LBB90_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB90_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB90_10:                              # %scalar.ph
                                        #   Parent Loop BB90_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB90_10
.LBB90_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB90_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	and	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB90_3
# %bb.12:                               #   in Loop: Header=BB90_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB90_3
.LBB90_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB90_15
	.p2align	4, , 16
.LBB90_14:                              # %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit
                                        #   in Loop: Header=BB90_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB90_17
.LBB90_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	and	$a0, $s0, $a0
	beqz	$a0, .LBB90_14
# %bb.16:                               #   in Loop: Header=BB90_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB90_14
.LBB90_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB90_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB90_21
.LBB90_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB90_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB90_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI90_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI90_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB90_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end90:
	.size	_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc, .Lfunc_end90-_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI91_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB91_17
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s5, $s4
	and	$a2, $s3, $a0
	and	$fp, $a2, $s2
	blez	$s0, .LBB91_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 3
	slli.d	$s7, $a2, 3
	vinsgr2vr.w	$vr0, $s5, 0
	vinsgr2vr.w	$vr1, $s4, 0
	vinsgr2vr.w	$vr2, $s3, 0
	vinsgr2vr.w	$vr3, $s2, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.w	$vr4, $vr0, 0
	and	$a0, $a0, $s3
	and	$s3, $a0, $s2
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB91_4
	.p2align	4, , 16
.LBB91_3:                               # %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB91_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB91_17
.LBB91_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_7 Depth 2
                                        #     Child Loop BB91_10 Depth 2
	bgeu	$s0, $a5, .LBB91_6
# %bb.5:                                #   in Loop: Header=BB91_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB91_9
	.p2align	4, , 16
.LBB91_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB91_7:                               # %vector.body
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB91_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB91_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB91_11
.LBB91_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB91_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB91_10:                              # %scalar.ph
                                        #   Parent Loop BB91_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	and	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB91_10
.LBB91_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB91_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	and	$a2, $fp, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB91_3
# %bb.12:                               #   in Loop: Header=BB91_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB91_3
.LBB91_13:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB91_15
	.p2align	4, , 16
.LBB91_14:                              # %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB91_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB91_17
.LBB91_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	and	$a0, $fp, $a0
	beqz	$a0, .LBB91_14
# %bb.16:                               #   in Loop: Header=BB91_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB91_14
.LBB91_17:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB91_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB91_21
.LBB91_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB91_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB91_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI91_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI91_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB91_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end91:
	.size	_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end91-_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
.LCPI92_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc: # @_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB92_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB92_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB92_4
	.p2align	4, , 16
.LBB92_3:                               # %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB92_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB92_17
.LBB92_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_7 Depth 2
                                        #     Child Loop BB92_10 Depth 2
	bgeu	$s1, $a5, .LBB92_6
# %bb.5:                                #   in Loop: Header=BB92_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB92_9
	.p2align	4, , 16
.LBB92_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB92_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB92_7:                               # %vector.body
                                        #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB92_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB92_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB92_11
.LBB92_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB92_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB92_10:                              # %scalar.ph
                                        #   Parent Loop BB92_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB92_10
.LBB92_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB92_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	or	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB92_3
# %bb.12:                               #   in Loop: Header=BB92_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB92_3
.LBB92_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB92_15
	.p2align	4, , 16
.LBB92_14:                              # %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit
                                        #   in Loop: Header=BB92_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB92_17
.LBB92_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	or	$a0, $s0, $a0
	beqz	$a0, .LBB92_14
# %bb.16:                               #   in Loop: Header=BB92_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB92_14
.LBB92_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB92_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB92_21
.LBB92_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB92_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB92_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI92_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI92_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB92_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end92:
	.size	_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc, .Lfunc_end92-_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI93_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB93_17
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s5, $s4
	or	$a2, $s3, $a0
	or	$fp, $a2, $s2
	blez	$s0, .LBB93_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 3
	slli.d	$s7, $a2, 3
	vinsgr2vr.w	$vr0, $s5, 0
	vinsgr2vr.w	$vr1, $s4, 0
	vinsgr2vr.w	$vr2, $s3, 0
	vinsgr2vr.w	$vr3, $s2, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.w	$vr4, $vr0, 0
	or	$a0, $a0, $s3
	or	$s3, $a0, $s2
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB93_4
	.p2align	4, , 16
.LBB93_3:                               # %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB93_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB93_17
.LBB93_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_7 Depth 2
                                        #     Child Loop BB93_10 Depth 2
	bgeu	$s0, $a5, .LBB93_6
# %bb.5:                                #   in Loop: Header=BB93_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB93_9
	.p2align	4, , 16
.LBB93_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB93_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB93_7:                               # %vector.body
                                        #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB93_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB93_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB93_11
.LBB93_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB93_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB93_10:                              # %scalar.ph
                                        #   Parent Loop BB93_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	or	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB93_10
.LBB93_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB93_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	or	$a2, $fp, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB93_3
# %bb.12:                               #   in Loop: Header=BB93_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB93_3
.LBB93_13:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB93_15
	.p2align	4, , 16
.LBB93_14:                              # %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB93_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB93_17
.LBB93_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	or	$a0, $fp, $a0
	beqz	$a0, .LBB93_14
# %bb.16:                               #   in Loop: Header=BB93_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB93_14
.LBB93_17:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB93_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB93_21
.LBB93_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB93_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB93_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI93_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI93_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB93_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end93:
	.size	_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end93-_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
.LCPI94_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc: # @_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB94_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB94_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB94_4
	.p2align	4, , 16
.LBB94_3:                               # %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us
                                        #   in Loop: Header=BB94_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB94_17
.LBB94_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_7 Depth 2
                                        #     Child Loop BB94_10 Depth 2
	bgeu	$s1, $a5, .LBB94_6
# %bb.5:                                #   in Loop: Header=BB94_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB94_9
	.p2align	4, , 16
.LBB94_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB94_7:                               # %vector.body
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB94_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB94_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB94_11
.LBB94_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB94_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB94_10:                              # %scalar.ph
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB94_10
.LBB94_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB94_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	xor	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB94_3
# %bb.12:                               #   in Loop: Header=BB94_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB94_3
.LBB94_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB94_15
	.p2align	4, , 16
.LBB94_14:                              # %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit
                                        #   in Loop: Header=BB94_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB94_17
.LBB94_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beq	$s0, $a0, .LBB94_14
# %bb.16:                               #   in Loop: Header=BB94_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB94_14
.LBB94_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB94_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB94_21
.LBB94_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB94_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB94_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI94_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI94_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB94_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end94:
	.size	_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc, .Lfunc_end94-_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
.LCPI95_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB95_17
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s5, $s4
	xor	$a2, $s3, $a0
	xor	$fp, $a2, $s2
	blez	$s0, .LBB95_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 3
	slli.d	$s7, $a2, 3
	vinsgr2vr.w	$vr0, $s5, 0
	vinsgr2vr.w	$vr1, $s4, 0
	vinsgr2vr.w	$vr2, $s3, 0
	vinsgr2vr.w	$vr3, $s2, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.w	$vr4, $vr0, 0
	xor	$a0, $a0, $s3
	xor	$s3, $a0, $s2
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB95_4
	.p2align	4, , 16
.LBB95_3:                               # %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB95_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB95_17
.LBB95_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_7 Depth 2
                                        #     Child Loop BB95_10 Depth 2
	bgeu	$s0, $a5, .LBB95_6
# %bb.5:                                #   in Loop: Header=BB95_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB95_9
	.p2align	4, , 16
.LBB95_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB95_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB95_7:                               # %vector.body
                                        #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB95_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB95_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB95_11
.LBB95_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB95_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB95_10:                              # %scalar.ph
                                        #   Parent Loop BB95_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xor	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB95_10
.LBB95_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB95_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	xor	$a2, $fp, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB95_3
# %bb.12:                               #   in Loop: Header=BB95_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB95_3
.LBB95_13:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB95_15
	.p2align	4, , 16
.LBB95_14:                              # %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB95_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB95_17
.LBB95_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.w.d	$fa1, $fa0
	movfr2gr.s	$a0, $fa1
	beq	$fp, $a0, .LBB95_14
# %bb.16:                               #   in Loop: Header=BB95_15 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB95_14
.LBB95_17:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB95_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB95_21
.LBB95_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB95_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB95_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI95_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI95_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB95_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end95:
	.size	_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end95-_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
.LCPI96_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc: # @_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB96_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB96_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB96_4
	.p2align	4, , 16
.LBB96_3:                               # %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB96_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB96_17
.LBB96_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_7 Depth 2
                                        #     Child Loop BB96_10 Depth 2
	bgeu	$s1, $a5, .LBB96_6
# %bb.5:                                #   in Loop: Header=BB96_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB96_9
	.p2align	4, , 16
.LBB96_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB96_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB96_7:                               # %vector.body
                                        #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB96_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB96_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB96_11
.LBB96_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB96_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB96_10:                              # %scalar.ph
                                        #   Parent Loop BB96_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB96_10
.LBB96_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB96_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB96_3
# %bb.12:                               #   in Loop: Header=BB96_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB96_3
.LBB96_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB96_15
	.p2align	4, , 16
.LBB96_14:                              # %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit
                                        #   in Loop: Header=BB96_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB96_17
.LBB96_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB96_14
# %bb.16:                               #   in Loop: Header=BB96_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB96_14
.LBB96_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB96_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB96_21
.LBB96_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB96_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB96_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI96_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI96_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB96_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end96:
	.size	_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc, .Lfunc_end96-_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
.LCPI97_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB97_17
# %bb.1:                                # %.preheader.lr.ph
	mul.w	$s7, $s0, $s1
	blez	$s1, .LBB97_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s4, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB97_4
	.p2align	4, , 16
.LBB97_3:                               # %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB97_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB97_17
.LBB97_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_7 Depth 2
                                        #     Child Loop BB97_10 Depth 2
	bgeu	$s1, $a5, .LBB97_6
# %bb.5:                                #   in Loop: Header=BB97_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB97_9
	.p2align	4, , 16
.LBB97_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB97_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB97_7:                               # %vector.body
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB97_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB97_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB97_11
.LBB97_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB97_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB97_10:                              # %scalar.ph
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB97_10
.LBB97_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB97_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	add.w	$a0, $a0, $s7
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.w	$a2, $a2, $s5
	beq	$a0, $a2, .LBB97_3
# %bb.12:                               #   in Loop: Header=BB97_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB97_3
.LBB97_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB97_15
	.p2align	4, , 16
.LBB97_14:                              # %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit
                                        #   in Loop: Header=BB97_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB97_17
.LBB97_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.w	$a0, $a0, $s2
	beq	$s7, $a0, .LBB97_14
# %bb.16:                               #   in Loop: Header=BB97_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB97_14
.LBB97_17:                              # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB97_19
# %bb.18:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB97_21
.LBB97_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB97_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB97_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI97_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI97_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB97_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end97:
	.size	_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc, .Lfunc_end97-_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI98_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB98_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB98_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s4, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB98_4
	.p2align	4, , 16
.LBB98_3:                               # %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB98_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB98_17
.LBB98_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_7 Depth 2
                                        #     Child Loop BB98_10 Depth 2
	bgeu	$s0, $a5, .LBB98_6
# %bb.5:                                #   in Loop: Header=BB98_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB98_9
	.p2align	4, , 16
.LBB98_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB98_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB98_7:                               # %vector.body
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr4, $vr0
	vadd.w	$vr1, $vr4, $vr1
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB98_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB98_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB98_11
.LBB98_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB98_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB98_10:                              # %scalar.ph
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB98_10
.LBB98_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB98_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB98_3
# %bb.12:                               #   in Loop: Header=BB98_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB98_3
.LBB98_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB98_15
	.p2align	4, , 16
.LBB98_14:                              # %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB98_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB98_17
.LBB98_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.w	$a0, $a0, $s1
	beqz	$a0, .LBB98_14
# %bb.16:                               #   in Loop: Header=BB98_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB98_14
.LBB98_17:                              # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB98_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB98_21
.LBB98_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB98_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB98_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI98_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI98_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB98_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end98:
	.size	_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end98-_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
.LCPI99_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc: # @_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB99_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB99_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB99_4
	.p2align	4, , 16
.LBB99_3:                               # %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB99_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB99_17
.LBB99_4:                               # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_7 Depth 2
                                        #     Child Loop BB99_10 Depth 2
	bgeu	$s1, $a5, .LBB99_6
# %bb.5:                                #   in Loop: Header=BB99_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB99_9
	.p2align	4, , 16
.LBB99_6:                               # %vector.body.preheader
                                        #   in Loop: Header=BB99_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB99_7:                               # %vector.body
                                        #   Parent Loop BB99_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.w	$vr0, $vr0, $vr4
	vsub.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB99_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB99_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB99_11
.LBB99_9:                               # %scalar.ph.preheader
                                        #   in Loop: Header=BB99_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB99_10:                              # %scalar.ph
                                        #   Parent Loop BB99_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB99_10
.LBB99_11:                              # %._crit_edge.us
                                        #   in Loop: Header=BB99_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s0
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB99_3
# %bb.12:                               #   in Loop: Header=BB99_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB99_3
.LBB99_13:                              # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB99_15
	.p2align	4, , 16
.LBB99_14:                              # %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit
                                        #   in Loop: Header=BB99_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB99_17
.LBB99_15:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB99_14
# %bb.16:                               #   in Loop: Header=BB99_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB99_14
.LBB99_17:                              # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB99_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB99_21
.LBB99_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB99_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB99_21:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI99_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI99_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB99_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end99:
	.size	_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc, .Lfunc_end99-_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI100_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB100_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB100_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s4, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB100_4
	.p2align	4, , 16
.LBB100_3:                              # %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB100_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB100_17
.LBB100_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_7 Depth 2
                                        #     Child Loop BB100_10 Depth 2
	bgeu	$s0, $a5, .LBB100_6
# %bb.5:                                #   in Loop: Header=BB100_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB100_9
	.p2align	4, , 16
.LBB100_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB100_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB100_7:                              # %vector.body
                                        #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.w	$vr0, $vr0, $vr4
	vsub.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB100_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB100_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB100_11
.LBB100_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB100_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB100_10:                             # %scalar.ph
                                        #   Parent Loop BB100_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB100_10
.LBB100_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB100_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s3
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB100_3
# %bb.12:                               #   in Loop: Header=BB100_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB100_3
.LBB100_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB100_15
	.p2align	4, , 16
.LBB100_14:                             # %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB100_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB100_17
.LBB100_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $a0, $s3
	mul.w	$a0, $a0, $s1
	beqz	$a0, .LBB100_14
# %bb.16:                               #   in Loop: Header=BB100_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB100_14
.LBB100_17:                             # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB100_19
# %bb.18:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB100_21
.LBB100_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB100_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB100_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI100_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI100_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB100_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end100:
	.size	_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end100-_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
.LCPI101_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc: # @_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB101_17
# %bb.1:                                # %.preheader.lr.ph
	lu12i.w	$a0, 1
	ori	$a0, $a0, 3904
	mul.d	$s7, $s0, $a0
	blez	$s1, .LBB101_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s8, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB101_4
	.p2align	4, , 16
.LBB101_3:                              # %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB101_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB101_17
.LBB101_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_7 Depth 2
                                        #     Child Loop BB101_10 Depth 2
	bgeu	$s1, $a5, .LBB101_6
# %bb.5:                                #   in Loop: Header=BB101_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB101_9
	.p2align	4, , 16
.LBB101_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB101_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB101_7:                              # %vector.body
                                        #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB101_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB101_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB101_11
.LBB101_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB101_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB101_10:                             # %scalar.ph
                                        #   Parent Loop BB101_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB101_10
.LBB101_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB101_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.w	$a2, $s7, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB101_3
# %bb.12:                               #   in Loop: Header=BB101_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB101_3
.LBB101_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB101_15
	.p2align	4, , 16
.LBB101_14:                             # %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit
                                        #   in Loop: Header=BB101_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB101_17
.LBB101_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $s7, $a0
	beqz	$a0, .LBB101_14
# %bb.16:                               #   in Loop: Header=BB101_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB101_14
.LBB101_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB101_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB101_21
.LBB101_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB101_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB101_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI101_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI101_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB101_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end101:
	.size	_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc, .Lfunc_end101-_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI102_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB102_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	lu12i.w	$a3, 1
	ori	$a3, $a3, 3904
	mul.d	$s4, $a2, $a3
	blez	$s0, .LBB102_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB102_4
	.p2align	4, , 16
.LBB102_3:                              # %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB102_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB102_17
.LBB102_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_7 Depth 2
                                        #     Child Loop BB102_10 Depth 2
	bgeu	$s0, $a5, .LBB102_6
# %bb.5:                                #   in Loop: Header=BB102_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB102_9
	.p2align	4, , 16
.LBB102_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB102_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB102_7:                              # %vector.body
                                        #   Parent Loop BB102_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr4, $vr2
	vmadd.w	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB102_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB102_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB102_11
.LBB102_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB102_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB102_10:                             # %scalar.ph
                                        #   Parent Loop BB102_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB102_10
.LBB102_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB102_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.w	$a2, $s4, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB102_3
# %bb.12:                               #   in Loop: Header=BB102_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB102_3
.LBB102_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB102_15
	.p2align	4, , 16
.LBB102_14:                             # %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB102_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB102_17
.LBB102_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.w	$a0, $s4, $a0
	beqz	$a0, .LBB102_14
# %bb.16:                               #   in Loop: Header=BB102_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB102_14
.LBB102_17:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB102_19
# %bb.18:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB102_21
.LBB102_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB102_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB102_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI102_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI102_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB102_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end102:
	.size	_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end102-_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
.LCPI103_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB103_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$s4, $a2, $s3
	blez	$s0, .LBB103_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s5, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB103_4
	.p2align	4, , 16
.LBB103_3:                              # %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB103_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB103_17
.LBB103_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_7 Depth 2
                                        #     Child Loop BB103_10 Depth 2
	bgeu	$s0, $a5, .LBB103_6
# %bb.5:                                #   in Loop: Header=BB103_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB103_9
	.p2align	4, , 16
.LBB103_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB103_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB103_7:                              # %vector.body
                                        #   Parent Loop BB103_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB103_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB103_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB103_11
.LBB103_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB103_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB103_10:                             # %scalar.ph
                                        #   Parent Loop BB103_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB103_10
.LBB103_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB103_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.w	$a2, $a2, $s7
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB103_3
# %bb.12:                               #   in Loop: Header=BB103_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB103_3
.LBB103_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB103_15
	.p2align	4, , 16
.LBB103_14:                             # %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB103_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB103_17
.LBB103_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s4, $a0
	mul.w	$a0, $a0, $s1
	beqz	$a0, .LBB103_14
# %bb.16:                               #   in Loop: Header=BB103_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB103_14
.LBB103_17:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB103_19
# %bb.18:                               # %._crit_edge26
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB103_21
.LBB103_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB103_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB103_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI103_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI103_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB103_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end103:
	.size	_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end103-_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
.LCPI104_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc: # @_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB104_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB104_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 1
	slli.d	$s7, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	b	.LBB104_4
	.p2align	4, , 16
.LBB104_3:                              # %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB104_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB104_17
.LBB104_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_7 Depth 2
                                        #     Child Loop BB104_10 Depth 2
	bne	$s1, $a7, .LBB104_6
# %bb.5:                                #   in Loop: Header=BB104_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB104_9
	.p2align	4, , 16
.LBB104_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB104_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s7
	addi.d	$a4, $s2, 4
	.p2align	4, , 16
.LBB104_7:                              # %vector.body
                                        #   Parent Loop BB104_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	div.wu	$a5, $a5, $s0
	div.wu	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 8
	bnez	$a3, .LBB104_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB104_4 Depth=1
	add.w	$a0, $a2, $a0
	move	$a3, $s7
	beq	$s7, $s1, .LBB104_11
.LBB104_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB104_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB104_10:                             # %scalar.ph
                                        #   Parent Loop BB104_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	div.wu	$a4, $a4, $s0
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB104_10
.LBB104_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB104_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	addi.w	$a2, $a2, 0
	div.wu	$a2, $a2, $s0
	mul.w	$a2, $a2, $s8
	beq	$a0, $a2, .LBB104_3
# %bb.12:                               #   in Loop: Header=BB104_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB104_3
.LBB104_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB104_15
	.p2align	4, , 16
.LBB104_14:                             # %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit
                                        #   in Loop: Header=BB104_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB104_17
.LBB104_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	addi.w	$a0, $a0, 0
	div.wu	$a0, $a0, $s0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB104_14
# %bb.16:                               #   in Loop: Header=BB104_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB104_14
.LBB104_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB104_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB104_21
.LBB104_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB104_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB104_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI104_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI104_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB104_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end104:
	.size	_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc, .Lfunc_end104-_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI105_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s5, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB105_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB105_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$s8, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	move	$fp, $zero
	b	.LBB105_4
	.p2align	4, , 16
.LBB105_3:                              # %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB105_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB105_17
.LBB105_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_7 Depth 2
                                        #     Child Loop BB105_10 Depth 2
	bne	$s4, $a7, .LBB105_6
# %bb.5:                                #   in Loop: Header=BB105_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB105_9
	.p2align	4, , 16
.LBB105_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB105_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	addi.d	$a4, $s5, 4
	.p2align	4, , 16
.LBB105_7:                              # %vector.body
                                        #   Parent Loop BB105_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -4
	ld.w	$a6, $a4, 0
	div.wu	$a5, $a5, $s3
	div.wu	$a6, $a6, $s3
	div.wu	$a5, $a5, $s2
	div.wu	$a6, $a6, $s2
	div.wu	$a5, $a5, $s1
	div.wu	$a6, $a6, $s1
	div.wu	$a5, $a5, $s0
	div.wu	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 8
	bnez	$a3, .LBB105_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB105_4 Depth=1
	add.w	$a0, $a2, $a0
	move	$a3, $s8
	beq	$s8, $s4, .LBB105_11
.LBB105_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB105_4 Depth=1
	alsl.d	$a2, $a3, $s5, 2
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB105_10:                             # %scalar.ph
                                        #   Parent Loop BB105_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	div.wu	$a4, $a4, $s3
	div.wu	$a4, $a4, $s2
	div.wu	$a4, $a4, $s1
	div.wu	$a4, $a4, $s0
	add.w	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB105_10
.LBB105_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB105_4 Depth=1
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	addi.w	$a2, $a2, 0
	div.wu	$a2, $a2, $s3
	div.wu	$a2, $a2, $s2
	div.wu	$a2, $a2, $s1
	div.wu	$a2, $a2, $s0
	mul.w	$a2, $a2, $s7
	beq	$a0, $a2, .LBB105_3
# %bb.12:                               #   in Loop: Header=BB105_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB105_3
.LBB105_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	b	.LBB105_15
	.p2align	4, , 16
.LBB105_14:                             # %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB105_15 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB105_17
.LBB105_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	addi.w	$a0, $a0, 0
	div.wu	$a0, $a0, $s3
	div.wu	$a0, $a0, $s2
	div.wu	$a0, $a0, $s1
	div.wu	$a0, $a0, $s0
	mul.w	$a0, $a0, $s5
	beqz	$a0, .LBB105_14
# %bb.16:                               #   in Loop: Header=BB105_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB105_14
.LBB105_17:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB105_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB105_21
.LBB105_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB105_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB105_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI105_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI105_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB105_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end105:
	.size	_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end105-_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
.LCPI106_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB106_17
# %bb.1:                                # %.preheader.lr.ph
	div.wu	$a0, $s5, $s4
	div.wu	$a0, $a0, $s3
	div.wu	$s3, $a0, $s2
	blez	$s0, .LBB106_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s4, $a0, 3
	vreplgr2vr.w	$vr4, $s3
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB106_4
	.p2align	4, , 16
.LBB106_3:                              # %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB106_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB106_17
.LBB106_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_7 Depth 2
                                        #     Child Loop BB106_10 Depth 2
	bgeu	$s0, $a5, .LBB106_6
# %bb.5:                                #   in Loop: Header=BB106_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB106_9
	.p2align	4, , 16
.LBB106_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB106_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB106_7:                              # %vector.body
                                        #   Parent Loop BB106_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB106_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB106_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB106_11
.LBB106_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB106_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB106_10:                             # %scalar.ph
                                        #   Parent Loop BB106_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB106_10
.LBB106_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB106_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB106_3
# %bb.12:                               #   in Loop: Header=BB106_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB106_3
.LBB106_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB106_15
	.p2align	4, , 16
.LBB106_14:                             # %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB106_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB106_17
.LBB106_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s3, $a0
	mul.w	$a0, $a0, $s1
	beqz	$a0, .LBB106_14
# %bb.16:                               #   in Loop: Header=BB106_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB106_14
.LBB106_17:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB106_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB106_21
.LBB106_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB106_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB106_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI106_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI106_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB106_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end106:
	.size	_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end106-_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI107_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB107_17
# %bb.1:                                # %.preheader.lr.ph
	mul.w	$a0, $s4, $s5
	div.wu	$s5, $a0, $s3
	sub.d	$s4, $s0, $s5
	blez	$s1, .LBB107_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$fp, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	vreplgr2vr.w	$vr5, $s5
	ori	$a5, $zero, 8
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB107_4
	.p2align	4, , 16
.LBB107_3:                              # %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB107_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB107_17
.LBB107_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_7 Depth 2
                                        #     Child Loop BB107_10 Depth 2
	bgeu	$s1, $a5, .LBB107_6
# %bb.5:                                #   in Loop: Header=BB107_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB107_9
	.p2align	4, , 16
.LBB107_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB107_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB107_7:                              # %vector.body
                                        #   Parent Loop BB107_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.w	$vr0, $vr0, $vr4
	vadd.w	$vr1, $vr1, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr3
	vsub.w	$vr0, $vr0, $vr5
	vsub.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB107_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB107_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB107_11
.LBB107_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB107_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB107_10:                             # %scalar.ph
                                        #   Parent Loop BB107_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB107_10
.LBB107_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB107_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB107_3
# %bb.12:                               #   in Loop: Header=BB107_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB107_3
.LBB107_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB107_15
	.p2align	4, , 16
.LBB107_14:                             # %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB107_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB107_17
.LBB107_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s4, $a0
	mul.w	$a0, $a0, $s1
	beqz	$a0, .LBB107_14
# %bb.16:                               #   in Loop: Header=BB107_15 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB107_14
.LBB107_17:                             # %._crit_edge23
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB107_19
# %bb.18:                               # %._crit_edge23
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB107_21
.LBB107_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB107_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB107_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI107_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI107_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB107_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end107:
	.size	_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end107-_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
.LCPI108_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc: # @_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB108_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB108_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB108_4
	.p2align	4, , 16
.LBB108_3:                              # %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB108_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB108_17
.LBB108_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_7 Depth 2
                                        #     Child Loop BB108_10 Depth 2
	bgeu	$s1, $a5, .LBB108_6
# %bb.5:                                #   in Loop: Header=BB108_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB108_9
	.p2align	4, , 16
.LBB108_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB108_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB108_7:                              # %vector.body
                                        #   Parent Loop BB108_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB108_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB108_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB108_11
.LBB108_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB108_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB108_10:                             # %scalar.ph
                                        #   Parent Loop BB108_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB108_10
.LBB108_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB108_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB108_3
# %bb.12:                               #   in Loop: Header=BB108_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB108_3
.LBB108_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB108_15
	.p2align	4, , 16
.LBB108_14:                             # %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit
                                        #   in Loop: Header=BB108_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB108_17
.LBB108_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $s0, $a0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB108_14
# %bb.16:                               #   in Loop: Header=BB108_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB108_14
.LBB108_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB108_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB108_21
.LBB108_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB108_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB108_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI108_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI108_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB108_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end108:
	.size	_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc, .Lfunc_end108-_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI109_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB109_17
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s5, $s4
	and	$a2, $s3, $a0
	and	$fp, $a2, $s2
	blez	$s0, .LBB109_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 3
	slli.d	$s7, $a2, 3
	vinsgr2vr.w	$vr0, $s5, 0
	vinsgr2vr.w	$vr1, $s4, 0
	vinsgr2vr.w	$vr2, $s3, 0
	vinsgr2vr.w	$vr3, $s2, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.w	$vr4, $vr0, 0
	and	$a0, $a0, $s3
	and	$s3, $a0, $s2
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB109_4
	.p2align	4, , 16
.LBB109_3:                              # %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB109_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB109_17
.LBB109_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_7 Depth 2
                                        #     Child Loop BB109_10 Depth 2
	bgeu	$s0, $a5, .LBB109_6
# %bb.5:                                #   in Loop: Header=BB109_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB109_9
	.p2align	4, , 16
.LBB109_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB109_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB109_7:                              # %vector.body
                                        #   Parent Loop BB109_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB109_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB109_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB109_11
.LBB109_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB109_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB109_10:                             # %scalar.ph
                                        #   Parent Loop BB109_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	and	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB109_10
.LBB109_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB109_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $fp, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB109_3
# %bb.12:                               #   in Loop: Header=BB109_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB109_3
.LBB109_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB109_15
	.p2align	4, , 16
.LBB109_14:                             # %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB109_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB109_17
.LBB109_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $fp, $a0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB109_14
# %bb.16:                               #   in Loop: Header=BB109_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB109_14
.LBB109_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB109_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB109_21
.LBB109_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB109_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB109_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI109_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI109_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB109_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end109:
	.size	_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end109-_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
.LCPI110_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc: # @_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB110_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB110_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB110_4
	.p2align	4, , 16
.LBB110_3:                              # %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB110_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB110_17
.LBB110_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_7 Depth 2
                                        #     Child Loop BB110_10 Depth 2
	bgeu	$s1, $a5, .LBB110_6
# %bb.5:                                #   in Loop: Header=BB110_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB110_9
	.p2align	4, , 16
.LBB110_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB110_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB110_7:                              # %vector.body
                                        #   Parent Loop BB110_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB110_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB110_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB110_11
.LBB110_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB110_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB110_10:                             # %scalar.ph
                                        #   Parent Loop BB110_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB110_10
.LBB110_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB110_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB110_3
# %bb.12:                               #   in Loop: Header=BB110_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB110_3
.LBB110_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB110_15
	.p2align	4, , 16
.LBB110_14:                             # %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit
                                        #   in Loop: Header=BB110_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB110_17
.LBB110_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $s0, $a0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB110_14
# %bb.16:                               #   in Loop: Header=BB110_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB110_14
.LBB110_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB110_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB110_21
.LBB110_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB110_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB110_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI110_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI110_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB110_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end110:
	.size	_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc, .Lfunc_end110-_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI111_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB111_17
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s5, $s4
	or	$a2, $s3, $a0
	or	$fp, $a2, $s2
	blez	$s0, .LBB111_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 3
	slli.d	$s7, $a2, 3
	vinsgr2vr.w	$vr0, $s5, 0
	vinsgr2vr.w	$vr1, $s4, 0
	vinsgr2vr.w	$vr2, $s3, 0
	vinsgr2vr.w	$vr3, $s2, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.w	$vr4, $vr0, 0
	or	$a0, $a0, $s3
	or	$s3, $a0, $s2
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB111_4
	.p2align	4, , 16
.LBB111_3:                              # %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB111_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB111_17
.LBB111_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_7 Depth 2
                                        #     Child Loop BB111_10 Depth 2
	bgeu	$s0, $a5, .LBB111_6
# %bb.5:                                #   in Loop: Header=BB111_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB111_9
	.p2align	4, , 16
.LBB111_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB111_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB111_7:                              # %vector.body
                                        #   Parent Loop BB111_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB111_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB111_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB111_11
.LBB111_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB111_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB111_10:                             # %scalar.ph
                                        #   Parent Loop BB111_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	or	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB111_10
.LBB111_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB111_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $fp, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB111_3
# %bb.12:                               #   in Loop: Header=BB111_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB111_3
.LBB111_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB111_15
	.p2align	4, , 16
.LBB111_14:                             # %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB111_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB111_17
.LBB111_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $fp, $a0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB111_14
# %bb.16:                               #   in Loop: Header=BB111_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB111_14
.LBB111_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB111_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB111_21
.LBB111_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB111_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB111_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI111_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI111_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB111_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end111:
	.size	_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end111-_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
.LCPI112_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc: # @_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB112_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB112_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$s7, $a0, 3
	vreplgr2vr.w	$vr4, $s0
	ori	$a5, $zero, 8
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB112_4
	.p2align	4, , 16
.LBB112_3:                              # %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us
                                        #   in Loop: Header=BB112_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB112_17
.LBB112_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_7 Depth 2
                                        #     Child Loop BB112_10 Depth 2
	bgeu	$s1, $a5, .LBB112_6
# %bb.5:                                #   in Loop: Header=BB112_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB112_9
	.p2align	4, , 16
.LBB112_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB112_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB112_7:                              # %vector.body
                                        #   Parent Loop BB112_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB112_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB112_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB112_11
.LBB112_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB112_4 Depth=1
	alsl.d	$a2, $a3, $s2, 2
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB112_10:                             # %scalar.ph
                                        #   Parent Loop BB112_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB112_10
.LBB112_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB112_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $s0, $a2
	mul.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB112_3
# %bb.12:                               #   in Loop: Header=BB112_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB112_3
.LBB112_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB112_15
	.p2align	4, , 16
.LBB112_14:                             # %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit
                                        #   in Loop: Header=BB112_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB112_17
.LBB112_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $s0, $a0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB112_14
# %bb.16:                               #   in Loop: Header=BB112_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB112_14
.LBB112_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB112_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB112_21
.LBB112_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB112_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB112_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI112_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI112_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB112_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end112:
	.size	_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc, .Lfunc_end112-_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
.LCPI113_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB113_17
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s5, $s4
	xor	$a2, $s3, $a0
	xor	$fp, $a2, $s2
	blez	$s0, .LBB113_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 3
	slli.d	$s7, $a2, 3
	vinsgr2vr.w	$vr0, $s5, 0
	vinsgr2vr.w	$vr1, $s4, 0
	vinsgr2vr.w	$vr2, $s3, 0
	vinsgr2vr.w	$vr3, $s2, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.w	$vr4, $vr0, 0
	xor	$a0, $a0, $s3
	xor	$s3, $a0, $s2
	ori	$a5, $zero, 8
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB113_4
	.p2align	4, , 16
.LBB113_3:                              # %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB113_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB113_17
.LBB113_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_7 Depth 2
                                        #     Child Loop BB113_10 Depth 2
	bgeu	$s0, $a5, .LBB113_6
# %bb.5:                                #   in Loop: Header=BB113_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB113_9
	.p2align	4, , 16
.LBB113_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB113_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB113_7:                              # %vector.body
                                        #   Parent Loop BB113_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.w	$vr0, $vr2, $vr0
	vadd.w	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB113_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB113_4 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB113_11
.LBB113_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB113_4 Depth=1
	alsl.d	$a2, $a3, $s1, 2
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB113_10:                             # %scalar.ph
                                        #   Parent Loop BB113_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	xor	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB113_10
.LBB113_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB113_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $fp, $a2
	mul.w	$a2, $a2, $s5
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB113_3
# %bb.12:                               #   in Loop: Header=BB113_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 8
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB113_3
.LBB113_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB113_15
	.p2align	4, , 16
.LBB113_14:                             # %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB113_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB113_17
.LBB113_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	xor	$a0, $fp, $a0
	mul.w	$a0, $a0, $s2
	beqz	$a0, .LBB113_14
# %bb.16:                               #   in Loop: Header=BB113_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB113_14
.LBB113_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB113_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB113_21
.LBB113_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB113_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB113_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI113_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI113_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB113_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end113:
	.size	_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end113-_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
.LCPI114_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc: # @_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB114_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB114_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB114_4
	.p2align	4, , 16
.LBB114_3:                              # %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB114_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB114_17
.LBB114_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_7 Depth 2
                                        #     Child Loop BB114_10 Depth 2
	bgeu	$s1, $a5, .LBB114_6
# %bb.5:                                #   in Loop: Header=BB114_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB114_9
	.p2align	4, , 16
.LBB114_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB114_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB114_7:                              # %vector.body
                                        #   Parent Loop BB114_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB114_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB114_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB114_11
.LBB114_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB114_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB114_10:                             # %scalar.ph
                                        #   Parent Loop BB114_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB114_10
.LBB114_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB114_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB114_3
# %bb.12:                               #   in Loop: Header=BB114_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB114_3
.LBB114_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB114_15
	.p2align	4, , 16
.LBB114_14:                             # %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit
                                        #   in Loop: Header=BB114_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB114_17
.LBB114_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $zero, $a0
	beq	$s0, $a0, .LBB114_14
# %bb.16:                               #   in Loop: Header=BB114_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB114_14
.LBB114_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB114_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB114_21
.LBB114_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB114_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB114_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI114_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI114_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB114_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end114:
	.size	_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc, .Lfunc_end114-_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
.LCPI115_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB115_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$s7, $s0, $s1
	blez	$s1, .LBB115_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s4, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB115_4
	.p2align	4, , 16
.LBB115_3:                              # %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB115_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB115_17
.LBB115_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_7 Depth 2
                                        #     Child Loop BB115_10 Depth 2
	bgeu	$s1, $a5, .LBB115_6
# %bb.5:                                #   in Loop: Header=BB115_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB115_9
	.p2align	4, , 16
.LBB115_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB115_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB115_7:                              # %vector.body
                                        #   Parent Loop BB115_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB115_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB115_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB115_11
.LBB115_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB115_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB115_10:                             # %scalar.ph
                                        #   Parent Loop BB115_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB115_10
.LBB115_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB115_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	add.d	$a0, $a0, $s7
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB115_3
# %bb.12:                               #   in Loop: Header=BB115_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB115_3
.LBB115_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB115_15
	.p2align	4, , 16
.LBB115_14:                             # %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit
                                        #   in Loop: Header=BB115_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB115_17
.LBB115_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	add.d	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	beq	$s7, $a0, .LBB115_14
# %bb.16:                               #   in Loop: Header=BB115_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB115_14
.LBB115_17:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB115_19
# %bb.18:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB115_21
.LBB115_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB115_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB115_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI115_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI115_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB115_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end115:
	.size	_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc, .Lfunc_end115-_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI116_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB116_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB116_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s4, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB116_4
	.p2align	4, , 16
.LBB116_3:                              # %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB116_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB116_17
.LBB116_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_7 Depth 2
                                        #     Child Loop BB116_10 Depth 2
	bgeu	$s0, $a5, .LBB116_6
# %bb.5:                                #   in Loop: Header=BB116_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB116_9
	.p2align	4, , 16
.LBB116_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB116_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB116_7:                              # %vector.body
                                        #   Parent Loop BB116_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr4, $vr0
	vadd.d	$vr1, $vr4, $vr1
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB116_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB116_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB116_11
.LBB116_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB116_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB116_10:                             # %scalar.ph
                                        #   Parent Loop BB116_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB116_10
.LBB116_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB116_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB116_3
# %bb.12:                               #   in Loop: Header=BB116_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB116_3
.LBB116_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB116_15
	.p2align	4, , 16
.LBB116_14:                             # %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB116_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB116_17
.LBB116_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $zero, $a0
	beq	$s3, $a0, .LBB116_14
# %bb.16:                               #   in Loop: Header=BB116_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB116_14
.LBB116_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB116_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB116_21
.LBB116_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB116_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB116_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI116_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI116_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB116_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end116:
	.size	_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end116-_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
.LCPI117_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc: # @_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB117_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB117_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB117_4
	.p2align	4, , 16
.LBB117_3:                              # %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB117_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB117_17
.LBB117_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_7 Depth 2
                                        #     Child Loop BB117_10 Depth 2
	bgeu	$s1, $a5, .LBB117_6
# %bb.5:                                #   in Loop: Header=BB117_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB117_9
	.p2align	4, , 16
.LBB117_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB117_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB117_7:                              # %vector.body
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.d	$vr0, $vr0, $vr4
	vsub.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB117_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB117_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB117_11
.LBB117_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB117_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB117_10:                             # %scalar.ph
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB117_10
.LBB117_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB117_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s0
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB117_3
# %bb.12:                               #   in Loop: Header=BB117_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB117_3
.LBB117_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB117_15
	.p2align	4, , 16
.LBB117_14:                             # %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit
                                        #   in Loop: Header=BB117_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB117_17
.LBB117_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beq	$s0, $a0, .LBB117_14
# %bb.16:                               #   in Loop: Header=BB117_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB117_14
.LBB117_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB117_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB117_21
.LBB117_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB117_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB117_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI117_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI117_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB117_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end117:
	.size	_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc, .Lfunc_end117-_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI118_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB118_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB118_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s4, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB118_4
	.p2align	4, , 16
.LBB118_3:                              # %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB118_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB118_17
.LBB118_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_7 Depth 2
                                        #     Child Loop BB118_10 Depth 2
	bgeu	$s0, $a5, .LBB118_6
# %bb.5:                                #   in Loop: Header=BB118_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB118_9
	.p2align	4, , 16
.LBB118_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB118_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB118_7:                              # %vector.body
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.d	$vr0, $vr0, $vr4
	vsub.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB118_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB118_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB118_11
.LBB118_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB118_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB118_10:                             # %scalar.ph
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB118_10
.LBB118_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB118_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	sub.d	$a2, $a2, $s3
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB118_3
# %bb.12:                               #   in Loop: Header=BB118_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB118_3
.LBB118_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB118_15
	.p2align	4, , 16
.LBB118_14:                             # %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB118_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB118_17
.LBB118_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beq	$s3, $a0, .LBB118_14
# %bb.16:                               #   in Loop: Header=BB118_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB118_14
.LBB118_17:                             # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB118_19
# %bb.18:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB118_21
.LBB118_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB118_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB118_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI118_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI118_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB118_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end118:
	.size	_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end118-_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
.LCPI119_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc: # @_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB119_17
# %bb.1:                                # %.preheader.lr.ph
	lu12i.w	$a0, 1
	ori	$a0, $a0, 3904
	mul.d	$s7, $s0, $a0
	blez	$s1, .LBB119_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB119_4
	.p2align	4, , 16
.LBB119_3:                              # %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB119_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB119_17
.LBB119_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_7 Depth 2
                                        #     Child Loop BB119_10 Depth 2
	bgeu	$s1, $a5, .LBB119_6
# %bb.5:                                #   in Loop: Header=BB119_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB119_9
	.p2align	4, , 16
.LBB119_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB119_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB119_7:                              # %vector.body
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr2, $vr4
	vmadd.d	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB119_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB119_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB119_11
.LBB119_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB119_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB119_10:                             # %scalar.ph
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB119_10
.LBB119_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB119_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s7, $a2
	beq	$a0, $a2, .LBB119_3
# %bb.12:                               #   in Loop: Header=BB119_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB119_3
.LBB119_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB119_15
	.p2align	4, , 16
.LBB119_14:                             # %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit
                                        #   in Loop: Header=BB119_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB119_17
.LBB119_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s7, $a0
	beqz	$a0, .LBB119_14
# %bb.16:                               #   in Loop: Header=BB119_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB119_14
.LBB119_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB119_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB119_21
.LBB119_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB119_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB119_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI119_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI119_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB119_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end119:
	.size	_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc, .Lfunc_end119-_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI120_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB120_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	lu12i.w	$a3, 1
	ori	$a3, $a3, 3904
	mul.d	$s4, $a2, $a3
	blez	$s0, .LBB120_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s5, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB120_4
	.p2align	4, , 16
.LBB120_3:                              # %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB120_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB120_17
.LBB120_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_7 Depth 2
                                        #     Child Loop BB120_10 Depth 2
	bgeu	$s0, $a5, .LBB120_6
# %bb.5:                                #   in Loop: Header=BB120_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB120_9
	.p2align	4, , 16
.LBB120_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB120_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB120_7:                              # %vector.body
                                        #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr4, $vr2
	vmadd.d	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB120_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB120_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB120_11
.LBB120_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB120_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB120_10:                             # %scalar.ph
                                        #   Parent Loop BB120_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB120_10
.LBB120_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB120_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	mul.d	$a2, $s4, $a2
	beq	$a0, $a2, .LBB120_3
# %bb.12:                               #   in Loop: Header=BB120_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB120_3
.LBB120_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB120_15
	.p2align	4, , 16
.LBB120_14:                             # %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB120_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB120_17
.LBB120_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	mul.d	$a0, $s4, $a0
	beqz	$a0, .LBB120_14
# %bb.16:                               #   in Loop: Header=BB120_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB120_14
.LBB120_17:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB120_19
# %bb.18:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB120_21
.LBB120_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB120_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB120_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI120_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI120_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB120_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end120:
	.size	_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end120-_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
.LCPI121_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$fp, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(current_test)
	blez	$a1, .LBB121_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $fp
	mul.d	$s4, $a2, $s3
	blez	$s0, .LBB121_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $fp
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s5, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB121_4
	.p2align	4, , 16
.LBB121_3:                              # %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB121_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB121_17
.LBB121_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_7 Depth 2
                                        #     Child Loop BB121_10 Depth 2
	bgeu	$s0, $a5, .LBB121_6
# %bb.5:                                #   in Loop: Header=BB121_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB121_9
	.p2align	4, , 16
.LBB121_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB121_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB121_7:                              # %vector.body
                                        #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB121_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB121_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB121_11
.LBB121_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB121_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB121_10:                             # %scalar.ph
                                        #   Parent Loop BB121_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB121_10
.LBB121_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB121_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.d	$a2, $a2, $s7
	beq	$a0, $a2, .LBB121_3
# %bb.12:                               #   in Loop: Header=BB121_4 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB121_3
.LBB121_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB121_15
	.p2align	4, , 16
.LBB121_14:                             # %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB121_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB121_17
.LBB121_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $zero, $a0
	beq	$s4, $a0, .LBB121_14
# %bb.16:                               #   in Loop: Header=BB121_15 Depth=1
	ld.w	$a1, $s2, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB121_14
.LBB121_17:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(results)
	ld.d	$a2, $s3, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB121_19
# %bb.18:                               # %._crit_edge26
	ld.w	$a0, $s2, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB121_21
.LBB121_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s3, %pc_lo12(results)
	beqz	$a0, .LBB121_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s2, %pc_lo12(current_test)
.LBB121_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI121_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI121_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB121_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end121:
	.size	_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end121-_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
.LCPI122_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc: # @_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB122_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB122_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 1
	slli.d	$s7, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	b	.LBB122_4
	.p2align	4, , 16
.LBB122_3:                              # %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB122_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB122_17
.LBB122_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_7 Depth 2
                                        #     Child Loop BB122_10 Depth 2
	bne	$s1, $a7, .LBB122_6
# %bb.5:                                #   in Loop: Header=BB122_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB122_9
	.p2align	4, , 16
.LBB122_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB122_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s7
	addi.d	$a4, $s2, 8
	.p2align	4, , 16
.LBB122_7:                              # %vector.body
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a4, -8
	ld.d	$a6, $a4, 0
	div.d	$a5, $a5, $s0
	div.d	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 16
	bnez	$a3, .LBB122_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB122_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s7
	beq	$s7, $s1, .LBB122_11
.LBB122_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB122_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB122_10:                             # %scalar.ph
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	div.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB122_10
.LBB122_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB122_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.d	$a2, $a2, $s0
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB122_3
# %bb.12:                               #   in Loop: Header=BB122_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB122_3
.LBB122_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB122_15
	.p2align	4, , 16
.LBB122_14:                             # %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit
                                        #   in Loop: Header=BB122_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB122_17
.LBB122_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.d	$a0, $a0, $s0
	beqz	$a0, .LBB122_14
# %bb.16:                               #   in Loop: Header=BB122_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB122_14
.LBB122_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB122_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB122_21
.LBB122_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB122_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB122_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI122_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI122_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB122_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end122:
	.size	_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc, .Lfunc_end122-_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI123_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s5, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 40                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	blez	$a1, .LBB123_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB123_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$s8, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	move	$fp, $zero
	b	.LBB123_4
	.p2align	4, , 16
.LBB123_3:                              # %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB123_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB123_17
.LBB123_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_7 Depth 2
                                        #     Child Loop BB123_10 Depth 2
	bne	$s4, $a7, .LBB123_6
# %bb.5:                                #   in Loop: Header=BB123_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB123_9
	.p2align	4, , 16
.LBB123_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB123_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s8
	addi.d	$a4, $s5, 8
	.p2align	4, , 16
.LBB123_7:                              # %vector.body
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a4, -8
	ld.d	$a6, $a4, 0
	div.d	$a5, $a5, $s3
	div.d	$a6, $a6, $s3
	div.d	$a5, $a5, $s2
	div.d	$a6, $a6, $s2
	div.d	$a5, $a5, $s1
	div.d	$a6, $a6, $s1
	div.d	$a5, $a5, $s0
	div.d	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 16
	bnez	$a3, .LBB123_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB123_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s8
	beq	$s8, $s4, .LBB123_11
.LBB123_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB123_4 Depth=1
	alsl.d	$a2, $a3, $s5, 3
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB123_10:                             # %scalar.ph
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	div.d	$a4, $a4, $s3
	div.d	$a4, $a4, $s2
	div.d	$a4, $a4, $s1
	div.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB123_10
.LBB123_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB123_4 Depth=1
	fld.d	$fa0, $s6, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	div.d	$a2, $a2, $s3
	div.d	$a2, $a2, $s2
	div.d	$a2, $a2, $s1
	div.d	$a2, $a2, $s0
	mul.d	$a2, $a2, $s7
	beq	$a0, $a2, .LBB123_3
# %bb.12:                               #   in Loop: Header=BB123_4 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB123_3
.LBB123_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	b	.LBB123_15
	.p2align	4, , 16
.LBB123_14:                             # %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB123_15 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB123_17
.LBB123_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	div.d	$a0, $a0, $s3
	div.d	$a0, $a0, $s2
	div.d	$a0, $a0, $s1
	div.d	$a0, $a0, $s0
	beqz	$a0, .LBB123_14
# %bb.16:                               #   in Loop: Header=BB123_15 Depth=1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB123_14
.LBB123_17:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	beqz	$a2, .LBB123_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB123_21
.LBB123_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB123_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB123_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI123_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI123_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB123_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end123:
	.size	_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end123-_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
.LCPI124_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB124_17
# %bb.1:                                # %.preheader.lr.ph
	div.d	$a0, $s5, $s4
	div.d	$a0, $a0, $s3
	div.d	$s3, $a0, $s2
	blez	$s0, .LBB124_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s4, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB124_4
	.p2align	4, , 16
.LBB124_3:                              # %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB124_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB124_17
.LBB124_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_7 Depth 2
                                        #     Child Loop BB124_10 Depth 2
	bgeu	$s0, $a5, .LBB124_6
# %bb.5:                                #   in Loop: Header=BB124_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB124_9
	.p2align	4, , 16
.LBB124_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB124_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB124_7:                              # %vector.body
                                        #   Parent Loop BB124_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB124_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB124_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB124_11
.LBB124_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB124_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB124_10:                             # %scalar.ph
                                        #   Parent Loop BB124_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB124_10
.LBB124_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB124_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB124_3
# %bb.12:                               #   in Loop: Header=BB124_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB124_3
.LBB124_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB124_15
	.p2align	4, , 16
.LBB124_14:                             # %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB124_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB124_17
.LBB124_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $zero, $a0
	beq	$s3, $a0, .LBB124_14
# %bb.16:                               #   in Loop: Header=BB124_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB124_14
.LBB124_17:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB124_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB124_21
.LBB124_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB124_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB124_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI124_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI124_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB124_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end124:
	.size	_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end124-_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI125_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	blez	$a1, .LBB125_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s4, $s5
	div.d	$s5, $a0, $s3
	sub.d	$s4, $s0, $s5
	blez	$s1, .LBB125_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	vreplgr2vr.d	$vr5, $s5
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s3, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB125_4
	.p2align	4, , 16
.LBB125_3:                              # %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB125_4 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB125_17
.LBB125_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_7 Depth 2
                                        #     Child Loop BB125_10 Depth 2
	bgeu	$s1, $a5, .LBB125_6
# %bb.5:                                #   in Loop: Header=BB125_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB125_9
	.p2align	4, , 16
.LBB125_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB125_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB125_7:                              # %vector.body
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vsub.d	$vr0, $vr0, $vr5
	vsub.d	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB125_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB125_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB125_11
.LBB125_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB125_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB125_10:                             # %scalar.ph
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB125_10
.LBB125_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB125_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	add.d	$a2, $s4, $a2
	mul.d	$a2, $a2, $s6
	beq	$a0, $a2, .LBB125_3
# %bb.12:                               #   in Loop: Header=BB125_4 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB125_3
.LBB125_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s1, $zero
	b	.LBB125_15
	.p2align	4, , 16
.LBB125_14:                             # %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB125_15 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB125_17
.LBB125_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	sub.d	$a0, $zero, $a0
	beq	$s4, $a0, .LBB125_14
# %bb.16:                               #   in Loop: Header=BB125_15 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB125_14
.LBB125_17:                             # %._crit_edge23
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB125_19
# %bb.18:                               # %._crit_edge23
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB125_21
.LBB125_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB125_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB125_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI125_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI125_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB125_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end125:
	.size	_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end125-_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
.LCPI126_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc: # @_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB126_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB126_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB126_4
	.p2align	4, , 16
.LBB126_3:                              # %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB126_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB126_17
.LBB126_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_7 Depth 2
                                        #     Child Loop BB126_10 Depth 2
	bgeu	$s1, $a5, .LBB126_6
# %bb.5:                                #   in Loop: Header=BB126_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB126_9
	.p2align	4, , 16
.LBB126_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB126_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB126_7:                              # %vector.body
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB126_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB126_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB126_11
.LBB126_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB126_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB126_10:                             # %scalar.ph
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB126_10
.LBB126_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB126_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB126_3
# %bb.12:                               #   in Loop: Header=BB126_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB126_3
.LBB126_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB126_15
	.p2align	4, , 16
.LBB126_14:                             # %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit
                                        #   in Loop: Header=BB126_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB126_17
.LBB126_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $s0, $a0
	beqz	$a0, .LBB126_14
# %bb.16:                               #   in Loop: Header=BB126_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB126_14
.LBB126_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB126_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB126_21
.LBB126_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB126_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB126_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI126_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI126_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB126_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end126:
	.size	_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc, .Lfunc_end126-_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI127_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB127_17
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s5, $s4
	and	$a2, $s3, $a0
	and	$fp, $a2, $s2
	blez	$s0, .LBB127_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 2
	slli.d	$s7, $a2, 2
	vinsgr2vr.d	$vr0, $s5, 0
	vinsgr2vr.d	$vr1, $s4, 0
	vinsgr2vr.d	$vr2, $s3, 0
	vinsgr2vr.d	$vr3, $s2, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.d	$vr4, $vr0, 0
	and	$a0, $a0, $s3
	and	$s3, $a0, $s2
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB127_4
	.p2align	4, , 16
.LBB127_3:                              # %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB127_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB127_17
.LBB127_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_7 Depth 2
                                        #     Child Loop BB127_10 Depth 2
	bgeu	$s0, $a5, .LBB127_6
# %bb.5:                                #   in Loop: Header=BB127_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB127_9
	.p2align	4, , 16
.LBB127_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB127_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB127_7:                              # %vector.body
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB127_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB127_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB127_11
.LBB127_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB127_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB127_10:                             # %scalar.ph
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	and	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB127_10
.LBB127_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB127_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	and	$a2, $fp, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB127_3
# %bb.12:                               #   in Loop: Header=BB127_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB127_3
.LBB127_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB127_15
	.p2align	4, , 16
.LBB127_14:                             # %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB127_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB127_17
.LBB127_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	and	$a0, $fp, $a0
	beqz	$a0, .LBB127_14
# %bb.16:                               #   in Loop: Header=BB127_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB127_14
.LBB127_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB127_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB127_21
.LBB127_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB127_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB127_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI127_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI127_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB127_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end127:
	.size	_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end127-_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
.LCPI128_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc: # @_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB128_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB128_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB128_4
	.p2align	4, , 16
.LBB128_3:                              # %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB128_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB128_17
.LBB128_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_7 Depth 2
                                        #     Child Loop BB128_10 Depth 2
	bgeu	$s1, $a5, .LBB128_6
# %bb.5:                                #   in Loop: Header=BB128_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB128_9
	.p2align	4, , 16
.LBB128_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB128_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB128_7:                              # %vector.body
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB128_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB128_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB128_11
.LBB128_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB128_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB128_10:                             # %scalar.ph
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB128_10
.LBB128_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB128_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB128_3
# %bb.12:                               #   in Loop: Header=BB128_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB128_3
.LBB128_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB128_15
	.p2align	4, , 16
.LBB128_14:                             # %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit
                                        #   in Loop: Header=BB128_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB128_17
.LBB128_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $s0, $a0
	beqz	$a0, .LBB128_14
# %bb.16:                               #   in Loop: Header=BB128_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB128_14
.LBB128_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB128_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB128_21
.LBB128_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB128_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB128_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI128_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI128_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB128_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end128:
	.size	_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc, .Lfunc_end128-_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI129_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB129_17
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s5, $s4
	or	$a2, $s3, $a0
	or	$fp, $a2, $s2
	blez	$s0, .LBB129_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 2
	slli.d	$s7, $a2, 2
	vinsgr2vr.d	$vr0, $s5, 0
	vinsgr2vr.d	$vr1, $s4, 0
	vinsgr2vr.d	$vr2, $s3, 0
	vinsgr2vr.d	$vr3, $s2, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.d	$vr4, $vr0, 0
	or	$a0, $a0, $s3
	or	$s3, $a0, $s2
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB129_4
	.p2align	4, , 16
.LBB129_3:                              # %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB129_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB129_17
.LBB129_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_7 Depth 2
                                        #     Child Loop BB129_10 Depth 2
	bgeu	$s0, $a5, .LBB129_6
# %bb.5:                                #   in Loop: Header=BB129_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB129_9
	.p2align	4, , 16
.LBB129_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB129_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB129_7:                              # %vector.body
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB129_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB129_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB129_11
.LBB129_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB129_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB129_10:                             # %scalar.ph
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	or	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB129_10
.LBB129_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB129_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	or	$a2, $fp, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB129_3
# %bb.12:                               #   in Loop: Header=BB129_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB129_3
.LBB129_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB129_15
	.p2align	4, , 16
.LBB129_14:                             # %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB129_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB129_17
.LBB129_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	or	$a0, $fp, $a0
	beqz	$a0, .LBB129_14
# %bb.16:                               #   in Loop: Header=BB129_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB129_14
.LBB129_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB129_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB129_21
.LBB129_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB129_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB129_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI129_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI129_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB129_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end129:
	.size	_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end129-_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
.LCPI130_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc: # @_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB130_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB130_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB130_4
	.p2align	4, , 16
.LBB130_3:                              # %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us
                                        #   in Loop: Header=BB130_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB130_17
.LBB130_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_7 Depth 2
                                        #     Child Loop BB130_10 Depth 2
	bgeu	$s1, $a5, .LBB130_6
# %bb.5:                                #   in Loop: Header=BB130_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB130_9
	.p2align	4, , 16
.LBB130_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB130_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB130_7:                              # %vector.body
                                        #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB130_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB130_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB130_11
.LBB130_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB130_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB130_10:                             # %scalar.ph
                                        #   Parent Loop BB130_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB130_10
.LBB130_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB130_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB130_3
# %bb.12:                               #   in Loop: Header=BB130_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB130_3
.LBB130_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB130_15
	.p2align	4, , 16
.LBB130_14:                             # %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit
                                        #   in Loop: Header=BB130_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB130_17
.LBB130_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beq	$s0, $a0, .LBB130_14
# %bb.16:                               #   in Loop: Header=BB130_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB130_14
.LBB130_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB130_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB130_21
.LBB130_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB130_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB130_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI130_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI130_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB130_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end130:
	.size	_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc, .Lfunc_end130-_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
.LCPI131_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB131_17
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s5, $s4
	xor	$a2, $s3, $a0
	xor	$fp, $a2, $s2
	blez	$s0, .LBB131_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 2
	slli.d	$s7, $a2, 2
	vinsgr2vr.d	$vr0, $s5, 0
	vinsgr2vr.d	$vr1, $s4, 0
	vinsgr2vr.d	$vr2, $s3, 0
	vinsgr2vr.d	$vr3, $s2, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.d	$vr4, $vr0, 0
	xor	$a0, $a0, $s3
	xor	$s3, $a0, $s2
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB131_4
	.p2align	4, , 16
.LBB131_3:                              # %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB131_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB131_17
.LBB131_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_7 Depth 2
                                        #     Child Loop BB131_10 Depth 2
	bgeu	$s0, $a5, .LBB131_6
# %bb.5:                                #   in Loop: Header=BB131_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB131_9
	.p2align	4, , 16
.LBB131_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB131_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB131_7:                              # %vector.body
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB131_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB131_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB131_11
.LBB131_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB131_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB131_10:                             # %scalar.ph
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xor	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB131_10
.LBB131_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB131_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a2, $fa0
	xor	$a2, $fp, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB131_3
# %bb.12:                               #   in Loop: Header=BB131_4 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB131_3
.LBB131_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB131_15
	.p2align	4, , 16
.LBB131_14:                             # %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB131_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB131_17
.LBB131_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a0, $fa1
	beq	$fp, $a0, .LBB131_14
# %bb.16:                               #   in Loop: Header=BB131_15 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB131_14
.LBB131_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB131_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB131_21
.LBB131_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB131_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB131_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI131_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI131_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB131_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end131:
	.size	_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end131-_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
.LCPI132_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc: # @_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB132_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB132_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB132_4
	.p2align	4, , 16
.LBB132_3:                              # %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB132_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB132_17
.LBB132_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_7 Depth 2
                                        #     Child Loop BB132_10 Depth 2
	bgeu	$s1, $a5, .LBB132_6
# %bb.5:                                #   in Loop: Header=BB132_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB132_9
	.p2align	4, , 16
.LBB132_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB132_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB132_7:                              # %vector.body
                                        #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB132_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB132_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB132_11
.LBB132_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB132_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB132_10:                             # %scalar.ph
                                        #   Parent Loop BB132_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB132_10
.LBB132_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB132_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB132_3
# %bb.12:                               #   in Loop: Header=BB132_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB132_3
.LBB132_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB132_15
	.p2align	4, , 16
.LBB132_14:                             # %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit
                                        #   in Loop: Header=BB132_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB132_17
.LBB132_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	add.d	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB132_14
# %bb.16:                               #   in Loop: Header=BB132_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB132_14
.LBB132_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB132_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB132_21
.LBB132_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB132_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB132_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI132_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI132_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB132_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end132:
	.size	_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc, .Lfunc_end132-_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
.LCPI133_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	blez	$a1, .LBB133_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$s7, $s0, $s1
	blez	$s1, .LBB133_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$s4, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	b	.LBB133_4
	.p2align	4, , 16
.LBB133_3:                              # %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB133_4 Depth=1
	addi.w	$s4, $s4, 1
	bge	$s4, $a1, .LBB133_17
.LBB133_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_7 Depth 2
                                        #     Child Loop BB133_10 Depth 2
	bgeu	$s1, $a5, .LBB133_6
# %bb.5:                                #   in Loop: Header=BB133_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB133_9
	.p2align	4, , 16
.LBB133_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB133_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB133_7:                              # %vector.body
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB133_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB133_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB133_11
.LBB133_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB133_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB133_10:                             # %scalar.ph
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB133_10
.LBB133_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB133_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	add.d	$a0, $a0, $s7
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	add.d	$a2, $s0, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB133_3
# %bb.12:                               #   in Loop: Header=BB133_4 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB133_3
.LBB133_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB133_15
	.p2align	4, , 16
.LBB133_14:                             # %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit
                                        #   in Loop: Header=BB133_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB133_17
.LBB133_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	add.d	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	beq	$s7, $a0, .LBB133_14
# %bb.16:                               #   in Loop: Header=BB133_15 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB133_14
.LBB133_17:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 56                    # 8-byte Folded Reload
	beqz	$a2, .LBB133_19
# %bb.18:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB133_21
.LBB133_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB133_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB133_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI133_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI133_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB133_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end133:
	.size	_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc, .Lfunc_end133-_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
.LCPI134_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB134_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB134_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s4, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB134_4
	.p2align	4, , 16
.LBB134_3:                              # %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB134_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB134_17
.LBB134_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_7 Depth 2
                                        #     Child Loop BB134_10 Depth 2
	bgeu	$s0, $a5, .LBB134_6
# %bb.5:                                #   in Loop: Header=BB134_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB134_9
	.p2align	4, , 16
.LBB134_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB134_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB134_7:                              # %vector.body
                                        #   Parent Loop BB134_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr4, $vr0
	vadd.d	$vr1, $vr4, $vr1
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB134_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB134_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB134_11
.LBB134_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB134_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB134_10:                             # %scalar.ph
                                        #   Parent Loop BB134_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $s3, $a0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB134_10
.LBB134_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB134_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB134_3
# %bb.12:                               #   in Loop: Header=BB134_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB134_3
.LBB134_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB134_15
	.p2align	4, , 16
.LBB134_14:                             # %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB134_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB134_17
.LBB134_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	beqz	$a0, .LBB134_14
# %bb.16:                               #   in Loop: Header=BB134_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB134_14
.LBB134_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB134_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB134_21
.LBB134_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB134_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB134_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI134_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI134_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB134_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end134:
	.size	_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end134-_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
.LCPI135_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc: # @_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB135_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB135_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB135_4
	.p2align	4, , 16
.LBB135_3:                              # %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB135_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB135_17
.LBB135_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_7 Depth 2
                                        #     Child Loop BB135_10 Depth 2
	bgeu	$s1, $a5, .LBB135_6
# %bb.5:                                #   in Loop: Header=BB135_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB135_9
	.p2align	4, , 16
.LBB135_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB135_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB135_7:                              # %vector.body
                                        #   Parent Loop BB135_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.d	$vr0, $vr0, $vr4
	vsub.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB135_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB135_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB135_11
.LBB135_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB135_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB135_10:                             # %scalar.ph
                                        #   Parent Loop BB135_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	sub.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB135_10
.LBB135_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB135_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	sub.d	$a2, $a2, $s0
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB135_3
# %bb.12:                               #   in Loop: Header=BB135_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB135_3
.LBB135_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB135_15
	.p2align	4, , 16
.LBB135_14:                             # %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit
                                        #   in Loop: Header=BB135_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB135_17
.LBB135_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	sub.d	$a0, $a0, $s0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB135_14
# %bb.16:                               #   in Loop: Header=BB135_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB135_14
.LBB135_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB135_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB135_21
.LBB135_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB135_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB135_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI135_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI135_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB135_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end135:
	.size	_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc, .Lfunc_end135-_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
.LCPI136_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s4, $a4
	move	$s3, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB136_17
# %bb.1:                                # %.preheader.lr.ph
	add.d	$a0, $s4, $s2
	add.d	$a2, $s3, $s5
	add.d	$s3, $a2, $a0
	blez	$s0, .LBB136_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s4, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB136_4
	.p2align	4, , 16
.LBB136_3:                              # %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB136_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB136_17
.LBB136_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_7 Depth 2
                                        #     Child Loop BB136_10 Depth 2
	bgeu	$s0, $a5, .LBB136_6
# %bb.5:                                #   in Loop: Header=BB136_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB136_9
	.p2align	4, , 16
.LBB136_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB136_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB136_7:                              # %vector.body
                                        #   Parent Loop BB136_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vsub.d	$vr0, $vr0, $vr4
	vsub.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB136_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB136_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB136_11
.LBB136_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB136_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB136_10:                             # %scalar.ph
                                        #   Parent Loop BB136_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	sub.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB136_10
.LBB136_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB136_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	sub.d	$a2, $a2, $s3
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB136_3
# %bb.12:                               #   in Loop: Header=BB136_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB136_3
.LBB136_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB136_15
	.p2align	4, , 16
.LBB136_14:                             # %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB136_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB136_17
.LBB136_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	sub.d	$a0, $a0, $s3
	mul.d	$a0, $a0, $s1
	beqz	$a0, .LBB136_14
# %bb.16:                               #   in Loop: Header=BB136_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB136_14
.LBB136_17:                             # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB136_19
# %bb.18:                               # %._crit_edge32
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB136_21
.LBB136_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB136_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB136_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI136_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI136_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB136_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end136:
	.size	_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end136-_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
.LCPI137_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc: # @_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB137_17
# %bb.1:                                # %.preheader.lr.ph
	lu12i.w	$a0, 1
	ori	$a0, $a0, 3904
	mul.d	$s7, $s0, $a0
	blez	$s1, .LBB137_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s8, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$s3, $zero, -2048
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s5, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB137_4
	.p2align	4, , 16
.LBB137_3:                              # %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB137_4 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB137_17
.LBB137_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_7 Depth 2
                                        #     Child Loop BB137_10 Depth 2
	bgeu	$s1, $a5, .LBB137_6
# %bb.5:                                #   in Loop: Header=BB137_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB137_9
	.p2align	4, , 16
.LBB137_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB137_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s8
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB137_7:                              # %vector.body
                                        #   Parent Loop BB137_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr2, $vr4
	vmadd.d	$vr1, $vr3, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB137_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB137_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s8
	beq	$s8, $s1, .LBB137_11
.LBB137_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB137_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB137_10:                             # %scalar.ph
                                        #   Parent Loop BB137_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB137_10
.LBB137_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB137_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	xor	$a2, $a2, $s3
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $s7, $a2
	beq	$a0, $a2, .LBB137_3
# %bb.12:                               #   in Loop: Header=BB137_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB137_3
.LBB137_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$s1, $zero, -2048
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB137_15
	.p2align	4, , 16
.LBB137_14:                             # %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit
                                        #   in Loop: Header=BB137_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB137_17
.LBB137_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	xor	$a0, $a0, $s1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $s7, $a0
	beqz	$a0, .LBB137_14
# %bb.16:                               #   in Loop: Header=BB137_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB137_14
.LBB137_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB137_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB137_21
.LBB137_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB137_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB137_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI137_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI137_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB137_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end137:
	.size	_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc, .Lfunc_end137-_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
.LCPI138_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB138_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$a2, $a2, $s3
	lu12i.w	$a3, 1
	ori	$a3, $a3, 3904
	mul.d	$s4, $a2, $a3
	blez	$s0, .LBB138_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s5, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$s2, $zero, -2048
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s7, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB138_4
	.p2align	4, , 16
.LBB138_3:                              # %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB138_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB138_17
.LBB138_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_7 Depth 2
                                        #     Child Loop BB138_10 Depth 2
	bgeu	$s0, $a5, .LBB138_6
# %bb.5:                                #   in Loop: Header=BB138_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB138_9
	.p2align	4, , 16
.LBB138_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB138_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB138_7:                              # %vector.body
                                        #   Parent Loop BB138_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.d	$vr0, $vr4, $vr2
	vmadd.d	$vr1, $vr4, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB138_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB138_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB138_11
.LBB138_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB138_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB138_10:                             # %scalar.ph
                                        #   Parent Loop BB138_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	mul.d	$a4, $s3, $a4
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB138_10
.LBB138_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB138_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	xor	$a2, $a2, $s2
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	mul.d	$a2, $s4, $a2
	beq	$a0, $a2, .LBB138_3
# %bb.12:                               #   in Loop: Header=BB138_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB138_3
.LBB138_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$s1, $zero, -2048
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB138_15
	.p2align	4, , 16
.LBB138_14:                             # %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB138_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB138_17
.LBB138_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	xor	$a0, $a0, $s1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	mul.d	$a0, $s4, $a0
	beqz	$a0, .LBB138_14
# %bb.16:                               #   in Loop: Header=BB138_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB138_14
.LBB138_17:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB138_19
# %bb.18:                               # %._crit_edge27
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB138_21
.LBB138_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB138_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB138_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI138_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI138_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB138_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end138:
	.size	_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end138-_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
.LCPI139_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s2, $a4
	move	$s5, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB139_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s5, $s4
	mul.d	$a2, $a0, $s2
	mul.d	$s4, $a2, $s3
	blez	$s0, .LBB139_13
# %bb.2:                                # %.preheader.us.preheader
	mul.d	$a0, $a0, $s3
	mul.d	$s3, $a0, $s2
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s5, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$fp, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s2, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 64                   # 16-byte Folded Spill
	b	.LBB139_4
	.p2align	4, , 16
.LBB139_3:                              # %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB139_4 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB139_17
.LBB139_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_7 Depth 2
                                        #     Child Loop BB139_10 Depth 2
	bgeu	$s0, $a5, .LBB139_6
# %bb.5:                                #   in Loop: Header=BB139_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB139_9
	.p2align	4, , 16
.LBB139_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB139_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s5
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB139_7:                              # %vector.body
                                        #   Parent Loop BB139_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB139_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB139_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s5
	beq	$s5, $s0, .LBB139_11
.LBB139_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB139_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB139_10:                             # %scalar.ph
                                        #   Parent Loop BB139_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $s3
	add.d	$a0, $a0, $a4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB139_10
.LBB139_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB139_4 Depth=1
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	add.d	$a2, $s4, $a2
	mul.d	$a2, $a2, $s7
	beq	$a0, $a2, .LBB139_3
# %bb.12:                               #   in Loop: Header=BB139_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 64                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB139_3
.LBB139_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB139_15
	.p2align	4, , 16
.LBB139_14:                             # %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB139_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB139_17
.LBB139_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	add.d	$a0, $s4, $a0
	mul.d	$a0, $a0, $s1
	beqz	$a0, .LBB139_14
# %bb.16:                               #   in Loop: Header=BB139_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB139_14
.LBB139_17:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB139_19
# %bb.18:                               # %._crit_edge26
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB139_21
.LBB139_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB139_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB139_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI139_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI139_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB139_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end139:
	.size	_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end139-_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
.LCPI140_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc: # @_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB140_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB140_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 1
	slli.d	$s7, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s5, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$s3, $zero, -2048
	lu12i.w	$a0, 1
	ori	$fp, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	move	$s8, $zero
	b	.LBB140_4
	.p2align	4, , 16
.LBB140_3:                              # %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB140_4 Depth=1
	addi.w	$s8, $s8, 1
	bge	$s8, $a1, .LBB140_17
.LBB140_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_7 Depth 2
                                        #     Child Loop BB140_10 Depth 2
	bne	$s1, $a7, .LBB140_6
# %bb.5:                                #   in Loop: Header=BB140_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB140_9
	.p2align	4, , 16
.LBB140_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB140_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $s7
	addi.d	$a4, $s2, 8
	.p2align	4, , 16
.LBB140_7:                              # %vector.body
                                        #   Parent Loop BB140_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a4, -8
	ld.d	$a6, $a4, 0
	div.du	$a5, $a5, $s0
	div.du	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 16
	bnez	$a3, .LBB140_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB140_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $s7
	beq	$s7, $s1, .LBB140_11
.LBB140_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB140_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB140_10:                             # %scalar.ph
                                        #   Parent Loop BB140_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	div.du	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB140_10
.LBB140_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB140_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	xor	$a2, $a2, $s3
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	div.du	$a2, $a2, $s0
	mul.d	$a2, $a2, $fp
	beq	$a0, $a2, .LBB140_3
# %bb.12:                               #   in Loop: Header=BB140_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 1
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB140_3
.LBB140_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$s2, $zero, -2048
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s5, $zero
	b	.LBB140_15
	.p2align	4, , 16
.LBB140_14:                             # %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit
                                        #   in Loop: Header=BB140_15 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB140_17
.LBB140_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	xor	$a0, $a0, $s2
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	div.du	$a0, $a0, $s0
	mul.d	$a0, $a0, $s3
	beqz	$a0, .LBB140_14
# %bb.16:                               #   in Loop: Header=BB140_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB140_14
.LBB140_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB140_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB140_21
.LBB140_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB140_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB140_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 8                     # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI140_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI140_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB140_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end140:
	.size	_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc, .Lfunc_end140-_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
.LCPI141_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a5
	move	$s1, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s6, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 48                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	blez	$a1, .LBB141_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s4, .LBB141_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s4, 30, 1
	slli.d	$t3, $a0, 1
	ori	$a7, $zero, 1
	pcalau12i	$s7, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$t0, $zero, -2048
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	move	$fp, $zero
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	b	.LBB141_4
	.p2align	4, , 16
.LBB141_3:                              # %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB141_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB141_17
.LBB141_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_7 Depth 2
                                        #     Child Loop BB141_10 Depth 2
	bne	$s4, $a7, .LBB141_6
# %bb.5:                                #   in Loop: Header=BB141_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB141_9
	.p2align	4, , 16
.LBB141_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB141_4 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	move	$a3, $t3
	addi.d	$a4, $s6, 8
	.p2align	4, , 16
.LBB141_7:                              # %vector.body
                                        #   Parent Loop BB141_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a4, -8
	ld.d	$a6, $a4, 0
	div.du	$a5, $a5, $s3
	div.du	$a6, $a6, $s3
	div.du	$a5, $a5, $s2
	div.du	$a6, $a6, $s2
	div.du	$a5, $a5, $s1
	div.du	$a6, $a6, $s1
	div.du	$a5, $a5, $s0
	div.du	$a6, $a6, $s0
	add.d	$a0, $a5, $a0
	add.d	$a2, $a6, $a2
	addi.d	$a3, $a3, -2
	addi.d	$a4, $a4, 16
	bnez	$a3, .LBB141_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB141_4 Depth=1
	add.d	$a0, $a2, $a0
	move	$a3, $t3
	beq	$t3, $s4, .LBB141_11
.LBB141_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB141_4 Depth=1
	alsl.d	$a2, $a3, $s6, 3
	sub.d	$a3, $s4, $a3
	.p2align	4, , 16
.LBB141_10:                             # %scalar.ph
                                        #   Parent Loop BB141_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	div.du	$a4, $a4, $s3
	div.du	$a4, $a4, $s2
	div.du	$a4, $a4, $s1
	div.du	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB141_10
.LBB141_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB141_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	xor	$a2, $a2, $t0
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	div.du	$a2, $a2, $s3
	div.du	$a2, $a2, $s2
	div.du	$a2, $a2, $s1
	div.du	$a2, $a2, $s0
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB141_3
# %bb.12:                               #   in Loop: Header=BB141_4 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	move	$s5, $t0
	move	$s4, $t3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	move	$t3, $s4
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	move	$t0, $s5
	ori	$a7, $zero, 1
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB141_3
.LBB141_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu52i.d	$s5, $zero, -2048
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s4, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB141_15
	.p2align	4, , 16
.LBB141_14:                             # %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB141_15 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB141_17
.LBB141_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	xor	$a0, $a0, $s5
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	div.du	$a0, $a0, $s3
	div.du	$a0, $a0, $s2
	div.du	$a0, $a0, $s1
	div.du	$a0, $a0, $s0
	mul.d	$a0, $a0, $s6
	beqz	$a0, .LBB141_14
# %bb.16:                               #   in Loop: Header=BB141_15 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB141_14
.LBB141_17:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 56                    # 8-byte Folded Reload
	beqz	$a2, .LBB141_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB141_21
.LBB141_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB141_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB141_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI141_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI141_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB141_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end141:
	.size	_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end141-_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
.LCPI142_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s2, $a5
	move	$s3, $a4
	move	$s4, $a3
	move	$s5, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s6, %pc_hi20(current_test)
	blez	$a1, .LBB142_17
# %bb.1:                                # %.preheader.lr.ph
	div.du	$a0, $s5, $s4
	div.du	$a0, $a0, $s3
	div.du	$s3, $a0, $s2
	blez	$s0, .LBB142_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s0, 30, 2
	slli.d	$s4, $a0, 2
	vreplgr2vr.d	$vr4, $s3
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB142_4
	.p2align	4, , 16
.LBB142_3:                              # %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB142_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB142_17
.LBB142_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_7 Depth 2
                                        #     Child Loop BB142_10 Depth 2
	bgeu	$s0, $a5, .LBB142_6
# %bb.5:                                #   in Loop: Header=BB142_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB142_9
	.p2align	4, , 16
.LBB142_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB142_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s4
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB142_7:                              # %vector.body
                                        #   Parent Loop BB142_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB142_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB142_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s4
	beq	$s4, $s0, .LBB142_11
.LBB142_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB142_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB142_10:                             # %scalar.ph
                                        #   Parent Loop BB142_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a4, $a0
	add.d	$a0, $a0, $s3
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB142_10
.LBB142_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB142_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	add.d	$a2, $s3, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB142_3
# %bb.12:                               #   in Loop: Header=BB142_4 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB142_3
.LBB142_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB142_15
	.p2align	4, , 16
.LBB142_14:                             # %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB142_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB142_17
.LBB142_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	add.d	$a0, $s3, $a0
	mul.d	$a0, $a0, $s1
	beqz	$a0, .LBB142_14
# %bb.16:                               #   in Loop: Header=BB142_15 Depth=1
	ld.w	$a1, $s6, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB142_14
.LBB142_17:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB142_19
# %bb.18:                               # %._crit_edge22
	ld.w	$a0, $s6, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB142_21
.LBB142_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB142_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s6, %pc_lo12(current_test)
.LBB142_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI142_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI142_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB142_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end142:
	.size	_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end142-_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
.LCPI143_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 112                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s3, $a5
	move	$s4, $a4
	move	$s5, $a3
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	blez	$a1, .LBB143_17
# %bb.1:                                # %.preheader.lr.ph
	mul.d	$a0, $s4, $s5
	div.du	$s5, $a0, $s3
	sub.d	$s4, $s0, $s5
	blez	$s1, .LBB143_13
# %bb.2:                                # %.preheader.lr.ph.split.us
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$fp, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	vreplgr2vr.d	$vr5, $s5
	ori	$a5, $zero, 4
	pcalau12i	$s7, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s3, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$a0, $a0, %pc_lo12(.L.str.179)
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB143_4
	.p2align	4, , 16
.LBB143_3:                              # %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB143_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB143_17
.LBB143_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_7 Depth 2
                                        #     Child Loop BB143_10 Depth 2
	bgeu	$s1, $a5, .LBB143_6
# %bb.5:                                #   in Loop: Header=BB143_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB143_9
	.p2align	4, , 16
.LBB143_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB143_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $fp
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB143_7:                              # %vector.body
                                        #   Parent Loop BB143_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vadd.d	$vr0, $vr0, $vr4
	vadd.d	$vr1, $vr1, $vr4
	vadd.d	$vr0, $vr0, $vr2
	vadd.d	$vr1, $vr1, $vr3
	vsub.d	$vr0, $vr0, $vr5
	vsub.d	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB143_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB143_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $fp
	beq	$fp, $s1, .LBB143_11
.LBB143_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB143_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB143_10:                             # %scalar.ph
                                        #   Parent Loop BB143_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	add.d	$a0, $a0, $s0
	add.d	$a0, $a0, $a4
	sub.d	$a0, $a0, $s5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB143_10
.LBB143_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB143_4 Depth=1
	fld.d	$fa0, $s7, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	add.d	$a2, $s4, $a2
	mul.d	$a2, $a2, $s3
	beq	$a0, $a2, .LBB143_3
# %bb.12:                               #   in Loop: Header=BB143_4 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB143_3
.LBB143_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB143_15
	.p2align	4, , 16
.LBB143_14:                             # %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB143_15 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB143_17
.LBB143_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	add.d	$a0, $s4, $a0
	mul.d	$a0, $a0, $s1
	beqz	$a0, .LBB143_14
# %bb.16:                               #   in Loop: Header=BB143_15 Depth=1
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB143_14
.LBB143_17:                             # %._crit_edge23
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 104                   # 8-byte Folded Reload
	beqz	$a2, .LBB143_19
# %bb.18:                               # %._crit_edge23
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB143_21
.LBB143_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB143_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB143_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI143_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI143_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 112                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB143_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end143:
	.size	_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end143-_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
.LCPI144_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc: # @_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB144_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB144_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB144_4
	.p2align	4, , 16
.LBB144_3:                              # %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB144_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB144_17
.LBB144_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_7 Depth 2
                                        #     Child Loop BB144_10 Depth 2
	bgeu	$s1, $a5, .LBB144_6
# %bb.5:                                #   in Loop: Header=BB144_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB144_9
	.p2align	4, , 16
.LBB144_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB144_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB144_7:                              # %vector.body
                                        #   Parent Loop BB144_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB144_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB144_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB144_11
.LBB144_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB144_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB144_10:                             # %scalar.ph
                                        #   Parent Loop BB144_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	and	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB144_10
.LBB144_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB144_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	and	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB144_3
# %bb.12:                               #   in Loop: Header=BB144_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB144_3
.LBB144_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB144_15
	.p2align	4, , 16
.LBB144_14:                             # %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit
                                        #   in Loop: Header=BB144_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB144_17
.LBB144_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	and	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB144_14
# %bb.16:                               #   in Loop: Header=BB144_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB144_14
.LBB144_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB144_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB144_21
.LBB144_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB144_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB144_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI144_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI144_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB144_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end144:
	.size	_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc, .Lfunc_end144-_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
.LCPI145_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	blez	$a1, .LBB145_17
# %bb.1:                                # %.preheader.lr.ph
	and	$a0, $s5, $s4
	and	$a2, $s3, $a0
	and	$fp, $a2, $s2
	blez	$s0, .LBB145_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 2
	slli.d	$s7, $a2, 2
	vinsgr2vr.d	$vr0, $s5, 0
	vinsgr2vr.d	$vr1, $s4, 0
	vinsgr2vr.d	$vr2, $s3, 0
	vinsgr2vr.d	$vr3, $s2, 0
	vand.v	$vr0, $vr0, $vr1
	vand.v	$vr0, $vr0, $vr2
	vand.v	$vr0, $vr0, $vr3
	vreplvei.d	$vr4, $vr0, 0
	and	$a0, $a0, $s3
	and	$s3, $a0, $s2
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB145_4
	.p2align	4, , 16
.LBB145_3:                              # %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB145_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB145_17
.LBB145_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_7 Depth 2
                                        #     Child Loop BB145_10 Depth 2
	bgeu	$s0, $a5, .LBB145_6
# %bb.5:                                #   in Loop: Header=BB145_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB145_9
	.p2align	4, , 16
.LBB145_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB145_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB145_7:                              # %vector.body
                                        #   Parent Loop BB145_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vand.v	$vr2, $vr2, $vr4
	vand.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB145_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB145_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB145_11
.LBB145_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB145_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB145_10:                             # %scalar.ph
                                        #   Parent Loop BB145_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	and	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB145_10
.LBB145_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB145_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	and	$a2, $fp, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB145_3
# %bb.12:                               #   in Loop: Header=BB145_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB145_3
.LBB145_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB145_15
	.p2align	4, , 16
.LBB145_14:                             # %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB145_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB145_17
.LBB145_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	and	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB145_14
# %bb.16:                               #   in Loop: Header=BB145_15 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB145_14
.LBB145_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB145_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB145_21
.LBB145_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB145_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB145_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI145_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI145_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB145_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end145:
	.size	_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end145-_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
.LCPI146_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc,@function
_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc: # @_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB146_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB146_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB146_4
	.p2align	4, , 16
.LBB146_3:                              # %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB146_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB146_17
.LBB146_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_7 Depth 2
                                        #     Child Loop BB146_10 Depth 2
	bgeu	$s1, $a5, .LBB146_6
# %bb.5:                                #   in Loop: Header=BB146_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB146_9
	.p2align	4, , 16
.LBB146_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB146_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB146_7:                              # %vector.body
                                        #   Parent Loop BB146_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB146_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB146_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB146_11
.LBB146_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB146_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB146_10:                             # %scalar.ph
                                        #   Parent Loop BB146_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	or	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB146_10
.LBB146_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB146_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	or	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB146_3
# %bb.12:                               #   in Loop: Header=BB146_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB146_3
.LBB146_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB146_15
	.p2align	4, , 16
.LBB146_14:                             # %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit
                                        #   in Loop: Header=BB146_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB146_17
.LBB146_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	or	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB146_14
# %bb.16:                               #   in Loop: Header=BB146_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB146_14
.LBB146_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB146_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB146_21
.LBB146_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB146_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB146_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI146_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI146_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB146_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end146:
	.size	_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc, .Lfunc_end146-_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
.LCPI147_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	blez	$a1, .LBB147_17
# %bb.1:                                # %.preheader.lr.ph
	or	$a0, $s5, $s4
	or	$a2, $s3, $a0
	or	$fp, $a2, $s2
	blez	$s0, .LBB147_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 2
	slli.d	$s7, $a2, 2
	vinsgr2vr.d	$vr0, $s5, 0
	vinsgr2vr.d	$vr1, $s4, 0
	vinsgr2vr.d	$vr2, $s3, 0
	vinsgr2vr.d	$vr3, $s2, 0
	vor.v	$vr0, $vr0, $vr1
	vor.v	$vr0, $vr0, $vr2
	vor.v	$vr0, $vr0, $vr3
	vreplvei.d	$vr4, $vr0, 0
	or	$a0, $a0, $s3
	or	$s3, $a0, $s2
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB147_4
	.p2align	4, , 16
.LBB147_3:                              # %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB147_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB147_17
.LBB147_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_7 Depth 2
                                        #     Child Loop BB147_10 Depth 2
	bgeu	$s0, $a5, .LBB147_6
# %bb.5:                                #   in Loop: Header=BB147_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB147_9
	.p2align	4, , 16
.LBB147_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB147_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB147_7:                              # %vector.body
                                        #   Parent Loop BB147_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vor.v	$vr2, $vr2, $vr4
	vor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB147_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB147_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB147_11
.LBB147_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB147_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB147_10:                             # %scalar.ph
                                        #   Parent Loop BB147_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	or	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB147_10
.LBB147_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB147_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	or	$a2, $fp, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB147_3
# %bb.12:                               #   in Loop: Header=BB147_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB147_3
.LBB147_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB147_15
	.p2align	4, , 16
.LBB147_14:                             # %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB147_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB147_17
.LBB147_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	or	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB147_14
# %bb.16:                               #   in Loop: Header=BB147_15 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB147_14
.LBB147_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB147_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB147_21
.LBB147_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB147_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB147_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI147_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI147_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB147_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end147:
	.size	_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end147-_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
.LCPI148_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc: # @_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a2
	move	$s1, $a1
	move	$s2, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB148_17
# %bb.1:                                # %.preheader.lr.ph
	blez	$s1, .LBB148_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a0, $s1, 30, 2
	slli.d	$s7, $a0, 2
	vreplgr2vr.d	$vr4, $s0
	ori	$a5, $zero, 4
	pcalau12i	$s5, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s8, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s3, $a0, %pc_lo12(.L.str.179)
	move	$fp, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB148_4
	.p2align	4, , 16
.LBB148_3:                              # %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us
                                        #   in Loop: Header=BB148_4 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a1, .LBB148_17
.LBB148_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_7 Depth 2
                                        #     Child Loop BB148_10 Depth 2
	bgeu	$s1, $a5, .LBB148_6
# %bb.5:                                #   in Loop: Header=BB148_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB148_9
	.p2align	4, , 16
.LBB148_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB148_4 Depth=1
	addi.d	$a0, $s2, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB148_7:                              # %vector.body
                                        #   Parent Loop BB148_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB148_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB148_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s1, .LBB148_11
.LBB148_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB148_4 Depth=1
	alsl.d	$a2, $a3, $s2, 3
	sub.d	$a3, $s1, $a3
	.p2align	4, , 16
.LBB148_10:                             # %scalar.ph
                                        #   Parent Loop BB148_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xor	$a4, $a4, $s0
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB148_10
.LBB148_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB148_4 Depth=1
	fld.d	$fa0, $s5, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	xor	$a2, $s0, $a2
	mul.d	$a2, $a2, $s8
	beq	$a0, $a2, .LBB148_3
# %bb.12:                               #   in Loop: Header=BB148_4 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s3
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB148_3
.LBB148_13:                             # %.preheader.preheader
	pcalau12i	$fp, %pc_hi20(init_value)
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s1, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB148_15
	.p2align	4, , 16
.LBB148_14:                             # %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit
                                        #   in Loop: Header=BB148_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB148_17
.LBB148_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	xor	$a0, $s0, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB148_14
# %bb.16:                               #   in Loop: Header=BB148_15 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s1
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $fp, %pc_lo12(init_value)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	b	.LBB148_14
.LBB148_17:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB148_19
# %bb.18:                               # %._crit_edge16
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB148_21
.LBB148_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB148_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB148_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI148_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI148_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB148_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end148:
	.size	_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc, .Lfunc_end148-_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
.LCPI149_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	st.d	$a6, $sp, 16                    # 8-byte Folded Spill
	move	$s4, $a5
	move	$s5, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s8, %pc_hi20(iterations)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	blez	$a1, .LBB149_17
# %bb.1:                                # %.preheader.lr.ph
	xor	$a0, $s5, $s4
	xor	$a2, $s3, $a0
	xor	$fp, $a2, $s2
	blez	$s0, .LBB149_13
# %bb.2:                                # %.preheader.us.preheader
	bstrpick.d	$a2, $s0, 30, 2
	slli.d	$s7, $a2, 2
	vinsgr2vr.d	$vr0, $s5, 0
	vinsgr2vr.d	$vr1, $s4, 0
	vinsgr2vr.d	$vr2, $s3, 0
	vinsgr2vr.d	$vr3, $s2, 0
	vxor.v	$vr0, $vr0, $vr1
	vxor.v	$vr0, $vr0, $vr2
	vxor.v	$vr0, $vr0, $vr3
	vreplvei.d	$vr4, $vr0, 0
	xor	$a0, $a0, $s3
	xor	$s3, $a0, $s2
	ori	$a5, $zero, 4
	pcalau12i	$s4, %pc_hi20(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s5, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s6, $zero
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vst	$vr4, $sp, 48                   # 16-byte Folded Spill
	b	.LBB149_4
	.p2align	4, , 16
.LBB149_3:                              # %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB149_4 Depth=1
	addi.w	$s6, $s6, 1
	bge	$s6, $a1, .LBB149_17
.LBB149_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_7 Depth 2
                                        #     Child Loop BB149_10 Depth 2
	bgeu	$s0, $a5, .LBB149_6
# %bb.5:                                #   in Loop: Header=BB149_4 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB149_9
	.p2align	4, , 16
.LBB149_6:                              # %vector.body.preheader
                                        #   in Loop: Header=BB149_4 Depth=1
	addi.d	$a0, $s1, 16
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB149_7:                              # %vector.body
                                        #   Parent Loop BB149_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vxor.v	$vr2, $vr2, $vr4
	vxor.v	$vr3, $vr3, $vr4
	vadd.d	$vr0, $vr2, $vr0
	vadd.d	$vr1, $vr3, $vr1
	addi.d	$a2, $a2, -4
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB149_7
# %bb.8:                                # %middle.block
                                        #   in Loop: Header=BB149_4 Depth=1
	vadd.d	$vr0, $vr1, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s0, .LBB149_11
.LBB149_9:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB149_4 Depth=1
	alsl.d	$a2, $a3, $s1, 3
	sub.d	$a3, $s0, $a3
	.p2align	4, , 16
.LBB149_10:                             # %scalar.ph
                                        #   Parent Loop BB149_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a4, $a2, 0
	xor	$a4, $a4, $s3
	add.d	$a0, $a4, $a0
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB149_10
.LBB149_11:                             # %._crit_edge.us
                                        #   in Loop: Header=BB149_4 Depth=1
	fld.d	$fa0, $s4, %pc_lo12(init_value)
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a2, $fa1
	movcf2gr	$a3, $fcc0
	masknez	$a2, $a2, $a3
	ftintrz.l.d	$fa0, $fa0
	movfr2gr.d	$a4, $fa0
	maskeqz	$a3, $a4, $a3
	or	$a2, $a3, $a2
	xor	$a2, $fp, $a2
	mul.d	$a2, $a2, $s5
	beq	$a0, $a2, .LBB149_3
# %bb.12:                               #   in Loop: Header=BB149_4 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a5, $zero, 4
	vld	$vr4, $sp, 48                   # 16-byte Folded Reload
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB149_3
.LBB149_13:                             # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	lu52i.d	$a0, $zero, 1086
	movgr2fr.d	$fs0, $a0
	lu12i.w	$a0, 1
	ori	$s2, $a0, 3904
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s3, $zero
	b	.LBB149_15
	.p2align	4, , 16
.LBB149_14:                             # %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB149_15 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB149_17
.LBB149_15:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcmp.clt.d	$fcc0, $fa0, $fs0
	fsub.d	$fa1, $fa0, $fs0
	ftintrz.l.d	$fa1, $fa1
	movfr2gr.d	$a0, $fa1
	movcf2gr	$a2, $fcc0
	masknez	$a0, $a0, $a2
	ftintrz.l.d	$fa1, $fa0
	movfr2gr.d	$a3, $fa1
	maskeqz	$a2, $a3, $a2
	or	$a0, $a2, $a0
	xor	$a0, $fp, $a0
	mul.d	$a0, $a0, $s2
	beqz	$a0, .LBB149_14
# %bb.16:                               #   in Loop: Header=BB149_15 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s8, %pc_lo12(iterations)
	b	.LBB149_14
.LBB149_17:                             # %._crit_edge24
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 72                    # 8-byte Folded Reload
	beqz	$a2, .LBB149_19
# %bb.18:                               # %._crit_edge24
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB149_21
.LBB149_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB149_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB149_21:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI149_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI149_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB149_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end149:
	.size	_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end149-_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
.LCPI150_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI150_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI150_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc: # @_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.s	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB150_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB150_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs1, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI150_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI150_1)
	pcalau12i	$a0, %pc_hi20(.LCPI150_0)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI150_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs4, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB150_4
	.p2align	4, , 16
.LBB150_3:                              # %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us
                                        #   in Loop: Header=BB150_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB150_12
.LBB150_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs1
	.p2align	4, , 16
.LBB150_5:                              #   Parent Loop BB150_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fs0, $fa1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB150_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB150_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs4
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB150_3
# %bb.7:                                #   in Loop: Header=BB150_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB150_3
.LBB150_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI150_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI150_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs2, $a0
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB150_10
	.p2align	4, , 16
.LBB150_9:                              # %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit
                                        #   in Loop: Header=BB150_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB150_12
.LBB150_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs2
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB150_9
# %bb.11:                               #   in Loop: Header=BB150_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB150_9
.LBB150_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB150_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB150_16
.LBB150_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB150_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB150_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI150_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI150_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB150_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end150:
	.size	_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc, .Lfunc_end150-_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
.LCPI151_0:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI151_1:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI151_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	fmov.s	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB151_15
# %bb.1:                                # %.preheader.lr.ph
	movgr2fr.w	$fa0, $s0
	ffint.s.w	$fs1, $fa0
	blez	$s0, .LBB151_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI151_0)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI151_0)
	pcalau12i	$a0, %pc_hi20(.LCPI151_1)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI151_1)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs5, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB151_4
	.p2align	4, , 16
.LBB151_3:                              # %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us
                                        #   in Loop: Header=BB151_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB151_15
.LBB151_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs2
	.p2align	4, , 16
.LBB151_5:                              #   Parent Loop BB151_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB151_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB151_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fmadd.s	$fa0, $fs1, $fs0, $fa0
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs5
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB151_3
# %bb.7:                                #   in Loop: Header=BB151_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB151_3
.LBB151_8:                              # %.preheader.lr.ph.split
	movgr2fr.w	$fa0, $zero
	fmadd.s	$fs1, $fs1, $fs0, $fa0
	fabs.s	$fa1, $fs1
	pcalau12i	$a0, %pc_hi20(.LCPI151_0)
	fld.d	$fa2, $a0, %pc_lo12(.LCPI151_0)
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	fcvt.d.s	$fa1, $fa1
	pcalau12i	$a0, %pc_hi20(.LCPI151_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI151_1)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs3, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	fcmp.clt.d	$fcc0, $fa2, $fa1
	bcnez	$fcc0, .LBB151_10
	b	.LBB151_13
	.p2align	4, , 16
.LBB151_9:                              # %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us22
                                        #   in Loop: Header=BB151_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB151_15
.LBB151_10:                             # %.preheader.us20
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs3
	fadd.s	$fa1, $fs1, $fa1
	fdiv.s	$fa1, $fa1, $fs1
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB151_9
# %bb.11:                               #   in Loop: Header=BB151_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB151_9
	.p2align	4, , 16
.LBB151_12:                             # %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit
                                        #   in Loop: Header=BB151_13 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB151_15
.LBB151_13:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs3
	fadd.s	$fa1, $fs1, $fa1
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB151_12
# %bb.14:                               #   in Loop: Header=BB151_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB151_12
.LBB151_15:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB151_17
# %bb.16:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB151_19
.LBB151_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB151_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB151_19:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI151_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI151_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB151_20:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end151:
	.size	_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc, .Lfunc_end151-_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI152_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI152_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI152_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.s	$fs0, $fa3
	fmov.s	$fs1, $fa2
	fmov.s	$fs2, $fa1
	fmov.s	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB152_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB152_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI152_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI152_1)
	pcalau12i	$a0, %pc_hi20(.LCPI152_0)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI152_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs7, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB152_4
	.p2align	4, , 16
.LBB152_3:                              # %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB152_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB152_12
.LBB152_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs4
	.p2align	4, , 16
.LBB152_5:                              #   Parent Loop BB152_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fs3, $fa1
	fadd.s	$fa1, $fs2, $fa1
	fadd.s	$fa1, $fs1, $fa1
	fadd.s	$fa1, $fs0, $fa1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB152_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB152_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fs3, $fa1
	fadd.s	$fa1, $fs2, $fa1
	fadd.s	$fa1, $fs1, $fa1
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs7
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB152_3
# %bb.7:                                #   in Loop: Header=BB152_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB152_3
.LBB152_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI152_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI152_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs5, $a0
	movgr2fr.w	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB152_10
	.p2align	4, , 16
.LBB152_9:                              # %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB152_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB152_12
.LBB152_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fs3, $fa1
	fadd.s	$fa1, $fs2, $fa1
	fadd.s	$fa1, $fs1, $fa1
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs5
	fadd.s	$fa1, $fa1, $fs6
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs4
	bcnez	$fcc0, .LBB152_9
# %bb.11:                               #   in Loop: Header=BB152_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB152_9
.LBB152_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB152_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB152_16
.LBB152_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB152_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB152_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI152_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI152_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB152_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end152:
	.size	_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end152-_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
.LCPI153_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI153_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI153_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc: # @_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.s	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB153_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB153_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs1, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI153_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI153_1)
	pcalau12i	$a0, %pc_hi20(.LCPI153_0)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI153_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs4, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB153_4
	.p2align	4, , 16
.LBB153_3:                              # %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us
                                        #   in Loop: Header=BB153_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB153_12
.LBB153_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs1
	.p2align	4, , 16
.LBB153_5:                              #   Parent Loop BB153_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fsub.s	$fa1, $fa1, $fs0
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB153_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB153_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fsub.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs4
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB153_3
# %bb.7:                                #   in Loop: Header=BB153_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB153_3
.LBB153_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI153_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI153_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs2, $a0
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB153_10
	.p2align	4, , 16
.LBB153_9:                              # %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit
                                        #   in Loop: Header=BB153_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB153_12
.LBB153_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fsub.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs2
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB153_9
# %bb.11:                               #   in Loop: Header=BB153_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB153_9
.LBB153_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB153_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB153_16
.LBB153_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB153_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB153_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI153_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI153_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB153_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end153:
	.size	_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc, .Lfunc_end153-_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI154_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI154_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI154_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.s	$fs0, $fa3
	fmov.s	$fs1, $fa2
	fmov.s	$fs2, $fa1
	fmov.s	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB154_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB154_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI154_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI154_1)
	pcalau12i	$a0, %pc_hi20(.LCPI154_0)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI154_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs7, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB154_4
	.p2align	4, , 16
.LBB154_3:                              # %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB154_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB154_12
.LBB154_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs4
	.p2align	4, , 16
.LBB154_5:                              #   Parent Loop BB154_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fsub.s	$fa1, $fa1, $fs3
	fsub.s	$fa1, $fa1, $fs2
	fsub.s	$fa1, $fa1, $fs1
	fsub.s	$fa1, $fa1, $fs0
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB154_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB154_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fsub.s	$fa1, $fa1, $fs3
	fsub.s	$fa1, $fa1, $fs2
	fsub.s	$fa1, $fa1, $fs1
	fsub.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs7
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB154_3
# %bb.7:                                #   in Loop: Header=BB154_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB154_3
.LBB154_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI154_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI154_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs5, $a0
	movgr2fr.w	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB154_10
	.p2align	4, , 16
.LBB154_9:                              # %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB154_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB154_12
.LBB154_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fsub.s	$fa1, $fa1, $fs3
	fsub.s	$fa1, $fa1, $fs2
	fsub.s	$fa1, $fa1, $fs1
	fsub.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs5
	fadd.s	$fa1, $fa1, $fs6
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs4
	bcnez	$fcc0, .LBB154_9
# %bb.11:                               #   in Loop: Header=BB154_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB154_9
.LBB154_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB154_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB154_16
.LBB154_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB154_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB154_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI154_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI154_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB154_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end154:
	.size	_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end154-_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
.LCPI155_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI155_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI155_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc: # @_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.s	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB155_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB155_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs1, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI155_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI155_1)
	pcalau12i	$a0, %pc_hi20(.LCPI155_0)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI155_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs4, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB155_4
	.p2align	4, , 16
.LBB155_3:                              # %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us
                                        #   in Loop: Header=BB155_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB155_12
.LBB155_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs1
	.p2align	4, , 16
.LBB155_5:                              #   Parent Loop BB155_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fmul.s	$fa1, $fs0, $fa1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB155_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB155_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fmul.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs4
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB155_3
# %bb.7:                                #   in Loop: Header=BB155_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB155_3
.LBB155_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI155_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI155_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs2, $a0
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB155_10
	.p2align	4, , 16
.LBB155_9:                              # %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit
                                        #   in Loop: Header=BB155_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB155_12
.LBB155_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fmul.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs2
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB155_9
# %bb.11:                               #   in Loop: Header=BB155_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB155_9
.LBB155_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB155_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB155_16
.LBB155_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB155_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB155_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI155_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI155_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB155_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end155:
	.size	_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc, .Lfunc_end155-_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI156_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI156_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI156_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.s	$fs0, $fa3
	fmov.s	$fs1, $fa2
	fmov.s	$fs2, $fa1
	fmov.s	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB156_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB156_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI156_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI156_1)
	pcalau12i	$a0, %pc_hi20(.LCPI156_0)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI156_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs7, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB156_4
	.p2align	4, , 16
.LBB156_3:                              # %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB156_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB156_12
.LBB156_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs4
	.p2align	4, , 16
.LBB156_5:                              #   Parent Loop BB156_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fmul.s	$fa1, $fs3, $fa1
	fmul.s	$fa1, $fs2, $fa1
	fmul.s	$fa1, $fs1, $fa1
	fmul.s	$fa1, $fs0, $fa1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB156_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB156_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fmul.s	$fa1, $fs3, $fa1
	fmul.s	$fa1, $fs2, $fa1
	fmul.s	$fa1, $fs1, $fa1
	fmul.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs7
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB156_3
# %bb.7:                                #   in Loop: Header=BB156_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB156_3
.LBB156_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI156_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI156_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs5, $a0
	movgr2fr.w	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB156_10
	.p2align	4, , 16
.LBB156_9:                              # %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB156_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB156_12
.LBB156_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fmul.s	$fa1, $fs3, $fa1
	fmul.s	$fa1, $fs2, $fa1
	fmul.s	$fa1, $fs1, $fa1
	fmul.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs5
	fadd.s	$fa1, $fa1, $fs6
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs4
	bcnez	$fcc0, .LBB156_9
# %bb.11:                               #   in Loop: Header=BB156_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB156_9
.LBB156_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB156_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB156_16
.LBB156_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB156_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB156_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI156_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI156_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB156_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end156:
	.size	_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end156-_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
.LCPI157_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI157_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI157_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	fmov.s	$fs0, $fa3
	fmov.s	$fs1, $fa2
	fmov.s	$fs2, $fa1
	fmov.s	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB157_12
# %bb.1:                                # %.preheader.lr.ph
	fmul.s	$fa0, $fs3, $fs2
	fmul.s	$fs1, $fa0, $fs1
	blez	$s0, .LBB157_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI157_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI157_1)
	pcalau12i	$a0, %pc_hi20(.LCPI157_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI157_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs5, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB157_4
	.p2align	4, , 16
.LBB157_3:                              # %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB157_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB157_12
.LBB157_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs2
	.p2align	4, , 16
.LBB157_5:                              #   Parent Loop BB157_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fmadd.s	$fa1, $fs1, $fs0, $fa1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB157_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB157_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fmadd.s	$fa1, $fs1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs5
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB157_3
# %bb.7:                                #   in Loop: Header=BB157_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB157_3
.LBB157_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI157_0)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI157_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs3, $a0
	movgr2fr.w	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB157_10
	.p2align	4, , 16
.LBB157_9:                              # %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB157_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB157_12
.LBB157_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fmadd.s	$fa1, $fs1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs3
	fadd.s	$fa1, $fa1, $fs4
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB157_9
# %bb.11:                               #   in Loop: Header=BB157_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB157_9
.LBB157_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB157_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB157_16
.LBB157_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB157_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB157_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI157_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI157_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB157_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end157:
	.size	_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end157-_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
.LCPI158_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI158_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI158_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc: # @_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.s	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB158_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB158_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs1, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI158_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI158_1)
	pcalau12i	$a0, %pc_hi20(.LCPI158_0)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI158_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs4, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB158_4
	.p2align	4, , 16
.LBB158_3:                              # %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us
                                        #   in Loop: Header=BB158_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB158_12
.LBB158_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs1
	.p2align	4, , 16
.LBB158_5:                              #   Parent Loop BB158_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fdiv.s	$fa1, $fa1, $fs0
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB158_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB158_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fdiv.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs4
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB158_3
# %bb.7:                                #   in Loop: Header=BB158_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB158_3
.LBB158_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI158_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI158_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs2, $a0
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB158_10
	.p2align	4, , 16
.LBB158_9:                              # %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit
                                        #   in Loop: Header=BB158_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB158_12
.LBB158_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fdiv.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs2
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB158_9
# %bb.11:                               #   in Loop: Header=BB158_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB158_9
.LBB158_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB158_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB158_16
.LBB158_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB158_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB158_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI158_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI158_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB158_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end158:
	.size	_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc, .Lfunc_end158-_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI159_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI159_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI159_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.s	$fs0, $fa3
	fmov.s	$fs1, $fa2
	fmov.s	$fs2, $fa1
	fmov.s	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB159_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB159_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI159_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI159_1)
	pcalau12i	$a0, %pc_hi20(.LCPI159_0)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI159_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs7, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB159_4
	.p2align	4, , 16
.LBB159_3:                              # %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB159_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB159_12
.LBB159_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs4
	.p2align	4, , 16
.LBB159_5:                              #   Parent Loop BB159_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fdiv.s	$fa1, $fa1, $fs3
	fdiv.s	$fa1, $fa1, $fs2
	fdiv.s	$fa1, $fa1, $fs1
	fdiv.s	$fa1, $fa1, $fs0
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB159_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB159_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fdiv.s	$fa1, $fa1, $fs3
	fdiv.s	$fa1, $fa1, $fs2
	fdiv.s	$fa1, $fa1, $fs1
	fdiv.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs7
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB159_3
# %bb.7:                                #   in Loop: Header=BB159_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB159_3
.LBB159_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI159_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI159_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs5, $a0
	movgr2fr.w	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB159_10
	.p2align	4, , 16
.LBB159_9:                              # %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB159_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB159_12
.LBB159_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fdiv.s	$fa1, $fa1, $fs3
	fdiv.s	$fa1, $fa1, $fs2
	fdiv.s	$fa1, $fa1, $fs1
	fdiv.s	$fa1, $fa1, $fs0
	fmul.s	$fa1, $fa1, $fs5
	fadd.s	$fa1, $fa1, $fs6
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs4
	bcnez	$fcc0, .LBB159_9
# %bb.11:                               #   in Loop: Header=BB159_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB159_9
.LBB159_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB159_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB159_16
.LBB159_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB159_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB159_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI159_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI159_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB159_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end159:
	.size	_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end159-_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
.LCPI160_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI160_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI160_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.s	$fs0, $fa3
	fmov.s	$fs1, $fa2
	fmov.s	$fs2, $fa1
	fmov.s	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB160_12
# %bb.1:                                # %.preheader.lr.ph
	fdiv.s	$fa0, $fs3, $fs2
	fdiv.s	$fa0, $fa0, $fs1
	fdiv.s	$fs0, $fa0, $fs0
	blez	$s0, .LBB160_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs1, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI160_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI160_1)
	pcalau12i	$a0, %pc_hi20(.LCPI160_0)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI160_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs4, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB160_4
	.p2align	4, , 16
.LBB160_3:                              # %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB160_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB160_12
.LBB160_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs1
	.p2align	4, , 16
.LBB160_5:                              #   Parent Loop BB160_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fs0, $fa1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB160_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB160_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs4
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB160_3
# %bb.7:                                #   in Loop: Header=BB160_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB160_3
.LBB160_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI160_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI160_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs2, $a0
	movgr2fr.w	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB160_10
	.p2align	4, , 16
.LBB160_9:                              # %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB160_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB160_12
.LBB160_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fs0, $fa1
	fmul.s	$fa1, $fa1, $fs2
	fadd.s	$fa1, $fa1, $fs3
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs1
	bcnez	$fcc0, .LBB160_9
# %bb.11:                               #   in Loop: Header=BB160_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB160_9
.LBB160_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB160_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB160_16
.LBB160_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB160_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB160_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI160_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI160_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB160_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end160:
	.size	_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end160-_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI161_0:
	.dword	0x3f50624dd2f1a9fc              # double 0.001
.LCPI161_1:
	.dword	0x3f1a36e2eb1c432d              # double 1.0E-4
.LCPI161_2:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	fmov.s	$fs1, $fa3
	fmov.s	$fs2, $fa2
	fmov.s	$fs3, $fa1
	fmov.s	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB161_12
# %bb.1:                                # %.preheader.lr.ph
	fmul.s	$fa0, $fs3, $fs2
	fdiv.s	$fs1, $fa0, $fs1
	blez	$s0, .LBB161_8
# %bb.2:                                # %.preheader.us.preheader
	movgr2fr.w	$fs2, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI161_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI161_1)
	pcalau12i	$a0, %pc_hi20(.LCPI161_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI161_0)
	pcalau12i	$s6, %pc_hi20(init_value)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs5, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB161_4
	.p2align	4, , 16
.LBB161_3:                              # %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB161_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB161_12
.LBB161_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.s	$fa0, $fs2
	.p2align	4, , 16
.LBB161_5:                              #   Parent Loop BB161_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa1, $a2, 0
	fadd.s	$fa1, $fs0, $fa1
	fsub.s	$fa1, $fa1, $fs1
	fadd.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	bnez	$a0, .LBB161_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB161_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fcvt.s.d	$fa1, $fa1
	fadd.s	$fa1, $fs0, $fa1
	fsub.s	$fa1, $fa1, $fs1
	fmul.s	$fa1, $fa1, $fs5
	fadd.s	$fa1, $fa0, $fa1
	fabs.s	$fa2, $fa0
	fcvt.d.s	$fa2, $fa2
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fdiv.s	$fa0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.s	$fa0, $fa0
	fcvt.d.s	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB161_3
# %bb.7:                                #   in Loop: Header=BB161_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB161_3
.LBB161_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI161_0)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI161_0)
	lu12i.w	$a0, -237664
	movgr2fr.w	$fs3, $a0
	movgr2fr.w	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB161_10
	.p2align	4, , 16
.LBB161_9:                              # %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB161_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB161_12
.LBB161_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fcvt.s.d	$fa1, $fa0
	fadd.s	$fa1, $fs0, $fa1
	fsub.s	$fa1, $fa1, $fs1
	fmul.s	$fa1, $fa1, $fs3
	fadd.s	$fa1, $fa1, $fs4
	fabs.s	$fa1, $fa1
	fcvt.d.s	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB161_9
# %bb.11:                               #   in Loop: Header=BB161_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB161_9
.LBB161_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB161_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB161_16
.LBB161_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB161_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB161_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI161_2)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI161_2)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB161_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end161:
	.size	_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end161-_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
.LCPI162_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI162_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI162_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI162_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc: # @_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.d	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB162_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB162_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI162_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI162_0)
	pcalau12i	$a0, %pc_hi20(.LCPI162_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI162_2)
	pcalau12i	$a0, %pc_hi20(.LCPI162_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI162_1)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB162_4
	.p2align	4, , 16
.LBB162_3:                              # %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us
                                        #   in Loop: Header=BB162_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB162_12
.LBB162_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs4
	.p2align	4, , 16
.LBB162_5:                              #   Parent Loop BB162_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fs0, $fa1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB162_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB162_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB162_3
# %bb.7:                                #   in Loop: Header=BB162_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB162_3
.LBB162_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI162_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI162_0)
	pcalau12i	$a0, %pc_hi20(.LCPI162_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI162_1)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB162_10
	.p2align	4, , 16
.LBB162_9:                              # %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit
                                        #   in Loop: Header=BB162_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB162_12
.LBB162_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fs0, $fa0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB162_9
# %bb.11:                               #   in Loop: Header=BB162_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB162_9
.LBB162_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB162_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB162_16
.LBB162_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB162_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB162_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI162_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI162_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB162_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end162:
	.size	_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc, .Lfunc_end162-_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
.LCPI163_0:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI163_1:
	.dword	0xc0bf400000000000              # double -8000
.LCPI163_2:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI163_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.p2align	5
	.type	_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc: # @_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	fmov.d	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB163_15
# %bb.1:                                # %.preheader.lr.ph
	movgr2fr.w	$fa0, $s0
	ffint.d.w	$fs1, $fa0
	blez	$s0, .LBB163_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI163_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI163_1)
	pcalau12i	$a0, %pc_hi20(.LCPI163_0)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI163_0)
	pcalau12i	$a0, %pc_hi20(.LCPI163_2)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI163_2)
	movgr2fr.d	$fs5, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB163_4
	.p2align	4, , 16
.LBB163_3:                              # %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us
                                        #   in Loop: Header=BB163_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB163_15
.LBB163_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs5
	.p2align	4, , 16
.LBB163_5:                              #   Parent Loop BB163_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB163_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB163_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fmadd.d	$fa0, $fs1, $fs0, $fa0
	fadd.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB163_3
# %bb.7:                                #   in Loop: Header=BB163_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB163_3
.LBB163_8:                              # %.preheader.lr.ph.split
	movgr2fr.d	$fa0, $zero
	fmadd.d	$fs1, $fs1, $fs0, $fa0
	pcalau12i	$a0, %pc_hi20(.LCPI163_0)
	fld.d	$fa1, $a0, %pc_lo12(.LCPI163_0)
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	fabs.d	$fa2, $fs1
	pcalau12i	$a0, %pc_hi20(.LCPI163_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI163_1)
	pcalau12i	$a0, %pc_hi20(.LCPI163_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI163_2)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	fcmp.clt.d	$fcc0, $fa1, $fa2
	bcnez	$fcc0, .LBB163_10
	b	.LBB163_13
	.p2align	4, , 16
.LBB163_9:                              # %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us22
                                        #   in Loop: Header=BB163_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB163_15
.LBB163_10:                             # %.preheader.us20
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fs0, $fa0
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fs1, $fa1
	fdiv.d	$fa1, $fa1, $fs1
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB163_9
# %bb.11:                               #   in Loop: Header=BB163_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB163_9
	.p2align	4, , 16
.LBB163_12:                             # %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit
                                        #   in Loop: Header=BB163_13 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB163_15
.LBB163_13:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fs0, $fa0
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fs1, $fa1
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB163_12
# %bb.14:                               #   in Loop: Header=BB163_13 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB163_12
.LBB163_15:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB163_17
# %bb.16:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB163_19
.LBB163_17:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB163_20
# %bb.18:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB163_19:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI163_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI163_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB163_20:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end163:
	.size	_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc, .Lfunc_end163-_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI164_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI164_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI164_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI164_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.d	$fs0, $fa3
	fmov.d	$fs1, $fa2
	fmov.d	$fs2, $fa1
	fmov.d	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB164_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB164_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI164_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI164_0)
	pcalau12i	$a0, %pc_hi20(.LCPI164_2)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI164_2)
	pcalau12i	$a0, %pc_hi20(.LCPI164_1)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI164_1)
	movgr2fr.d	$fs7, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB164_4
	.p2align	4, , 16
.LBB164_3:                              # %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB164_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB164_12
.LBB164_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs7
	.p2align	4, , 16
.LBB164_5:                              #   Parent Loop BB164_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fs3, $fa1
	fadd.d	$fa1, $fs2, $fa1
	fadd.d	$fa1, $fs1, $fa1
	fadd.d	$fa1, $fs0, $fa1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB164_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB164_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fs3, $fa1
	fadd.d	$fa1, $fs2, $fa1
	fadd.d	$fa1, $fs1, $fa1
	fadd.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB164_3
# %bb.7:                                #   in Loop: Header=BB164_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB164_3
.LBB164_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI164_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI164_0)
	pcalau12i	$a0, %pc_hi20(.LCPI164_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI164_1)
	movgr2fr.d	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB164_10
	.p2align	4, , 16
.LBB164_9:                              # %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB164_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB164_12
.LBB164_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fs3, $fa0
	fadd.d	$fa1, $fs2, $fa1
	fadd.d	$fa1, $fs1, $fa1
	fadd.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa1, $fs6
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs5
	bcnez	$fcc0, .LBB164_9
# %bb.11:                               #   in Loop: Header=BB164_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB164_9
.LBB164_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB164_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB164_16
.LBB164_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB164_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB164_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI164_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI164_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB164_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end164:
	.size	_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end164-_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
.LCPI165_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI165_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI165_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI165_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc: # @_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.d	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB165_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB165_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI165_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI165_0)
	pcalau12i	$a0, %pc_hi20(.LCPI165_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI165_2)
	pcalau12i	$a0, %pc_hi20(.LCPI165_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI165_1)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB165_4
	.p2align	4, , 16
.LBB165_3:                              # %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us
                                        #   in Loop: Header=BB165_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB165_12
.LBB165_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs4
	.p2align	4, , 16
.LBB165_5:                              #   Parent Loop BB165_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fsub.d	$fa1, $fa1, $fs0
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB165_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB165_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fsub.d	$fa1, $fa1, $fs0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB165_3
# %bb.7:                                #   in Loop: Header=BB165_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB165_3
.LBB165_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI165_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI165_0)
	pcalau12i	$a0, %pc_hi20(.LCPI165_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI165_1)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB165_10
	.p2align	4, , 16
.LBB165_9:                              # %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit
                                        #   in Loop: Header=BB165_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB165_12
.LBB165_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fsub.d	$fa1, $fa0, $fs0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB165_9
# %bb.11:                               #   in Loop: Header=BB165_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB165_9
.LBB165_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB165_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB165_16
.LBB165_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB165_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB165_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI165_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI165_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB165_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end165:
	.size	_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc, .Lfunc_end165-_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI166_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI166_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI166_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI166_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.d	$fs0, $fa3
	fmov.d	$fs1, $fa2
	fmov.d	$fs2, $fa1
	fmov.d	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB166_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB166_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI166_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI166_0)
	pcalau12i	$a0, %pc_hi20(.LCPI166_2)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI166_2)
	pcalau12i	$a0, %pc_hi20(.LCPI166_1)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI166_1)
	movgr2fr.d	$fs7, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB166_4
	.p2align	4, , 16
.LBB166_3:                              # %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB166_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB166_12
.LBB166_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs7
	.p2align	4, , 16
.LBB166_5:                              #   Parent Loop BB166_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fsub.d	$fa1, $fa1, $fs3
	fsub.d	$fa1, $fa1, $fs2
	fsub.d	$fa1, $fa1, $fs1
	fsub.d	$fa1, $fa1, $fs0
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB166_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB166_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fsub.d	$fa1, $fa1, $fs3
	fsub.d	$fa1, $fa1, $fs2
	fsub.d	$fa1, $fa1, $fs1
	fsub.d	$fa1, $fa1, $fs0
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB166_3
# %bb.7:                                #   in Loop: Header=BB166_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB166_3
.LBB166_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI166_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI166_0)
	pcalau12i	$a0, %pc_hi20(.LCPI166_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI166_1)
	movgr2fr.d	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB166_10
	.p2align	4, , 16
.LBB166_9:                              # %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB166_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB166_12
.LBB166_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fsub.d	$fa1, $fa0, $fs3
	fsub.d	$fa1, $fa1, $fs2
	fsub.d	$fa1, $fa1, $fs1
	fsub.d	$fa1, $fa1, $fs0
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa1, $fs6
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs5
	bcnez	$fcc0, .LBB166_9
# %bb.11:                               #   in Loop: Header=BB166_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB166_9
.LBB166_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB166_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB166_16
.LBB166_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB166_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB166_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI166_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI166_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB166_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end166:
	.size	_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end166-_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
.LCPI167_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI167_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI167_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI167_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc: # @_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.d	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB167_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB167_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI167_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI167_0)
	pcalau12i	$a0, %pc_hi20(.LCPI167_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI167_2)
	pcalau12i	$a0, %pc_hi20(.LCPI167_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI167_1)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB167_4
	.p2align	4, , 16
.LBB167_3:                              # %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us
                                        #   in Loop: Header=BB167_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB167_12
.LBB167_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs4
	.p2align	4, , 16
.LBB167_5:                              #   Parent Loop BB167_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fmul.d	$fa1, $fs0, $fa1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB167_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB167_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fmul.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB167_3
# %bb.7:                                #   in Loop: Header=BB167_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB167_3
.LBB167_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI167_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI167_0)
	pcalau12i	$a0, %pc_hi20(.LCPI167_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI167_1)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB167_10
	.p2align	4, , 16
.LBB167_9:                              # %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit
                                        #   in Loop: Header=BB167_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB167_12
.LBB167_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fmul.d	$fa1, $fs0, $fa0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB167_9
# %bb.11:                               #   in Loop: Header=BB167_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB167_9
.LBB167_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB167_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB167_16
.LBB167_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB167_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB167_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI167_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI167_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB167_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end167:
	.size	_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc, .Lfunc_end167-_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI168_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI168_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI168_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI168_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.d	$fs0, $fa3
	fmov.d	$fs1, $fa2
	fmov.d	$fs2, $fa1
	fmov.d	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB168_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB168_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI168_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI168_0)
	pcalau12i	$a0, %pc_hi20(.LCPI168_2)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI168_2)
	pcalau12i	$a0, %pc_hi20(.LCPI168_1)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI168_1)
	movgr2fr.d	$fs7, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB168_4
	.p2align	4, , 16
.LBB168_3:                              # %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB168_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB168_12
.LBB168_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs7
	.p2align	4, , 16
.LBB168_5:                              #   Parent Loop BB168_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fmul.d	$fa1, $fs3, $fa1
	fmul.d	$fa1, $fs2, $fa1
	fmul.d	$fa1, $fs1, $fa1
	fmul.d	$fa1, $fs0, $fa1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB168_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB168_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fmul.d	$fa1, $fs3, $fa1
	fmul.d	$fa1, $fs2, $fa1
	fmul.d	$fa1, $fs1, $fa1
	fmul.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB168_3
# %bb.7:                                #   in Loop: Header=BB168_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB168_3
.LBB168_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI168_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI168_0)
	pcalau12i	$a0, %pc_hi20(.LCPI168_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI168_1)
	movgr2fr.d	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB168_10
	.p2align	4, , 16
.LBB168_9:                              # %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB168_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB168_12
.LBB168_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fmul.d	$fa1, $fs3, $fa0
	fmul.d	$fa1, $fs2, $fa1
	fmul.d	$fa1, $fs1, $fa1
	fmul.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa1, $fs6
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs5
	bcnez	$fcc0, .LBB168_9
# %bb.11:                               #   in Loop: Header=BB168_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB168_9
.LBB168_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB168_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB168_16
.LBB168_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB168_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB168_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI168_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI168_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB168_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end168:
	.size	_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end168-_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
.LCPI169_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI169_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI169_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI169_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	fmov.d	$fs0, $fa3
	fmov.d	$fs1, $fa2
	fmov.d	$fs2, $fa1
	fmov.d	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB169_12
# %bb.1:                                # %.preheader.lr.ph
	fmul.d	$fa0, $fs3, $fs2
	fmul.d	$fs1, $fa0, $fs1
	blez	$s0, .LBB169_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI169_0)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI169_0)
	pcalau12i	$a0, %pc_hi20(.LCPI169_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI169_2)
	pcalau12i	$a0, %pc_hi20(.LCPI169_1)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI169_1)
	movgr2fr.d	$fs5, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB169_4
	.p2align	4, , 16
.LBB169_3:                              # %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB169_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB169_12
.LBB169_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs5
	.p2align	4, , 16
.LBB169_5:                              #   Parent Loop BB169_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fmadd.d	$fa1, $fs1, $fs0, $fa1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB169_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB169_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fmadd.d	$fa1, $fs1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB169_3
# %bb.7:                                #   in Loop: Header=BB169_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB169_3
.LBB169_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI169_0)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI169_0)
	pcalau12i	$a0, %pc_hi20(.LCPI169_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI169_1)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB169_10
	.p2align	4, , 16
.LBB169_9:                              # %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB169_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB169_12
.LBB169_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fmadd.d	$fa1, $fs1, $fs0, $fa0
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB169_9
# %bb.11:                               #   in Loop: Header=BB169_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB169_9
.LBB169_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB169_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB169_16
.LBB169_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB169_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB169_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI169_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI169_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB169_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end169:
	.size	_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end169-_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
.LCPI170_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI170_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI170_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI170_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
	.p2align	5
	.type	_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc: # @_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.d	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB170_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB170_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI170_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI170_0)
	pcalau12i	$a0, %pc_hi20(.LCPI170_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI170_2)
	pcalau12i	$a0, %pc_hi20(.LCPI170_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI170_1)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB170_4
	.p2align	4, , 16
.LBB170_3:                              # %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us
                                        #   in Loop: Header=BB170_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB170_12
.LBB170_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs4
	.p2align	4, , 16
.LBB170_5:                              #   Parent Loop BB170_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fdiv.d	$fa1, $fa1, $fs0
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB170_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB170_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fdiv.d	$fa1, $fa1, $fs0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB170_3
# %bb.7:                                #   in Loop: Header=BB170_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB170_3
.LBB170_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI170_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI170_0)
	pcalau12i	$a0, %pc_hi20(.LCPI170_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI170_1)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB170_10
	.p2align	4, , 16
.LBB170_9:                              # %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit
                                        #   in Loop: Header=BB170_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB170_12
.LBB170_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fdiv.d	$fa1, $fa0, $fs0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB170_9
# %bb.11:                               #   in Loop: Header=BB170_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB170_9
.LBB170_12:                             # %._crit_edge16
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB170_14
# %bb.13:                               # %._crit_edge16
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB170_16
.LBB170_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB170_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB170_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI170_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI170_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB170_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end170:
	.size	_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc, .Lfunc_end170-_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI171_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI171_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI171_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI171_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	.cfi_offset 62, -136
	.cfi_offset 63, -144
	move	$fp, $a2
	fmov.d	$fs0, $fa3
	fmov.d	$fs1, $fa2
	fmov.d	$fs2, $fa1
	fmov.d	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB171_12
# %bb.1:                                # %.preheader.lr.ph
	blez	$s0, .LBB171_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI171_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI171_0)
	pcalau12i	$a0, %pc_hi20(.LCPI171_2)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI171_2)
	pcalau12i	$a0, %pc_hi20(.LCPI171_1)
	fld.d	$fs6, $a0, %pc_lo12(.LCPI171_1)
	movgr2fr.d	$fs7, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB171_4
	.p2align	4, , 16
.LBB171_3:                              # %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB171_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB171_12
.LBB171_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs7
	.p2align	4, , 16
.LBB171_5:                              #   Parent Loop BB171_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $fs2
	fdiv.d	$fa1, $fa1, $fs1
	fdiv.d	$fa1, $fa1, $fs0
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB171_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB171_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fdiv.d	$fa1, $fa1, $fs3
	fdiv.d	$fa1, $fa1, $fs2
	fdiv.d	$fa1, $fa1, $fs1
	fdiv.d	$fa1, $fa1, $fs0
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs5, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs6
	bcnez	$fcc0, .LBB171_3
# %bb.7:                                #   in Loop: Header=BB171_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB171_3
.LBB171_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI171_0)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI171_0)
	pcalau12i	$a0, %pc_hi20(.LCPI171_1)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI171_1)
	movgr2fr.d	$fs6, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB171_10
	.p2align	4, , 16
.LBB171_9:                              # %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB171_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB171_12
.LBB171_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fdiv.d	$fa1, $fa0, $fs3
	fdiv.d	$fa1, $fa1, $fs2
	fdiv.d	$fa1, $fa1, $fs1
	fdiv.d	$fa1, $fa1, $fs0
	fmul.d	$fa1, $fa1, $fs4
	fadd.d	$fa1, $fa1, $fs6
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs5
	bcnez	$fcc0, .LBB171_9
# %bb.11:                               #   in Loop: Header=BB171_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB171_9
.LBB171_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB171_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB171_16
.LBB171_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB171_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB171_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI171_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI171_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB171_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end171:
	.size	_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end171-_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
.LCPI172_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI172_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI172_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI172_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a2
	fmov.d	$fs0, $fa3
	fmov.d	$fs1, $fa2
	fmov.d	$fs2, $fa1
	fmov.d	$fs3, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB172_12
# %bb.1:                                # %.preheader.lr.ph
	fdiv.d	$fa0, $fs3, $fs2
	fdiv.d	$fa0, $fa0, $fs1
	fdiv.d	$fs0, $fa0, $fs0
	blez	$s0, .LBB172_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI172_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI172_0)
	pcalau12i	$a0, %pc_hi20(.LCPI172_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI172_2)
	pcalau12i	$a0, %pc_hi20(.LCPI172_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI172_1)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB172_4
	.p2align	4, , 16
.LBB172_3:                              # %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB172_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB172_12
.LBB172_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs4
	.p2align	4, , 16
.LBB172_5:                              #   Parent Loop BB172_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fs0, $fa1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB172_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB172_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fs0, $fa1
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs2, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB172_3
# %bb.7:                                #   in Loop: Header=BB172_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB172_3
.LBB172_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI172_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI172_0)
	pcalau12i	$a0, %pc_hi20(.LCPI172_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI172_1)
	movgr2fr.d	$fs3, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB172_10
	.p2align	4, , 16
.LBB172_9:                              # %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB172_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB172_12
.LBB172_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fs0, $fa0
	fmul.d	$fa1, $fa1, $fs1
	fadd.d	$fa1, $fa1, $fs3
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs2
	bcnez	$fcc0, .LBB172_9
# %bb.11:                               #   in Loop: Header=BB172_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB172_9
.LBB172_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB172_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB172_16
.LBB172_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB172_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB172_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI172_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI172_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs4, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs3, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB172_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end172:
	.size	_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end172-_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI173_0:
	.dword	0xc0bf400000000000              # double -8000
.LCPI173_1:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI173_2:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI173_3:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	5
	.type	_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: # @_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	.cfi_offset 61, -128
	move	$fp, $a2
	fmov.d	$fs1, $fa3
	fmov.d	$fs2, $fa2
	fmov.d	$fs3, $fa1
	fmov.d	$fs0, $fa0
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB173_12
# %bb.1:                                # %.preheader.lr.ph
	fmul.d	$fa0, $fs3, $fs2
	fdiv.d	$fs1, $fa0, $fs1
	blez	$s0, .LBB173_8
# %bb.2:                                # %.preheader.us.preheader
	pcalau12i	$a0, %pc_hi20(.LCPI173_0)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI173_0)
	pcalau12i	$a0, %pc_hi20(.LCPI173_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI173_2)
	pcalau12i	$a0, %pc_hi20(.LCPI173_1)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI173_1)
	movgr2fr.d	$fs5, $zero
	pcalau12i	$s6, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s2, $a0, %pc_lo12(.L.str.179)
	move	$s7, $zero
	b	.LBB173_4
	.p2align	4, , 16
.LBB173_3:                              # %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
                                        #   in Loop: Header=BB173_4 Depth=1
	addi.w	$s7, $s7, 1
	bge	$s7, $a1, .LBB173_12
.LBB173_4:                              # %.preheader.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_5 Depth 2
	move	$a0, $s0
	move	$a2, $s1
	fmov.d	$fa0, $fs5
	.p2align	4, , 16
.LBB173_5:                              #   Parent Loop BB173_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fs0, $fa1
	fsub.d	$fa1, $fa1, $fs1
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB173_5
# %bb.6:                                # %._crit_edge.us
                                        #   in Loop: Header=BB173_4 Depth=1
	fld.d	$fa1, $s6, %pc_lo12(init_value)
	fadd.d	$fa1, $fs0, $fa1
	fsub.d	$fa1, $fa1, $fs1
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB173_3
# %bb.7:                                #   in Loop: Header=BB173_4 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB173_3
.LBB173_8:                              # %.preheader.preheader
	pcalau12i	$s1, %pc_hi20(init_value)
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	pcalau12i	$a0, %pc_hi20(.LCPI173_0)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI173_0)
	pcalau12i	$a0, %pc_hi20(.LCPI173_1)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI173_1)
	movgr2fr.d	$fs4, $zero
	pcalau12i	$a0, %pc_hi20(.L.str.179)
	addi.d	$s0, $a0, %pc_lo12(.L.str.179)
	move	$s2, $zero
	b	.LBB173_10
	.p2align	4, , 16
.LBB173_9:                              # %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
                                        #   in Loop: Header=BB173_10 Depth=1
	addi.w	$s2, $s2, 1
	bge	$s2, $a1, .LBB173_12
.LBB173_10:                             # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fadd.d	$fa1, $fs0, $fa0
	fsub.d	$fa1, $fa1, $fs1
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa1, $fs4
	fabs.d	$fa1, $fa1
	fcmp.clt.d	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB173_9
# %bb.11:                               #   in Loop: Header=BB173_10 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s0
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	fld.d	$fa0, $s1, %pc_lo12(init_value)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB173_9
.LBB173_12:                             # %._crit_edge22
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB173_14
# %bb.13:                               # %._crit_edge22
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB173_16
.LBB173_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB173_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB173_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI173_3)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI173_3)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB173_17:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end173:
	.size	_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end173-_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        # -- End function
	.type	results,@object                 # @results
	.bss
	.globl	results
	.p2align	3, 0x0
results:
	.dword	0
	.size	results, 8

	.type	current_test,@object            # @current_test
	.globl	current_test
	.p2align	2, 0x0
current_test:
	.word	0                               # 0x0
	.size	current_test, 4

	.type	allocated_results,@object       # @allocated_results
	.globl	allocated_results
	.p2align	2, 0x0
allocated_results:
	.word	0                               # 0x0
	.size	allocated_results, 4

	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Could not allocate %d results\n"
	.size	.L.str, 31

	.type	.L.str.1,@object                # @.str.1
.L.str.1:
	.asciz	"\ntest %*s description   absolute   operations   ratio with\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object                # @.str.2
.L.str.2:
	.asciz	" "
	.size	.L.str.2, 2

	.type	.L.str.3,@object                # @.str.3
.L.str.3:
	.asciz	"number %*s time       per second   test0\n\n"
	.size	.L.str.3, 43

	.type	.L.str.4,@object                # @.str.4
.L.str.4:
	.asciz	"%2i %*s\"%s\"  %5.2f sec   %5.2f M     %.2f\n"
	.size	.L.str.4, 43

	.type	.L.str.5,@object                # @.str.5
.L.str.5:
	.space	1
	.size	.L.str.5, 1

	.type	.L.str.6,@object                # @.str.6
.L.str.6:
	.asciz	"\nTotal absolute time for %s: %.2f sec\n"
	.size	.L.str.6, 39

	.type	.L.str.7,@object                # @.str.7
.L.str.7:
	.asciz	"\n%s Penalty: %.2f\n\n"
	.size	.L.str.7, 20

	.type	.L.str.8,@object                # @.str.8
.L.str.8:
	.asciz	"\ntest %*s description   absolute\n"
	.size	.L.str.8, 34

	.type	.L.str.9,@object                # @.str.9
.L.str.9:
	.asciz	"number %*s time\n\n"
	.size	.L.str.9, 18

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	"%2i %*s\"%s\"  %5.2f sec\n"
	.size	.L.str.10, 24

	.type	start_time,@object              # @start_time
	.bss
	.globl	start_time
	.p2align	3, 0x0
start_time:
	.dword	0                               # 0x0
	.size	start_time, 8

	.type	end_time,@object                # @end_time
	.globl	end_time
	.p2align	3, 0x0
end_time:
	.dword	0                               # 0x0
	.size	end_time, 8

	.type	iterations,@object              # @iterations
	.data
	.globl	iterations
	.p2align	2, 0x0
iterations:
	.word	1000                            # 0x3e8
	.size	iterations, 4

	.type	init_value,@object              # @init_value
	.globl	init_value
	.p2align	3, 0x0
init_value:
	.dword	0x3ff0000000000000              # double 1
	.size	init_value, 8

	.type	dataDouble,@object              # @dataDouble
	.bss
	.globl	dataDouble
	.p2align	3, 0x0
dataDouble:
	.space	64000
	.size	dataDouble, 64000

	.type	dataFloat,@object               # @dataFloat
	.globl	dataFloat
	.p2align	2, 0x0
dataFloat:
	.space	32000
	.size	dataFloat, 32000

	.type	data64unsigned,@object          # @data64unsigned
	.globl	data64unsigned
	.p2align	3, 0x0
data64unsigned:
	.space	64000
	.size	data64unsigned, 64000

	.type	data64,@object                  # @data64
	.globl	data64
	.p2align	3, 0x0
data64:
	.space	64000
	.size	data64, 64000

	.type	data32unsigned,@object          # @data32unsigned
	.globl	data32unsigned
	.p2align	2, 0x0
data32unsigned:
	.space	32000
	.size	data32unsigned, 32000

	.type	data32,@object                  # @data32
	.globl	data32
	.p2align	2, 0x0
data32:
	.space	32000
	.size	data32, 32000

	.type	data16unsigned,@object          # @data16unsigned
	.globl	data16unsigned
	.p2align	1, 0x0
data16unsigned:
	.space	16000
	.size	data16unsigned, 16000

	.type	data16,@object                  # @data16
	.globl	data16
	.p2align	1, 0x0
data16:
	.space	16000
	.size	data16, 16000

	.type	data8unsigned,@object           # @data8unsigned
	.globl	data8unsigned
	.p2align	3, 0x0
data8unsigned:
	.space	8000
	.size	data8unsigned, 8000

	.type	data8,@object                   # @data8
	.globl	data8
	.p2align	3, 0x0
data8:
	.space	8000
	.size	data8, 8000

	.type	.L.str.11,@object               # @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"int8_t variable add"
	.size	.L.str.11, 20

	.type	.L.str.12,@object               # @.str.12
.L.str.12:
	.asciz	"int8_t variable add hoisted"
	.size	.L.str.12, 28

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	"int8_t multiple variable adds"
	.size	.L.str.13, 30

	.type	.L.str.14,@object               # @.str.14
.L.str.14:
	.asciz	"int8_t variable subtract"
	.size	.L.str.14, 25

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	"int8_t multiple variable subtracts"
	.size	.L.str.15, 35

	.type	.L.str.16,@object               # @.str.16
.L.str.16:
	.asciz	"int8_t variable multiply"
	.size	.L.str.16, 25

	.type	.L.str.17,@object               # @.str.17
.L.str.17:
	.asciz	"int8_t multiple variable multiplies"
	.size	.L.str.17, 36

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"int8_t multiple variable multiplies2"
	.size	.L.str.18, 37

	.type	.L.str.19,@object               # @.str.19
.L.str.19:
	.asciz	"int8_t variable divide"
	.size	.L.str.19, 23

	.type	.L.str.20,@object               # @.str.20
.L.str.20:
	.asciz	"int8_t multiple variable divides"
	.size	.L.str.20, 33

	.type	.L.str.21,@object               # @.str.21
.L.str.21:
	.asciz	"int8_t multiple variable divides2"
	.size	.L.str.21, 34

	.type	.L.str.22,@object               # @.str.22
.L.str.22:
	.asciz	"int8_t multiple variable mixed"
	.size	.L.str.22, 31

	.type	.L.str.23,@object               # @.str.23
.L.str.23:
	.asciz	"int8_t variable and"
	.size	.L.str.23, 20

	.type	.L.str.24,@object               # @.str.24
.L.str.24:
	.asciz	"int8_t multiple variable and"
	.size	.L.str.24, 29

	.type	.L.str.25,@object               # @.str.25
.L.str.25:
	.asciz	"int8_t variable or"
	.size	.L.str.25, 19

	.type	.L.str.26,@object               # @.str.26
.L.str.26:
	.asciz	"int8_t multiple variable or"
	.size	.L.str.26, 28

	.type	.L.str.27,@object               # @.str.27
.L.str.27:
	.asciz	"int8_t variable xor"
	.size	.L.str.27, 20

	.type	.L.str.28,@object               # @.str.28
.L.str.28:
	.asciz	"int8_t multiple variable xor"
	.size	.L.str.28, 29

	.type	.L.str.29,@object               # @.str.29
.L.str.29:
	.asciz	"uint8_t variable add"
	.size	.L.str.29, 21

	.type	.L.str.30,@object               # @.str.30
.L.str.30:
	.asciz	"uint8_t variable add hoisted"
	.size	.L.str.30, 29

	.type	.L.str.31,@object               # @.str.31
.L.str.31:
	.asciz	"uint8_t multiple variable adds"
	.size	.L.str.31, 31

	.type	.L.str.32,@object               # @.str.32
.L.str.32:
	.asciz	"uint8_t variable subtract"
	.size	.L.str.32, 26

	.type	.L.str.33,@object               # @.str.33
.L.str.33:
	.asciz	"uint8_t multiple variable subtracts"
	.size	.L.str.33, 36

	.type	.L.str.34,@object               # @.str.34
.L.str.34:
	.asciz	"uint8_t variable multiply"
	.size	.L.str.34, 26

	.type	.L.str.35,@object               # @.str.35
.L.str.35:
	.asciz	"uint8_t multiple variable multiplies"
	.size	.L.str.35, 37

	.type	.L.str.36,@object               # @.str.36
.L.str.36:
	.asciz	"uint8_t multiple variable multiplies2"
	.size	.L.str.36, 38

	.type	.L.str.37,@object               # @.str.37
.L.str.37:
	.asciz	"uint8_t variable divide"
	.size	.L.str.37, 24

	.type	.L.str.38,@object               # @.str.38
.L.str.38:
	.asciz	"uint8_t multiple variable divides"
	.size	.L.str.38, 34

	.type	.L.str.39,@object               # @.str.39
.L.str.39:
	.asciz	"uint8_t multiple variable divides2"
	.size	.L.str.39, 35

	.type	.L.str.40,@object               # @.str.40
.L.str.40:
	.asciz	"uint8_t multiple variable mixed"
	.size	.L.str.40, 32

	.type	.L.str.41,@object               # @.str.41
.L.str.41:
	.asciz	"uint8_t variable and"
	.size	.L.str.41, 21

	.type	.L.str.42,@object               # @.str.42
.L.str.42:
	.asciz	"uint8_t multiple variable and"
	.size	.L.str.42, 30

	.type	.L.str.43,@object               # @.str.43
.L.str.43:
	.asciz	"uint8_t variable or"
	.size	.L.str.43, 20

	.type	.L.str.44,@object               # @.str.44
.L.str.44:
	.asciz	"uint8_t multiple variable or"
	.size	.L.str.44, 29

	.type	.L.str.45,@object               # @.str.45
.L.str.45:
	.asciz	"uint8_t variable xor"
	.size	.L.str.45, 21

	.type	.L.str.46,@object               # @.str.46
.L.str.46:
	.asciz	"uint8_t multiple variable xor"
	.size	.L.str.46, 30

	.type	.L.str.47,@object               # @.str.47
.L.str.47:
	.asciz	"int16_t variable add"
	.size	.L.str.47, 21

	.type	.L.str.48,@object               # @.str.48
.L.str.48:
	.asciz	"int16_t variable add hoisted"
	.size	.L.str.48, 29

	.type	.L.str.49,@object               # @.str.49
.L.str.49:
	.asciz	"int16_t multiple variable adds"
	.size	.L.str.49, 31

	.type	.L.str.50,@object               # @.str.50
.L.str.50:
	.asciz	"int16_t variable subtract"
	.size	.L.str.50, 26

	.type	.L.str.51,@object               # @.str.51
.L.str.51:
	.asciz	"int16_t multiple variable subtracts"
	.size	.L.str.51, 36

	.type	.L.str.52,@object               # @.str.52
.L.str.52:
	.asciz	"int16_t variable multiply"
	.size	.L.str.52, 26

	.type	.L.str.53,@object               # @.str.53
.L.str.53:
	.asciz	"int16_t multiple variable multiplies"
	.size	.L.str.53, 37

	.type	.L.str.54,@object               # @.str.54
.L.str.54:
	.asciz	"int16_t multiple variable multiplies2"
	.size	.L.str.54, 38

	.type	.L.str.55,@object               # @.str.55
.L.str.55:
	.asciz	"int16_t variable divide"
	.size	.L.str.55, 24

	.type	.L.str.56,@object               # @.str.56
.L.str.56:
	.asciz	"int16_t multiple variable divides"
	.size	.L.str.56, 34

	.type	.L.str.57,@object               # @.str.57
.L.str.57:
	.asciz	"int16_t multiple variable divides2"
	.size	.L.str.57, 35

	.type	.L.str.58,@object               # @.str.58
.L.str.58:
	.asciz	"int16_t multiple variable mixed"
	.size	.L.str.58, 32

	.type	.L.str.59,@object               # @.str.59
.L.str.59:
	.asciz	"int16_t variable and"
	.size	.L.str.59, 21

	.type	.L.str.60,@object               # @.str.60
.L.str.60:
	.asciz	"int16_t multiple variable and"
	.size	.L.str.60, 30

	.type	.L.str.61,@object               # @.str.61
.L.str.61:
	.asciz	"int16_t variable or"
	.size	.L.str.61, 20

	.type	.L.str.62,@object               # @.str.62
.L.str.62:
	.asciz	"int16_t multiple variable or"
	.size	.L.str.62, 29

	.type	.L.str.63,@object               # @.str.63
.L.str.63:
	.asciz	"int16_t variable xor"
	.size	.L.str.63, 21

	.type	.L.str.64,@object               # @.str.64
.L.str.64:
	.asciz	"int16_t multiple variable xor"
	.size	.L.str.64, 30

	.type	.L.str.65,@object               # @.str.65
.L.str.65:
	.asciz	"uint16_t variable add"
	.size	.L.str.65, 22

	.type	.L.str.66,@object               # @.str.66
.L.str.66:
	.asciz	"uint16_t variable add hoisted"
	.size	.L.str.66, 30

	.type	.L.str.67,@object               # @.str.67
.L.str.67:
	.asciz	"uint16_t multiple variable adds"
	.size	.L.str.67, 32

	.type	.L.str.68,@object               # @.str.68
.L.str.68:
	.asciz	"uint16_t variable subtract"
	.size	.L.str.68, 27

	.type	.L.str.69,@object               # @.str.69
.L.str.69:
	.asciz	"uint16_t multiple variable subtracts"
	.size	.L.str.69, 37

	.type	.L.str.70,@object               # @.str.70
.L.str.70:
	.asciz	"uint16_t variable multiply"
	.size	.L.str.70, 27

	.type	.L.str.71,@object               # @.str.71
.L.str.71:
	.asciz	"uint16_t multiple variable multiplies"
	.size	.L.str.71, 38

	.type	.L.str.72,@object               # @.str.72
.L.str.72:
	.asciz	"uint16_t multiple variable multiplies2"
	.size	.L.str.72, 39

	.type	.L.str.73,@object               # @.str.73
.L.str.73:
	.asciz	"uint16_t variable divide"
	.size	.L.str.73, 25

	.type	.L.str.74,@object               # @.str.74
.L.str.74:
	.asciz	"uint16_t multiple variable divides"
	.size	.L.str.74, 35

	.type	.L.str.75,@object               # @.str.75
.L.str.75:
	.asciz	"uint16_t multiple variable divides2"
	.size	.L.str.75, 36

	.type	.L.str.76,@object               # @.str.76
.L.str.76:
	.asciz	"uint16_t multiple variable mixed"
	.size	.L.str.76, 33

	.type	.L.str.77,@object               # @.str.77
.L.str.77:
	.asciz	"uint16_t variable and"
	.size	.L.str.77, 22

	.type	.L.str.78,@object               # @.str.78
.L.str.78:
	.asciz	"uint16_t multiple variable and"
	.size	.L.str.78, 31

	.type	.L.str.79,@object               # @.str.79
.L.str.79:
	.asciz	"uint16_t variable or"
	.size	.L.str.79, 21

	.type	.L.str.80,@object               # @.str.80
.L.str.80:
	.asciz	"uint16_t multiple variable or"
	.size	.L.str.80, 30

	.type	.L.str.81,@object               # @.str.81
.L.str.81:
	.asciz	"uint16_t variable xor"
	.size	.L.str.81, 22

	.type	.L.str.82,@object               # @.str.82
.L.str.82:
	.asciz	"uint16_t multiple variable xor"
	.size	.L.str.82, 31

	.type	.L.str.83,@object               # @.str.83
.L.str.83:
	.asciz	"int32_t variable add"
	.size	.L.str.83, 21

	.type	.L.str.84,@object               # @.str.84
.L.str.84:
	.asciz	"int32_t variable add hoisted"
	.size	.L.str.84, 29

	.type	.L.str.85,@object               # @.str.85
.L.str.85:
	.asciz	"int32_t multiple variable adds"
	.size	.L.str.85, 31

	.type	.L.str.86,@object               # @.str.86
.L.str.86:
	.asciz	"int32_t variable subtract"
	.size	.L.str.86, 26

	.type	.L.str.87,@object               # @.str.87
.L.str.87:
	.asciz	"int32_t multiple variable subtracts"
	.size	.L.str.87, 36

	.type	.L.str.88,@object               # @.str.88
.L.str.88:
	.asciz	"int32_t variable multiply"
	.size	.L.str.88, 26

	.type	.L.str.89,@object               # @.str.89
.L.str.89:
	.asciz	"int32_t multiple variable multiplies"
	.size	.L.str.89, 37

	.type	.L.str.90,@object               # @.str.90
.L.str.90:
	.asciz	"int32_t multiple variable multiplies2"
	.size	.L.str.90, 38

	.type	.L.str.91,@object               # @.str.91
.L.str.91:
	.asciz	"int32_t variable divide"
	.size	.L.str.91, 24

	.type	.L.str.92,@object               # @.str.92
.L.str.92:
	.asciz	"int32_t multiple variable divides"
	.size	.L.str.92, 34

	.type	.L.str.93,@object               # @.str.93
.L.str.93:
	.asciz	"int32_t multiple variable divides2"
	.size	.L.str.93, 35

	.type	.L.str.94,@object               # @.str.94
.L.str.94:
	.asciz	"int32_t multiple variable mixed"
	.size	.L.str.94, 32

	.type	.L.str.95,@object               # @.str.95
.L.str.95:
	.asciz	"int32_t variable and"
	.size	.L.str.95, 21

	.type	.L.str.96,@object               # @.str.96
.L.str.96:
	.asciz	"int32_t multiple variable and"
	.size	.L.str.96, 30

	.type	.L.str.97,@object               # @.str.97
.L.str.97:
	.asciz	"int32_t variable or"
	.size	.L.str.97, 20

	.type	.L.str.98,@object               # @.str.98
.L.str.98:
	.asciz	"int32_t multiple variable or"
	.size	.L.str.98, 29

	.type	.L.str.99,@object               # @.str.99
.L.str.99:
	.asciz	"int32_t variable xor"
	.size	.L.str.99, 21

	.type	.L.str.100,@object              # @.str.100
.L.str.100:
	.asciz	"int32_t multiple variable xor"
	.size	.L.str.100, 30

	.type	.L.str.101,@object              # @.str.101
.L.str.101:
	.asciz	"uint32_t variable add"
	.size	.L.str.101, 22

	.type	.L.str.102,@object              # @.str.102
.L.str.102:
	.asciz	"uint32_t variable add hoisted"
	.size	.L.str.102, 30

	.type	.L.str.103,@object              # @.str.103
.L.str.103:
	.asciz	"uint32_t multiple variable adds"
	.size	.L.str.103, 32

	.type	.L.str.104,@object              # @.str.104
.L.str.104:
	.asciz	"uint32_t variable subtract"
	.size	.L.str.104, 27

	.type	.L.str.105,@object              # @.str.105
.L.str.105:
	.asciz	"uint32_t multiple variable subtracts"
	.size	.L.str.105, 37

	.type	.L.str.106,@object              # @.str.106
.L.str.106:
	.asciz	"uint32_t variable multiply"
	.size	.L.str.106, 27

	.type	.L.str.107,@object              # @.str.107
.L.str.107:
	.asciz	"uint32_t multiple variable multiplies"
	.size	.L.str.107, 38

	.type	.L.str.108,@object              # @.str.108
.L.str.108:
	.asciz	"uint32_t multiple variable multiplies2"
	.size	.L.str.108, 39

	.type	.L.str.109,@object              # @.str.109
.L.str.109:
	.asciz	"uint32_t variable divide"
	.size	.L.str.109, 25

	.type	.L.str.110,@object              # @.str.110
.L.str.110:
	.asciz	"uint32_t multiple variable divides"
	.size	.L.str.110, 35

	.type	.L.str.111,@object              # @.str.111
.L.str.111:
	.asciz	"uint32_t multiple variable divides2"
	.size	.L.str.111, 36

	.type	.L.str.112,@object              # @.str.112
.L.str.112:
	.asciz	"uint32_t multiple variable mixed"
	.size	.L.str.112, 33

	.type	.L.str.113,@object              # @.str.113
.L.str.113:
	.asciz	"uint32_t variable and"
	.size	.L.str.113, 22

	.type	.L.str.114,@object              # @.str.114
.L.str.114:
	.asciz	"uint32_t multiple variable and"
	.size	.L.str.114, 31

	.type	.L.str.115,@object              # @.str.115
.L.str.115:
	.asciz	"uint32_t variable or"
	.size	.L.str.115, 21

	.type	.L.str.116,@object              # @.str.116
.L.str.116:
	.asciz	"uint32_t multiple variable or"
	.size	.L.str.116, 30

	.type	.L.str.117,@object              # @.str.117
.L.str.117:
	.asciz	"uint32_t variable xor"
	.size	.L.str.117, 22

	.type	.L.str.118,@object              # @.str.118
.L.str.118:
	.asciz	"uint32_t multiple variable xor"
	.size	.L.str.118, 31

	.type	.L.str.119,@object              # @.str.119
.L.str.119:
	.asciz	"int64_t variable add"
	.size	.L.str.119, 21

	.type	.L.str.120,@object              # @.str.120
.L.str.120:
	.asciz	"int64_t variable add hoisted"
	.size	.L.str.120, 29

	.type	.L.str.121,@object              # @.str.121
.L.str.121:
	.asciz	"int64_t multiple variable adds"
	.size	.L.str.121, 31

	.type	.L.str.122,@object              # @.str.122
.L.str.122:
	.asciz	"int64_t variable subtract"
	.size	.L.str.122, 26

	.type	.L.str.123,@object              # @.str.123
.L.str.123:
	.asciz	"int64_t multiple variable subtracts"
	.size	.L.str.123, 36

	.type	.L.str.124,@object              # @.str.124
.L.str.124:
	.asciz	"int64_t variable multiply"
	.size	.L.str.124, 26

	.type	.L.str.125,@object              # @.str.125
.L.str.125:
	.asciz	"int64_t multiple variable multiplies"
	.size	.L.str.125, 37

	.type	.L.str.126,@object              # @.str.126
.L.str.126:
	.asciz	"int64_t multiple variable multiplies2"
	.size	.L.str.126, 38

	.type	.L.str.127,@object              # @.str.127
.L.str.127:
	.asciz	"int64_t variable divide"
	.size	.L.str.127, 24

	.type	.L.str.128,@object              # @.str.128
.L.str.128:
	.asciz	"int64_t multiple variable divides"
	.size	.L.str.128, 34

	.type	.L.str.129,@object              # @.str.129
.L.str.129:
	.asciz	"int64_t multiple variable divides2"
	.size	.L.str.129, 35

	.type	.L.str.130,@object              # @.str.130
.L.str.130:
	.asciz	"int64_t multiple variable mixed"
	.size	.L.str.130, 32

	.type	.L.str.131,@object              # @.str.131
.L.str.131:
	.asciz	"int64_t variable and"
	.size	.L.str.131, 21

	.type	.L.str.132,@object              # @.str.132
.L.str.132:
	.asciz	"int64_t multiple variable and"
	.size	.L.str.132, 30

	.type	.L.str.133,@object              # @.str.133
.L.str.133:
	.asciz	"int64_t variable or"
	.size	.L.str.133, 20

	.type	.L.str.134,@object              # @.str.134
.L.str.134:
	.asciz	"int64_t multiple variable or"
	.size	.L.str.134, 29

	.type	.L.str.135,@object              # @.str.135
.L.str.135:
	.asciz	"int64_t variable xor"
	.size	.L.str.135, 21

	.type	.L.str.136,@object              # @.str.136
.L.str.136:
	.asciz	"int64_t multiple variable xor"
	.size	.L.str.136, 30

	.type	.L.str.137,@object              # @.str.137
.L.str.137:
	.asciz	"uint64_t variable add"
	.size	.L.str.137, 22

	.type	.L.str.138,@object              # @.str.138
.L.str.138:
	.asciz	"uint64_t variable add hoisted"
	.size	.L.str.138, 30

	.type	.L.str.139,@object              # @.str.139
.L.str.139:
	.asciz	"uint64_t multiple variable adds"
	.size	.L.str.139, 32

	.type	.L.str.140,@object              # @.str.140
.L.str.140:
	.asciz	"uint64_t variable subtract"
	.size	.L.str.140, 27

	.type	.L.str.141,@object              # @.str.141
.L.str.141:
	.asciz	"uint64_t multiple variable subtracts"
	.size	.L.str.141, 37

	.type	.L.str.142,@object              # @.str.142
.L.str.142:
	.asciz	"uint64_t variable multiply"
	.size	.L.str.142, 27

	.type	.L.str.143,@object              # @.str.143
.L.str.143:
	.asciz	"uint64_t multiple variable multiplies"
	.size	.L.str.143, 38

	.type	.L.str.144,@object              # @.str.144
.L.str.144:
	.asciz	"uint64_t multiple variable multiplies2"
	.size	.L.str.144, 39

	.type	.L.str.145,@object              # @.str.145
.L.str.145:
	.asciz	"uint64_t variable divide"
	.size	.L.str.145, 25

	.type	.L.str.146,@object              # @.str.146
.L.str.146:
	.asciz	"uint64_t multiple variable divides"
	.size	.L.str.146, 35

	.type	.L.str.147,@object              # @.str.147
.L.str.147:
	.asciz	"uint64_t multiple variable divides2"
	.size	.L.str.147, 36

	.type	.L.str.148,@object              # @.str.148
.L.str.148:
	.asciz	"uint64_t multiple variable mixed"
	.size	.L.str.148, 33

	.type	.L.str.149,@object              # @.str.149
.L.str.149:
	.asciz	"uint64_t variable and"
	.size	.L.str.149, 22

	.type	.L.str.150,@object              # @.str.150
.L.str.150:
	.asciz	"uint64_t multiple variable and"
	.size	.L.str.150, 31

	.type	.L.str.151,@object              # @.str.151
.L.str.151:
	.asciz	"uint64_t variable or"
	.size	.L.str.151, 21

	.type	.L.str.152,@object              # @.str.152
.L.str.152:
	.asciz	"uint64_t multiple variable or"
	.size	.L.str.152, 30

	.type	.L.str.153,@object              # @.str.153
.L.str.153:
	.asciz	"uint64_t variable xor"
	.size	.L.str.153, 22

	.type	.L.str.154,@object              # @.str.154
.L.str.154:
	.asciz	"uint64_t multiple variable xor"
	.size	.L.str.154, 31

	.type	.L.str.155,@object              # @.str.155
.L.str.155:
	.asciz	"float variable add"
	.size	.L.str.155, 19

	.type	.L.str.156,@object              # @.str.156
.L.str.156:
	.asciz	"float variable add hoisted"
	.size	.L.str.156, 27

	.type	.L.str.157,@object              # @.str.157
.L.str.157:
	.asciz	"float multiple variable adds"
	.size	.L.str.157, 29

	.type	.L.str.158,@object              # @.str.158
.L.str.158:
	.asciz	"float variable subtract"
	.size	.L.str.158, 24

	.type	.L.str.159,@object              # @.str.159
.L.str.159:
	.asciz	"float multiple variable subtracts"
	.size	.L.str.159, 34

	.type	.L.str.160,@object              # @.str.160
.L.str.160:
	.asciz	"float variable multiply"
	.size	.L.str.160, 24

	.type	.L.str.161,@object              # @.str.161
.L.str.161:
	.asciz	"float multiple variable multiplies"
	.size	.L.str.161, 35

	.type	.L.str.162,@object              # @.str.162
.L.str.162:
	.asciz	"float multiple variable multiplies2"
	.size	.L.str.162, 36

	.type	.L.str.163,@object              # @.str.163
.L.str.163:
	.asciz	"float variable divide"
	.size	.L.str.163, 22

	.type	.L.str.164,@object              # @.str.164
.L.str.164:
	.asciz	"float multiple variable divides"
	.size	.L.str.164, 32

	.type	.L.str.165,@object              # @.str.165
.L.str.165:
	.asciz	"float multiple variable divides2"
	.size	.L.str.165, 33

	.type	.L.str.166,@object              # @.str.166
.L.str.166:
	.asciz	"float multiple variable mixed"
	.size	.L.str.166, 30

	.type	.L.str.167,@object              # @.str.167
.L.str.167:
	.asciz	"double variable add"
	.size	.L.str.167, 20

	.type	.L.str.168,@object              # @.str.168
.L.str.168:
	.asciz	"double variable add hoisted"
	.size	.L.str.168, 28

	.type	.L.str.169,@object              # @.str.169
.L.str.169:
	.asciz	"double multiple variable adds"
	.size	.L.str.169, 30

	.type	.L.str.170,@object              # @.str.170
.L.str.170:
	.asciz	"double variable subtract"
	.size	.L.str.170, 25

	.type	.L.str.171,@object              # @.str.171
.L.str.171:
	.asciz	"double multiple variable subtracts"
	.size	.L.str.171, 35

	.type	.L.str.172,@object              # @.str.172
.L.str.172:
	.asciz	"double variable multiply"
	.size	.L.str.172, 25

	.type	.L.str.173,@object              # @.str.173
.L.str.173:
	.asciz	"double multiple variable multiplies"
	.size	.L.str.173, 36

	.type	.L.str.174,@object              # @.str.174
.L.str.174:
	.asciz	"double multiple variable multiplies2"
	.size	.L.str.174, 37

	.type	.L.str.175,@object              # @.str.175
.L.str.175:
	.asciz	"double variable divide"
	.size	.L.str.175, 23

	.type	.L.str.176,@object              # @.str.176
.L.str.176:
	.asciz	"double multiple variable divides"
	.size	.L.str.176, 33

	.type	.L.str.177,@object              # @.str.177
.L.str.177:
	.asciz	"double multiple variable divides2"
	.size	.L.str.177, 34

	.type	.L.str.178,@object              # @.str.178
.L.str.178:
	.asciz	"double multiple variable mixed"
	.size	.L.str.178, 31

	.type	.L.str.179,@object              # @.str.179
.L.str.179:
	.asciz	"test %i failed\n"
	.size	.L.str.179, 16

	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym dataDouble
	.addrsig_sym dataFloat
	.addrsig_sym data64unsigned
	.addrsig_sym data64
	.addrsig_sym data32unsigned
	.addrsig_sym data32
	.addrsig_sym data16unsigned
	.addrsig_sym data16
	.addrsig_sym data8unsigned
	.addrsig_sym data8
